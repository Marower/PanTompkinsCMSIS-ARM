
PanTompkins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011620  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  08011760  08011760  00021760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011d94  08011d94  00021d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011d98  08011d98  00021d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000360  20000004  08011d9c  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000043f8  20000364  080120fc  00030364  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000475c  080120fc  0003475c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002bd4e  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000470e  00000000  00000000  0005c0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002070  00000000  00000000  000607f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001e78  00000000  00000000  00062860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000246e3  00000000  00000000  000646d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002a419  00000000  00000000  00088dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000dd515  00000000  00000000  000b31d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001906e9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000a104  00000000  00000000  0019073c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000364 	.word	0x20000364
 800015c:	00000000 	.word	0x00000000
 8000160:	08011748 	.word	0x08011748

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000368 	.word	0x20000368
 800017c:	08011748 	.word	0x08011748

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b097      	sub	sp, #92	; 0x5c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	603b      	str	r3, [r7, #0]
  const float32_t *pIn = pSrc;                         /* Source pointer */
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	657b      	str	r3, [r7, #84]	; 0x54
        float32_t *pOut = pDst;                        /* Destination pointer */
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	653b      	str	r3, [r7, #80]	; 0x50
        float32_t *pState = S->pState;                 /* pState pointer */
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t acc;                                 /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1, Xn2, Yn1, Yn2;                  /* Filter pState variables */
        float32_t Xn;                                  /* Temporary input */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 8000ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cce:	1d1a      	adds	r2, r3, #4
 8000cd0:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    b1 = *pCoeffs++;
 8000cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd8:	1d1a      	adds	r2, r3, #4
 8000cda:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    b2 = *pCoeffs++;
 8000ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ce2:	1d1a      	adds	r2, r3, #4
 8000ce4:	64ba      	str	r2, [r7, #72]	; 0x48
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    a1 = *pCoeffs++;
 8000cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cec:	1d1a      	adds	r2, r3, #4
 8000cee:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 8000cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf6:	1d1a      	adds	r2, r3, #4
 8000cf8:	64ba      	str	r2, [r7, #72]	; 0x48
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 8000cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	647b      	str	r3, [r7, #68]	; 0x44
    Xn2 = pState[1];
 8000d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	643b      	str	r3, [r7, #64]	; 0x40
    Yn1 = pState[2];
 8000d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    Yn2 = pState[3];
 8000d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	63bb      	str	r3, [r7, #56]	; 0x38
    sample = blockSize & 0x3U;

#else

    /* Initialize blkCnt with number of samples */
    sample = blockSize;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (sample > 0U)
 8000d1a:	e03c      	b.n	8000d96 <arm_biquad_cascade_df1_f32+0xf2>
    {
      /* Read the input */
      Xn = *pIn++;
 8000d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d1e:	1d1a      	adds	r2, r3, #4
 8000d20:	657a      	str	r2, [r7, #84]	; 0x54
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8000d26:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d32:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000d36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d42:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8000d46:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d52:	edd7 6a08 	vldr	s13, [r7, #32]
 8000d56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8000d66:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d72:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store output in destination buffer. */
      *pOut++ = acc;
 8000d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d78:	1d1a      	adds	r2, r3, #4
 8000d7a:	653a      	str	r2, [r7, #80]	; 0x50
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	601a      	str	r2, [r3, #0]
      /* The states should be updated as: */
      /* Xn2 = Xn1 */
      /* Xn1 = Xn  */
      /* Yn2 = Yn1 */
      /* Yn1 = acc */
      Xn2 = Xn1;
 8000d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d82:	643b      	str	r3, [r7, #64]	; 0x40
      Xn1 = Xn;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	647b      	str	r3, [r7, #68]	; 0x44
      Yn2 = Yn1;
 8000d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
      Yn1 = acc;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* decrement loop counter */
      sample--;
 8000d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d92:	3b01      	subs	r3, #1
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    while (sample > 0U)
 8000d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1bf      	bne.n	8000d1c <arm_biquad_cascade_df1_f32+0x78>
    }

    /* Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 8000d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d9e:	1d1a      	adds	r2, r3, #4
 8000da0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000da4:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 8000da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da8:	1d1a      	adds	r2, r3, #4
 8000daa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000dac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000dae:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 8000db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db2:	1d1a      	adds	r2, r3, #4
 8000db4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000db6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000db8:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 8000dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dbc:	1d1a      	adds	r2, r3, #4
 8000dbe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dc2:	601a      	str	r2, [r3, #0]

    /* The first stage goes from the input buffer to the output buffer. */
    /* Subsequent numStages occur in-place in the output buffer */
    pIn = pDst;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Reset output pointer */
    pOut = pDst;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	653b      	str	r3, [r7, #80]	; 0x50

    /* decrement loop counter */
    stage--;
 8000dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30

  } while (stage > 0U);
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f af79 	bne.w	8000ccc <arm_biquad_cascade_df1_f32+0x28>

}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	375c      	adds	r7, #92	; 0x5c
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	460b      	mov	r3, r1
 8000df6:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 8000df8:	7afa      	ldrb	r2, [r7, #11]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	601a      	str	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f00c f827 	bl	800ce60 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	605a      	str	r2, [r3, #4]
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b08f      	sub	sp, #60	; 0x3c
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000e56:	e034      	b.n	8000ec2 <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	1d13      	adds	r3, r2, #4
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	1d19      	adds	r1, r3, #4
 8000e62:	6339      	str	r1, [r7, #48]	; 0x30
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 8000e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 8000e7a:	e014      	b.n	8000ea6 <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	1d1a      	adds	r2, r3, #4
 8000e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000e82:	ed93 7a00 	vldr	s14, [r3]
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	1d1a      	adds	r2, r3, #4
 8000e8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e94:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e7      	bne.n	8000e7c <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1d1a      	adds	r2, r3, #4
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8000eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb8:	3304      	adds	r3, #4
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1c7      	bne.n	8000e58 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8000ed4:	e00a      	b.n	8000eec <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 8000ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ed8:	1d13      	adds	r3, r2, #4
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
 8000edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ede:	1d19      	adds	r1, r3, #4
 8000ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f1      	bne.n	8000ed6 <arm_fir_f32+0xb6>
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	373c      	adds	r7, #60	; 0x3c
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	897a      	ldrh	r2, [r7, #10]
 8000f14:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8000f1c:	897a      	ldrh	r2, [r7, #10]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4413      	add	r3, r2
 8000f22:	3b01      	subs	r3, #1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	461a      	mov	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6838      	ldr	r0, [r7, #0]
 8000f2c:	f00b ff98 	bl	800ce60 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	605a      	str	r2, [r3, #4]
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b087      	sub	sp, #28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000f54:	e00d      	b.n	8000f72 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	1d1a      	adds	r2, r3, #4
 8000f5a:	60fa      	str	r2, [r7, #12]
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f68:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ee      	bne.n	8000f56 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	edd7 6a04 	vldr	s13, [r7, #16]
 8000f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	edc3 7a00 	vstr	s15, [r3]
}
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <PT_init>:
	and filter Buffers.

 *******************************************************************************/

void PT_init( void )
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
	/**************************************************
	Initialize Pan_Tompkins structure.
	**************************************************/

	memset(&PT_data, 0, sizeof(PT_data));
 8000fa2:	22ea      	movs	r2, #234	; 0xea
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	487d      	ldr	r0, [pc, #500]	; (800119c <PT_init+0x200>)
 8000fa8:	f00b ff5a 	bl	800ce60 <memset>

	PT_dptr->PT_state		= START_UP;
 8000fac:	4b7b      	ldr	r3, [pc, #492]	; (800119c <PT_init+0x200>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	80da      	strh	r2, [r3, #6]

	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	; (800119c <PT_init+0x200>)
 8000fb4:	22c8      	movs	r2, #200	; 0xc8
 8000fb6:	849a      	strh	r2, [r3, #36]	; 0x24
 8000fb8:	4a78      	ldr	r2, [pc, #480]	; (800119c <PT_init+0x200>)
 8000fba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000fbe:	8113      	strh	r3, [r2, #8]

	PT_dptr->RR_Low_L		= RR92PERCENT;
 8000fc0:	4b76      	ldr	r3, [pc, #472]	; (800119c <PT_init+0x200>)
 8000fc2:	22b8      	movs	r2, #184	; 0xb8
 8000fc4:	84da      	strh	r2, [r3, #38]	; 0x26
	PT_dptr->RR_High_L		= RR116PERCENT;
 8000fc6:	4b75      	ldr	r3, [pc, #468]	; (800119c <PT_init+0x200>)
 8000fc8:	22e8      	movs	r2, #232	; 0xe8
 8000fca:	851a      	strh	r2, [r3, #40]	; 0x28
	PT_dptr->RR_Missed_L	= RR166PERCENT;
 8000fcc:	4b73      	ldr	r3, [pc, #460]	; (800119c <PT_init+0x200>)
 8000fce:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8000fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

	PT_dptr->LP_pointer		= 0;
 8000fd4:	4b71      	ldr	r3, [pc, #452]	; (800119c <PT_init+0x200>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_pointer		= 0;
 8000fda:	4b70      	ldr	r3, [pc, #448]	; (800119c <PT_init+0x200>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	805a      	strh	r2, [r3, #2]
	PT_dptr->MVA_pointer	= 0;
 8000fe0:	4b6e      	ldr	r3, [pc, #440]	; (800119c <PT_init+0x200>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	809a      	strh	r2, [r3, #4]

	PT_dptr->HR_State = REGULAR_HR;
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	; (800119c <PT_init+0x200>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	859a      	strh	r2, [r3, #44]	; 0x2c
	/**************************************************
	Initialize filter buffers
	**************************************************/
	int8_t idex;

	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	e00d      	b.n	800100e <PT_init+0x72>
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000ff2:	4a6a      	ldr	r2, [pc, #424]	; (800119c <PT_init+0x200>)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	3314      	adds	r3, #20
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3301      	adds	r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b0b      	cmp	r3, #11
 8001014:	dded      	ble.n	8000ff2 <PT_init+0x56>
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e00d      	b.n	8001038 <PT_init+0x9c>
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 800101c:	4a5f      	ldr	r2, [pc, #380]	; (800119c <PT_init+0x200>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	3320      	adds	r3, #32
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	2200      	movs	r2, #0
 800102a:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3301      	adds	r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b1f      	cmp	r3, #31
 800103e:	dded      	ble.n	800101c <PT_init+0x80>
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	e00d      	b.n	8001062 <PT_init+0xc6>
		PT_dptr->DR_buf[idex]		= 0;							//  DR filter buffer
 8001046:	4a55      	ldr	r2, [pc, #340]	; (800119c <PT_init+0x200>)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	3340      	adds	r3, #64	; 0x40
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	2200      	movs	r2, #0
 8001054:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3301      	adds	r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b03      	cmp	r3, #3
 8001068:	dded      	ble.n	8001046 <PT_init+0xaa>
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e00d      	b.n	800108c <PT_init+0xf0>
		PT_dptr->MVA_buf[idex]		= 0;							//  MVA filter buffer
 8001070:	4a4a      	ldr	r2, [pc, #296]	; (800119c <PT_init+0x200>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	3344      	adds	r3, #68	; 0x44
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	2200      	movs	r2, #0
 800107e:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b1d      	cmp	r3, #29
 8001092:	dded      	ble.n	8001070 <PT_init+0xd4>
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 8001094:	2300      	movs	r3, #0
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	e01c      	b.n	80010d4 <PT_init+0x138>
		PT_dptr->RR_AVRG1_buf[idex] = 
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 800109a:	4940      	ldr	r1, [pc, #256]	; (800119c <PT_init+0x200>)
 800109c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80010a0:	f102 036c 	add.w	r3, r2, #108	; 0x6c
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	440b      	add	r3, r1
 80010a8:	20c8      	movs	r0, #200	; 0xc8
 80010aa:	8058      	strh	r0, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 80010ac:	4c3b      	ldr	r4, [pc, #236]	; (800119c <PT_init+0x200>)
 80010ae:	f997 0007 	ldrsb.w	r0, [r7, #7]
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 80010b2:	f102 036c 	add.w	r3, r2, #108	; 0x6c
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	440b      	add	r3, r1
 80010ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 80010be:	f100 0364 	add.w	r3, r0, #100	; 0x64
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4423      	add	r3, r4
 80010c6:	805a      	strh	r2, [r3, #2]
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	ddde      	ble.n	800109a <PT_init+0xfe>
	}

	/**************************************************
	Initialize all static variables 
	**************************************************/
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <PT_init+0x204>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <PT_init+0x204>)
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <PT_init+0x208>)
 80010e8:	801a      	strh	r2, [r3, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <PT_init+0x20c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <PT_init+0x20c>)
 80010f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <PT_init+0x210>)
 80010f8:	801a      	strh	r2, [r3, #0]
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <PT_init+0x210>)
 80010fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <PT_init+0x214>)
 8001102:	801a      	strh	r2, [r3, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <PT_init+0x218>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <PT_init+0x218>)
 800110c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <PT_init+0x21c>)
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <PT_init+0x21c>)
 8001116:	f9b3 2000 	ldrsh.w	r2, [r3]
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <PT_init+0x220>)
 800111c:	801a      	strh	r2, [r3, #0]
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <PT_init+0x220>)
 8001120:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <PT_init+0x224>)
 8001126:	801a      	strh	r2, [r3, #0]
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <PT_init+0x228>)
 800112a:	2200      	movs	r2, #0
 800112c:	801a      	strh	r2, [r3, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <PT_init+0x22c>)
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <PT_init+0x22c>)
 8001136:	f9b3 2000 	ldrsh.w	r2, [r3]
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <PT_init+0x230>)
 800113c:	801a      	strh	r2, [r3, #0]
	MV_sum = 0;														// sum for moving average filter
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <PT_init+0x234>)
 8001140:	2200      	movs	r2, #0
 8001142:	801a      	strh	r2, [r3, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <PT_init+0x238>)
 8001146:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800114a:	801a      	strh	r2, [r3, #0]
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <PT_init+0x238>)
 800114e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <PT_init+0x23c>)
 8001154:	801a      	strh	r2, [r3, #0]
	BlankTimeCnt = 0;												// Counter for blank-time.
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <PT_init+0x240>)
 8001158:	2200      	movs	r2, #0
 800115a:	801a      	strh	r2, [r3, #0]
	SBcntI = 0;														// For searchback index in Integ Signal
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <PT_init+0x244>)
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]
	SB_peakI = 0;													// For searchback in Integ sig
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <PT_init+0x248>)
 8001164:	2200      	movs	r2, #0
 8001166:	801a      	strh	r2, [r3, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <PT_init+0x24c>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <PT_init+0x24c>)
 8001170:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <PT_init+0x250>)
 8001176:	801a      	strh	r2, [r3, #0]
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <PT_init+0x254>)
 800117a:	2200      	movs	r2, #0
 800117c:	801a      	strh	r2, [r3, #0]
	y_h = 0;														// recusrively used in HP filter
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <PT_init+0x258>)
 8001180:	2200      	movs	r2, #0
 8001182:	801a      	strh	r2, [r3, #0]

#if (FILTER_FORM == 2)
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <PT_init+0x25c>)
 8001186:	2200      	movs	r2, #0
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <PT_init+0x25c>)
 800118c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <PT_init+0x260>)
 8001192:	801a      	strh	r2, [r3, #0]
#endif
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	20000380 	.word	0x20000380
 80011a0:	20000498 	.word	0x20000498
 80011a4:	20000496 	.word	0x20000496
 80011a8:	2000046e 	.word	0x2000046e
 80011ac:	2000046c 	.word	0x2000046c
 80011b0:	2000046a 	.word	0x2000046a
 80011b4:	20000476 	.word	0x20000476
 80011b8:	20000474 	.word	0x20000474
 80011bc:	20000472 	.word	0x20000472
 80011c0:	20000470 	.word	0x20000470
 80011c4:	20000478 	.word	0x20000478
 80011c8:	2000047c 	.word	0x2000047c
 80011cc:	2000047a 	.word	0x2000047a
 80011d0:	2000048e 	.word	0x2000048e
 80011d4:	20000480 	.word	0x20000480
 80011d8:	2000047e 	.word	0x2000047e
 80011dc:	20000482 	.word	0x20000482
 80011e0:	20000484 	.word	0x20000484
 80011e4:	2000049a 	.word	0x2000049a
 80011e8:	20000488 	.word	0x20000488
 80011ec:	20000486 	.word	0x20000486
 80011f0:	20000492 	.word	0x20000492
 80011f4:	2000048a 	.word	0x2000048a
 80011f8:	2000049e 	.word	0x2000049e
 80011fc:	2000049c 	.word	0x2000049c

08001200 <PT_StateMachine>:
	peak delay to the current sample.

 **********************************************************************************/

int16_t PT_StateMachine(int16_t datum)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
	int16_t BeatDelay = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	81fb      	strh	r3, [r7, #14]

	uint16_t PEAKI ;

	// ------- Preprocessing filtering and Peak detection --------- //
	LPFilter(&datum);										// LowPass filtering
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fa55 	bl	80016c0 <LPFilter>
	HPFilter();												// HighPass filtering
 8001216:	f000 fad9 	bl	80017cc <HPFilter>

	PeakDtcBP(PT_dptr->HPF_val);							// Store BP signal highest peak
 800121a:	4b80      	ldr	r3, [pc, #512]	; (800141c <PT_StateMachine+0x21c>)
 800121c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fcbf 	bl	8001ba4 <PeakDtcBP>
	
	DerivFilter();
 8001226:	f000 fb61 	bl	80018ec <DerivFilter>
	PeakDtcDR(PT_dptr->DRF_val);							// Store the highest slope for T wave discrimination
 800122a:	4b7c      	ldr	r3, [pc, #496]	; (800141c <PT_StateMachine+0x21c>)
 800122c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fc79 	bl	8001b28 <PeakDtcDR>

	SQRFilter();											//Squaring
 8001236:	f000 fb9f 	bl	8001978 <SQRFilter>

	MVAFilter();
 800123a:	f000 fbd9 	bl	80019f0 <MVAFilter>
	PEAKI = PeakDtcI();
 800123e:	f000 fc47 	bl	8001ad0 <PeakDtcI>
 8001242:	4603      	mov	r3, r0
 8001244:	b29b      	uxth	r3, r3
 8001246:	81bb      	strh	r3, [r7, #12]

	// ---- Integrated Peak detection checks and blankTime ---- //
	if (!PEAKI && BlankTimeCnt)								// No beat, decrement BlankTime
 8001248:	89bb      	ldrh	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d116      	bne.n	800127c <PT_StateMachine+0x7c>
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <PT_StateMachine+0x220>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d011      	beq.n	800127c <PT_StateMachine+0x7c>
	{
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 8001258:	4b71      	ldr	r3, [pc, #452]	; (8001420 <PT_StateMachine+0x220>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b29b      	uxth	r3, r3
 8001260:	3b01      	subs	r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21a      	sxth	r2, r3
 8001266:	4b6e      	ldr	r3, [pc, #440]	; (8001420 <PT_StateMachine+0x220>)
 8001268:	801a      	strh	r2, [r3, #0]
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <PT_StateMachine+0x220>)
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d139      	bne.n	80012e8 <PT_StateMachine+0xe8>
			PEAKI = PEAKI_temp;
 8001274:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <PT_StateMachine+0x224>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	81bb      	strh	r3, [r7, #12]
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 800127a:	e035      	b.n	80012e8 <PT_StateMachine+0xe8>
	}
	else if (PEAKI && !BlankTimeCnt)						// If no peak for peak for last 200msec, save the current peak
 800127c:	89bb      	ldrh	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00d      	beq.n	800129e <PT_StateMachine+0x9e>
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <PT_StateMachine+0x220>)
 8001284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d108      	bne.n	800129e <PT_StateMachine+0x9e>
	{
		BlankTimeCnt = PT200MS;
 800128c:	4b64      	ldr	r3, [pc, #400]	; (8001420 <PT_StateMachine+0x220>)
 800128e:	2228      	movs	r2, #40	; 0x28
 8001290:	801a      	strh	r2, [r3, #0]
		PEAKI_temp   = PEAKI;
 8001292:	89ba      	ldrh	r2, [r7, #12]
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <PT_StateMachine+0x224>)
 8001296:	801a      	strh	r2, [r3, #0]
		PEAKI = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	81bb      	strh	r3, [r7, #12]
 800129c:	e024      	b.n	80012e8 <PT_StateMachine+0xe8>
	}
	else if(PEAKI)											// If a bigger peak comes along, store it
 800129e:	89bb      	ldrh	r3, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d021      	beq.n	80012e8 <PT_StateMachine+0xe8>
	{
		if (PEAKI > PEAKI_temp)
 80012a4:	89ba      	ldrh	r2, [r7, #12]
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <PT_StateMachine+0x224>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d908      	bls.n	80012c0 <PT_StateMachine+0xc0>
		{
			BlankTimeCnt = PT200MS;
 80012ae:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <PT_StateMachine+0x220>)
 80012b0:	2228      	movs	r2, #40	; 0x28
 80012b2:	801a      	strh	r2, [r3, #0]
			PEAKI_temp = PEAKI;
 80012b4:	89ba      	ldrh	r2, [r7, #12]
 80012b6:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <PT_StateMachine+0x224>)
 80012b8:	801a      	strh	r2, [r3, #0]
			PEAKI = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	81bb      	strh	r3, [r7, #12]
 80012be:	e013      	b.n	80012e8 <PT_StateMachine+0xe8>
		}
		else if (--BlankTimeCnt == 0)
 80012c0:	4b57      	ldr	r3, [pc, #348]	; (8001420 <PT_StateMachine+0x220>)
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b54      	ldr	r3, [pc, #336]	; (8001420 <PT_StateMachine+0x220>)
 80012d0:	801a      	strh	r2, [r3, #0]
 80012d2:	4b53      	ldr	r3, [pc, #332]	; (8001420 <PT_StateMachine+0x220>)
 80012d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d103      	bne.n	80012e4 <PT_StateMachine+0xe4>
			PEAKI = PEAKI_temp;
 80012dc:	4b51      	ldr	r3, [pc, #324]	; (8001424 <PT_StateMachine+0x224>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	81bb      	strh	r3, [r7, #12]
 80012e2:	e001      	b.n	80012e8 <PT_StateMachine+0xe8>
		else
			PEAKI = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	81bb      	strh	r3, [r7, #12]
	}

	// -- Run Different Phases of the Algo -> Learning Ph1, 2 and decision --//
	++Count_SinceRR;
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <PT_StateMachine+0x228>)
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <PT_StateMachine+0x228>)
 80012f8:	801a      	strh	r2, [r3, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <PT_StateMachine+0x21c>)
 80012fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <PT_StateMachine+0x10e>
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <PT_StateMachine+0x21c>)
 8001306:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10a      	bne.n	8001324 <PT_StateMachine+0x124>
	{ 
		if (PEAKI > 0)
 800130e:	89bb      	ldrh	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80c2 	beq.w	800149a <PT_StateMachine+0x29a>
			LearningPhase1(&PEAKI, &Best_PeakBP);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4944      	ldr	r1, [pc, #272]	; (800142c <PT_StateMachine+0x22c>)
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f933 	bl	8001588 <LearningPhase1>
		if (PEAKI > 0)
 8001322:	e0ba      	b.n	800149a <PT_StateMachine+0x29a>
	}
	// ---- Once learning Phase 1 done, start storing beats ---- //
	else										
	{
		// ---- Is the peak taller than ThI1 and ThF1? ---- //
		if (PEAKI > PT_dptr->ThI1 && Best_PeakBP > PT_dptr->ThF1)
 8001324:	4b3d      	ldr	r3, [pc, #244]	; (800141c <PT_StateMachine+0x21c>)
 8001326:	8a9a      	ldrh	r2, [r3, #20]
 8001328:	89bb      	ldrh	r3, [r7, #12]
 800132a:	429a      	cmp	r2, r3
 800132c:	f080 808c 	bcs.w	8001448 <PT_StateMachine+0x248>
 8001330:	4b3a      	ldr	r3, [pc, #232]	; (800141c <PT_StateMachine+0x21c>)
 8001332:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <PT_StateMachine+0x22c>)
 8001338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133c:	429a      	cmp	r2, r3
 800133e:	f280 8083 	bge.w	8001448 <PT_StateMachine+0x248>
		{

			// ---- Initiated phase 2 ---- //
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <PT_StateMachine+0x21c>)
 8001344:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d11d      	bne.n	8001388 <PT_StateMachine+0x188>
			{
				// ----- Update Integ & BP Th ------ //
				UpdateThI(&PEAKI, 0);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd78 	bl	8001e48 <UpdateThI>
				UpdateThF(&Best_PeakBP, 0);
 8001358:	2100      	movs	r1, #0
 800135a:	4834      	ldr	r0, [pc, #208]	; (800142c <PT_StateMachine+0x22c>)
 800135c:	f000 fdc4 	bl	8001ee8 <UpdateThF>

				// --- First RR interval --- //
				BeatDelay = GENERAL_DELAY + PT200MS;
 8001360:	234e      	movs	r3, #78	; 0x4e
 8001362:	81fb      	strh	r3, [r7, #14]
				Count_SinceRR = 0;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <PT_StateMachine+0x228>)
 8001366:	2200      	movs	r2, #0
 8001368:	801a      	strh	r2, [r3, #0]
				Old_PeakDR = Best_PeakDR;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <PT_StateMachine+0x230>)
 800136c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <PT_StateMachine+0x234>)
 8001372:	801a      	strh	r2, [r3, #0]
				Best_PeakDR = 0;
 8001374:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <PT_StateMachine+0x230>)
 8001376:	2200      	movs	r2, #0
 8001378:	801a      	strh	r2, [r3, #0]
				Best_PeakBP = 0;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <PT_StateMachine+0x22c>)
 800137c:	2200      	movs	r2, #0
 800137e:	801a      	strh	r2, [r3, #0]

				// --- Now we can compute RR intervals --- //
				PT_dptr->PT_state = DETECTING;
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <PT_StateMachine+0x21c>)
 8001382:	2203      	movs	r2, #3
 8001384:	80da      	strh	r2, [r3, #6]
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001386:	e088      	b.n	800149a <PT_StateMachine+0x29a>
			}
			// ------ Learning phases are done! -------- //
			else
			{
			// --- T-Wave Test if RR < 360msec, is current slope lower 0.5prev_slope then noise --- //
				if (Count_SinceRR < PT360MS && (Best_PeakDR < (Old_PeakDR >> 2)))
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <PT_StateMachine+0x228>)
 800138a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138e:	2b47      	cmp	r3, #71	; 0x47
 8001390:	dc14      	bgt.n	80013bc <PT_StateMachine+0x1bc>
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <PT_StateMachine+0x234>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	109b      	asrs	r3, r3, #2
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <PT_StateMachine+0x230>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dd0a      	ble.n	80013bc <PT_StateMachine+0x1bc>
				{
					// ----- Update Integ & BP Th ------ //
					UpdateThI(&PEAKI, 1);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2101      	movs	r1, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fd4b 	bl	8001e48 <UpdateThI>
					UpdateThF(&Best_PeakBP, 1);
 80013b2:	2101      	movs	r1, #1
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <PT_StateMachine+0x22c>)
 80013b6:	f000 fd97 	bl	8001ee8 <UpdateThF>
			if (PT_dptr->PT_state == LEARN_PH_2)
 80013ba:	e06e      	b.n	800149a <PT_StateMachine+0x29a>

				}
				else
				{
					// ----- Update Integ & BP Th && RR buffers ------ //
					UpdateThI(&PEAKI, 0);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fd40 	bl	8001e48 <UpdateThI>
					UpdateThF(&Best_PeakBP, 0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	4818      	ldr	r0, [pc, #96]	; (800142c <PT_StateMachine+0x22c>)
 80013cc:	f000 fd8c 	bl	8001ee8 <UpdateThF>
					UpdateRR(Count_SinceRR);
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <PT_StateMachine+0x228>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fc22 	bl	8001c20 <UpdateRR>

					// --- Reset parameters --- //
					BeatDelay = GENERAL_DELAY + PT200MS;
 80013dc:	234e      	movs	r3, #78	; 0x4e
 80013de:	81fb      	strh	r3, [r7, #14]
					Count_SinceRR = 0;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <PT_StateMachine+0x228>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
					Old_PeakDR = Best_PeakDR;									// Store the derivative for T-wave test
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <PT_StateMachine+0x230>)
 80013e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <PT_StateMachine+0x234>)
 80013ee:	801a      	strh	r2, [r3, #0]
					Best_PeakDR = Best_PeakBP = 0;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <PT_StateMachine+0x22c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	801a      	strh	r2, [r3, #0]
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <PT_StateMachine+0x22c>)
 80013f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <PT_StateMachine+0x230>)
 80013fe:	801a      	strh	r2, [r3, #0]

					SBcntI = 0;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <PT_StateMachine+0x238>)
 8001402:	2200      	movs	r2, #0
 8001404:	801a      	strh	r2, [r3, #0]
					SB_peakBP = 0;
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <PT_StateMachine+0x23c>)
 8001408:	2200      	movs	r2, #0
 800140a:	801a      	strh	r2, [r3, #0]
					SB_peakDR = 0;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <PT_StateMachine+0x240>)
 800140e:	2200      	movs	r2, #0
 8001410:	801a      	strh	r2, [r3, #0]
					SB_peakI = 0;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <PT_StateMachine+0x244>)
 8001414:	2200      	movs	r2, #0
 8001416:	801a      	strh	r2, [r3, #0]
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001418:	e03f      	b.n	800149a <PT_StateMachine+0x29a>
 800141a:	bf00      	nop
 800141c:	20000380 	.word	0x20000380
 8001420:	20000482 	.word	0x20000482
 8001424:	20000490 	.word	0x20000490
 8001428:	20000478 	.word	0x20000478
 800142c:	2000046e 	.word	0x2000046e
 8001430:	20000474 	.word	0x20000474
 8001434:	20000476 	.word	0x20000476
 8001438:	20000484 	.word	0x20000484
 800143c:	20000486 	.word	0x20000486
 8001440:	20000488 	.word	0x20000488
 8001444:	2000049a 	.word	0x2000049a

				}
			}
		}
		// ------ If the peak is noise ------- //
		else if (PEAKI > 0)
 8001448:	89bb      	ldrh	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d025      	beq.n	800149a <PT_StateMachine+0x29a>
		{
			// ----- Update Integ & BP Th ------ //
			UpdateThI(&PEAKI, 1);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fcf7 	bl	8001e48 <UpdateThI>
			UpdateThF(&Best_PeakBP, 1);
 800145a:	2101      	movs	r1, #1
 800145c:	4841      	ldr	r0, [pc, #260]	; (8001564 <PT_StateMachine+0x364>)
 800145e:	f000 fd43 	bl	8001ee8 <UpdateThF>

			// ----- Store the peak for searchback ------ //
			if (PEAKI > SB_peakI && Count_SinceRR >= PT360MS)
 8001462:	89ba      	ldrh	r2, [r7, #12]
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <PT_StateMachine+0x368>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d916      	bls.n	800149a <PT_StateMachine+0x29a>
 800146c:	4b3f      	ldr	r3, [pc, #252]	; (800156c <PT_StateMachine+0x36c>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	2b47      	cmp	r3, #71	; 0x47
 8001474:	dd11      	ble.n	800149a <PT_StateMachine+0x29a>
			{
				SB_peakI = PEAKI;											// Store Integ Sig peak 
 8001476:	89ba      	ldrh	r2, [r7, #12]
 8001478:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <PT_StateMachine+0x368>)
 800147a:	801a      	strh	r2, [r3, #0]
				SB_peakBP = Best_PeakBP;									// Store BP Sig peak
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <PT_StateMachine+0x364>)
 800147e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <PT_StateMachine+0x370>)
 8001484:	801a      	strh	r2, [r3, #0]
				SB_peakDR = Best_PeakDR;									// Derivative of SB point
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <PT_StateMachine+0x374>)
 8001488:	f9b3 2000 	ldrsh.w	r2, [r3]
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <PT_StateMachine+0x378>)
 800148e:	801a      	strh	r2, [r3, #0]
				SBcntI = Count_SinceRR;										// Store Indice
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <PT_StateMachine+0x36c>)
 8001492:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <PT_StateMachine+0x37c>)
 8001498:	801a      	strh	r2, [r3, #0]
		}

	}

	// -- Do search-back if we have no beats in PT_dptr->RR_Missed_L -- //
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <PT_StateMachine+0x380>)
 800149c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <PT_StateMachine+0x36c>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	da4d      	bge.n	8001546 <PT_StateMachine+0x346>
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <PT_StateMachine+0x380>)
 80014ac:	8b5a      	ldrh	r2, [r3, #26]
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <PT_StateMachine+0x368>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d247      	bcs.n	8001546 <PT_StateMachine+0x346>
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <PT_StateMachine+0x380>)
 80014b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d142      	bne.n	8001546 <PT_StateMachine+0x346>
	{
		// ---- Checking the BP signal ---- //
		if (SB_peakBP > PT_dptr->ThF2)
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <PT_StateMachine+0x380>)
 80014c2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <PT_StateMachine+0x370>)
 80014c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	da3a      	bge.n	8001546 <PT_StateMachine+0x346>
		{
			// ----- Update Integ & BP Th && RR buffers ------ //
			UpdateThI(&SB_peakI, 0);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4825      	ldr	r0, [pc, #148]	; (8001568 <PT_StateMachine+0x368>)
 80014d4:	f000 fcb8 	bl	8001e48 <UpdateThI>
			UpdateThF(&SB_peakBP, 0);
 80014d8:	2100      	movs	r1, #0
 80014da:	4825      	ldr	r0, [pc, #148]	; (8001570 <PT_StateMachine+0x370>)
 80014dc:	f000 fd04 	bl	8001ee8 <UpdateThF>
			UpdateRR(SBcntI);
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <PT_StateMachine+0x37c>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fb9a 	bl	8001c20 <UpdateRR>

			// --- Reset parameters --- //
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <PT_StateMachine+0x36c>)
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <PT_StateMachine+0x37c>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <PT_StateMachine+0x36c>)
 8001504:	801a      	strh	r2, [r3, #0]
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <PT_StateMachine+0x36c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	81fb      	strh	r3, [r7, #14]
			BeatDelay += (GENERAL_DELAY + PT200MS);
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	334e      	adds	r3, #78	; 0x4e
 8001510:	b29b      	uxth	r3, r3
 8001512:	81fb      	strh	r3, [r7, #14]
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <PT_StateMachine+0x378>)
 8001516:	f9b3 2000 	ldrsh.w	r2, [r3]
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <PT_StateMachine+0x384>)
 800151c:	801a      	strh	r2, [r3, #0]
			Best_PeakDR = Best_PeakBP = 0;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <PT_StateMachine+0x364>)
 8001520:	2200      	movs	r2, #0
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <PT_StateMachine+0x364>)
 8001526:	f9b3 2000 	ldrsh.w	r2, [r3]
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <PT_StateMachine+0x374>)
 800152c:	801a      	strh	r2, [r3, #0]

			SBcntI = 0;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <PT_StateMachine+0x37c>)
 8001530:	2200      	movs	r2, #0
 8001532:	801a      	strh	r2, [r3, #0]
			SB_peakBP = 0;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <PT_StateMachine+0x370>)
 8001536:	2200      	movs	r2, #0
 8001538:	801a      	strh	r2, [r3, #0]
			SB_peakDR = 0;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <PT_StateMachine+0x378>)
 800153c:	2200      	movs	r2, #0
 800153e:	801a      	strh	r2, [r3, #0]
			SB_peakI = 0;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <PT_StateMachine+0x368>)
 8001542:	2200      	movs	r2, #0
 8001544:	801a      	strh	r2, [r3, #0]
	}

	// ---- Emergency and Faulty Condition Reset ---- //
	// If algorithm doest not find a beat in 4sec, then it resets itself
	// and starts learning phases.
	if (Count_SinceRR > PT4000MS) {
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <PT_StateMachine+0x36c>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001550:	dd01      	ble.n	8001556 <PT_StateMachine+0x356>
		PT_init();
 8001552:	f7ff fd23 	bl	8000f9c <PT_init>
	}

	return (BeatDelay);
 8001556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000046e 	.word	0x2000046e
 8001568:	2000049a 	.word	0x2000049a
 800156c:	20000478 	.word	0x20000478
 8001570:	20000486 	.word	0x20000486
 8001574:	20000474 	.word	0x20000474
 8001578:	20000488 	.word	0x20000488
 800157c:	20000484 	.word	0x20000484
 8001580:	20000380 	.word	0x20000380
 8001584:	20000476 	.word	0x20000476

08001588 <LearningPhase1>:
	peaks iteratively in both Integrated Signal and BP signal.

 **********************************************************************************/

void LearningPhase1(uint16_t *pkI, int16_t *pkBP)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	//---- Recursively compute the average and max of peaks ------ //
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <LearningPhase1+0x120>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d903      	bls.n	80015a6 <LearningPhase1+0x1e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <LearningPhase1+0x120>)
 80015a4:	801a      	strh	r2, [r3, #0]

	// ---- If the very first time calling this function --- //
	if (PT_dptr->PT_state == START_UP) {
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <LearningPhase1+0x124>)
 80015a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10c      	bne.n	80015ca <LearningPhase1+0x42>
		PT_dptr->PT_state = LEARN_PH_1;
 80015b0:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <LearningPhase1+0x124>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	80da      	strh	r2, [r3, #6]
		st_mean_pk = *pkI;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	881a      	ldrh	r2, [r3, #0]
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <LearningPhase1+0x128>)
 80015bc:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = *pkBP; 
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015c4:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <LearningPhase1+0x12c>)
 80015c6:	801a      	strh	r2, [r3, #0]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;

	}
}
 80015c8:	e067      	b.n	800169a <LearningPhase1+0x112>
	else if(Count_SinceRR < PT2000MS){
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <LearningPhase1+0x130>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80015d4:	da16      	bge.n	8001604 <LearningPhase1+0x7c>
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <LearningPhase1+0x128>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	105b      	asrs	r3, r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <LearningPhase1+0x128>)
 80015e8:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <LearningPhase1+0x12c>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	461a      	mov	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	4413      	add	r3, r2
 80015fa:	105b      	asrs	r3, r3, #1
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <LearningPhase1+0x12c>)
 8001600:	801a      	strh	r2, [r3, #0]
}
 8001602:	e04a      	b.n	800169a <LearningPhase1+0x112>
		PT_dptr->PT_state = LEARN_PH_2;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <LearningPhase1+0x124>)
 8001606:	2202      	movs	r2, #2
 8001608:	80da      	strh	r2, [r3, #6]
		PT_dptr->SPKI = (st_mx_pk >> 1);
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <LearningPhase1+0x120>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	4a27      	ldr	r2, [pc, #156]	; (80016ac <LearningPhase1+0x124>)
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	b29b      	uxth	r3, r3
 8001614:	82d3      	strh	r3, [r2, #22]
		PT_dptr->NPKI = (st_mean_pk >> 3);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <LearningPhase1+0x128>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <LearningPhase1+0x124>)
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	b29b      	uxth	r3, r3
 8001620:	8313      	strh	r3, [r2, #24]
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <LearningPhase1+0x124>)
 8001624:	8b1a      	ldrh	r2, [r3, #24]
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <LearningPhase1+0x124>)
 8001628:	8adb      	ldrh	r3, [r3, #22]
 800162a:	4619      	mov	r1, r3
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <LearningPhase1+0x124>)
 800162e:	8b1b      	ldrh	r3, [r3, #24]
 8001630:	1acb      	subs	r3, r1, r3
 8001632:	109b      	asrs	r3, r3, #2
 8001634:	b29b      	uxth	r3, r3
 8001636:	491d      	ldr	r1, [pc, #116]	; (80016ac <LearningPhase1+0x124>)
 8001638:	4413      	add	r3, r2
 800163a:	b29b      	uxth	r3, r3
 800163c:	828b      	strh	r3, [r1, #20]
		PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <LearningPhase1+0x124>)
 8001640:	8a9b      	ldrh	r3, [r3, #20]
 8001642:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <LearningPhase1+0x124>)
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	8353      	strh	r3, [r2, #26]
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <LearningPhase1+0x134>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <LearningPhase1+0x124>)
 8001652:	105b      	asrs	r3, r3, #1
 8001654:	b21b      	sxth	r3, r3
 8001656:	83d3      	strh	r3, [r2, #30]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <LearningPhase1+0x12c>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <LearningPhase1+0x124>)
 8001660:	10db      	asrs	r3, r3, #3
 8001662:	b21b      	sxth	r3, r3
 8001664:	8413      	strh	r3, [r2, #32]
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <LearningPhase1+0x124>)
 8001668:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <LearningPhase1+0x124>)
 8001670:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001674:	4619      	mov	r1, r3
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <LearningPhase1+0x124>)
 8001678:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800167c:	1acb      	subs	r3, r1, r3
 800167e:	109b      	asrs	r3, r3, #2
 8001680:	b29b      	uxth	r3, r3
 8001682:	4413      	add	r3, r2
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <LearningPhase1+0x124>)
 8001688:	b212      	sxth	r2, r2
 800168a:	839a      	strh	r2, [r3, #28]
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <LearningPhase1+0x124>)
 800168e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <LearningPhase1+0x124>)
 8001694:	105b      	asrs	r3, r3, #1
 8001696:	b21b      	sxth	r3, r3
 8001698:	8453      	strh	r3, [r2, #34]	; 0x22
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000492 	.word	0x20000492
 80016ac:	20000380 	.word	0x20000380
 80016b0:	20000494 	.word	0x20000494
 80016b4:	2000048c 	.word	0x2000048c
 80016b8:	20000478 	.word	0x20000478
 80016bc:	2000046e 	.word	0x2000046e

080016c0 <LPFilter>:
	type employed by setting FILTER_FORM to 1 or 2. Delay of the filter is 5.

 **********************************************************************************/

void LPFilter(int16_t *val)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, w;

	half_pointer = PT_dptr->LP_pointer - (LP_BUFFER_SIZE >> 1);
 80016c8:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <LPFilter+0x100>)
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b06      	subs	r3, #6
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	81fb      	strh	r3, [r7, #14]

	if (half_pointer < 0) 
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da03      	bge.n	80016e6 <LPFilter+0x26>
		half_pointer += LP_BUFFER_SIZE;
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	330c      	adds	r3, #12
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	81fb      	strh	r3, [r7, #14]
#if (FILTER_FORM == 1)
		w = *val + (PT_dptr->LP_buf[1] << 1) - PT_dptr->LP_buf[0];
		*val = w - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = w;
#else
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 80016e6:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <LPFilter+0x104>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <LPFilter+0x108>)
 80016f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	b29b      	uxth	r3, r3
 8001706:	4413      	add	r3, r2
 8001708:	b29a      	uxth	r2, r3
 800170a:	492d      	ldr	r1, [pc, #180]	; (80017c0 <LPFilter+0x100>)
 800170c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001710:	3314      	adds	r3, #20
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800171a:	b29b      	uxth	r3, r3
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29a      	uxth	r2, r3
 8001724:	4926      	ldr	r1, [pc, #152]	; (80017c0 <LPFilter+0x100>)
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <LPFilter+0x100>)
 8001728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172c:	3314      	adds	r3, #20
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	440b      	add	r3, r1
 8001732:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4413      	add	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	81bb      	strh	r3, [r7, #12]
		LP_y_new = LP_y_old;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <LPFilter+0x104>)
 8001740:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <LPFilter+0x108>)
 8001746:	801a      	strh	r2, [r3, #0]
		LP_y_old = w;
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <LPFilter+0x104>)
 800174a:	89bb      	ldrh	r3, [r7, #12]
 800174c:	8013      	strh	r3, [r2, #0]
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = *val;
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <LPFilter+0x100>)
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <LPFilter+0x100>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	4618      	mov	r0, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800175e:	f100 0314 	add.w	r3, r0, #20
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	460a      	mov	r2, r1
 8001768:	80da      	strh	r2, [r3, #6]
#endif
		// --- Avoid signal overflow by gaining down ---- //
		if (w >= 0)
 800176a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db06      	blt.n	8001780 <LPFilter+0xc0>
			PT_dptr->LPF_val = w >> 5;
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <LPFilter+0x100>)
 8001774:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001778:	115b      	asrs	r3, r3, #5
 800177a:	b21b      	sxth	r3, r3
 800177c:	8153      	strh	r3, [r2, #10]
 800177e:	e00a      	b.n	8001796 <LPFilter+0xd6>
		else
			PT_dptr->LPF_val = (w >> 5) | 0xF800;
 8001780:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001784:	115b      	asrs	r3, r3, #5
 8001786:	b21b      	sxth	r3, r3
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <LPFilter+0x100>)
 800178a:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 800178e:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 8001792:	b21b      	sxth	r3, r3
 8001794:	8153      	strh	r3, [r2, #10]

		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <LPFilter+0x100>)
 8001798:	f9b3 2000 	ldrsh.w	r2, [r3]
 800179c:	b292      	uxth	r2, r2
 800179e:	3201      	adds	r2, #1
 80017a0:	b292      	uxth	r2, r2
 80017a2:	b212      	sxth	r2, r2
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d102      	bne.n	80017b4 <LPFilter+0xf4>
			PT_dptr->LP_pointer = 0;
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <LPFilter+0x100>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	801a      	strh	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	20000380 	.word	0x20000380
 80017c4:	2000049e 	.word	0x2000049e
 80017c8:	2000049c 	.word	0x2000049c

080017cc <HPFilter>:
function implements the filter both in Direct Form I and II. Select the
type employed by setting FILTER_FORM to 1 or 2. Delay 16 samples.

**********************************************************************************/
void HPFilter(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, h_prev_pointer;
	half_pointer = PT_dptr->HP_pointer - (HP_BUFFER_SIZE >> 1);
 80017d2:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <HPFilter+0x118>)
 80017d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b10      	subs	r3, #16
 80017dc:	b29b      	uxth	r3, r3
 80017de:	80fb      	strh	r3, [r7, #6]

	if (half_pointer < 0)
 80017e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da03      	bge.n	80017f0 <HPFilter+0x24>
		half_pointer += HP_BUFFER_SIZE;
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	3320      	adds	r3, #32
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	80fb      	strh	r3, [r7, #6]
	
	if (!half_pointer)
 80017f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <HPFilter+0x32>
		h_prev_pointer = HP_BUFFER_SIZE - 1;
 80017f8:	231f      	movs	r3, #31
 80017fa:	80bb      	strh	r3, [r7, #4]
 80017fc:	e003      	b.n	8001806 <HPFilter+0x3a>
	else
		h_prev_pointer = half_pointer - 1;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	3b01      	subs	r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	80bb      	strh	r3, [r7, #4]
#if (FILTER_FORM == 1)
	y_h = PT_dptr->LPF_val + PT_dptr->HP_buf[0];
	PT_dptr->LPF_val = ((PT_dptr->HP_buf[PT_dptr->HP_pointer] - y_h) >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = y_h;
#else
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 8001806:	4a37      	ldr	r2, [pc, #220]	; (80018e4 <HPFilter+0x118>)
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HPFilter+0x118>)
 800180a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800180e:	3320      	adds	r3, #32
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001818:	115b      	asrs	r3, r3, #5
 800181a:	b21b      	sxth	r3, r3
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <HPFilter+0x118>)
 8001820:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001824:	115b      	asrs	r3, r3, #5
 8001826:	b21b      	sxth	r3, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	b29a      	uxth	r2, r3
 800182e:	492d      	ldr	r1, [pc, #180]	; (80018e4 <HPFilter+0x118>)
 8001830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001834:	3320      	adds	r3, #32
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	440b      	add	r3, r1
 800183a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800183e:	b29b      	uxth	r3, r3
 8001840:	4413      	add	r3, r2
 8001842:	b29a      	uxth	r2, r3
 8001844:	4927      	ldr	r1, [pc, #156]	; (80018e4 <HPFilter+0x118>)
 8001846:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800184a:	3320      	adds	r3, #32
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	440b      	add	r3, r1
 8001850:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001854:	b29b      	uxth	r3, r3
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HPFilter+0x11c>)
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	b21a      	sxth	r2, r3
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HPFilter+0x11c>)
 800186a:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = PT_dptr->LPF_val;
 800186c:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HPFilter+0x118>)
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HPFilter+0x118>)
 8001870:	491c      	ldr	r1, [pc, #112]	; (80018e4 <HPFilter+0x118>)
 8001872:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8001876:	4608      	mov	r0, r1
 8001878:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800187c:	f100 0320 	add.w	r3, r0, #32
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	460a      	mov	r2, r1
 8001886:	80da      	strh	r2, [r3, #6]
	
#endif
	// ------- Again slightly gaining down --------- //
	if (y_h >= 0)
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HPFilter+0x11c>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db07      	blt.n	80018a2 <HPFilter+0xd6>
		PT_dptr->HPF_val = (y_h >> 1);
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HPFilter+0x11c>)
 8001894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HPFilter+0x118>)
 800189a:	105b      	asrs	r3, r3, #1
 800189c:	b21b      	sxth	r3, r3
 800189e:	8193      	strh	r3, [r2, #12]
 80018a0:	e00b      	b.n	80018ba <HPFilter+0xee>
	else
		PT_dptr->HPF_val = (y_h >> 1) | 0xF800;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HPFilter+0x11c>)
 80018a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a8:	105b      	asrs	r3, r3, #1
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HPFilter+0x118>)
 80018ae:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 80018b2:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	8193      	strh	r3, [r2, #12]

	if (++PT_dptr->HP_pointer == HP_BUFFER_SIZE) PT_dptr->HP_pointer = 0;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HPFilter+0x118>)
 80018bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80018c0:	b292      	uxth	r2, r2
 80018c2:	3201      	adds	r2, #1
 80018c4:	b292      	uxth	r2, r2
 80018c6:	b212      	sxth	r2, r2
 80018c8:	805a      	strh	r2, [r3, #2]
 80018ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d102      	bne.n	80018d8 <HPFilter+0x10c>
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HPFilter+0x118>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	805a      	strh	r2, [r3, #2]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	20000380 	.word	0x20000380
 80018e8:	2000048a 	.word	0x2000048a

080018ec <DerivFilter>:
y[n] = 1/8(2x[n] + x[n - 1] - x[n - 3] - 2x[n - 4]) . Delay 2 samples.

**********************************************************************************/

void DerivFilter(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
	// --- Since it is only a 5 point derivative filter we avoid using pointers and half pointers for further efficieny ---- //
	int16_t w;

	w = PT_dptr->DR_buf[0] - PT_dptr->DR_buf[2];
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <DerivFilter+0x88>)
 80018f4:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <DerivFilter+0x88>)
 80018fc:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8001900:	b29b      	uxth	r3, r3
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	80fb      	strh	r3, [r7, #6]
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <DerivFilter+0x88>)
 800190a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <DerivFilter+0x88>)
 8001912:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8001916:	b29b      	uxth	r3, r3
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	b29b      	uxth	r3, r3
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4413      	add	r3, r2
 8001924:	b29b      	uxth	r3, r3
 8001926:	80fb      	strh	r3, [r7, #6]
	w >>= 3;
 8001928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192c:	10db      	asrs	r3, r3, #3
 800192e:	80fb      	strh	r3, [r7, #6]
	PT_dptr->DR_buf[3] = PT_dptr->DR_buf[2];
 8001930:	4a10      	ldr	r2, [pc, #64]	; (8001974 <DerivFilter+0x88>)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <DerivFilter+0x88>)
 8001934:	f9b2 208a 	ldrsh.w	r2, [r2, #138]	; 0x8a
 8001938:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	PT_dptr->DR_buf[2] = PT_dptr->DR_buf[1];
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <DerivFilter+0x88>)
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <DerivFilter+0x88>)
 8001940:	f9b2 2088 	ldrsh.w	r2, [r2, #136]	; 0x88
 8001944:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	PT_dptr->DR_buf[1] = PT_dptr->DR_buf[0];
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <DerivFilter+0x88>)
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <DerivFilter+0x88>)
 800194c:	f9b2 2086 	ldrsh.w	r2, [r2, #134]	; 0x86
 8001950:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	PT_dptr->DR_buf[0] = PT_dptr->HPF_val;
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <DerivFilter+0x88>)
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <DerivFilter+0x88>)
 8001958:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800195c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	PT_dptr->DRF_val = w;
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <DerivFilter+0x88>)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	81d3      	strh	r3, [r2, #14]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000380 	.word	0x20000380

08001978 <SQRFilter>:
Description: Squares the signal based on Pan-Tompkins Eq. 10,
y[n] = x[n]^2. No delay.

**********************************************************************************/
void SQRFilter(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
	// ------------ Avoiding Overflow -------------- //
	uint16_t temp;
	if (PT_dptr->DRF_val > SQR_LIM_VAL || PT_dptr->DRF_val < (-SQR_LIM_VAL))
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <SQRFilter+0x74>)
 8001980:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	dc05      	bgt.n	8001996 <SQRFilter+0x1e>
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <SQRFilter+0x74>)
 800198c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001990:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8001994:	da04      	bge.n	80019a0 <SQRFilter+0x28>
		PT_dptr->SQF_val = UINT16_MAX;
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <SQRFilter+0x74>)
 8001998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199c:	821a      	strh	r2, [r3, #16]
 800199e:	e015      	b.n	80019cc <SQRFilter+0x54>
	else
	{
		if (PT_dptr->DRF_val < 0)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <SQRFilter+0x74>)
 80019a2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da06      	bge.n	80019b8 <SQRFilter+0x40>
			temp = (uint16_t)(-PT_dptr->DRF_val);
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <SQRFilter+0x74>)
 80019ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	425b      	negs	r3, r3
 80019b4:	80fb      	strh	r3, [r7, #6]
 80019b6:	e003      	b.n	80019c0 <SQRFilter+0x48>
		else
			temp = (uint16_t)(PT_dptr->DRF_val);
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <SQRFilter+0x74>)
 80019ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019be:	80fb      	strh	r3, [r7, #6]
		PT_dptr->SQF_val = temp*temp;
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SQRFilter+0x74>)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	fb13 f303 	smulbb	r3, r3, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	8213      	strh	r3, [r2, #16]
	}

	if (PT_dptr->SQF_val > SQR_LIM_OUT)
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <SQRFilter+0x74>)
 80019ce:	8a1b      	ldrh	r3, [r3, #16]
 80019d0:	f247 5230 	movw	r2, #30000	; 0x7530
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d903      	bls.n	80019e0 <SQRFilter+0x68>
		PT_dptr->SQF_val = SQR_LIM_OUT;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SQRFilter+0x74>)
 80019da:	f247 5230 	movw	r2, #30000	; 0x7530
 80019de:	821a      	strh	r2, [r3, #16]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20000380 	.word	0x20000380

080019f0 <MVAFilter>:
Description: Computes the rolling moving average of the input signal
based on Eq. 11 of Pan-Tompkins, y[n] = (1/N)[sum(x[1]+...+x[N])]. Delay 15 Samples.

**********************************************************************************/
void MVAFilter(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	//---- The MV_sum can easily overflow so we limit the bound by uint16 precision ------ //
	if (MV_sum < (UINT16_MAX - PT_dptr->SQF_val))
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <MVAFilter+0xd4>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <MVAFilter+0xd8>)
 80019fc:	8a1b      	ldrh	r3, [r3, #16]
 80019fe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001a02:	33ff      	adds	r3, #255	; 0xff
 8001a04:	429a      	cmp	r2, r3
 8001a06:	da08      	bge.n	8001a1a <MVAFilter+0x2a>
		MV_sum += PT_dptr->SQF_val;
 8001a08:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <MVAFilter+0xd8>)
 8001a0a:	8a1a      	ldrh	r2, [r3, #16]
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <MVAFilter+0xd4>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <MVAFilter+0xd4>)
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	e003      	b.n	8001a22 <MVAFilter+0x32>
	else
		MV_sum = UINT16_MAX;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <MVAFilter+0xd4>)
 8001a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a20:	801a      	strh	r2, [r3, #0]

	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 8001a22:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <MVAFilter+0xd8>)
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <MVAFilter+0xd8>)
 8001a26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a2a:	3344      	adds	r3, #68	; 0x44
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	88da      	ldrh	r2, [r3, #6]
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <MVAFilter+0xd4>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20e      	bcs.n	8001a58 <MVAFilter+0x68>
		MV_sum -= PT_dptr->MVA_buf[PT_dptr->MVA_pointer];
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MVAFilter+0xd4>)
 8001a3c:	881a      	ldrh	r2, [r3, #0]
 8001a3e:	4922      	ldr	r1, [pc, #136]	; (8001ac8 <MVAFilter+0xd8>)
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MVAFilter+0xd8>)
 8001a42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a46:	3344      	adds	r3, #68	; 0x44
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	440b      	add	r3, r1
 8001a4c:	88db      	ldrh	r3, [r3, #6]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MVAFilter+0xd4>)
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	e002      	b.n	8001a5e <MVAFilter+0x6e>
	else
		MV_sum = 0;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MVAFilter+0xd4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	801a      	strh	r2, [r3, #0]

	PT_dptr->MVA_buf[PT_dptr->MVA_pointer] = PT_dptr->SQF_val;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MVAFilter+0xd8>)
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <MVAFilter+0xd8>)
 8001a62:	4919      	ldr	r1, [pc, #100]	; (8001ac8 <MVAFilter+0xd8>)
 8001a64:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	8a19      	ldrh	r1, [r3, #16]
 8001a6c:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	460a      	mov	r2, r1
 8001a76:	80da      	strh	r2, [r3, #6]

	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MVAFilter+0xd4>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MVAFilter+0xd8>)
 8001a7e:	4913      	ldr	r1, [pc, #76]	; (8001acc <MVAFilter+0xdc>)
 8001a80:	fba1 1303 	umull	r1, r3, r1, r3
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	8253      	strh	r3, [r2, #18]

	if (PT_dptr->MVA_val > MVA_LIM_VAL)
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MVAFilter+0xd8>)
 8001a8c:	8a5b      	ldrh	r3, [r3, #18]
 8001a8e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001a92:	d903      	bls.n	8001a9c <MVAFilter+0xac>
		PT_dptr->MVA_val = MVA_LIM_VAL;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MVAFilter+0xd8>)
 8001a96:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a9a:	825a      	strh	r2, [r3, #18]

	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MVAFilter+0xd8>)
 8001a9e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	3201      	adds	r2, #1
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	b212      	sxth	r2, r2
 8001aaa:	809a      	strh	r2, [r3, #4]
 8001aac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ab0:	2b1e      	cmp	r3, #30
 8001ab2:	d102      	bne.n	8001aba <MVAFilter+0xca>
		PT_dptr->MVA_pointer = 0;
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <MVAFilter+0xd8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	809a      	strh	r2, [r3, #4]
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	2000048e 	.word	0x2000048e
 8001ac8:	20000380 	.word	0x20000380
 8001acc:	88888889 	.word	0x88888889

08001ad0 <PeakDtcI>:
If the signal changes sign the value of the peak is asssumed ot be a peak.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
int16_t PeakDtcI(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
	int16_t p;
	// ---------- Local maxima or not --------- //
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <PeakDtcI+0x4c>)
 8001ad8:	8a5a      	ldrh	r2, [r3, #18]
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <PeakDtcI+0x50>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d809      	bhi.n	8001af6 <PeakDtcI+0x26>
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <PeakDtcI+0x50>)
 8001ae4:	881a      	ldrh	r2, [r3, #0]
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <PeakDtcI+0x54>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d903      	bls.n	8001af6 <PeakDtcI+0x26>
		p = Prev_val;
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <PeakDtcI+0x50>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	80fb      	strh	r3, [r7, #6]
 8001af4:	e001      	b.n	8001afa <PeakDtcI+0x2a>
	}
	else {
		p = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	80fb      	strh	r3, [r7, #6]
	}
	Prev_Prev_val = Prev_val;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <PeakDtcI+0x50>)
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <PeakDtcI+0x54>)
 8001b00:	801a      	strh	r2, [r3, #0]
	Prev_val = PT_dptr->MVA_val;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <PeakDtcI+0x4c>)
 8001b04:	8a5a      	ldrh	r2, [r3, #18]
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <PeakDtcI+0x50>)
 8001b08:	801a      	strh	r2, [r3, #0]

	return (p);
 8001b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000380 	.word	0x20000380
 8001b20:	20000496 	.word	0x20000496
 8001b24:	20000498 	.word	0x20000498

08001b28 <PeakDtcDR>:
For T-wave discrimination see T-wave identification of the paper.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcDR(int16_t DR_sample)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 8001b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da03      	bge.n	8001b42 <PeakDtcDR+0x1a>
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	425b      	negs	r3, r3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <PeakDtcDR+0x70>)
 8001b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dc14      	bgt.n	8001b7a <PeakDtcDR+0x52>
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <PeakDtcDR+0x70>)
 8001b52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <PeakDtcDR+0x74>)
 8001b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dd0c      	ble.n	8001b7a <PeakDtcDR+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valDR > Best_PeakDR) Best_PeakDR = Prev_valDR;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <PeakDtcDR+0x70>)
 8001b62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <PeakDtcDR+0x78>)
 8001b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dd04      	ble.n	8001b7a <PeakDtcDR+0x52>
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <PeakDtcDR+0x70>)
 8001b72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <PeakDtcDR+0x78>)
 8001b78:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valDR = Prev_valDR;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <PeakDtcDR+0x70>)
 8001b7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <PeakDtcDR+0x74>)
 8001b82:	801a      	strh	r2, [r3, #0]
	Prev_valDR = DR_sample;
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <PeakDtcDR+0x70>)
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	8013      	strh	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000470 	.word	0x20000470
 8001b9c:	20000472 	.word	0x20000472
 8001ba0:	20000474 	.word	0x20000474

08001ba4 <PeakDtcBP>:
against adaptive thresholds.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcBP(int16_t DR_sample)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da03      	bge.n	8001bbe <PeakDtcBP+0x1a>
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	425b      	negs	r3, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <PeakDtcBP+0x70>)
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dc14      	bgt.n	8001bf6 <PeakDtcBP+0x52>
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <PeakDtcBP+0x70>)
 8001bce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <PeakDtcBP+0x74>)
 8001bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dd0c      	ble.n	8001bf6 <PeakDtcBP+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valBP > Best_PeakBP) Best_PeakBP = Prev_valBP;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <PeakDtcBP+0x70>)
 8001bde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <PeakDtcBP+0x78>)
 8001be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dd04      	ble.n	8001bf6 <PeakDtcBP+0x52>
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <PeakDtcBP+0x70>)
 8001bee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <PeakDtcBP+0x78>)
 8001bf4:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valBP = Prev_valBP;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <PeakDtcBP+0x70>)
 8001bf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <PeakDtcBP+0x74>)
 8001bfe:	801a      	strh	r2, [r3, #0]
	Prev_valBP = DR_sample;
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <PeakDtcBP+0x70>)
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	8013      	strh	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	2000046a 	.word	0x2000046a
 8001c18:	2000046c 	.word	0x2000046c
 8001c1c:	2000046e 	.word	0x2000046e

08001c20 <UpdateRR>:
RR_High_Lim		= 1.16*RR_M = ((116/100) * RR_M) = RR_M + (4/25)*RR_M
RR_Missed_Lim	= 1.66*RR_M = ((166/100) * RR_M) = RR_M + (33/50)*RR_M

**********************************************************************************/
void UpdateRR(int16_t qrs)
{   
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
	// ---------- Update most 8 Recent RR mean Interval------------- //
	RR1_sum += qrs;
 8001c2a:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <UpdateRR+0x210>)
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	4413      	add	r3, r2
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <UpdateRR+0x210>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <UpdateRR+0x210>)
 8001c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	497b      	ldr	r1, [pc, #492]	; (8001e34 <UpdateRR+0x214>)
 8001c48:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <UpdateRR+0x218>)
 8001c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4e:	3364      	adds	r3, #100	; 0x64
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	440b      	add	r3, r1
 8001c54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <UpdateRR+0x210>)
 8001c62:	801a      	strh	r2, [r3, #0]

	PT_dptr->RR_AVRG1_buf[RR1_p] = qrs;
 8001c64:	4a73      	ldr	r2, [pc, #460]	; (8001e34 <UpdateRR+0x214>)
 8001c66:	4b74      	ldr	r3, [pc, #464]	; (8001e38 <UpdateRR+0x218>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	3364      	adds	r3, #100	; 0x64
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	88fa      	ldrh	r2, [r7, #6]
 8001c74:	805a      	strh	r2, [r3, #2]
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 8001c76:	4b6e      	ldr	r3, [pc, #440]	; (8001e30 <UpdateRR+0x210>)
 8001c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7c:	4a6d      	ldr	r2, [pc, #436]	; (8001e34 <UpdateRR+0x214>)
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da00      	bge.n	8001c84 <UpdateRR+0x64>
 8001c82:	3307      	adds	r3, #7
 8001c84:	10db      	asrs	r3, r3, #3
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	8113      	strh	r3, [r2, #8]
	if (++RR1_p == RR_BUFFER_SIZE) 
 8001c8a:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <UpdateRR+0x218>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <UpdateRR+0x218>)
 8001c9a:	801a      	strh	r2, [r3, #0]
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <UpdateRR+0x218>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d102      	bne.n	8001cac <UpdateRR+0x8c>
		RR1_p = 0;
 8001ca6:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <UpdateRR+0x218>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	801a      	strh	r2, [r3, #0]



	// ------ Update Selected Beat RR mean if qrs in range --------- //
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 8001cac:	4b61      	ldr	r3, [pc, #388]	; (8001e34 <UpdateRR+0x214>)
 8001cae:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001cb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	f2c0 808c 	blt.w	8001dd4 <UpdateRR+0x1b4>
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <UpdateRR+0x214>)
 8001cbe:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001cc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	f300 8084 	bgt.w	8001dd4 <UpdateRR+0x1b4>
		// ------ Update selective RR mean ----- //
		RR2_sum += qrs;
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <UpdateRR+0x21c>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <UpdateRR+0x21c>)
 8001cde:	801a      	strh	r2, [r3, #0]
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 8001ce0:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <UpdateRR+0x21c>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4952      	ldr	r1, [pc, #328]	; (8001e34 <UpdateRR+0x214>)
 8001cea:	4b55      	ldr	r3, [pc, #340]	; (8001e40 <UpdateRR+0x220>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	336c      	adds	r3, #108	; 0x6c
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <UpdateRR+0x21c>)
 8001d04:	801a      	strh	r2, [r3, #0]

		PT_dptr->RR_AVRG2_buf[RR2_p] = qrs;
 8001d06:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <UpdateRR+0x214>)
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <UpdateRR+0x220>)
 8001d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0e:	336c      	adds	r3, #108	; 0x6c
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	805a      	strh	r2, [r3, #2]
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 8001d18:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <UpdateRR+0x21c>)
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	4a45      	ldr	r2, [pc, #276]	; (8001e34 <UpdateRR+0x214>)
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da00      	bge.n	8001d26 <UpdateRR+0x106>
 8001d24:	3307      	adds	r3, #7
 8001d26:	10db      	asrs	r3, r3, #3
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	8493      	strh	r3, [r2, #36]	; 0x24
		if (++RR2_p == RR_BUFFER_SIZE) 
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <UpdateRR+0x220>)
 8001d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <UpdateRR+0x220>)
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <UpdateRR+0x220>)
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d102      	bne.n	8001d4e <UpdateRR+0x12e>
			RR2_p = 0;
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <UpdateRR+0x220>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]

		// --------- Update Limits ------------ //
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001d4e:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <UpdateRR+0x214>)
 8001d50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <UpdateRR+0x214>)
 8001d58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4939      	ldr	r1, [pc, #228]	; (8001e44 <UpdateRR+0x224>)
 8001d60:	fb81 0103 	smull	r0, r1, r1, r3
 8001d64:	10c9      	asrs	r1, r1, #3
 8001d66:	17db      	asrs	r3, r3, #31
 8001d68:	1a5b      	subs	r3, r3, r1
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <UpdateRR+0x214>)
 8001d72:	b212      	sxth	r2, r2
 8001d74:	84da      	strh	r2, [r3, #38]	; 0x26
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <UpdateRR+0x214>)
 8001d78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <UpdateRR+0x214>)
 8001d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	492f      	ldr	r1, [pc, #188]	; (8001e44 <UpdateRR+0x224>)
 8001d88:	fb81 0103 	smull	r0, r1, r1, r3
 8001d8c:	10c9      	asrs	r1, r1, #3
 8001d8e:	17db      	asrs	r3, r3, #31
 8001d90:	1acb      	subs	r3, r1, r3
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <UpdateRR+0x214>)
 8001d9a:	b212      	sxth	r2, r2
 8001d9c:	851a      	strh	r2, [r3, #40]	; 0x28
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001d9e:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <UpdateRR+0x214>)
 8001da0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <UpdateRR+0x214>)
 8001da8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	015b      	lsls	r3, r3, #5
 8001db2:	440b      	add	r3, r1
 8001db4:	4923      	ldr	r1, [pc, #140]	; (8001e44 <UpdateRR+0x224>)
 8001db6:	fb81 0103 	smull	r0, r1, r1, r3
 8001dba:	1109      	asrs	r1, r1, #4
 8001dbc:	17db      	asrs	r3, r3, #31
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <UpdateRR+0x214>)
 8001dc8:	b212      	sxth	r2, r2
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->HR_State = REGULAR_HR;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <UpdateRR+0x214>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001dd2:	e027      	b.n	8001e24 <UpdateRR+0x204>
	}
	// -------- Irregular heart-rate ---------- //
	else {
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <UpdateRR+0x214>)
 8001dd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <UpdateRR+0x214>)
 8001dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001de2:	4619      	mov	r1, r3
 8001de4:	460b      	mov	r3, r1
 8001de6:	015b      	lsls	r3, r3, #5
 8001de8:	440b      	add	r3, r1
 8001dea:	4916      	ldr	r1, [pc, #88]	; (8001e44 <UpdateRR+0x224>)
 8001dec:	fb81 0103 	smull	r0, r1, r1, r3
 8001df0:	1109      	asrs	r1, r1, #4
 8001df2:	17db      	asrs	r3, r3, #31
 8001df4:	1acb      	subs	r3, r1, r3
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <UpdateRR+0x214>)
 8001dfe:	b212      	sxth	r2, r2
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->ThI1 >>= 1;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <UpdateRR+0x214>)
 8001e04:	8a9b      	ldrh	r3, [r3, #20]
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <UpdateRR+0x214>)
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	8293      	strh	r3, [r2, #20]
		PT_dptr->ThF1 >>= 1;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <UpdateRR+0x214>)
 8001e10:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <UpdateRR+0x214>)
 8001e16:	105b      	asrs	r3, r3, #1
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	8393      	strh	r3, [r2, #28]
		PT_dptr->HR_State = IRREGULAR_HR;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <UpdateRR+0x214>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	859a      	strh	r2, [r3, #44]	; 0x2c
	}
	
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	2000047e 	.word	0x2000047e
 8001e34:	20000380 	.word	0x20000380
 8001e38:	2000047a 	.word	0x2000047a
 8001e3c:	20000480 	.word	0x20000480
 8001e40:	2000047c 	.word	0x2000047c
 8001e44:	51eb851f 	.word	0x51eb851f

08001e48 <UpdateThI>:
Description: This function recursively updates the adaptive noise and signal thresholds in
the Integrated signal. Implements Eq 12-16.

**********************************************************************************/
void UpdateThI( uint16_t *PEAKI, int8_t NOISE_F)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d014      	beq.n	8001e86 <UpdateThI+0x3e>
		PT_dptr->NPKI -= PT_dptr->NPKI >> 3;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <UpdateThI+0x9c>)
 8001e5e:	8b1a      	ldrh	r2, [r3, #24]
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <UpdateThI+0x9c>)
 8001e62:	8b1b      	ldrh	r3, [r3, #24]
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	491e      	ldr	r1, [pc, #120]	; (8001ee4 <UpdateThI+0x9c>)
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	830b      	strh	r3, [r1, #24]
		PT_dptr->NPKI += *PEAKI >> 3;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <UpdateThI+0x9c>)
 8001e72:	8b1a      	ldrh	r2, [r3, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4919      	ldr	r1, [pc, #100]	; (8001ee4 <UpdateThI+0x9c>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	830b      	strh	r3, [r1, #24]
 8001e84:	e013      	b.n	8001eae <UpdateThI+0x66>
	}
	else {
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <UpdateThI+0x9c>)
 8001e88:	8ada      	ldrh	r2, [r3, #22]
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <UpdateThI+0x9c>)
 8001e8c:	8adb      	ldrh	r3, [r3, #22]
 8001e8e:	08db      	lsrs	r3, r3, #3
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4914      	ldr	r1, [pc, #80]	; (8001ee4 <UpdateThI+0x9c>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	82cb      	strh	r3, [r1, #22]
		PT_dptr->SPKI += *PEAKI >> 3;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <UpdateThI+0x9c>)
 8001e9c:	8ada      	ldrh	r2, [r3, #22]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	08db      	lsrs	r3, r3, #3
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	490f      	ldr	r1, [pc, #60]	; (8001ee4 <UpdateThI+0x9c>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	82cb      	strh	r3, [r1, #22]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <UpdateThI+0x9c>)
 8001eb0:	8b1a      	ldrh	r2, [r3, #24]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <UpdateThI+0x9c>)
 8001eb4:	8adb      	ldrh	r3, [r3, #22]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <UpdateThI+0x9c>)
 8001eba:	8b1b      	ldrh	r3, [r3, #24]
 8001ebc:	1acb      	subs	r3, r1, r3
 8001ebe:	109b      	asrs	r3, r3, #2
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <UpdateThI+0x9c>)
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	828b      	strh	r3, [r1, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <UpdateThI+0x9c>)
 8001ecc:	8a9b      	ldrh	r3, [r3, #20]
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <UpdateThI+0x9c>)
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8353      	strh	r3, [r2, #26]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000380 	.word	0x20000380

08001ee8 <UpdateThF>:
Description: This function recursively updates the adaptive noise and signal thresholds in 
the BP signal. Implements Eq 17-21.

**********************************************************************************/
void UpdateThF(int16_t *PEAKF, int8_t NOISE_F)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01e      	beq.n	8001f3a <UpdateThF+0x52>
		PT_dptr->NPKF -= PT_dptr->NPKF >> 3;
 8001efc:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <UpdateThF+0xd0>)
 8001efe:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <UpdateThF+0xd0>)
 8001f06:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f0a:	10db      	asrs	r3, r3, #3
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <UpdateThF+0xd0>)
 8001f16:	b212      	sxth	r2, r2
 8001f18:	841a      	strh	r2, [r3, #32]
		PT_dptr->NPKF += *PEAKF >> 3;
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <UpdateThF+0xd0>)
 8001f1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f28:	10db      	asrs	r3, r3, #3
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <UpdateThF+0xd0>)
 8001f34:	b212      	sxth	r2, r2
 8001f36:	841a      	strh	r2, [r3, #32]
 8001f38:	e01d      	b.n	8001f76 <UpdateThF+0x8e>
	}
	else {
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <UpdateThF+0xd0>)
 8001f3c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <UpdateThF+0xd0>)
 8001f44:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f48:	10db      	asrs	r3, r3, #3
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <UpdateThF+0xd0>)
 8001f54:	b212      	sxth	r2, r2
 8001f56:	83da      	strh	r2, [r3, #30]
		PT_dptr->SPKF += *PEAKF >> 3;
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <UpdateThF+0xd0>)
 8001f5a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	10db      	asrs	r3, r3, #3
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <UpdateThF+0xd0>)
 8001f72:	b212      	sxth	r2, r2
 8001f74:	83da      	strh	r2, [r3, #30]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <UpdateThF+0xd0>)
 8001f78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <UpdateThF+0xd0>)
 8001f80:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f84:	4619      	mov	r1, r3
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <UpdateThF+0xd0>)
 8001f88:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f8c:	1acb      	subs	r3, r1, r3
 8001f8e:	109b      	asrs	r3, r3, #2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <UpdateThF+0xd0>)
 8001f98:	b212      	sxth	r2, r2
 8001f9a:	839a      	strh	r2, [r3, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <UpdateThF+0xd0>)
 8001f9e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <UpdateThF+0xd0>)
 8001fa4:	105b      	asrs	r3, r3, #1
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	8453      	strh	r3, [r2, #34]	; 0x22
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000380 	.word	0x20000380

08001fbc <PT_get_LPFilter_output>:
}



// ------Returns LP filter value ------ //
int16_t PT_get_LPFilter_output(void) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
	return (PT_dptr->LPF_val);
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <PT_get_LPFilter_output+0x14>)
 8001fc2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	20000380 	.word	0x20000380

08001fd4 <PT_get_HPFilter_output>:

// ------Returns HP filter value ------ //
int16_t PT_get_HPFilter_output(void) {
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
	return (PT_dptr->HPF_val);
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <PT_get_HPFilter_output+0x14>)
 8001fda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	20000380 	.word	0x20000380

08001fec <PT_get_DRFilter_output>:

// ------Returns Dr filter value ------ //
int16_t PT_get_DRFilter_output(void) {
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	return (PT_dptr->DRF_val);
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <PT_get_DRFilter_output+0x14>)
 8001ff2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000380 	.word	0x20000380

08002004 <PT_get_MVFilter_output>:

// ------Returns MVA filter value ------ //
uint16_t PT_get_MVFilter_output(void) {
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	return (PT_dptr->MVA_val);
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <PT_get_MVFilter_output+0x14>)
 800200a:	8a5b      	ldrh	r3, [r3, #18]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000380 	.word	0x20000380

0800201c <PT_get_SQRFilter_output>:

// ------Returns SQR filter value ------ //
uint16_t PT_get_SQRFilter_output(void) {
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	return (PT_dptr->SQF_val);
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <PT_get_SQRFilter_output+0x14>)
 8002022:	8a1b      	ldrh	r3, [r3, #16]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000380 	.word	0x20000380

08002034 <PT_get_ThI1_output>:
	return (60 / (PT_dptr->RR_M / Fs));
}


// ------Returns the main threshold integrated signal Th value ------ //
uint16_t PT_get_ThI1_output(void) {
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
	return (PT_dptr->ThI1);
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <PT_get_ThI1_output+0x14>)
 800203a:	8a9b      	ldrh	r3, [r3, #20]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000380 	.word	0x20000380

0800204c <PT_get_ThF1_output>:

// ------Returns the main threshold BP signal Th value ------ //
int16_t PT_get_ThF1_output(void) {
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	return (PT_dptr->ThF1);
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <PT_get_ThF1_output+0x14>)
 8002052:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	20000380 	.word	0x20000380

08002064 <putOnMovingAverageBuffer>:
int movingAverageBufferIndex = 0;
float32_t movingAverageBuffer[MovingAverageSampleCount];
float32_t meanValue;

void putOnMovingAverageBuffer (float32_t sample)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	ed87 0a01 	vstr	s0, [r7, #4]
	movingAverageBuffer[movingAverageBufferIndex] = sample;
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <putOnMovingAverageBuffer+0x40>)
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	601a      	str	r2, [r3, #0]
	movingAverageBufferIndex++;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002084:	6013      	str	r3, [r2, #0]
	if (movingAverageBufferIndex==MovingAverageSampleCount)
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b36      	cmp	r3, #54	; 0x36
 800208c:	d102      	bne.n	8002094 <putOnMovingAverageBuffer+0x30>
	{
		movingAverageBufferIndex = 0;
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <putOnMovingAverageBuffer+0x3c>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
	}
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	20000518 	.word	0x20000518
 80020a4:	2000051c 	.word	0x2000051c

080020a8 <arm_PT_init>:

void arm_PT_init()
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af02      	add	r7, sp, #8
	//Initiate filter function
	arm_fir_init_f32(&Derivative, NUM_DERIVATIVE_TAPS, (float32_t *)&firDerivativeCoefficients[0], &firStateF32[0], BLOCK_SIZE);
 80020ae:	2301      	movs	r3, #1
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <arm_PT_init+0x80>)
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <arm_PT_init+0x84>)
 80020b6:	2105      	movs	r1, #5
 80020b8:	481d      	ldr	r0, [pc, #116]	; (8002130 <arm_PT_init+0x88>)
 80020ba:	f7fe ff21 	bl	8000f00 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init_f32 (&highPassFilter,1, (float32_t *)&iirHighPassFilterCoefficients[0], &highPassFilterStateF32[0]);
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <arm_PT_init+0x8c>)
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <arm_PT_init+0x90>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	481d      	ldr	r0, [pc, #116]	; (800213c <arm_PT_init+0x94>)
 80020c6:	f7fe fe8f 	bl	8000de8 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32 (&lowPassFilter,1, (float32_t *)&iirLowPassFilterCoefficients[0], &lowPassFilterStateF32[0]);
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <arm_PT_init+0x98>)
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <arm_PT_init+0x9c>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	481d      	ldr	r0, [pc, #116]	; (8002148 <arm_PT_init+0xa0>)
 80020d2:	f7fe fe89 	bl	8000de8 <arm_biquad_cascade_df1_init_f32>
	//Reset buffors
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	e009      	b.n	80020f0 <arm_PT_init+0x48>
	{
		derivativeBuffer[i]=0;
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <arm_PT_init+0xa4>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<NUM_DERIVATIVE_TAPS_ARRAY_SIZE; i++)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3301      	adds	r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	ddf2      	ble.n	80020dc <arm_PT_init+0x34>
	}
	movingAverageBufferIndex=0;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <arm_PT_init+0xa8>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<MovingAverageSampleCount; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	e009      	b.n	8002116 <arm_PT_init+0x6e>
	{
		movingAverageBuffer[i] = 0;
 8002102:	4a14      	ldr	r2, [pc, #80]	; (8002154 <arm_PT_init+0xac>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<MovingAverageSampleCount; i++)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b35      	cmp	r3, #53	; 0x35
 800211a:	ddf2      	ble.n	8002102 <arm_PT_init+0x5a>
	}
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200004a0 	.word	0x200004a0
 800212c:	08011834 	.word	0x08011834
 8002130:	200004b4 	.word	0x200004b4
 8002134:	200004d4 	.word	0x200004d4
 8002138:	08011848 	.word	0x08011848
 800213c:	200004e4 	.word	0x200004e4
 8002140:	200004f4 	.word	0x200004f4
 8002144:	0801185c 	.word	0x0801185c
 8002148:	20000504 	.word	0x20000504
 800214c:	200004c0 	.word	0x200004c0
 8002150:	20000518 	.word	0x20000518
 8002154:	2000051c 	.word	0x2000051c

08002158 <arm_PT_ST>:



int16_t arm_PT_ST(int16_t sample)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
	float32_t newSample = (float)sample;
 8002162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216e:	edc7 7a03 	vstr	s15, [r7, #12]
	//low pass filter operation
	arm_biquad_cascade_df1_f32 (&lowPassFilter, &newSample,&lowPassFilterResult,1);
 8002172:	f107 010c 	add.w	r1, r7, #12
 8002176:	2301      	movs	r3, #1
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <arm_PT_ST+0x78>)
 800217a:	4816      	ldr	r0, [pc, #88]	; (80021d4 <arm_PT_ST+0x7c>)
 800217c:	f7fe fd92 	bl	8000ca4 <arm_biquad_cascade_df1_f32>
	//high pass filter operation
	arm_biquad_cascade_df1_f32 (&highPassFilter, &lowPassFilterResult,&highPassFilterResult,1);
 8002180:	2301      	movs	r3, #1
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <arm_PT_ST+0x80>)
 8002184:	4912      	ldr	r1, [pc, #72]	; (80021d0 <arm_PT_ST+0x78>)
 8002186:	4815      	ldr	r0, [pc, #84]	; (80021dc <arm_PT_ST+0x84>)
 8002188:	f7fe fd8c 	bl	8000ca4 <arm_biquad_cascade_df1_f32>
	//Derivative with FIR filter
	//putOnMovingAverageBuffer(lowPassFilterResult);
	arm_fir_f32 (&Derivative,&lowPassFilterResult,&derivativeOutput[0],BLOCK_SIZE);
 800218c:	2301      	movs	r3, #1
 800218e:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <arm_PT_ST+0x88>)
 8002190:	490f      	ldr	r1, [pc, #60]	; (80021d0 <arm_PT_ST+0x78>)
 8002192:	4814      	ldr	r0, [pc, #80]	; (80021e4 <arm_PT_ST+0x8c>)
 8002194:	f7fe fe44 	bl	8000e20 <arm_fir_f32>
	//Square the value
	squaredValue = derivativeOutput[0] * derivativeOutput[0];
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <arm_PT_ST+0x88>)
 800219a:	ed93 7a00 	vldr	s14, [r3]
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <arm_PT_ST+0x88>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <arm_PT_ST+0x90>)
 80021aa:	edc3 7a00 	vstr	s15, [r3]
	//Compute moving average
	putOnMovingAverageBuffer(squaredValue);
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <arm_PT_ST+0x90>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eeb0 0a67 	vmov.f32	s0, s15
 80021b8:	f7ff ff54 	bl	8002064 <putOnMovingAverageBuffer>
	arm_mean_f32 (&movingAverageBuffer[0], MovingAverageSampleCount, &meanValue);
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <arm_PT_ST+0x94>)
 80021be:	2136      	movs	r1, #54	; 0x36
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <arm_PT_ST+0x98>)
 80021c2:	f7fe febc 	bl	8000f3e <arm_mean_f32>

	//TODO: Implement QRS detection
	return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000510 	.word	0x20000510
 80021d4:	20000504 	.word	0x20000504
 80021d8:	200004f0 	.word	0x200004f0
 80021dc:	200004e4 	.word	0x200004e4
 80021e0:	200004d4 	.word	0x200004d4
 80021e4:	200004b4 	.word	0x200004b4
 80021e8:	20000514 	.word	0x20000514
 80021ec:	200005f4 	.word	0x200005f4
 80021f0:	2000051c 	.word	0x2000051c

080021f4 <arm_get_LPFilter_output>:

float32_t arm_get_LPFilter_output()
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

	return lowPassFilterResult;
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <arm_get_LPFilter_output+0x18>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	ee07 3a90 	vmov	s15, r3
}
 8002200:	eeb0 0a67 	vmov.f32	s0, s15
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000510 	.word	0x20000510

08002210 <arm_get_HPFilter_output>:

float32_t arm_get_HPFilter_output()
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

	return highPassFilterResult;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <arm_get_HPFilter_output+0x18>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	ee07 3a90 	vmov	s15, r3
}
 800221c:	eeb0 0a67 	vmov.f32	s0, s15
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	200004f0 	.word	0x200004f0

0800222c <arm_get_DRFilter_output>:

float32_t arm_get_DRFilter_output()
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

	return derivativeOutput[0];
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <arm_get_DRFilter_output+0x18>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	ee07 3a90 	vmov	s15, r3
}
 8002238:	eeb0 0a67 	vmov.f32	s0, s15
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	200004d4 	.word	0x200004d4

08002248 <arm_get_SQRFilter_output>:

float32_t arm_get_SQRFilter_output()
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

	return squaredValue;
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <arm_get_SQRFilter_output+0x18>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	ee07 3a90 	vmov	s15, r3
}
 8002254:	eeb0 0a67 	vmov.f32	s0, s15
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	20000514 	.word	0x20000514

08002264 <arm_get_MVFilter_output>:

float32_t arm_get_MVFilter_output()
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	return meanValue;
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <arm_get_MVFilter_output+0x18>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	ee07 3a90 	vmov	s15, r3
}
 8002270:	eeb0 0a67 	vmov.f32	s0, s15
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	200005f4 	.word	0x200005f4

08002280 <arm_get_ThI1_output>:

float32_t arm_get_ThI1_output()
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

	return 0;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	ee07 3a90 	vmov	s15, r3
}
 800228c:	eeb0 0a67 	vmov.f32	s0, s15
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <arm_get_ThF1_output>:

float32_t arm_get_ThF1_output()
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

	return 0;
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	ee07 3a90 	vmov	s15, r3
}
 80022a4:	eeb0 0a67 	vmov.f32	s0, s15
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <Rafael_init>:
	// qrs tells whether there was a detection or not.
	// regular tells whether the heart pace is regular or not.
	// prevRegular tells whether the heart beat was regular before the newest RR-interval was calculated.
	bool qrs, regular = true, prevRegular;
void Rafael_init()
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0


	// Initializing the RR averages
	for (i = 0; i < 8; i++)
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <Rafael_init+0xac>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e010      	b.n	80022de <Rafael_init+0x2e>
    {
        rr1[i] = 0;
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <Rafael_init+0xac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a27      	ldr	r2, [pc, #156]	; (8002360 <Rafael_init+0xb0>)
 80022c2:	2100      	movs	r1, #0
 80022c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        rr2[i] = 0;
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <Rafael_init+0xac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <Rafael_init+0xb4>)
 80022ce:	2100      	movs	r1, #0
 80022d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 8; i++)
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <Rafael_init+0xac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a20      	ldr	r2, [pc, #128]	; (800235c <Rafael_init+0xac>)
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <Rafael_init+0xac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b07      	cmp	r3, #7
 80022e4:	d9ea      	bls.n	80022bc <Rafael_init+0xc>
    }
	 rrlow = 0;
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <Rafael_init+0xb8>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
	 rrhigh = 0;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <Rafael_init+0xbc>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
	 rrmiss = 0;
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <Rafael_init+0xc0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
	 regular = true;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <Rafael_init+0xc4>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
	 sample = 0;
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <Rafael_init+0xc8>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
	 lastQRS = 0;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <Rafael_init+0xcc>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
	 lastSlope = 0;
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <Rafael_init+0xd0>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
	 currentSlope = 0;
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <Rafael_init+0xd4>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
	 peak_i = 0;
 8002316:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <Rafael_init+0xd8>)
 8002318:	2200      	movs	r2, #0
 800231a:	801a      	strh	r2, [r3, #0]
	 peak_f = 0;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <Rafael_init+0xdc>)
 800231e:	2200      	movs	r2, #0
 8002320:	801a      	strh	r2, [r3, #0]
	 threshold_i1 = 0;
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <Rafael_init+0xe0>)
 8002324:	2200      	movs	r2, #0
 8002326:	801a      	strh	r2, [r3, #0]
	 threshold_i2 = 0;
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <Rafael_init+0xe4>)
 800232a:	2200      	movs	r2, #0
 800232c:	801a      	strh	r2, [r3, #0]
	 threshold_f1 = 0;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <Rafael_init+0xe8>)
 8002330:	2200      	movs	r2, #0
 8002332:	801a      	strh	r2, [r3, #0]
	 threshold_f2 = 0;
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <Rafael_init+0xec>)
 8002336:	2200      	movs	r2, #0
 8002338:	801a      	strh	r2, [r3, #0]
	 spk_i = 0;
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <Rafael_init+0xf0>)
 800233c:	2200      	movs	r2, #0
 800233e:	801a      	strh	r2, [r3, #0]
	 spk_f = 0;
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <Rafael_init+0xf4>)
 8002342:	2200      	movs	r2, #0
 8002344:	801a      	strh	r2, [r3, #0]
	 npk_i = 0;
 8002346:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <Rafael_init+0xf8>)
 8002348:	2200      	movs	r2, #0
 800234a:	801a      	strh	r2, [r3, #0]
	 npk_f = 0;
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <Rafael_init+0xfc>)
 800234e:	2200      	movs	r2, #0
 8002350:	801a      	strh	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	20002bcc 	.word	0x20002bcc
 8002360:	20002b78 	.word	0x20002b78
 8002364:	20002b98 	.word	0x20002b98
 8002368:	20002bc0 	.word	0x20002bc0
 800236c:	20002bc4 	.word	0x20002bc4
 8002370:	20002bc8 	.word	0x20002bc8
 8002374:	20000004 	.word	0x20000004
 8002378:	20002bd4 	.word	0x20002bd4
 800237c:	20002bd8 	.word	0x20002bd8
 8002380:	20002bdc 	.word	0x20002bdc
 8002384:	20002be0 	.word	0x20002be0
 8002388:	20002be8 	.word	0x20002be8
 800238c:	20002bea 	.word	0x20002bea
 8002390:	20002bec 	.word	0x20002bec
 8002394:	20002bee 	.word	0x20002bee
 8002398:	20002bf0 	.word	0x20002bf0
 800239c:	20002bf2 	.word	0x20002bf2
 80023a0:	20002bf4 	.word	0x20002bf4
 80023a4:	20002bf6 	.word	0x20002bf6
 80023a8:	20002bf8 	.word	0x20002bf8
 80023ac:	20002bfa 	.word	0x20002bfa

080023b0 <Rafael_PanTompkins>:
    and updates the thresholds and averages until there are no more samples. More details both above and in
    shorter comments below.
*/
//UPDATe: I changed the way that it operates, now works like hooman650's implementation
int16_t Rafael_PanTompkins(dataType input)
{
 80023b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	80fb      	strh	r3, [r7, #6]

		int16_t result = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	81fb      	strh	r3, [r7, #14]
        // Test if the buffers are full.
        // If they are, shift them, discarding the oldest sample and adding the new one at the end.
        // Else, just put the newest sample in the next free position.
        // Update 'current' so that the program knows where's the newest sample.
		if (sample >= BUFFSIZE)
 80023c0:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <Rafael_PanTompkins+0x190>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80023c8:	d36b      	bcc.n	80024a2 <Rafael_PanTompkins+0xf2>
		{
			for (i = 0; i < BUFFSIZE - 1; i++)
 80023ca:	4b5e      	ldr	r3, [pc, #376]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e05c      	b.n	800248c <Rafael_PanTompkins+0xdc>
			{
				RF_signal[i] =RF_signal[i+1];
 80023d2:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	4b5a      	ldr	r3, [pc, #360]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	495a      	ldr	r1, [pc, #360]	; (8002548 <Rafael_PanTompkins+0x198>)
 80023de:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80023e2:	4a59      	ldr	r2, [pc, #356]	; (8002548 <Rafael_PanTompkins+0x198>)
 80023e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_dcblock[i] = RF_dcblock[i+1];
 80023e8:	4b56      	ldr	r3, [pc, #344]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	4b55      	ldr	r3, [pc, #340]	; (8002544 <Rafael_PanTompkins+0x194>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4956      	ldr	r1, [pc, #344]	; (800254c <Rafael_PanTompkins+0x19c>)
 80023f4:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <Rafael_PanTompkins+0x19c>)
 80023fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_lowpass[i] = RF_lowpass[i+1];
 80023fe:	4b51      	ldr	r3, [pc, #324]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4951      	ldr	r1, [pc, #324]	; (8002550 <Rafael_PanTompkins+0x1a0>)
 800240a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800240e:	4a50      	ldr	r2, [pc, #320]	; (8002550 <Rafael_PanTompkins+0x1a0>)
 8002410:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_highpass[i] = RF_highpass[i+1];
 8002414:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <Rafael_PanTompkins+0x194>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	494d      	ldr	r1, [pc, #308]	; (8002554 <Rafael_PanTompkins+0x1a4>)
 8002420:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002424:	4a4b      	ldr	r2, [pc, #300]	; (8002554 <Rafael_PanTompkins+0x1a4>)
 8002426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_derivative[i] = RF_derivative[i+1];
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <Rafael_PanTompkins+0x194>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4948      	ldr	r1, [pc, #288]	; (8002558 <Rafael_PanTompkins+0x1a8>)
 8002436:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800243a:	4a47      	ldr	r2, [pc, #284]	; (8002558 <Rafael_PanTompkins+0x1a8>)
 800243c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_squared[i] = RF_squared[i+1];
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4944      	ldr	r1, [pc, #272]	; (800255c <Rafael_PanTompkins+0x1ac>)
 800244c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002450:	4a42      	ldr	r2, [pc, #264]	; (800255c <Rafael_PanTompkins+0x1ac>)
 8002452:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_integral[i] = RF_integral[i+1];
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	4b39      	ldr	r3, [pc, #228]	; (8002544 <Rafael_PanTompkins+0x194>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	493f      	ldr	r1, [pc, #252]	; (8002560 <Rafael_PanTompkins+0x1b0>)
 8002462:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002466:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <Rafael_PanTompkins+0x1b0>)
 8002468:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_outputSignal[i] = RF_outputSignal[i+1];
 800246c:	4b35      	ldr	r3, [pc, #212]	; (8002544 <Rafael_PanTompkins+0x194>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	4b34      	ldr	r3, [pc, #208]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	493b      	ldr	r1, [pc, #236]	; (8002564 <Rafael_PanTompkins+0x1b4>)
 8002478:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800247c:	4a39      	ldr	r2, [pc, #228]	; (8002564 <Rafael_PanTompkins+0x1b4>)
 800247e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i = 0; i < BUFFSIZE - 1; i++)
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <Rafael_PanTompkins+0x194>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a2e      	ldr	r2, [pc, #184]	; (8002544 <Rafael_PanTompkins+0x194>)
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <Rafael_PanTompkins+0x194>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f240 2256 	movw	r2, #598	; 0x256
 8002494:	4293      	cmp	r3, r2
 8002496:	d99c      	bls.n	80023d2 <Rafael_PanTompkins+0x22>
			}
			current = BUFFSIZE - 1;
 8002498:	4b33      	ldr	r3, [pc, #204]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 800249a:	f240 2257 	movw	r2, #599	; 0x257
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e004      	b.n	80024ac <Rafael_PanTompkins+0xfc>
		}
		else
		{
			current = sample;
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <Rafael_PanTompkins+0x190>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024aa:	601a      	str	r2, [r3, #0]
		}
		RF_signal[current] = input;
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4925      	ldr	r1, [pc, #148]	; (8002548 <Rafael_PanTompkins+0x198>)
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		// If no sample was read, stop processing!
		//if (signal[current] == NOSAMPLE)
		//	break;
		sample++; // Update sample counter
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <Rafael_PanTompkins+0x190>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <Rafael_PanTompkins+0x190>)
 80024c0:	6013      	str	r3, [r2, #0]

		// DC Block filter
		// This was not proposed on the original paper.
		// It is not necessary and can be removed if your sensor or database has no DC noise.
		if (current >= 1)
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	dd50      	ble.n	800256c <Rafael_PanTompkins+0x1bc>
			RF_dcblock[current] = RF_signal[current] - RF_signal[current-1] + 0.995*RF_dcblock[current-1];
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <Rafael_PanTompkins+0x198>)
 80024d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3b01      	subs	r3, #1
 80024dc:	4a1a      	ldr	r2, [pc, #104]	; (8002548 <Rafael_PanTompkins+0x198>)
 80024de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024e2:	1acb      	subs	r3, r1, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd fff5 	bl	80004d4 <__aeabi_i2d>
 80024ea:	4604      	mov	r4, r0
 80024ec:	460d      	mov	r5, r1
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	4a15      	ldr	r2, [pc, #84]	; (800254c <Rafael_PanTompkins+0x19c>)
 80024f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fd ffea 	bl	80004d4 <__aeabi_i2d>
 8002500:	a30d      	add	r3, pc, #52	; (adr r3, 8002538 <Rafael_PanTompkins+0x188>)
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	f7fe f84f 	bl	80005a8 <__aeabi_dmul>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4620      	mov	r0, r4
 8002510:	4629      	mov	r1, r5
 8002512:	f7fd fe93 	bl	800023c <__adddf3>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4913      	ldr	r1, [pc, #76]	; (8002568 <Rafael_PanTompkins+0x1b8>)
 800251c:	680c      	ldr	r4, [r1, #0]
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe faf1 	bl	8000b08 <__aeabi_d2iz>
 8002526:	4603      	mov	r3, r0
 8002528:	b21a      	sxth	r2, r3
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <Rafael_PanTompkins+0x19c>)
 800252c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8002530:	e022      	b.n	8002578 <Rafael_PanTompkins+0x1c8>
 8002532:	bf00      	nop
 8002534:	f3af 8000 	nop.w
 8002538:	3d70a3d7 	.word	0x3d70a3d7
 800253c:	3fefd70a 	.word	0x3fefd70a
 8002540:	20002bd4 	.word	0x20002bd4
 8002544:	20002bcc 	.word	0x20002bcc
 8002548:	200005f8 	.word	0x200005f8
 800254c:	20000aa8 	.word	0x20000aa8
 8002550:	20000f58 	.word	0x20000f58
 8002554:	20001408 	.word	0x20001408
 8002558:	200018b8 	.word	0x200018b8
 800255c:	20001d68 	.word	0x20001d68
 8002560:	20002218 	.word	0x20002218
 8002564:	200026c8 	.word	0x200026c8
 8002568:	20002be4 	.word	0x20002be4
		else
			RF_dcblock[current] = 0;
 800256c:	4b8a      	ldr	r3, [pc, #552]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a8a      	ldr	r2, [pc, #552]	; (800279c <Rafael_PanTompkins+0x3ec>)
 8002572:	2100      	movs	r1, #0
 8002574:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Low Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 2y(nT - T) - y(nT - 2T) + x(nT) - 2x(nT - 6T) + x(nT - 12T)
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_lowpass[current] = RF_dcblock[current];
 8002578:	4b87      	ldr	r3, [pc, #540]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b86      	ldr	r3, [pc, #536]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4986      	ldr	r1, [pc, #536]	; (800279c <Rafael_PanTompkins+0x3ec>)
 8002582:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002586:	4a86      	ldr	r2, [pc, #536]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 800258c:	4b82      	ldr	r3, [pc, #520]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	dd16      	ble.n	80025c2 <Rafael_PanTompkins+0x212>
			RF_lowpass[current] += 2*RF_lowpass[current-1];
 8002594:	4b80      	ldr	r3, [pc, #512]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a81      	ldr	r2, [pc, #516]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 800259a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b7d      	ldr	r3, [pc, #500]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	497e      	ldr	r1, [pc, #504]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025a8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b211      	sxth	r1, r2
 80025bc:	4a78      	ldr	r2, [pc, #480]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 2)
 80025c2:	4b75      	ldr	r3, [pc, #468]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	dd14      	ble.n	80025f4 <Rafael_PanTompkins+0x244>
			RF_lowpass[current] -= RF_lowpass[current-2];
 80025ca:	4b73      	ldr	r3, [pc, #460]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a74      	ldr	r2, [pc, #464]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b70      	ldr	r3, [pc, #448]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3b02      	subs	r3, #2
 80025dc:	4970      	ldr	r1, [pc, #448]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025de:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b211      	sxth	r1, r2
 80025ee:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80025f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 6)
 80025f4:	4b68      	ldr	r3, [pc, #416]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	dd16      	ble.n	800262a <Rafael_PanTompkins+0x27a>
			RF_lowpass[current] -= 2*RF_dcblock[current-6];
 80025fc:	4b66      	ldr	r3, [pc, #408]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a67      	ldr	r2, [pc, #412]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002602:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b63      	ldr	r3, [pc, #396]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3b06      	subs	r3, #6
 800260e:	4963      	ldr	r1, [pc, #396]	; (800279c <Rafael_PanTompkins+0x3ec>)
 8002610:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002614:	b29b      	uxth	r3, r3
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	b29b      	uxth	r3, r3
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b211      	sxth	r1, r2
 8002624:	4a5e      	ldr	r2, [pc, #376]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 12)
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b0b      	cmp	r3, #11
 8002630:	dd14      	ble.n	800265c <Rafael_PanTompkins+0x2ac>
			RF_lowpass[current] += RF_dcblock[current-12];
 8002632:	4b59      	ldr	r3, [pc, #356]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a5a      	ldr	r2, [pc, #360]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002638:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b56      	ldr	r3, [pc, #344]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3b0c      	subs	r3, #12
 8002644:	4955      	ldr	r1, [pc, #340]	; (800279c <Rafael_PanTompkins+0x3ec>)
 8002646:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4413      	add	r3, r2
 800264e:	b29a      	uxth	r2, r3
 8002650:	4b51      	ldr	r3, [pc, #324]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b211      	sxth	r1, r2
 8002656:	4a52      	ldr	r2, [pc, #328]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002658:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// High Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 32x(nT - 16T) - [y(nT - T) + x(nT) - x(nT - 32T)]
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_highpass[current] = -RF_lowpass[current];
 800265c:	4b4e      	ldr	r3, [pc, #312]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 8002662:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002666:	b29b      	uxth	r3, r3
 8002668:	425b      	negs	r3, r3
 800266a:	b29a      	uxth	r2, r3
 800266c:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b211      	sxth	r1, r2
 8002672:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 8002674:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 8002678:	4b47      	ldr	r3, [pc, #284]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	dd14      	ble.n	80026aa <Rafael_PanTompkins+0x2fa>
			RF_highpass[current] -= RF_highpass[current-1];
 8002680:	4b45      	ldr	r3, [pc, #276]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a47      	ldr	r2, [pc, #284]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 8002686:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b42      	ldr	r3, [pc, #264]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3b01      	subs	r3, #1
 8002692:	4944      	ldr	r1, [pc, #272]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 8002694:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002698:	b29b      	uxth	r3, r3
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b211      	sxth	r1, r2
 80026a4:	4a3f      	ldr	r2, [pc, #252]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 80026a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 16)
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	dd16      	ble.n	80026e0 <Rafael_PanTompkins+0x330>
			RF_highpass[current] += 32*RF_lowpass[current-16];
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 80026b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3b10      	subs	r3, #16
 80026c4:	4936      	ldr	r1, [pc, #216]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80026c6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	015b      	lsls	r3, r3, #5
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b211      	sxth	r1, r2
 80026da:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 80026dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 32)
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b1f      	cmp	r3, #31
 80026e6:	dd14      	ble.n	8002712 <Rafael_PanTompkins+0x362>
			RF_highpass[current] += RF_lowpass[current-32];
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 80026ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3b20      	subs	r3, #32
 80026fa:	4929      	ldr	r1, [pc, #164]	; (80027a0 <Rafael_PanTompkins+0x3f0>)
 80026fc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4413      	add	r3, r2
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b211      	sxth	r1, r2
 800270c:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 800270e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Derivative filter
		// This is an alternative implementation, the central difference method.
		// f'(a) = [f(a+h) - f(a-h)]/2h
		// The original formula used by Pan-Tompkins was:
		// y(nT) = (1/8T)[-x(nT - 2T) - 2x(nT - T) + 2x(nT + T) + x(nT + 2T)]
		RF_derivative[current] = RF_highpass[current];
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4922      	ldr	r1, [pc, #136]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 800271c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002720:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 8002722:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current > 0)
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	dd14      	ble.n	8002758 <Rafael_PanTompkins+0x3a8>
			RF_derivative[current] -= RF_highpass[current-1];
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 8002734:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3b01      	subs	r3, #1
 8002740:	4918      	ldr	r1, [pc, #96]	; (80027a4 <Rafael_PanTompkins+0x3f4>)
 8002742:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002746:	b29b      	uxth	r3, r3
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b211      	sxth	r1, r2
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 8002754:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// This just squares the derivative, to get rid of negative values and emphasize high frequencies.
		// y(nT) = [x(nT)]^2.
		RF_squared[current] = RF_derivative[current]*RF_derivative[current];
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 800275e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	490f      	ldr	r1, [pc, #60]	; (80027a8 <Rafael_PanTompkins+0x3f8>)
 800276a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800276e:	b29b      	uxth	r3, r3
 8002770:	fb12 f303 	smulbb	r3, r2, r3
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b211      	sxth	r1, r2
 800277c:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <Rafael_PanTompkins+0x3fc>)
 800277e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Moving-Window Integration
		// Implemented as proposed by the original paper.
		// y(nT) = (1/N)[x(nT - (N - 1)T) + x(nT - (N - 2)T) + ... x(nT)]
		// WINDOWSIZE, in samples, must be defined so that the window is ~150ms.

		RF_integral[current] = 0;
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <Rafael_PanTompkins+0x3e8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <Rafael_PanTompkins+0x400>)
 8002788:	2100      	movs	r1, #0
 800278a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <Rafael_PanTompkins+0x404>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e035      	b.n	8002802 <Rafael_PanTompkins+0x452>
 8002796:	bf00      	nop
 8002798:	20002be4 	.word	0x20002be4
 800279c:	20000aa8 	.word	0x20000aa8
 80027a0:	20000f58 	.word	0x20000f58
 80027a4:	20001408 	.word	0x20001408
 80027a8:	200018b8 	.word	0x200018b8
 80027ac:	20001d68 	.word	0x20001d68
 80027b0:	20002218 	.word	0x20002218
 80027b4:	20002bcc 	.word	0x20002bcc
		{
			if (current >= (dataType)i)
 80027b8:	4b5e      	ldr	r3, [pc, #376]	; (8002934 <Rafael_PanTompkins+0x584>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	4b5d      	ldr	r3, [pc, #372]	; (8002938 <Rafael_PanTompkins+0x588>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dc21      	bgt.n	800280c <Rafael_PanTompkins+0x45c>
				RF_integral[current] += RF_squared[current - i];
 80027c8:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <Rafael_PanTompkins+0x588>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5b      	ldr	r2, [pc, #364]	; (800293c <Rafael_PanTompkins+0x58c>)
 80027ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <Rafael_PanTompkins+0x588>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	4b56      	ldr	r3, [pc, #344]	; (8002934 <Rafael_PanTompkins+0x584>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	1acb      	subs	r3, r1, r3
 80027e0:	4957      	ldr	r1, [pc, #348]	; (8002940 <Rafael_PanTompkins+0x590>)
 80027e2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	4b52      	ldr	r3, [pc, #328]	; (8002938 <Rafael_PanTompkins+0x588>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b211      	sxth	r1, r2
 80027f2:	4a52      	ldr	r2, [pc, #328]	; (800293c <Rafael_PanTompkins+0x58c>)
 80027f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 80027f8:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <Rafael_PanTompkins+0x584>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a4d      	ldr	r2, [pc, #308]	; (8002934 <Rafael_PanTompkins+0x584>)
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <Rafael_PanTompkins+0x584>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b13      	cmp	r3, #19
 8002808:	d9d6      	bls.n	80027b8 <Rafael_PanTompkins+0x408>
 800280a:	e000      	b.n	800280e <Rafael_PanTompkins+0x45e>
			else
				break;
 800280c:	bf00      	nop
		}
		RF_integral[current] /= (dataType)i;
 800280e:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a4a      	ldr	r2, [pc, #296]	; (800293c <Rafael_PanTompkins+0x58c>)
 8002814:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002818:	461a      	mov	r2, r3
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <Rafael_PanTompkins+0x584>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b21b      	sxth	r3, r3
 8002820:	fb92 f2f3 	sdiv	r2, r2, r3
 8002824:	4b44      	ldr	r3, [pc, #272]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b211      	sxth	r1, r2
 800282a:	4a44      	ldr	r2, [pc, #272]	; (800293c <Rafael_PanTompkins+0x58c>)
 800282c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		qrs = false;
 8002830:	4b44      	ldr	r3, [pc, #272]	; (8002944 <Rafael_PanTompkins+0x594>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]

		// If the current signal is above one of the thresholds (integral or filtered signal), it's a peak candidate.
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 8002836:	4b40      	ldr	r3, [pc, #256]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a40      	ldr	r2, [pc, #256]	; (800293c <Rafael_PanTompkins+0x58c>)
 800283c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <Rafael_PanTompkins+0x598>)
 8002842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002846:	429a      	cmp	r2, r3
 8002848:	da09      	bge.n	800285e <Rafael_PanTompkins+0x4ae>
 800284a:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <Rafael_PanTompkins+0x588>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3f      	ldr	r2, [pc, #252]	; (800294c <Rafael_PanTompkins+0x59c>)
 8002850:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002854:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <Rafael_PanTompkins+0x5a0>)
 8002856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285a:	429a      	cmp	r2, r3
 800285c:	db0d      	blt.n	800287a <Rafael_PanTompkins+0x4ca>
        {
            peak_i = RF_integral[current];
 800285e:	4b36      	ldr	r3, [pc, #216]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a36      	ldr	r2, [pc, #216]	; (800293c <Rafael_PanTompkins+0x58c>)
 8002864:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002868:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <Rafael_PanTompkins+0x5a4>)
 800286a:	801a      	strh	r2, [r3, #0]
            peak_f = RF_highpass[current];
 800286c:	4b32      	ldr	r3, [pc, #200]	; (8002938 <Rafael_PanTompkins+0x588>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a36      	ldr	r2, [pc, #216]	; (800294c <Rafael_PanTompkins+0x59c>)
 8002872:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002876:	4b38      	ldr	r3, [pc, #224]	; (8002958 <Rafael_PanTompkins+0x5a8>)
 8002878:	801a      	strh	r2, [r3, #0]
        }

		// If both the integral and the signal are above their thresholds, they're probably signal peaks.
		if ((RF_integral[current] >= threshold_i1) && (RF_highpass[current] >= threshold_f1))
 800287a:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <Rafael_PanTompkins+0x588>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2f      	ldr	r2, [pc, #188]	; (800293c <Rafael_PanTompkins+0x58c>)
 8002880:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <Rafael_PanTompkins+0x598>)
 8002886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288a:	429a      	cmp	r2, r3
 800288c:	f2c0 837b 	blt.w	8002f86 <Rafael_PanTompkins+0xbd6>
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2d      	ldr	r2, [pc, #180]	; (800294c <Rafael_PanTompkins+0x59c>)
 8002896:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <Rafael_PanTompkins+0x5a0>)
 800289c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f2c0 8370 	blt.w	8002f86 <Rafael_PanTompkins+0xbd6>
		{
			// There's a 200ms latency. If the new peak respects this condition, we can keep testing.
			if (sample > lastQRS + FS/5)
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <Rafael_PanTompkins+0x5ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <Rafael_PanTompkins+0x5b0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	f080 827e 	bcs.w	8002db4 <Rafael_PanTompkins+0xa04>
			{
			    // If it respects the 200ms latency, but it doesn't respect the 360ms latency, we check the slope.
				if (sample <= lastQRS + (long unsigned int)(0.36*FS))
 80028b8:	4b28      	ldr	r3, [pc, #160]	; (800295c <Rafael_PanTompkins+0x5ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f103 0281 	add.w	r2, r3, #129	; 0x81
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <Rafael_PanTompkins+0x5b0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	f0c0 812b 	bcc.w	8002b20 <Rafael_PanTompkins+0x770>
				{
				    // The squared slope is "M" shaped. So we have to check nearby samples to make sure we're really looking
				    // at its peak value, rather than a low one.
				    currentSlope = 0;
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <Rafael_PanTompkins+0x5b4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <Rafael_PanTompkins+0x588>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3b0a      	subs	r3, #10
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e016      	b.n	800290c <Rafael_PanTompkins+0x55c>
                        if (RF_squared[j] > currentSlope)
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <Rafael_PanTompkins+0x590>)
 80028e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <Rafael_PanTompkins+0x5b4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d907      	bls.n	8002902 <Rafael_PanTompkins+0x552>
                            currentSlope = RF_squared[j];
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <Rafael_PanTompkins+0x590>)
 80028f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <Rafael_PanTompkins+0x5b4>)
 8002900:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	4a17      	ldr	r2, [pc, #92]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <Rafael_PanTompkins+0x5b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a09      	ldr	r2, [pc, #36]	; (8002938 <Rafael_PanTompkins+0x588>)
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4293      	cmp	r3, r2
 8002916:	d9e2      	bls.n	80028de <Rafael_PanTompkins+0x52e>

				    if (currentSlope <= (dataType)(lastSlope/2))
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <Rafael_PanTompkins+0x5bc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	b21b      	sxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <Rafael_PanTompkins+0x5b4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d322      	bcc.n	8002970 <Rafael_PanTompkins+0x5c0>
                    {
                        qrs = false;
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <Rafael_PanTompkins+0x594>)
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e329      	b.n	8002f86 <Rafael_PanTompkins+0xbd6>
 8002932:	bf00      	nop
 8002934:	20002bcc 	.word	0x20002bcc
 8002938:	20002be4 	.word	0x20002be4
 800293c:	20002218 	.word	0x20002218
 8002940:	20001d68 	.word	0x20001d68
 8002944:	20002bfc 	.word	0x20002bfc
 8002948:	20002bec 	.word	0x20002bec
 800294c:	20001408 	.word	0x20001408
 8002950:	20002bf0 	.word	0x20002bf0
 8002954:	20002be8 	.word	0x20002be8
 8002958:	20002bea 	.word	0x20002bea
 800295c:	20002bd8 	.word	0x20002bd8
 8002960:	20002bd4 	.word	0x20002bd4
 8002964:	20002be0 	.word	0x20002be0
 8002968:	20002bd0 	.word	0x20002bd0
 800296c:	20002bdc 	.word	0x20002bdc
                    }

                    else
                    {
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8002970:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <Rafael_PanTompkins+0x784>)
 8002972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fdac 	bl	80004d4 <__aeabi_i2d>
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002984:	f7fd fe10 	bl	80005a8 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4614      	mov	r4, r2
 800298e:	461d      	mov	r5, r3
 8002990:	4b69      	ldr	r3, [pc, #420]	; (8002b38 <Rafael_PanTompkins+0x788>)
 8002992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fd9c 	bl	80004d4 <__aeabi_i2d>
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <Rafael_PanTompkins+0x78c>)
 80029a2:	f7fd fe01 	bl	80005a8 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4620      	mov	r0, r4
 80029ac:	4629      	mov	r1, r5
 80029ae:	f7fd fc45 	bl	800023c <__adddf3>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f8a5 	bl	8000b08 <__aeabi_d2iz>
 80029be:	4603      	mov	r3, r0
 80029c0:	b21a      	sxth	r2, r3
 80029c2:	4b5d      	ldr	r3, [pc, #372]	; (8002b38 <Rafael_PanTompkins+0x788>)
 80029c4:	801a      	strh	r2, [r3, #0]
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80029c6:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <Rafael_PanTompkins+0x790>)
 80029c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fd81 	bl	80004d4 <__aeabi_i2d>
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
 80029d6:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <Rafael_PanTompkins+0x788>)
 80029d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <Rafael_PanTompkins+0x790>)
 80029e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fd74 	bl	80004d4 <__aeabi_i2d>
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	4b54      	ldr	r3, [pc, #336]	; (8002b44 <Rafael_PanTompkins+0x794>)
 80029f2:	f7fd fdd9 	bl	80005a8 <__aeabi_dmul>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4620      	mov	r0, r4
 80029fc:	4629      	mov	r1, r5
 80029fe:	f7fd fc1d 	bl	800023c <__adddf3>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f7fe f87d 	bl	8000b08 <__aeabi_d2iz>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b21a      	sxth	r2, r3
 8002a12:	4b4d      	ldr	r3, [pc, #308]	; (8002b48 <Rafael_PanTompkins+0x798>)
 8002a14:	801a      	strh	r2, [r3, #0]
                        threshold_i2 = 0.5*threshold_i1;
 8002a16:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <Rafael_PanTompkins+0x798>)
 8002a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fd59 	bl	80004d4 <__aeabi_i2d>
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <Rafael_PanTompkins+0x79c>)
 8002a28:	f7fd fdbe 	bl	80005a8 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f7fe f868 	bl	8000b08 <__aeabi_d2iz>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <Rafael_PanTompkins+0x7a0>)
 8002a3e:	801a      	strh	r2, [r3, #0]

                        spk_f = 0.125*peak_f + 0.875*spk_f;
 8002a40:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <Rafael_PanTompkins+0x7a4>)
 8002a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd44 	bl	80004d4 <__aeabi_i2d>
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002a54:	f7fd fda8 	bl	80005a8 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4614      	mov	r4, r2
 8002a5e:	461d      	mov	r5, r3
 8002a60:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <Rafael_PanTompkins+0x7a8>)
 8002a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fd34 	bl	80004d4 <__aeabi_i2d>
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <Rafael_PanTompkins+0x78c>)
 8002a72:	f7fd fd99 	bl	80005a8 <__aeabi_dmul>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fd fbdd 	bl	800023c <__adddf3>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f7fe f83d 	bl	8000b08 <__aeabi_d2iz>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <Rafael_PanTompkins+0x7a8>)
 8002a94:	801a      	strh	r2, [r3, #0]
                        threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <Rafael_PanTompkins+0x7ac>)
 8002a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd19 	bl	80004d4 <__aeabi_i2d>
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	460d      	mov	r5, r1
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <Rafael_PanTompkins+0x7a8>)
 8002aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <Rafael_PanTompkins+0x7ac>)
 8002ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd0c 	bl	80004d4 <__aeabi_i2d>
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <Rafael_PanTompkins+0x794>)
 8002ac2:	f7fd fd71 	bl	80005a8 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4620      	mov	r0, r4
 8002acc:	4629      	mov	r1, r5
 8002ace:	f7fd fbb5 	bl	800023c <__adddf3>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f7fe f815 	bl	8000b08 <__aeabi_d2iz>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <Rafael_PanTompkins+0x7b0>)
 8002ae4:	801a      	strh	r2, [r3, #0]
                        threshold_f2 = 0.5*threshold_f1;
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <Rafael_PanTompkins+0x7b0>)
 8002ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fcf1 	bl	80004d4 <__aeabi_i2d>
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <Rafael_PanTompkins+0x79c>)
 8002af8:	f7fd fd56 	bl	80005a8 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7fe f800 	bl	8000b08 <__aeabi_d2iz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <Rafael_PanTompkins+0x7b4>)
 8002b0e:	801a      	strh	r2, [r3, #0]

                        lastSlope = currentSlope;
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <Rafael_PanTompkins+0x7b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <Rafael_PanTompkins+0x7bc>)
 8002b16:	6013      	str	r3, [r2, #0]
                        qrs = true;
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <Rafael_PanTompkins+0x7c0>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e232      	b.n	8002f86 <Rafael_PanTompkins+0xbd6>
                    }
				}
				// If it was above both thresholds and respects both latency periods, it certainly is a R peak.
				else
				{
				    currentSlope = 0;
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <Rafael_PanTompkins+0x7b8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <Rafael_PanTompkins+0x7c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3b0a      	subs	r3, #10
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <Rafael_PanTompkins+0x7c8>)
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e03a      	b.n	8002baa <Rafael_PanTompkins+0x7fa>
 8002b34:	20002be8 	.word	0x20002be8
 8002b38:	20002bf4 	.word	0x20002bf4
 8002b3c:	3fec0000 	.word	0x3fec0000
 8002b40:	20002bf8 	.word	0x20002bf8
 8002b44:	3fd00000 	.word	0x3fd00000
 8002b48:	20002bec 	.word	0x20002bec
 8002b4c:	3fe00000 	.word	0x3fe00000
 8002b50:	20002bee 	.word	0x20002bee
 8002b54:	20002bea 	.word	0x20002bea
 8002b58:	20002bf6 	.word	0x20002bf6
 8002b5c:	20002bfa 	.word	0x20002bfa
 8002b60:	20002bf0 	.word	0x20002bf0
 8002b64:	20002bf2 	.word	0x20002bf2
 8002b68:	20002be0 	.word	0x20002be0
 8002b6c:	20002bdc 	.word	0x20002bdc
 8002b70:	20002bfc 	.word	0x20002bfc
 8002b74:	20002be4 	.word	0x20002be4
 8002b78:	20002bd0 	.word	0x20002bd0
                        if (RF_squared[j] > currentSlope)
 8002b7c:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a7a      	ldr	r2, [pc, #488]	; (8002d6c <Rafael_PanTompkins+0x9bc>)
 8002b82:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <Rafael_PanTompkins+0x9c0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d907      	bls.n	8002ba0 <Rafael_PanTompkins+0x7f0>
                            currentSlope = RF_squared[j];
 8002b90:	4b75      	ldr	r3, [pc, #468]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a75      	ldr	r2, [pc, #468]	; (8002d6c <Rafael_PanTompkins+0x9bc>)
 8002b96:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b74      	ldr	r3, [pc, #464]	; (8002d70 <Rafael_PanTompkins+0x9c0>)
 8002b9e:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 8002ba0:	4b71      	ldr	r3, [pc, #452]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	4a70      	ldr	r2, [pc, #448]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b6f      	ldr	r3, [pc, #444]	; (8002d68 <Rafael_PanTompkins+0x9b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a71      	ldr	r2, [pc, #452]	; (8002d74 <Rafael_PanTompkins+0x9c4>)
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d9e2      	bls.n	8002b7c <Rafael_PanTompkins+0x7cc>

                    spk_i = 0.125*peak_i + 0.875*spk_i;
 8002bb6:	4b70      	ldr	r3, [pc, #448]	; (8002d78 <Rafael_PanTompkins+0x9c8>)
 8002bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fc89 	bl	80004d4 <__aeabi_i2d>
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002bca:	f7fd fced 	bl	80005a8 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4614      	mov	r4, r2
 8002bd4:	461d      	mov	r5, r3
 8002bd6:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <Rafael_PanTompkins+0x9cc>)
 8002bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fc79 	bl	80004d4 <__aeabi_i2d>
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <Rafael_PanTompkins+0x9d0>)
 8002be8:	f7fd fcde 	bl	80005a8 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fb22 	bl	800023c <__adddf3>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f7fd ff82 	bl	8000b08 <__aeabi_d2iz>
 8002c04:	4603      	mov	r3, r0
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	4b5c      	ldr	r3, [pc, #368]	; (8002d7c <Rafael_PanTompkins+0x9cc>)
 8002c0a:	801a      	strh	r2, [r3, #0]
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002c0c:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <Rafael_PanTompkins+0x9d4>)
 8002c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fc5e 	bl	80004d4 <__aeabi_i2d>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	460d      	mov	r5, r1
 8002c1c:	4b57      	ldr	r3, [pc, #348]	; (8002d7c <Rafael_PanTompkins+0x9cc>)
 8002c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <Rafael_PanTompkins+0x9d4>)
 8002c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fc51 	bl	80004d4 <__aeabi_i2d>
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4b54      	ldr	r3, [pc, #336]	; (8002d88 <Rafael_PanTompkins+0x9d8>)
 8002c38:	f7fd fcb6 	bl	80005a8 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fafa 	bl	800023c <__adddf3>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7fd ff5a 	bl	8000b08 <__aeabi_d2iz>
 8002c54:	4603      	mov	r3, r0
 8002c56:	b21a      	sxth	r2, r3
 8002c58:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <Rafael_PanTompkins+0x9dc>)
 8002c5a:	801a      	strh	r2, [r3, #0]
                    threshold_i2 = 0.5*threshold_i1;
 8002c5c:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <Rafael_PanTompkins+0x9dc>)
 8002c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc36 	bl	80004d4 <__aeabi_i2d>
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <Rafael_PanTompkins+0x9e0>)
 8002c6e:	f7fd fc9b 	bl	80005a8 <__aeabi_dmul>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f7fd ff45 	bl	8000b08 <__aeabi_d2iz>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	b21a      	sxth	r2, r3
 8002c82:	4b44      	ldr	r3, [pc, #272]	; (8002d94 <Rafael_PanTompkins+0x9e4>)
 8002c84:	801a      	strh	r2, [r3, #0]

                    spk_f = 0.125*peak_f + 0.875*spk_f;
 8002c86:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <Rafael_PanTompkins+0x9e8>)
 8002c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fc21 	bl	80004d4 <__aeabi_i2d>
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002c9a:	f7fd fc85 	bl	80005a8 <__aeabi_dmul>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4614      	mov	r4, r2
 8002ca4:	461d      	mov	r5, r3
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <Rafael_PanTompkins+0x9ec>)
 8002ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc11 	bl	80004d4 <__aeabi_i2d>
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <Rafael_PanTompkins+0x9d0>)
 8002cb8:	f7fd fc76 	bl	80005a8 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	f7fd faba 	bl	800023c <__adddf3>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f7fd ff1a 	bl	8000b08 <__aeabi_d2iz>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	b21a      	sxth	r2, r3
 8002cd8:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <Rafael_PanTompkins+0x9ec>)
 8002cda:	801a      	strh	r2, [r3, #0]
                    threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <Rafael_PanTompkins+0x9f0>)
 8002cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fbf6 	bl	80004d4 <__aeabi_i2d>
 8002ce8:	4604      	mov	r4, r0
 8002cea:	460d      	mov	r5, r1
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <Rafael_PanTompkins+0x9ec>)
 8002cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <Rafael_PanTompkins+0x9f0>)
 8002cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fbe9 	bl	80004d4 <__aeabi_i2d>
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <Rafael_PanTompkins+0x9d8>)
 8002d08:	f7fd fc4e 	bl	80005a8 <__aeabi_dmul>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7fd fa92 	bl	800023c <__adddf3>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd fef2 	bl	8000b08 <__aeabi_d2iz>
 8002d24:	4603      	mov	r3, r0
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <Rafael_PanTompkins+0x9f4>)
 8002d2a:	801a      	strh	r2, [r3, #0]
                    threshold_f2 = 0.5*threshold_f1;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <Rafael_PanTompkins+0x9f4>)
 8002d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fbce 	bl	80004d4 <__aeabi_i2d>
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <Rafael_PanTompkins+0x9e0>)
 8002d3e:	f7fd fc33 	bl	80005a8 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7fd fedd 	bl	8000b08 <__aeabi_d2iz>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <Rafael_PanTompkins+0x9f8>)
 8002d54:	801a      	strh	r2, [r3, #0]

                    lastSlope = currentSlope;
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <Rafael_PanTompkins+0x9c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <Rafael_PanTompkins+0x9fc>)
 8002d5c:	6013      	str	r3, [r2, #0]
                    qrs = true;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <Rafael_PanTompkins+0xa00>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e10f      	b.n	8002f86 <Rafael_PanTompkins+0xbd6>
 8002d66:	bf00      	nop
 8002d68:	20002bd0 	.word	0x20002bd0
 8002d6c:	20001d68 	.word	0x20001d68
 8002d70:	20002be0 	.word	0x20002be0
 8002d74:	20002be4 	.word	0x20002be4
 8002d78:	20002be8 	.word	0x20002be8
 8002d7c:	20002bf4 	.word	0x20002bf4
 8002d80:	3fec0000 	.word	0x3fec0000
 8002d84:	20002bf8 	.word	0x20002bf8
 8002d88:	3fd00000 	.word	0x3fd00000
 8002d8c:	20002bec 	.word	0x20002bec
 8002d90:	3fe00000 	.word	0x3fe00000
 8002d94:	20002bee 	.word	0x20002bee
 8002d98:	20002bea 	.word	0x20002bea
 8002d9c:	20002bf6 	.word	0x20002bf6
 8002da0:	20002bfa 	.word	0x20002bfa
 8002da4:	20002bf0 	.word	0x20002bf0
 8002da8:	20002bf2 	.word	0x20002bf2
 8002dac:	20002bdc 	.word	0x20002bdc
 8002db0:	20002bfc 	.word	0x20002bfc
				}
			}
			// If the new peak doesn't respect the 200ms latency, it's noise. Update thresholds and move on to the next sample.
			else
            {
                peak_i = RF_integral[current];
 8002db4:	4ba7      	ldr	r3, [pc, #668]	; (8003054 <Rafael_PanTompkins+0xca4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4aa7      	ldr	r2, [pc, #668]	; (8003058 <Rafael_PanTompkins+0xca8>)
 8002dba:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002dbe:	4ba7      	ldr	r3, [pc, #668]	; (800305c <Rafael_PanTompkins+0xcac>)
 8002dc0:	801a      	strh	r2, [r3, #0]
				npk_i = 0.125*peak_i + 0.875*npk_i;
 8002dc2:	4ba6      	ldr	r3, [pc, #664]	; (800305c <Rafael_PanTompkins+0xcac>)
 8002dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fb83 	bl	80004d4 <__aeabi_i2d>
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002dd6:	f7fd fbe7 	bl	80005a8 <__aeabi_dmul>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4614      	mov	r4, r2
 8002de0:	461d      	mov	r5, r3
 8002de2:	4b9f      	ldr	r3, [pc, #636]	; (8003060 <Rafael_PanTompkins+0xcb0>)
 8002de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fb73 	bl	80004d4 <__aeabi_i2d>
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4b9c      	ldr	r3, [pc, #624]	; (8003064 <Rafael_PanTompkins+0xcb4>)
 8002df4:	f7fd fbd8 	bl	80005a8 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	4629      	mov	r1, r5
 8002e00:	f7fd fa1c 	bl	800023c <__adddf3>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fe7c 	bl	8000b08 <__aeabi_d2iz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <Rafael_PanTompkins+0xcb0>)
 8002e16:	801a      	strh	r2, [r3, #0]
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002e18:	4b91      	ldr	r3, [pc, #580]	; (8003060 <Rafael_PanTompkins+0xcb0>)
 8002e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fb58 	bl	80004d4 <__aeabi_i2d>
 8002e24:	4604      	mov	r4, r0
 8002e26:	460d      	mov	r5, r1
 8002e28:	4b8f      	ldr	r3, [pc, #572]	; (8003068 <Rafael_PanTompkins+0xcb8>)
 8002e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <Rafael_PanTompkins+0xcb0>)
 8002e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fb4b 	bl	80004d4 <__aeabi_i2d>
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	4b8a      	ldr	r3, [pc, #552]	; (800306c <Rafael_PanTompkins+0xcbc>)
 8002e44:	f7fd fbb0 	bl	80005a8 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	4629      	mov	r1, r5
 8002e50:	f7fd f9f4 	bl	800023c <__adddf3>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7fd fe54 	bl	8000b08 <__aeabi_d2iz>
 8002e60:	4603      	mov	r3, r0
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	4b82      	ldr	r3, [pc, #520]	; (8003070 <Rafael_PanTompkins+0xcc0>)
 8002e66:	801a      	strh	r2, [r3, #0]
				threshold_i2 = 0.5*threshold_i1;
 8002e68:	4b81      	ldr	r3, [pc, #516]	; (8003070 <Rafael_PanTompkins+0xcc0>)
 8002e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fb30 	bl	80004d4 <__aeabi_i2d>
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <Rafael_PanTompkins+0xcc4>)
 8002e7a:	f7fd fb95 	bl	80005a8 <__aeabi_dmul>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7fd fe3f 	bl	8000b08 <__aeabi_d2iz>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b21a      	sxth	r2, r3
 8002e8e:	4b7a      	ldr	r3, [pc, #488]	; (8003078 <Rafael_PanTompkins+0xcc8>)
 8002e90:	801a      	strh	r2, [r3, #0]
				peak_f = RF_highpass[current];
 8002e92:	4b70      	ldr	r3, [pc, #448]	; (8003054 <Rafael_PanTompkins+0xca4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a79      	ldr	r2, [pc, #484]	; (800307c <Rafael_PanTompkins+0xccc>)
 8002e98:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002e9c:	4b78      	ldr	r3, [pc, #480]	; (8003080 <Rafael_PanTompkins+0xcd0>)
 8002e9e:	801a      	strh	r2, [r3, #0]
				npk_f = 0.125*peak_f + 0.875*npk_f;
 8002ea0:	4b77      	ldr	r3, [pc, #476]	; (8003080 <Rafael_PanTompkins+0xcd0>)
 8002ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb14 	bl	80004d4 <__aeabi_i2d>
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002eb4:	f7fd fb78 	bl	80005a8 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	461d      	mov	r5, r3
 8002ec0:	4b70      	ldr	r3, [pc, #448]	; (8003084 <Rafael_PanTompkins+0xcd4>)
 8002ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb04 	bl	80004d4 <__aeabi_i2d>
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	4b64      	ldr	r3, [pc, #400]	; (8003064 <Rafael_PanTompkins+0xcb4>)
 8002ed2:	f7fd fb69 	bl	80005a8 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7fd f9ad 	bl	800023c <__adddf3>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f7fd fe0d 	bl	8000b08 <__aeabi_d2iz>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	b21a      	sxth	r2, r3
 8002ef2:	4b64      	ldr	r3, [pc, #400]	; (8003084 <Rafael_PanTompkins+0xcd4>)
 8002ef4:	801a      	strh	r2, [r3, #0]
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <Rafael_PanTompkins+0xcd4>)
 8002ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fae9 	bl	80004d4 <__aeabi_i2d>
 8002f02:	4604      	mov	r4, r0
 8002f04:	460d      	mov	r5, r1
 8002f06:	4b60      	ldr	r3, [pc, #384]	; (8003088 <Rafael_PanTompkins+0xcd8>)
 8002f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <Rafael_PanTompkins+0xcd4>)
 8002f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fadc 	bl	80004d4 <__aeabi_i2d>
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	4b52      	ldr	r3, [pc, #328]	; (800306c <Rafael_PanTompkins+0xcbc>)
 8002f22:	f7fd fb41 	bl	80005a8 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f985 	bl	800023c <__adddf3>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fde5 	bl	8000b08 <__aeabi_d2iz>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	b21a      	sxth	r2, r3
 8002f42:	4b52      	ldr	r3, [pc, #328]	; (800308c <Rafael_PanTompkins+0xcdc>)
 8002f44:	801a      	strh	r2, [r3, #0]
                threshold_f2 = 0.5*threshold_f1;
 8002f46:	4b51      	ldr	r3, [pc, #324]	; (800308c <Rafael_PanTompkins+0xcdc>)
 8002f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fac1 	bl	80004d4 <__aeabi_i2d>
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <Rafael_PanTompkins+0xcc4>)
 8002f58:	f7fd fb26 	bl	80005a8 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7fd fdd0 	bl	8000b08 <__aeabi_d2iz>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b21a      	sxth	r2, r3
 8002f6c:	4b48      	ldr	r3, [pc, #288]	; (8003090 <Rafael_PanTompkins+0xce0>)
 8002f6e:	801a      	strh	r2, [r3, #0]
                qrs = false;
 8002f70:	4b48      	ldr	r3, [pc, #288]	; (8003094 <Rafael_PanTompkins+0xce4>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
                RF_outputSignal[current] = qrs;
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <Rafael_PanTompkins+0xce4>)
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	4b36      	ldr	r3, [pc, #216]	; (8003054 <Rafael_PanTompkins+0xca4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b211      	sxth	r1, r2
 8002f80:	4a45      	ldr	r2, [pc, #276]	; (8003098 <Rafael_PanTompkins+0xce8>)
 8002f82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

		}

		// If a R-peak was detected, the RR-averages must be updated.
		if (qrs)
 8002f86:	4b43      	ldr	r3, [pc, #268]	; (8003094 <Rafael_PanTompkins+0xce4>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8137 	beq.w	80031fe <Rafael_PanTompkins+0xe4e>
		{
			// Add the newest RR-interval to the buffer and get the new average.
			rravg1 = 0;
 8002f90:	4b42      	ldr	r3, [pc, #264]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 7; i++)
 8002f96:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e019      	b.n	8002fd2 <Rafael_PanTompkins+0xc22>
			{
				rr1[i] = rr1[i+1];
 8002f9e:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	493e      	ldr	r1, [pc, #248]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002faa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002fae:	493d      	ldr	r1, [pc, #244]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				rravg1 += rr1[i];
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a3a      	ldr	r2, [pc, #232]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002fba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a35      	ldr	r2, [pc, #212]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002fc6:	6013      	str	r3, [r2, #0]
			for (i = 0; i < 7; i++)
 8002fc8:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	4a34      	ldr	r2, [pc, #208]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d9e1      	bls.n	8002f9e <Rafael_PanTompkins+0xbee>
			}
			rr1[7] = sample - lastQRS;
 8002fda:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <Rafael_PanTompkins+0xcf8>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b33      	ldr	r3, [pc, #204]	; (80030ac <Rafael_PanTompkins+0xcfc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002fe8:	61da      	str	r2, [r3, #28]
			lastQRS = sample;
 8002fea:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <Rafael_PanTompkins+0xcf8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <Rafael_PanTompkins+0xcfc>)
 8002ff0:	6013      	str	r3, [r2, #0]
			rravg1 += rr1[7];
 8002ff2:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <Rafael_PanTompkins+0xcec>)
 8002ffe:	6013      	str	r3, [r2, #0]
			rravg1 *= 0.125;
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <Rafael_PanTompkins+0xcec>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fa65 	bl	80004d4 <__aeabi_i2d>
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003012:	f7fd fac9 	bl	80005a8 <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fd73 	bl	8000b08 <__aeabi_d2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <Rafael_PanTompkins+0xcec>)
 8003026:	6013      	str	r3, [r2, #0]

			// If the newly-discovered RR-average is normal, add it to the "normal" buffer and get the new "normal" average.
			// Update the "normal" beat parameters.
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <Rafael_PanTompkins+0xd00>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	f2c0 80b9 	blt.w	80031a8 <Rafael_PanTompkins+0xdf8>
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <Rafael_PanTompkins+0xcf4>)
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <Rafael_PanTompkins+0xd04>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	f300 80b2 	bgt.w	80031a8 <Rafael_PanTompkins+0xdf8>
			{
				rravg2 = 0;
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <Rafael_PanTompkins+0xd08>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
				for (i = 0; i < 7; i++)
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <Rafael_PanTompkins+0xcf0>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e04e      	b.n	80030f0 <Rafael_PanTompkins+0xd40>
 8003052:	bf00      	nop
 8003054:	20002be4 	.word	0x20002be4
 8003058:	20002218 	.word	0x20002218
 800305c:	20002be8 	.word	0x20002be8
 8003060:	20002bf8 	.word	0x20002bf8
 8003064:	3fec0000 	.word	0x3fec0000
 8003068:	20002bf4 	.word	0x20002bf4
 800306c:	3fd00000 	.word	0x3fd00000
 8003070:	20002bec 	.word	0x20002bec
 8003074:	3fe00000 	.word	0x3fe00000
 8003078:	20002bee 	.word	0x20002bee
 800307c:	20001408 	.word	0x20001408
 8003080:	20002bea 	.word	0x20002bea
 8003084:	20002bfa 	.word	0x20002bfa
 8003088:	20002bf6 	.word	0x20002bf6
 800308c:	20002bf0 	.word	0x20002bf0
 8003090:	20002bf2 	.word	0x20002bf2
 8003094:	20002bfc 	.word	0x20002bfc
 8003098:	200026c8 	.word	0x200026c8
 800309c:	20002bb8 	.word	0x20002bb8
 80030a0:	20002bcc 	.word	0x20002bcc
 80030a4:	20002b78 	.word	0x20002b78
 80030a8:	20002bd4 	.word	0x20002bd4
 80030ac:	20002bd8 	.word	0x20002bd8
 80030b0:	20002bc0 	.word	0x20002bc0
 80030b4:	20002bc4 	.word	0x20002bc4
 80030b8:	20002bbc 	.word	0x20002bbc
				{
					rr2[i] = rr2[i+1];
 80030bc:	4ba2      	ldr	r3, [pc, #648]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	4ba1      	ldr	r3, [pc, #644]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	49a1      	ldr	r1, [pc, #644]	; (800334c <Rafael_PanTompkins+0xf9c>)
 80030c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80030cc:	499f      	ldr	r1, [pc, #636]	; (800334c <Rafael_PanTompkins+0xf9c>)
 80030ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					rravg2 += rr2[i];
 80030d2:	4b9d      	ldr	r3, [pc, #628]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a9d      	ldr	r2, [pc, #628]	; (800334c <Rafael_PanTompkins+0xf9c>)
 80030d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030dc:	4b9c      	ldr	r3, [pc, #624]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	4a9b      	ldr	r2, [pc, #620]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 80030e4:	6013      	str	r3, [r2, #0]
				for (i = 0; i < 7; i++)
 80030e6:	4b98      	ldr	r3, [pc, #608]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	4a96      	ldr	r2, [pc, #600]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b95      	ldr	r3, [pc, #596]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d9e1      	bls.n	80030bc <Rafael_PanTompkins+0xd0c>
				}
				rr2[7] = rr1[7];
 80030f8:	4b96      	ldr	r3, [pc, #600]	; (8003354 <Rafael_PanTompkins+0xfa4>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4a93      	ldr	r2, [pc, #588]	; (800334c <Rafael_PanTompkins+0xf9c>)
 80030fe:	61d3      	str	r3, [r2, #28]
				rravg2 += rr2[7];
 8003100:	4b92      	ldr	r3, [pc, #584]	; (800334c <Rafael_PanTompkins+0xf9c>)
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	4b92      	ldr	r3, [pc, #584]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4413      	add	r3, r2
 800310a:	4a91      	ldr	r2, [pc, #580]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 800310c:	6013      	str	r3, [r2, #0]
				rravg2 *= 0.125;
 800310e:	4b90      	ldr	r3, [pc, #576]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd f9de 	bl	80004d4 <__aeabi_i2d>
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003120:	f7fd fa42 	bl	80005a8 <__aeabi_dmul>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f7fd fcec 	bl	8000b08 <__aeabi_d2iz>
 8003130:	4603      	mov	r3, r0
 8003132:	4a87      	ldr	r2, [pc, #540]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003134:	6013      	str	r3, [r2, #0]
				rrlow = 0.92*rravg2;
 8003136:	4b86      	ldr	r3, [pc, #536]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd f9ca 	bl	80004d4 <__aeabi_i2d>
 8003140:	a379      	add	r3, pc, #484	; (adr r3, 8003328 <Rafael_PanTompkins+0xf78>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f7fd fa2f 	bl	80005a8 <__aeabi_dmul>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	f7fd fcd9 	bl	8000b08 <__aeabi_d2iz>
 8003156:	4603      	mov	r3, r0
 8003158:	4a7f      	ldr	r2, [pc, #508]	; (8003358 <Rafael_PanTompkins+0xfa8>)
 800315a:	6013      	str	r3, [r2, #0]
				rrhigh = 1.16*rravg2;
 800315c:	4b7c      	ldr	r3, [pc, #496]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd f9b7 	bl	80004d4 <__aeabi_i2d>
 8003166:	a372      	add	r3, pc, #456	; (adr r3, 8003330 <Rafael_PanTompkins+0xf80>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f7fd fa1c 	bl	80005a8 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	f7fd fcc6 	bl	8000b08 <__aeabi_d2iz>
 800317c:	4603      	mov	r3, r0
 800317e:	4a77      	ldr	r2, [pc, #476]	; (800335c <Rafael_PanTompkins+0xfac>)
 8003180:	6013      	str	r3, [r2, #0]
				rrmiss = 1.66*rravg2;
 8003182:	4b73      	ldr	r3, [pc, #460]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9a4 	bl	80004d4 <__aeabi_i2d>
 800318c:	a36a      	add	r3, pc, #424	; (adr r3, 8003338 <Rafael_PanTompkins+0xf88>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd fa09 	bl	80005a8 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fcb3 	bl	8000b08 <__aeabi_d2iz>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a6e      	ldr	r2, [pc, #440]	; (8003360 <Rafael_PanTompkins+0xfb0>)
 80031a6:	6013      	str	r3, [r2, #0]
			}

			prevRegular = regular;
 80031a8:	4b6e      	ldr	r3, [pc, #440]	; (8003364 <Rafael_PanTompkins+0xfb4>)
 80031aa:	781a      	ldrb	r2, [r3, #0]
 80031ac:	4b6e      	ldr	r3, [pc, #440]	; (8003368 <Rafael_PanTompkins+0xfb8>)
 80031ae:	701a      	strb	r2, [r3, #0]
			if (rravg1 == rravg2)
 80031b0:	4b6e      	ldr	r3, [pc, #440]	; (800336c <Rafael_PanTompkins+0xfbc>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b66      	ldr	r3, [pc, #408]	; (8003350 <Rafael_PanTompkins+0xfa0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d104      	bne.n	80031c6 <Rafael_PanTompkins+0xe16>
			{
				regular = true;
 80031bc:	4b69      	ldr	r3, [pc, #420]	; (8003364 <Rafael_PanTompkins+0xfb4>)
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	f000 bc5d 	b.w	8003a80 <Rafael_PanTompkins+0x16d0>
			}
			// If the beat had been normal but turned odd, change the thresholds.
			else
			{
				regular = false;
 80031c6:	4b67      	ldr	r3, [pc, #412]	; (8003364 <Rafael_PanTompkins+0xfb4>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
				if (prevRegular)
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <Rafael_PanTompkins+0xfb8>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8455 	beq.w	8003a80 <Rafael_PanTompkins+0x16d0>
				{
					threshold_i1 /= 2;
 80031d6:	4b66      	ldr	r3, [pc, #408]	; (8003370 <Rafael_PanTompkins+0xfc0>)
 80031d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031dc:	0fda      	lsrs	r2, r3, #31
 80031de:	4413      	add	r3, r2
 80031e0:	105b      	asrs	r3, r3, #1
 80031e2:	b21a      	sxth	r2, r3
 80031e4:	4b62      	ldr	r3, [pc, #392]	; (8003370 <Rafael_PanTompkins+0xfc0>)
 80031e6:	801a      	strh	r2, [r3, #0]
					threshold_f1 /= 2;
 80031e8:	4b62      	ldr	r3, [pc, #392]	; (8003374 <Rafael_PanTompkins+0xfc4>)
 80031ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ee:	0fda      	lsrs	r2, r3, #31
 80031f0:	4413      	add	r3, r2
 80031f2:	105b      	asrs	r3, r3, #1
 80031f4:	b21a      	sxth	r2, r3
 80031f6:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <Rafael_PanTompkins+0xfc4>)
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	f000 bc41 	b.w	8003a80 <Rafael_PanTompkins+0x16d0>
		// If no R-peak was detected, it's important to check how long it's been since the last detection.
		else
		{
		    // If no R-peak was detected for too long, use the lighter thresholds and do a back search.
			// However, the back search must respect the 200ms limit and the 360ms one (check the slope).
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 80031fe:	4b5e      	ldr	r3, [pc, #376]	; (8003378 <Rafael_PanTompkins+0xfc8>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b5e      	ldr	r3, [pc, #376]	; (800337c <Rafael_PanTompkins+0xfcc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	4a55      	ldr	r2, [pc, #340]	; (8003360 <Rafael_PanTompkins+0xfb0>)
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	4293      	cmp	r3, r2
 800320e:	f240 833f 	bls.w	8003890 <Rafael_PanTompkins+0x14e0>
 8003212:	4b5a      	ldr	r3, [pc, #360]	; (800337c <Rafael_PanTompkins+0xfcc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800321a:	4b57      	ldr	r3, [pc, #348]	; (8003378 <Rafael_PanTompkins+0xfc8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	f080 8336 	bcs.w	8003890 <Rafael_PanTompkins+0x14e0>
			{
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 8003224:	4b55      	ldr	r3, [pc, #340]	; (800337c <Rafael_PanTompkins+0xfcc>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b53      	ldr	r3, [pc, #332]	; (8003378 <Rafael_PanTompkins+0xfc8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	4a54      	ldr	r2, [pc, #336]	; (8003380 <Rafael_PanTompkins+0xfd0>)
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	4413      	add	r3, r2
 8003234:	3348      	adds	r3, #72	; 0x48
 8003236:	4a44      	ldr	r2, [pc, #272]	; (8003348 <Rafael_PanTompkins+0xf98>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e2e0      	b.n	80037fe <Rafael_PanTompkins+0x144e>
				{
					if ( (RF_integral[i] > threshold_i2) && (RF_highpass[i] > threshold_f2))
 800323c:	4b42      	ldr	r3, [pc, #264]	; (8003348 <Rafael_PanTompkins+0xf98>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a50      	ldr	r2, [pc, #320]	; (8003384 <Rafael_PanTompkins+0xfd4>)
 8003242:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <Rafael_PanTompkins+0xfd8>)
 8003248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800324c:	429a      	cmp	r2, r3
 800324e:	f340 82d1 	ble.w	80037f4 <Rafael_PanTompkins+0x1444>
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <Rafael_PanTompkins+0xf98>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a4d      	ldr	r2, [pc, #308]	; (800338c <Rafael_PanTompkins+0xfdc>)
 8003258:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800325c:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <Rafael_PanTompkins+0xfe0>)
 800325e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003262:	429a      	cmp	r2, r3
 8003264:	f340 82c6 	ble.w	80037f4 <Rafael_PanTompkins+0x1444>
					{
					    currentSlope = 0;
 8003268:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <Rafael_PanTompkins+0xfe4>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <Rafael_PanTompkins+0xf98>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3b0a      	subs	r3, #10
 8003274:	4a48      	ldr	r2, [pc, #288]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	e016      	b.n	80032a8 <Rafael_PanTompkins+0xef8>
                            if (RF_squared[j] > currentSlope)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <Rafael_PanTompkins+0xfec>)
 8003280:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003284:	461a      	mov	r2, r3
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <Rafael_PanTompkins+0xfe4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d907      	bls.n	800329e <Rafael_PanTompkins+0xeee>
                                currentSlope = RF_squared[j];
 800328e:	4b42      	ldr	r3, [pc, #264]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a42      	ldr	r2, [pc, #264]	; (800339c <Rafael_PanTompkins+0xfec>)
 8003294:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003298:	461a      	mov	r2, r3
 800329a:	4b3e      	ldr	r3, [pc, #248]	; (8003394 <Rafael_PanTompkins+0xfe4>)
 800329c:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 800329e:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4a3c      	ldr	r2, [pc, #240]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <Rafael_PanTompkins+0xfe8>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b26      	ldr	r3, [pc, #152]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d9e2      	bls.n	800327a <Rafael_PanTompkins+0xeca>

                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 80032b4:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <Rafael_PanTompkins+0xff0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	b21b      	sxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <Rafael_PanTompkins+0xfe4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d970      	bls.n	80033a8 <Rafael_PanTompkins+0xff8>
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <Rafael_PanTompkins+0xf98>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <Rafael_PanTompkins+0xfc8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f8ef 	bl	80004b4 <__aeabi_ui2d>
 80032d6:	4604      	mov	r4, r0
 80032d8:	460d      	mov	r5, r1
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <Rafael_PanTompkins+0xfcc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f8e8 	bl	80004b4 <__aeabi_ui2d>
 80032e4:	4680      	mov	r8, r0
 80032e6:	4689      	mov	r9, r1
 80032e8:	4b24      	ldr	r3, [pc, #144]	; (800337c <Rafael_PanTompkins+0xfcc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f8e1 	bl	80004b4 <__aeabi_ui2d>
 80032f2:	a313      	add	r3, pc, #76	; (adr r3, 8003340 <Rafael_PanTompkins+0xf90>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f7fd f956 	bl	80005a8 <__aeabi_dmul>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4640      	mov	r0, r8
 8003302:	4649      	mov	r1, r9
 8003304:	f7fc ff9a 	bl	800023c <__adddf3>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4620      	mov	r0, r4
 800330e:	4629      	mov	r1, r5
 8003310:	f7fd fbbc 	bl	8000a8c <__aeabi_dcmplt>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d046      	beq.n	80033a8 <Rafael_PanTompkins+0xff8>
                        {
                            qrs = false;
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <Rafael_PanTompkins+0xff4>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e268      	b.n	80037f4 <Rafael_PanTompkins+0x1444>
 8003322:	bf00      	nop
 8003324:	f3af 8000 	nop.w
 8003328:	d70a3d71 	.word	0xd70a3d71
 800332c:	3fed70a3 	.word	0x3fed70a3
 8003330:	28f5c28f 	.word	0x28f5c28f
 8003334:	3ff28f5c 	.word	0x3ff28f5c
 8003338:	28f5c28f 	.word	0x28f5c28f
 800333c:	3ffa8f5c 	.word	0x3ffa8f5c
 8003340:	70a3d70a 	.word	0x70a3d70a
 8003344:	3fd70a3d 	.word	0x3fd70a3d
 8003348:	20002bcc 	.word	0x20002bcc
 800334c:	20002b98 	.word	0x20002b98
 8003350:	20002bbc 	.word	0x20002bbc
 8003354:	20002b78 	.word	0x20002b78
 8003358:	20002bc0 	.word	0x20002bc0
 800335c:	20002bc4 	.word	0x20002bc4
 8003360:	20002bc8 	.word	0x20002bc8
 8003364:	20000004 	.word	0x20000004
 8003368:	20002bfd 	.word	0x20002bfd
 800336c:	20002bb8 	.word	0x20002bb8
 8003370:	20002bec 	.word	0x20002bec
 8003374:	20002bf0 	.word	0x20002bf0
 8003378:	20002bd4 	.word	0x20002bd4
 800337c:	20002bd8 	.word	0x20002bd8
 8003380:	20002be4 	.word	0x20002be4
 8003384:	20002218 	.word	0x20002218
 8003388:	20002bee 	.word	0x20002bee
 800338c:	20001408 	.word	0x20001408
 8003390:	20002bf2 	.word	0x20002bf2
 8003394:	20002be0 	.word	0x20002be0
 8003398:	20002bd0 	.word	0x20002bd0
 800339c:	20001d68 	.word	0x20001d68
 80033a0:	20002bdc 	.word	0x20002bdc
 80033a4:	20002bfc 	.word	0x20002bfc
                        }
                        else
                        {
                            peak_i = RF_integral[i];
 80033a8:	4ba7      	ldr	r3, [pc, #668]	; (8003648 <Rafael_PanTompkins+0x1298>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4aa7      	ldr	r2, [pc, #668]	; (800364c <Rafael_PanTompkins+0x129c>)
 80033ae:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80033b2:	4ba7      	ldr	r3, [pc, #668]	; (8003650 <Rafael_PanTompkins+0x12a0>)
 80033b4:	801a      	strh	r2, [r3, #0]
                            peak_f = RF_highpass[i];
 80033b6:	4ba4      	ldr	r3, [pc, #656]	; (8003648 <Rafael_PanTompkins+0x1298>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4aa6      	ldr	r2, [pc, #664]	; (8003654 <Rafael_PanTompkins+0x12a4>)
 80033bc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80033c0:	4ba5      	ldr	r3, [pc, #660]	; (8003658 <Rafael_PanTompkins+0x12a8>)
 80033c2:	801a      	strh	r2, [r3, #0]
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 80033c4:	4ba2      	ldr	r3, [pc, #648]	; (8003650 <Rafael_PanTompkins+0x12a0>)
 80033c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd f882 	bl	80004d4 <__aeabi_i2d>
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	4ba1      	ldr	r3, [pc, #644]	; (800365c <Rafael_PanTompkins+0x12ac>)
 80033d6:	f7fd f8e7 	bl	80005a8 <__aeabi_dmul>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4614      	mov	r4, r2
 80033e0:	461d      	mov	r5, r3
 80033e2:	4b9f      	ldr	r3, [pc, #636]	; (8003660 <Rafael_PanTompkins+0x12b0>)
 80033e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f873 	bl	80004d4 <__aeabi_i2d>
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	4b9c      	ldr	r3, [pc, #624]	; (8003664 <Rafael_PanTompkins+0x12b4>)
 80033f4:	f7fd f8d8 	bl	80005a8 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fc ff1c 	bl	800023c <__adddf3>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f7fd fb7c 	bl	8000b08 <__aeabi_d2iz>
 8003410:	4603      	mov	r3, r0
 8003412:	b21a      	sxth	r2, r3
 8003414:	4b92      	ldr	r3, [pc, #584]	; (8003660 <Rafael_PanTompkins+0x12b0>)
 8003416:	801a      	strh	r2, [r3, #0]
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 8003418:	4b8f      	ldr	r3, [pc, #572]	; (8003658 <Rafael_PanTompkins+0x12a8>)
 800341a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd f858 	bl	80004d4 <__aeabi_i2d>
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	4b8c      	ldr	r3, [pc, #560]	; (800365c <Rafael_PanTompkins+0x12ac>)
 800342a:	f7fd f8bd 	bl	80005a8 <__aeabi_dmul>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4614      	mov	r4, r2
 8003434:	461d      	mov	r5, r3
 8003436:	4b8c      	ldr	r3, [pc, #560]	; (8003668 <Rafael_PanTompkins+0x12b8>)
 8003438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f849 	bl	80004d4 <__aeabi_i2d>
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	4b87      	ldr	r3, [pc, #540]	; (8003664 <Rafael_PanTompkins+0x12b4>)
 8003448:	f7fd f8ae 	bl	80005a8 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4620      	mov	r0, r4
 8003452:	4629      	mov	r1, r5
 8003454:	f7fc fef2 	bl	800023c <__adddf3>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fb52 	bl	8000b08 <__aeabi_d2iz>
 8003464:	4603      	mov	r3, r0
 8003466:	b21a      	sxth	r2, r3
 8003468:	4b7f      	ldr	r3, [pc, #508]	; (8003668 <Rafael_PanTompkins+0x12b8>)
 800346a:	801a      	strh	r2, [r3, #0]
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 800346c:	4b7f      	ldr	r3, [pc, #508]	; (800366c <Rafael_PanTompkins+0x12bc>)
 800346e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd f82e 	bl	80004d4 <__aeabi_i2d>
 8003478:	4604      	mov	r4, r0
 800347a:	460d      	mov	r5, r1
 800347c:	4b78      	ldr	r3, [pc, #480]	; (8003660 <Rafael_PanTompkins+0x12b0>)
 800347e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003482:	461a      	mov	r2, r3
 8003484:	4b79      	ldr	r3, [pc, #484]	; (800366c <Rafael_PanTompkins+0x12bc>)
 8003486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd f821 	bl	80004d4 <__aeabi_i2d>
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	4b71      	ldr	r3, [pc, #452]	; (800365c <Rafael_PanTompkins+0x12ac>)
 8003498:	f7fd f886 	bl	80005a8 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4620      	mov	r0, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	f7fc feca 	bl	800023c <__adddf3>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7fd fb2a 	bl	8000b08 <__aeabi_d2iz>
 80034b4:	4603      	mov	r3, r0
 80034b6:	b21a      	sxth	r2, r3
 80034b8:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <Rafael_PanTompkins+0x12c0>)
 80034ba:	801a      	strh	r2, [r3, #0]
                            threshold_i2 = 0.5*threshold_i1;
 80034bc:	4b6c      	ldr	r3, [pc, #432]	; (8003670 <Rafael_PanTompkins+0x12c0>)
 80034be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f806 	bl	80004d4 <__aeabi_i2d>
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	4b69      	ldr	r3, [pc, #420]	; (8003674 <Rafael_PanTompkins+0x12c4>)
 80034ce:	f7fd f86b 	bl	80005a8 <__aeabi_dmul>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f7fd fb15 	bl	8000b08 <__aeabi_d2iz>
 80034de:	4603      	mov	r3, r0
 80034e0:	b21a      	sxth	r2, r3
 80034e2:	4b65      	ldr	r3, [pc, #404]	; (8003678 <Rafael_PanTompkins+0x12c8>)
 80034e4:	801a      	strh	r2, [r3, #0]
                            lastSlope = currentSlope;
 80034e6:	4b65      	ldr	r3, [pc, #404]	; (800367c <Rafael_PanTompkins+0x12cc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a65      	ldr	r2, [pc, #404]	; (8003680 <Rafael_PanTompkins+0x12d0>)
 80034ec:	6013      	str	r3, [r2, #0]
                            threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80034ee:	4b65      	ldr	r3, [pc, #404]	; (8003684 <Rafael_PanTompkins+0x12d4>)
 80034f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fc ffed 	bl	80004d4 <__aeabi_i2d>
 80034fa:	4604      	mov	r4, r0
 80034fc:	460d      	mov	r5, r1
 80034fe:	4b5a      	ldr	r3, [pc, #360]	; (8003668 <Rafael_PanTompkins+0x12b8>)
 8003500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003504:	461a      	mov	r2, r3
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <Rafael_PanTompkins+0x12d4>)
 8003508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4618      	mov	r0, r3
 8003510:	f7fc ffe0 	bl	80004d4 <__aeabi_i2d>
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	4b50      	ldr	r3, [pc, #320]	; (800365c <Rafael_PanTompkins+0x12ac>)
 800351a:	f7fd f845 	bl	80005a8 <__aeabi_dmul>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4620      	mov	r0, r4
 8003524:	4629      	mov	r1, r5
 8003526:	f7fc fe89 	bl	800023c <__adddf3>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7fd fae9 	bl	8000b08 <__aeabi_d2iz>
 8003536:	4603      	mov	r3, r0
 8003538:	b21a      	sxth	r2, r3
 800353a:	4b53      	ldr	r3, [pc, #332]	; (8003688 <Rafael_PanTompkins+0x12d8>)
 800353c:	801a      	strh	r2, [r3, #0]
                            threshold_f2 = 0.5*threshold_f1;
 800353e:	4b52      	ldr	r3, [pc, #328]	; (8003688 <Rafael_PanTompkins+0x12d8>)
 8003540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fc ffc5 	bl	80004d4 <__aeabi_i2d>
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	4b49      	ldr	r3, [pc, #292]	; (8003674 <Rafael_PanTompkins+0x12c4>)
 8003550:	f7fd f82a 	bl	80005a8 <__aeabi_dmul>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	f7fd fad4 	bl	8000b08 <__aeabi_d2iz>
 8003560:	4603      	mov	r3, r0
 8003562:	b21a      	sxth	r2, r3
 8003564:	4b49      	ldr	r3, [pc, #292]	; (800368c <Rafael_PanTompkins+0x12dc>)
 8003566:	801a      	strh	r2, [r3, #0]
                            // If a signal peak was detected on the back search, the RR attributes must be updated.
                            // This is the same thing done when a peak is detected on the first try.
                            //RR Average 1
                            rravg1 = 0;
 8003568:	4b49      	ldr	r3, [pc, #292]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
                            for (j = 0; j < 7; j++)
 800356e:	4b49      	ldr	r3, [pc, #292]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	e019      	b.n	80035aa <Rafael_PanTompkins+0x11fa>
                            {
                                rr1[j] = rr1[j+1];
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	4b45      	ldr	r3, [pc, #276]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4945      	ldr	r1, [pc, #276]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 8003582:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003586:	4944      	ldr	r1, [pc, #272]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 8003588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                rravg1 += rr1[j];
 800358c:	4b41      	ldr	r3, [pc, #260]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a41      	ldr	r2, [pc, #260]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 8003592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003596:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4413      	add	r3, r2
 800359c:	4a3c      	ldr	r2, [pc, #240]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 800359e:	6013      	str	r3, [r2, #0]
                            for (j = 0; j < 7; j++)
 80035a0:	4b3c      	ldr	r3, [pc, #240]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <Rafael_PanTompkins+0x12e4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d9e1      	bls.n	8003576 <Rafael_PanTompkins+0x11c6>
                            }
                            rr1[7] = sample - (current - i) - lastQRS;
 80035b2:	4b25      	ldr	r3, [pc, #148]	; (8003648 <Rafael_PanTompkins+0x1298>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a39      	ldr	r2, [pc, #228]	; (800369c <Rafael_PanTompkins+0x12ec>)
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	1a9a      	subs	r2, r3, r2
 80035bc:	4b38      	ldr	r3, [pc, #224]	; (80036a0 <Rafael_PanTompkins+0x12f0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	441a      	add	r2, r3
 80035c2:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <Rafael_PanTompkins+0x12f4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b33      	ldr	r3, [pc, #204]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 80035cc:	61da      	str	r2, [r3, #28]
                            qrs = true;
 80035ce:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <Rafael_PanTompkins+0x12f8>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
                            lastQRS = sample - (current - i);
 80035d4:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <Rafael_PanTompkins+0x1298>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a30      	ldr	r2, [pc, #192]	; (800369c <Rafael_PanTompkins+0x12ec>)
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	1a9a      	subs	r2, r3, r2
 80035de:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <Rafael_PanTompkins+0x12f0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	4a2f      	ldr	r2, [pc, #188]	; (80036a4 <Rafael_PanTompkins+0x12f4>)
 80035e6:	6013      	str	r3, [r2, #0]
                            rravg1 += rr1[7];
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a27      	ldr	r2, [pc, #156]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 80035f4:	6013      	str	r3, [r2, #0]
                            rravg1 *= 0.125;
 80035f6:	4b26      	ldr	r3, [pc, #152]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ff6a 	bl	80004d4 <__aeabi_i2d>
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003608:	f7fc ffce 	bl	80005a8 <__aeabi_dmul>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	f7fd fa78 	bl	8000b08 <__aeabi_d2iz>
 8003618:	4603      	mov	r3, r0
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <Rafael_PanTompkins+0x12e0>)
 800361c:	6013      	str	r3, [r2, #0]

                            //RR Average 2
                            if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <Rafael_PanTompkins+0x12fc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	f2c0 80bc 	blt.w	80037a4 <Rafael_PanTompkins+0x13f4>
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <Rafael_PanTompkins+0x12e8>)
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <Rafael_PanTompkins+0x1300>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	f300 80b5 	bgt.w	80037a4 <Rafael_PanTompkins+0x13f4>
                            {
                                rravg2 = 0;
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <Rafael_PanTompkins+0x1304>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
                                for (i = 0; i < 7; i++)
 8003640:	4b01      	ldr	r3, [pc, #4]	; (8003648 <Rafael_PanTompkins+0x1298>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e051      	b.n	80036ec <Rafael_PanTompkins+0x133c>
 8003648:	20002bcc 	.word	0x20002bcc
 800364c:	20002218 	.word	0x20002218
 8003650:	20002be8 	.word	0x20002be8
 8003654:	20001408 	.word	0x20001408
 8003658:	20002bea 	.word	0x20002bea
 800365c:	3fd00000 	.word	0x3fd00000
 8003660:	20002bf4 	.word	0x20002bf4
 8003664:	3fe80000 	.word	0x3fe80000
 8003668:	20002bf6 	.word	0x20002bf6
 800366c:	20002bf8 	.word	0x20002bf8
 8003670:	20002bec 	.word	0x20002bec
 8003674:	3fe00000 	.word	0x3fe00000
 8003678:	20002bee 	.word	0x20002bee
 800367c:	20002be0 	.word	0x20002be0
 8003680:	20002bdc 	.word	0x20002bdc
 8003684:	20002bfa 	.word	0x20002bfa
 8003688:	20002bf0 	.word	0x20002bf0
 800368c:	20002bf2 	.word	0x20002bf2
 8003690:	20002bb8 	.word	0x20002bb8
 8003694:	20002bd0 	.word	0x20002bd0
 8003698:	20002b78 	.word	0x20002b78
 800369c:	20002be4 	.word	0x20002be4
 80036a0:	20002bd4 	.word	0x20002bd4
 80036a4:	20002bd8 	.word	0x20002bd8
 80036a8:	20002bfc 	.word	0x20002bfc
 80036ac:	20002bc0 	.word	0x20002bc0
 80036b0:	20002bc4 	.word	0x20002bc4
 80036b4:	20002bbc 	.word	0x20002bbc
                                {
                                    rr2[i] = rr2[i+1];
 80036b8:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	4b5a      	ldr	r3, [pc, #360]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	495a      	ldr	r1, [pc, #360]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80036c8:	4958      	ldr	r1, [pc, #352]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                    rravg2 += rr2[i];
 80036ce:	4b56      	ldr	r3, [pc, #344]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a56      	ldr	r2, [pc, #344]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80036d8:	4b55      	ldr	r3, [pc, #340]	; (8003830 <Rafael_PanTompkins+0x1480>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	4a54      	ldr	r2, [pc, #336]	; (8003830 <Rafael_PanTompkins+0x1480>)
 80036e0:	6013      	str	r3, [r2, #0]
                                for (i = 0; i < 7; i++)
 80036e2:	4b51      	ldr	r3, [pc, #324]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	4a4f      	ldr	r2, [pc, #316]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b4e      	ldr	r3, [pc, #312]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d9e1      	bls.n	80036b8 <Rafael_PanTompkins+0x1308>
                                }
                                rr2[7] = rr1[7];
 80036f4:	4b4f      	ldr	r3, [pc, #316]	; (8003834 <Rafael_PanTompkins+0x1484>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4a4c      	ldr	r2, [pc, #304]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036fa:	61d3      	str	r3, [r2, #28]
                                rravg2 += rr2[7];
 80036fc:	4b4b      	ldr	r3, [pc, #300]	; (800382c <Rafael_PanTompkins+0x147c>)
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4413      	add	r3, r2
 8003706:	4a4a      	ldr	r2, [pc, #296]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003708:	6013      	str	r3, [r2, #0]
                                rravg2 *= 0.125;
 800370a:	4b49      	ldr	r3, [pc, #292]	; (8003830 <Rafael_PanTompkins+0x1480>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc fee0 	bl	80004d4 <__aeabi_i2d>
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800371c:	f7fc ff44 	bl	80005a8 <__aeabi_dmul>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	f7fd f9ee 	bl	8000b08 <__aeabi_d2iz>
 800372c:	4603      	mov	r3, r0
 800372e:	4a40      	ldr	r2, [pc, #256]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003730:	6013      	str	r3, [r2, #0]
                                rrlow = 0.92*rravg2;
 8003732:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fecc 	bl	80004d4 <__aeabi_i2d>
 800373c:	a334      	add	r3, pc, #208	; (adr r3, 8003810 <Rafael_PanTompkins+0x1460>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f7fc ff31 	bl	80005a8 <__aeabi_dmul>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	f7fd f9db 	bl	8000b08 <__aeabi_d2iz>
 8003752:	4603      	mov	r3, r0
 8003754:	4a38      	ldr	r2, [pc, #224]	; (8003838 <Rafael_PanTompkins+0x1488>)
 8003756:	6013      	str	r3, [r2, #0]
                                rrhigh = 1.16*rravg2;
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <Rafael_PanTompkins+0x1480>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc feb9 	bl	80004d4 <__aeabi_i2d>
 8003762:	a32d      	add	r3, pc, #180	; (adr r3, 8003818 <Rafael_PanTompkins+0x1468>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f7fc ff1e 	bl	80005a8 <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f7fd f9c8 	bl	8000b08 <__aeabi_d2iz>
 8003778:	4603      	mov	r3, r0
 800377a:	4a30      	ldr	r2, [pc, #192]	; (800383c <Rafael_PanTompkins+0x148c>)
 800377c:	6013      	str	r3, [r2, #0]
                                rrmiss = 1.66*rravg2;
 800377e:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <Rafael_PanTompkins+0x1480>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc fea6 	bl	80004d4 <__aeabi_i2d>
 8003788:	a325      	add	r3, pc, #148	; (adr r3, 8003820 <Rafael_PanTompkins+0x1470>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f7fc ff0b 	bl	80005a8 <__aeabi_dmul>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd f9b5 	bl	8000b08 <__aeabi_d2iz>
 800379e:	4603      	mov	r3, r0
 80037a0:	4a27      	ldr	r2, [pc, #156]	; (8003840 <Rafael_PanTompkins+0x1490>)
 80037a2:	6013      	str	r3, [r2, #0]
                            }

                            prevRegular = regular;
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <Rafael_PanTompkins+0x1494>)
 80037a6:	781a      	ldrb	r2, [r3, #0]
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <Rafael_PanTompkins+0x1498>)
 80037aa:	701a      	strb	r2, [r3, #0]
                            if (rravg1 == rravg2)
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <Rafael_PanTompkins+0x149c>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <Rafael_PanTompkins+0x1480>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d103      	bne.n	80037c0 <Rafael_PanTompkins+0x1410>
                            {
                                regular = true;
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <Rafael_PanTompkins+0x1494>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
                                    threshold_i1 /= 2;
                                    threshold_f1 /= 2;
                                }
                            }

                            break;
 80037be:	e04d      	b.n	800385c <Rafael_PanTompkins+0x14ac>
                                regular = false;
 80037c0:	4b20      	ldr	r3, [pc, #128]	; (8003844 <Rafael_PanTompkins+0x1494>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
                                if (prevRegular)
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <Rafael_PanTompkins+0x1498>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d046      	beq.n	800385c <Rafael_PanTompkins+0x14ac>
                                    threshold_i1 /= 2;
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <Rafael_PanTompkins+0x14a0>)
 80037d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d4:	0fda      	lsrs	r2, r3, #31
 80037d6:	4413      	add	r3, r2
 80037d8:	105b      	asrs	r3, r3, #1
 80037da:	b21a      	sxth	r2, r3
 80037dc:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <Rafael_PanTompkins+0x14a0>)
 80037de:	801a      	strh	r2, [r3, #0]
                                    threshold_f1 /= 2;
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <Rafael_PanTompkins+0x14a4>)
 80037e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e6:	0fda      	lsrs	r2, r3, #31
 80037e8:	4413      	add	r3, r2
 80037ea:	105b      	asrs	r3, r3, #1
 80037ec:	b21a      	sxth	r2, r3
 80037ee:	4b19      	ldr	r3, [pc, #100]	; (8003854 <Rafael_PanTompkins+0x14a4>)
 80037f0:	801a      	strh	r2, [r3, #0]
                            break;
 80037f2:	e033      	b.n	800385c <Rafael_PanTompkins+0x14ac>
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <Rafael_PanTompkins+0x1478>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <Rafael_PanTompkins+0x1478>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a15      	ldr	r2, [pc, #84]	; (8003858 <Rafael_PanTompkins+0x14a8>)
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4293      	cmp	r3, r2
 8003808:	f4ff ad18 	bcc.w	800323c <Rafael_PanTompkins+0xe8c>
 800380c:	e027      	b.n	800385e <Rafael_PanTompkins+0x14ae>
 800380e:	bf00      	nop
 8003810:	d70a3d71 	.word	0xd70a3d71
 8003814:	3fed70a3 	.word	0x3fed70a3
 8003818:	28f5c28f 	.word	0x28f5c28f
 800381c:	3ff28f5c 	.word	0x3ff28f5c
 8003820:	28f5c28f 	.word	0x28f5c28f
 8003824:	3ffa8f5c 	.word	0x3ffa8f5c
 8003828:	20002bcc 	.word	0x20002bcc
 800382c:	20002b98 	.word	0x20002b98
 8003830:	20002bbc 	.word	0x20002bbc
 8003834:	20002b78 	.word	0x20002b78
 8003838:	20002bc0 	.word	0x20002bc0
 800383c:	20002bc4 	.word	0x20002bc4
 8003840:	20002bc8 	.word	0x20002bc8
 8003844:	20000004 	.word	0x20000004
 8003848:	20002bfd 	.word	0x20002bfd
 800384c:	20002bb8 	.word	0x20002bb8
 8003850:	20002bec 	.word	0x20002bec
 8003854:	20002bf0 	.word	0x20002bf0
 8003858:	20002be4 	.word	0x20002be4
                            break;
 800385c:	bf00      	nop
                        }
                    }
				}

				if (qrs)
 800385e:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <Rafael_PanTompkins+0x16e0>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d014      	beq.n	8003890 <Rafael_PanTompkins+0x14e0>
                {
					RF_outputSignal[current] = false;
 8003866:	4b8b      	ldr	r3, [pc, #556]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a8b      	ldr	r2, [pc, #556]	; (8003a98 <Rafael_PanTompkins+0x16e8>)
 800386c:	2100      	movs	r1, #0
 800386e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					RF_outputSignal[i] = true;
 8003872:	4b8a      	ldr	r3, [pc, #552]	; (8003a9c <Rafael_PanTompkins+0x16ec>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a88      	ldr	r2, [pc, #544]	; (8003a98 <Rafael_PanTompkins+0x16e8>)
 8003878:	2101      	movs	r1, #1
 800387a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    result = (current - i);
 800387e:	4b85      	ldr	r3, [pc, #532]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	b29a      	uxth	r2, r3
 8003884:	4b85      	ldr	r3, [pc, #532]	; (8003a9c <Rafael_PanTompkins+0x16ec>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	b29b      	uxth	r3, r3
 800388e:	81fb      	strh	r3, [r7, #14]
                }
			}

			// Definitely no signal peak was detected.
			if (!qrs)
 8003890:	4b7f      	ldr	r3, [pc, #508]	; (8003a90 <Rafael_PanTompkins+0x16e0>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 80f3 	bne.w	8003a80 <Rafael_PanTompkins+0x16d0>
			{
				// If some kind of peak had been detected, then it's certainly a noise peak. Thresholds must be updated accordinly.
				if ((RF_integral[current] >= threshold_i1) || (RF_highpass[current] >= threshold_f1))
 800389a:	4b7e      	ldr	r3, [pc, #504]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a80      	ldr	r2, [pc, #512]	; (8003aa0 <Rafael_PanTompkins+0x16f0>)
 80038a0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80038a4:	4b7f      	ldr	r3, [pc, #508]	; (8003aa4 <Rafael_PanTompkins+0x16f4>)
 80038a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	da0a      	bge.n	80038c4 <Rafael_PanTompkins+0x1514>
 80038ae:	4b79      	ldr	r3, [pc, #484]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7d      	ldr	r2, [pc, #500]	; (8003aa8 <Rafael_PanTompkins+0x16f8>)
 80038b4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80038b8:	4b7c      	ldr	r3, [pc, #496]	; (8003aac <Rafael_PanTompkins+0x16fc>)
 80038ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038be:	429a      	cmp	r2, r3
 80038c0:	f2c0 80de 	blt.w	8003a80 <Rafael_PanTompkins+0x16d0>
				{
					peak_i = RF_integral[current];
 80038c4:	4b73      	ldr	r3, [pc, #460]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a75      	ldr	r2, [pc, #468]	; (8003aa0 <Rafael_PanTompkins+0x16f0>)
 80038ca:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80038ce:	4b78      	ldr	r3, [pc, #480]	; (8003ab0 <Rafael_PanTompkins+0x1700>)
 80038d0:	801a      	strh	r2, [r3, #0]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 80038d2:	4b77      	ldr	r3, [pc, #476]	; (8003ab0 <Rafael_PanTompkins+0x1700>)
 80038d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fc fdfb 	bl	80004d4 <__aeabi_i2d>
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80038e6:	f7fc fe5f 	bl	80005a8 <__aeabi_dmul>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4614      	mov	r4, r2
 80038f0:	461d      	mov	r5, r3
 80038f2:	4b70      	ldr	r3, [pc, #448]	; (8003ab4 <Rafael_PanTompkins+0x1704>)
 80038f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fdeb 	bl	80004d4 <__aeabi_i2d>
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <Rafael_PanTompkins+0x1708>)
 8003904:	f7fc fe50 	bl	80005a8 <__aeabi_dmul>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4620      	mov	r0, r4
 800390e:	4629      	mov	r1, r5
 8003910:	f7fc fc94 	bl	800023c <__adddf3>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	f7fd f8f4 	bl	8000b08 <__aeabi_d2iz>
 8003920:	4603      	mov	r3, r0
 8003922:	b21a      	sxth	r2, r3
 8003924:	4b63      	ldr	r3, [pc, #396]	; (8003ab4 <Rafael_PanTompkins+0x1704>)
 8003926:	801a      	strh	r2, [r3, #0]
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8003928:	4b62      	ldr	r3, [pc, #392]	; (8003ab4 <Rafael_PanTompkins+0x1704>)
 800392a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fdd0 	bl	80004d4 <__aeabi_i2d>
 8003934:	4604      	mov	r4, r0
 8003936:	460d      	mov	r5, r1
 8003938:	4b60      	ldr	r3, [pc, #384]	; (8003abc <Rafael_PanTompkins+0x170c>)
 800393a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800393e:	461a      	mov	r2, r3
 8003940:	4b5c      	ldr	r3, [pc, #368]	; (8003ab4 <Rafael_PanTompkins+0x1704>)
 8003942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	4618      	mov	r0, r3
 800394a:	f7fc fdc3 	bl	80004d4 <__aeabi_i2d>
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	4b5b      	ldr	r3, [pc, #364]	; (8003ac0 <Rafael_PanTompkins+0x1710>)
 8003954:	f7fc fe28 	bl	80005a8 <__aeabi_dmul>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4620      	mov	r0, r4
 800395e:	4629      	mov	r1, r5
 8003960:	f7fc fc6c 	bl	800023c <__adddf3>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f7fd f8cc 	bl	8000b08 <__aeabi_d2iz>
 8003970:	4603      	mov	r3, r0
 8003972:	b21a      	sxth	r2, r3
 8003974:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <Rafael_PanTompkins+0x16f4>)
 8003976:	801a      	strh	r2, [r3, #0]
					threshold_i2 = 0.5*threshold_i1;
 8003978:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <Rafael_PanTompkins+0x16f4>)
 800397a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fc fda8 	bl	80004d4 <__aeabi_i2d>
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	4b4e      	ldr	r3, [pc, #312]	; (8003ac4 <Rafael_PanTompkins+0x1714>)
 800398a:	f7fc fe0d 	bl	80005a8 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f7fd f8b7 	bl	8000b08 <__aeabi_d2iz>
 800399a:	4603      	mov	r3, r0
 800399c:	b21a      	sxth	r2, r3
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <Rafael_PanTompkins+0x1718>)
 80039a0:	801a      	strh	r2, [r3, #0]
					peak_f = RF_highpass[current];
 80039a2:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <Rafael_PanTompkins+0x16e4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <Rafael_PanTompkins+0x16f8>)
 80039a8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80039ac:	4b47      	ldr	r3, [pc, #284]	; (8003acc <Rafael_PanTompkins+0x171c>)
 80039ae:	801a      	strh	r2, [r3, #0]
					npk_f = 0.125*peak_f + 0.875*npk_f;
 80039b0:	4b46      	ldr	r3, [pc, #280]	; (8003acc <Rafael_PanTompkins+0x171c>)
 80039b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fd8c 	bl	80004d4 <__aeabi_i2d>
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80039c4:	f7fc fdf0 	bl	80005a8 <__aeabi_dmul>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <Rafael_PanTompkins+0x1720>)
 80039d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fd7c 	bl	80004d4 <__aeabi_i2d>
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <Rafael_PanTompkins+0x1708>)
 80039e2:	f7fc fde1 	bl	80005a8 <__aeabi_dmul>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	f7fc fc25 	bl	800023c <__adddf3>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	f7fd f885 	bl	8000b08 <__aeabi_d2iz>
 80039fe:	4603      	mov	r3, r0
 8003a00:	b21a      	sxth	r2, r3
 8003a02:	4b33      	ldr	r3, [pc, #204]	; (8003ad0 <Rafael_PanTompkins+0x1720>)
 8003a04:	801a      	strh	r2, [r3, #0]
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8003a06:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <Rafael_PanTompkins+0x1720>)
 8003a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd61 	bl	80004d4 <__aeabi_i2d>
 8003a12:	4604      	mov	r4, r0
 8003a14:	460d      	mov	r5, r1
 8003a16:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <Rafael_PanTompkins+0x1724>)
 8003a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ad0 <Rafael_PanTompkins+0x1720>)
 8003a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fd54 	bl	80004d4 <__aeabi_i2d>
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <Rafael_PanTompkins+0x1710>)
 8003a32:	f7fc fdb9 	bl	80005a8 <__aeabi_dmul>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7fc fbfd 	bl	800023c <__adddf3>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f85d 	bl	8000b08 <__aeabi_d2iz>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <Rafael_PanTompkins+0x16fc>)
 8003a54:	801a      	strh	r2, [r3, #0]
					threshold_f2 = 0.5*threshold_f1;
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <Rafael_PanTompkins+0x16fc>)
 8003a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fc fd39 	bl	80004d4 <__aeabi_i2d>
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <Rafael_PanTompkins+0x1714>)
 8003a68:	f7fc fd9e 	bl	80005a8 <__aeabi_dmul>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	f7fd f848 	bl	8000b08 <__aeabi_d2iz>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	b21a      	sxth	r2, r3
 8003a7c:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <Rafael_PanTompkins+0x1728>)
 8003a7e:	801a      	strh	r2, [r3, #0]
		// However, it updates a few samples back from the buffer. The reason is that if we update the detection
		// for the current sample, we might miss a peak that could've been found later by backsearching using
		// lighter thresholds. The final waveform output does match the original signal, though.

		//UPDATE: If peak was detected returns sample delay, else returns 0
		return result;
 8003a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a8e:	bf00      	nop
 8003a90:	20002bfc 	.word	0x20002bfc
 8003a94:	20002be4 	.word	0x20002be4
 8003a98:	200026c8 	.word	0x200026c8
 8003a9c:	20002bcc 	.word	0x20002bcc
 8003aa0:	20002218 	.word	0x20002218
 8003aa4:	20002bec 	.word	0x20002bec
 8003aa8:	20001408 	.word	0x20001408
 8003aac:	20002bf0 	.word	0x20002bf0
 8003ab0:	20002be8 	.word	0x20002be8
 8003ab4:	20002bf8 	.word	0x20002bf8
 8003ab8:	3fec0000 	.word	0x3fec0000
 8003abc:	20002bf4 	.word	0x20002bf4
 8003ac0:	3fd00000 	.word	0x3fd00000
 8003ac4:	3fe00000 	.word	0x3fe00000
 8003ac8:	20002bee 	.word	0x20002bee
 8003acc:	20002bea 	.word	0x20002bea
 8003ad0:	20002bfa 	.word	0x20002bfa
 8003ad4:	20002bf6 	.word	0x20002bf6
 8003ad8:	20002bf2 	.word	0x20002bf2

08003adc <Rafael_get_LPFilter_output>:


int16_t Rafael_get_LPFilter_output()
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
	return RF_lowpass[BUFFSIZE];
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <Rafael_get_LPFilter_output+0x14>)
 8003ae2:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	20000f58 	.word	0x20000f58

08003af4 <Rafael_get_HPFilter_output>:
int16_t Rafael_get_HPFilter_output()
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
	return RF_highpass[BUFFSIZE];
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <Rafael_get_HPFilter_output+0x14>)
 8003afa:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	20001408 	.word	0x20001408

08003b0c <Rafael_get_DRFilter_output>:
int16_t Rafael_get_DRFilter_output()
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
	return RF_derivative[BUFFSIZE];
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <Rafael_get_DRFilter_output+0x14>)
 8003b12:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	200018b8 	.word	0x200018b8

08003b24 <Rafael_get_SQRFilter_output>:
int16_t Rafael_get_SQRFilter_output()
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
	return RF_squared[current];
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <Rafael_get_SQRFilter_output+0x18>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <Rafael_get_SQRFilter_output+0x1c>)
 8003b2e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20002be4 	.word	0x20002be4
 8003b40:	20001d68 	.word	0x20001d68

08003b44 <Rafael_get_MVFilter_output>:
int16_t Rafael_get_MVFilter_output()
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	return RF_integral[current];
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <Rafael_get_MVFilter_output+0x18>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <Rafael_get_MVFilter_output+0x1c>)
 8003b4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20002be4 	.word	0x20002be4
 8003b60:	20002218 	.word	0x20002218

08003b64 <Rafael_get_ThI1_output>:
int16_t Rafael_get_ThI1_output()
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
	return threshold_i1;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <Rafael_get_ThI1_output+0x14>)
 8003b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	20002bec 	.word	0x20002bec

08003b7c <Rafael_get_ThF1_output>:
int16_t Rafael_get_ThF1_output()
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
	return threshold_f1;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <Rafael_get_ThF1_output+0x14>)
 8003b82:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	20002bf0 	.word	0x20002bf0

08003b94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <findStrEnd>:

struct State applicationState;

char str[250];
uint16_t findStrEnd ()
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
	uint16_t end = 10;
 8003bce:	230a      	movs	r3, #10
 8003bd0:	80fb      	strh	r3, [r7, #6]
	while (str[end]!='\0')
 8003bd2:	e005      	b.n	8003be0 <findStrEnd+0x18>
	{
		end++;
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	80fb      	strh	r3, [r7, #6]
		if (end == 250)
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	2bfa      	cmp	r3, #250	; 0xfa
 8003bde:	d005      	beq.n	8003bec <findStrEnd+0x24>
	while (str[end]!='\0')
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <findStrEnd+0x34>)
 8003be4:	5cd3      	ldrb	r3, [r2, r3]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f4      	bne.n	8003bd4 <findStrEnd+0xc>
 8003bea:	e000      	b.n	8003bee <findStrEnd+0x26>
		{
			break;
 8003bec:	bf00      	nop
		}
	}
	return end;
 8003bee:	88fb      	ldrh	r3, [r7, #6]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	20002c58 	.word	0x20002c58

08003c00 <parseLine>:
void parseLine (uint8_t* Buf, uint32_t Len)
{//Function parse one line from serial port
 8003c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c04:	b0a3      	sub	sp, #140	; 0x8c
 8003c06:	af0e      	add	r7, sp, #56	; 0x38
 8003c08:	61f8      	str	r0, [r7, #28]
 8003c0a:	61b9      	str	r1, [r7, #24]
	//In line can be command or data
	if (Len>6)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d970      	bls.n	8003cf4 <parseLine+0xf4>
	{//command mast be longer than 6 bytes
		if (Buf[0]==0x2B && Buf[1]==0x2B && Buf[2]==0x2B)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b2b      	cmp	r3, #43	; 0x2b
 8003c18:	d16c      	bne.n	8003cf4 <parseLine+0xf4>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b2b      	cmp	r3, #43	; 0x2b
 8003c22:	d167      	bne.n	8003cf4 <parseLine+0xf4>
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	3302      	adds	r3, #2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b2b      	cmp	r3, #43	; 0x2b
 8003c2c:	d162      	bne.n	8003cf4 <parseLine+0xf4>
		{//three ++ indicate command
			switch (Buf[3])
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3303      	adds	r3, #3
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b41      	cmp	r3, #65	; 0x41
 8003c36:	d002      	beq.n	8003c3e <parseLine+0x3e>
 8003c38:	2b42      	cmp	r3, #66	; 0x42
 8003c3a:	d005      	beq.n	8003c48 <parseLine+0x48>
 8003c3c:	e048      	b.n	8003cd0 <parseLine+0xd0>
			{
			case changeDataFormat:
				applicationState.dataType = Buf[4];
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	791a      	ldrb	r2, [r3, #4]
 8003c42:	4b93      	ldr	r3, [pc, #588]	; (8003e90 <parseLine+0x290>)
 8003c44:	701a      	strb	r2, [r3, #0]
				break;
 8003c46:	e054      	b.n	8003cf2 <parseLine+0xf2>
			case changeSelectedAlgorithm:
				applicationState.selectedImplementation = Buf[4];
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	791a      	ldrb	r2, [r3, #4]
 8003c4c:	4b90      	ldr	r3, [pc, #576]	; (8003e90 <parseLine+0x290>)
 8003c4e:	705a      	strb	r2, [r3, #1]
				if (applicationState.selectedImplementation == hoomam650)
 8003c50:	4b8f      	ldr	r3, [pc, #572]	; (8003e90 <parseLine+0x290>)
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b31      	cmp	r3, #49	; 0x31
 8003c56:	d110      	bne.n	8003c7a <parseLine+0x7a>
				{
					PT_init();
 8003c58:	f7fd f9a0 	bl	8000f9c <PT_init>
					sprintf(str,"OK, done.   \r\n");
 8003c5c:	498d      	ldr	r1, [pc, #564]	; (8003e94 <parseLine+0x294>)
 8003c5e:	488e      	ldr	r0, [pc, #568]	; (8003e98 <parseLine+0x298>)
 8003c60:	f009 ff86 	bl	800db70 <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003c64:	bf00      	nop
 8003c66:	f7ff ffaf 	bl	8003bc8 <findStrEnd>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	488a      	ldr	r0, [pc, #552]	; (8003e98 <parseLine+0x298>)
 8003c70:	f008 fc16 	bl	800c4a0 <CDC_Transmit_FS>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f5      	bne.n	8003c66 <parseLine+0x66>
				}
				if (applicationState.selectedImplementation == rafalmmoreira)
 8003c7a:	4b85      	ldr	r3, [pc, #532]	; (8003e90 <parseLine+0x290>)
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	2b32      	cmp	r3, #50	; 0x32
 8003c80:	d110      	bne.n	8003ca4 <parseLine+0xa4>
				{
					Rafael_init();
 8003c82:	f7fe fb15 	bl	80022b0 <Rafael_init>
					sprintf(str,"OK, done.   \r\n");
 8003c86:	4983      	ldr	r1, [pc, #524]	; (8003e94 <parseLine+0x294>)
 8003c88:	4883      	ldr	r0, [pc, #524]	; (8003e98 <parseLine+0x298>)
 8003c8a:	f009 ff71 	bl	800db70 <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003c8e:	bf00      	nop
 8003c90:	f7ff ff9a 	bl	8003bc8 <findStrEnd>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4619      	mov	r1, r3
 8003c98:	487f      	ldr	r0, [pc, #508]	; (8003e98 <parseLine+0x298>)
 8003c9a:	f008 fc01 	bl	800c4a0 <CDC_Transmit_FS>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f5      	bne.n	8003c90 <parseLine+0x90>
				}
				if (applicationState.selectedImplementation == marower)
 8003ca4:	4b7a      	ldr	r3, [pc, #488]	; (8003e90 <parseLine+0x290>)
 8003ca6:	785b      	ldrb	r3, [r3, #1]
 8003ca8:	2b33      	cmp	r3, #51	; 0x33
 8003caa:	d121      	bne.n	8003cf0 <parseLine+0xf0>
				{
					arm_PT_init();
 8003cac:	f7fe f9fc 	bl	80020a8 <arm_PT_init>
					sprintf(str,"OK, done.   \r\n");
 8003cb0:	4978      	ldr	r1, [pc, #480]	; (8003e94 <parseLine+0x294>)
 8003cb2:	4879      	ldr	r0, [pc, #484]	; (8003e98 <parseLine+0x298>)
 8003cb4:	f009 ff5c 	bl	800db70 <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003cb8:	bf00      	nop
 8003cba:	f7ff ff85 	bl	8003bc8 <findStrEnd>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4875      	ldr	r0, [pc, #468]	; (8003e98 <parseLine+0x298>)
 8003cc4:	f008 fbec 	bl	800c4a0 <CDC_Transmit_FS>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f5      	bne.n	8003cba <parseLine+0xba>
				}
				break;
 8003cce:	e00f      	b.n	8003cf0 <parseLine+0xf0>
			default:
				sprintf(str,"error...\r\n");
 8003cd0:	4972      	ldr	r1, [pc, #456]	; (8003e9c <parseLine+0x29c>)
 8003cd2:	4871      	ldr	r0, [pc, #452]	; (8003e98 <parseLine+0x298>)
 8003cd4:	f009 ff4c 	bl	800db70 <siprintf>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003cd8:	bf00      	nop
 8003cda:	f7ff ff75 	bl	8003bc8 <findStrEnd>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	486d      	ldr	r0, [pc, #436]	; (8003e98 <parseLine+0x298>)
 8003ce4:	f008 fbdc 	bl	800c4a0 <CDC_Transmit_FS>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f5      	bne.n	8003cda <parseLine+0xda>
				break;
 8003cee:	e000      	b.n	8003cf2 <parseLine+0xf2>
				break;
 8003cf0:	bf00      	nop
			}
			return;
 8003cf2:	e146      	b.n	8003f82 <parseLine+0x382>
		}
	}

	int16_t dataSample;
	switch (applicationState.dataType)
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <parseLine+0x290>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b31      	cmp	r3, #49	; 0x31
 8003cfa:	d00d      	beq.n	8003d18 <parseLine+0x118>
 8003cfc:	2b32      	cmp	r3, #50	; 0x32
 8003cfe:	d112      	bne.n	8003d26 <parseLine+0x126>
	{//decode data
	case int16asBytes:
		dataSample = (Buf[0]<<8)|Buf[1];
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	b21a      	sxth	r2, r3
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		break;
 8003d16:	e016      	b.n	8003d46 <parseLine+0x146>
	case intasString:
		dataSample = atoi (Buf);
 8003d18:	69f8      	ldr	r0, [r7, #28]
 8003d1a:	f009 f865 	bl	800cde8 <atoi>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		break;
 8003d24:	e00f      	b.n	8003d46 <parseLine+0x146>
	default:
		sprintf(str,"error...\r\n");
 8003d26:	495d      	ldr	r1, [pc, #372]	; (8003e9c <parseLine+0x29c>)
 8003d28:	485b      	ldr	r0, [pc, #364]	; (8003e98 <parseLine+0x298>)
 8003d2a:	f009 ff21 	bl	800db70 <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003d2e:	bf00      	nop
 8003d30:	f7ff ff4a 	bl	8003bc8 <findStrEnd>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4619      	mov	r1, r3
 8003d38:	4857      	ldr	r0, [pc, #348]	; (8003e98 <parseLine+0x298>)
 8003d3a:	f008 fbb1 	bl	800c4a0 <CDC_Transmit_FS>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f5      	bne.n	8003d30 <parseLine+0x130>
		return;
 8003d44:	e11d      	b.n	8003f82 <parseLine+0x382>
	float32_t s3_f32;
	float32_t s4_f32;
	float32_t s5_f32;
	float32_t ThI1_f32;
	float32_t ThF1_f32;
	switch (applicationState.selectedImplementation)
 8003d46:	4b52      	ldr	r3, [pc, #328]	; (8003e90 <parseLine+0x290>)
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	2b33      	cmp	r3, #51	; 0x33
 8003d4c:	f000 80aa 	beq.w	8003ea4 <parseLine+0x2a4>
 8003d50:	2b33      	cmp	r3, #51	; 0x33
 8003d52:	f300 8115 	bgt.w	8003f80 <parseLine+0x380>
 8003d56:	2b31      	cmp	r3, #49	; 0x31
 8003d58:	d002      	beq.n	8003d60 <parseLine+0x160>
 8003d5a:	2b32      	cmp	r3, #50	; 0x32
 8003d5c:	d04c      	beq.n	8003df8 <parseLine+0x1f8>
		ThF1_f32 = arm_get_ThF1_output();
		sprintf(str,"%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", delay, s1_f32, s2_f32, s3_f32, s4_f32, s5_f32, ThI1_f32, ThF1_f32);
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
		break;
	default:
		return;
 8003d5e:	e10f      	b.n	8003f80 <parseLine+0x380>
		delay = PT_StateMachine (dataSample);
 8003d60:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fd fa4b 	bl	8001200 <PT_StateMachine>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1 = PT_get_LPFilter_output();
 8003d70:	f7fe f924 	bl	8001fbc <PT_get_LPFilter_output>
 8003d74:	4603      	mov	r3, r0
 8003d76:	85fb      	strh	r3, [r7, #46]	; 0x2e
		s2 = PT_get_HPFilter_output();
 8003d78:	f7fe f92c 	bl	8001fd4 <PT_get_HPFilter_output>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
		s3 = PT_get_DRFilter_output();
 8003d80:	f7fe f934 	bl	8001fec <PT_get_DRFilter_output>
 8003d84:	4603      	mov	r3, r0
 8003d86:	857b      	strh	r3, [r7, #42]	; 0x2a
		s4 = PT_get_SQRFilter_output();
 8003d88:	f7fe f948 	bl	800201c <PT_get_SQRFilter_output>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	853b      	strh	r3, [r7, #40]	; 0x28
		s5 = PT_get_MVFilter_output();
 8003d90:	f7fe f938 	bl	8002004 <PT_get_MVFilter_output>
 8003d94:	4603      	mov	r3, r0
 8003d96:	84fb      	strh	r3, [r7, #38]	; 0x26
		ThI1 = PT_get_ThI1_output();
 8003d98:	f7fe f94c 	bl	8002034 <PT_get_ThI1_output>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		ThF1 = PT_get_ThF1_output();
 8003da0:	f7fe f954 	bl	800204c <PT_get_ThF1_output>
 8003da4:	4603      	mov	r3, r0
 8003da6:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(str,"%d,%d,%d,%d,%d,%d,%d,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 8003da8:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8003dac:	f9b7 c02e 	ldrsh.w	ip, [r7, #46]	; 0x2e
 8003db0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003db4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8003db8:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8003dbc:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 8003dc0:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 8003dc4:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 8003dc8:	9505      	str	r5, [sp, #20]
 8003dca:	9404      	str	r4, [sp, #16]
 8003dcc:	9003      	str	r0, [sp, #12]
 8003dce:	9102      	str	r1, [sp, #8]
 8003dd0:	9201      	str	r2, [sp, #4]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	4663      	mov	r3, ip
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	4931      	ldr	r1, [pc, #196]	; (8003ea0 <parseLine+0x2a0>)
 8003dda:	482f      	ldr	r0, [pc, #188]	; (8003e98 <parseLine+0x298>)
 8003ddc:	f009 fec8 	bl	800db70 <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003de0:	bf00      	nop
 8003de2:	f7ff fef1 	bl	8003bc8 <findStrEnd>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4619      	mov	r1, r3
 8003dea:	482b      	ldr	r0, [pc, #172]	; (8003e98 <parseLine+0x298>)
 8003dec:	f008 fb58 	bl	800c4a0 <CDC_Transmit_FS>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f5      	bne.n	8003de2 <parseLine+0x1e2>
		break;
 8003df6:	e0c4      	b.n	8003f82 <parseLine+0x382>
		delay = Rafael_PanTompkins(dataSample);
 8003df8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe fad7 	bl	80023b0 <Rafael_PanTompkins>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1 = Rafael_get_LPFilter_output();
 8003e08:	f7ff fe68 	bl	8003adc <Rafael_get_LPFilter_output>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		s2 = Rafael_get_HPFilter_output();
 8003e10:	f7ff fe70 	bl	8003af4 <Rafael_get_HPFilter_output>
 8003e14:	4603      	mov	r3, r0
 8003e16:	85bb      	strh	r3, [r7, #44]	; 0x2c
		s3 = Rafael_get_DRFilter_output();
 8003e18:	f7ff fe78 	bl	8003b0c <Rafael_get_DRFilter_output>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	857b      	strh	r3, [r7, #42]	; 0x2a
		s4 = Rafael_get_SQRFilter_output();
 8003e20:	f7ff fe80 	bl	8003b24 <Rafael_get_SQRFilter_output>
 8003e24:	4603      	mov	r3, r0
 8003e26:	853b      	strh	r3, [r7, #40]	; 0x28
		s5 = Rafael_get_MVFilter_output();
 8003e28:	f7ff fe8c 	bl	8003b44 <Rafael_get_MVFilter_output>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	84fb      	strh	r3, [r7, #38]	; 0x26
		ThI1 = Rafael_get_ThI1_output();
 8003e30:	f7ff fe98 	bl	8003b64 <Rafael_get_ThI1_output>
 8003e34:	4603      	mov	r3, r0
 8003e36:	84bb      	strh	r3, [r7, #36]	; 0x24
		ThF1 = Rafael_get_ThF1_output();
 8003e38:	f7ff fea0 	bl	8003b7c <Rafael_get_ThF1_output>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(str,"%d,%d,%d,%d,%d,%d,%d,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 8003e40:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8003e44:	f9b7 c02e 	ldrsh.w	ip, [r7, #46]	; 0x2e
 8003e48:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003e4c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8003e50:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8003e54:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 8003e58:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 8003e5c:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 8003e60:	9505      	str	r5, [sp, #20]
 8003e62:	9404      	str	r4, [sp, #16]
 8003e64:	9003      	str	r0, [sp, #12]
 8003e66:	9102      	str	r1, [sp, #8]
 8003e68:	9201      	str	r2, [sp, #4]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	4663      	mov	r3, ip
 8003e6e:	4632      	mov	r2, r6
 8003e70:	490b      	ldr	r1, [pc, #44]	; (8003ea0 <parseLine+0x2a0>)
 8003e72:	4809      	ldr	r0, [pc, #36]	; (8003e98 <parseLine+0x298>)
 8003e74:	f009 fe7c 	bl	800db70 <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003e78:	bf00      	nop
 8003e7a:	f7ff fea5 	bl	8003bc8 <findStrEnd>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4619      	mov	r1, r3
 8003e82:	4805      	ldr	r0, [pc, #20]	; (8003e98 <parseLine+0x298>)
 8003e84:	f008 fb0c 	bl	800c4a0 <CDC_Transmit_FS>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f5      	bne.n	8003e7a <parseLine+0x27a>
		break;
 8003e8e:	e078      	b.n	8003f82 <parseLine+0x382>
 8003e90:	20002c54 	.word	0x20002c54
 8003e94:	08011760 	.word	0x08011760
 8003e98:	20002c58 	.word	0x20002c58
 8003e9c:	08011770 	.word	0x08011770
 8003ea0:	0801177c 	.word	0x0801177c
		delay = arm_PT_ST(dataSample);
 8003ea4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fe f955 	bl	8002158 <arm_PT_ST>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		s1_f32 = arm_get_LPFilter_output();
 8003eb4:	f7fe f99e 	bl	80021f4 <arm_get_LPFilter_output>
 8003eb8:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		s2_f32 = arm_get_HPFilter_output();
 8003ebc:	f7fe f9a8 	bl	8002210 <arm_get_HPFilter_output>
 8003ec0:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		s3_f32 = arm_get_DRFilter_output();
 8003ec4:	f7fe f9b2 	bl	800222c <arm_get_DRFilter_output>
 8003ec8:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		s4_f32 = arm_get_SQRFilter_output();
 8003ecc:	f7fe f9bc 	bl	8002248 <arm_get_SQRFilter_output>
 8003ed0:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		s5_f32 = arm_get_MVFilter_output();
 8003ed4:	f7fe f9c6 	bl	8002264 <arm_get_MVFilter_output>
 8003ed8:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		ThI1_f32 = arm_get_ThI1_output();
 8003edc:	f7fe f9d0 	bl	8002280 <arm_get_ThI1_output>
 8003ee0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		ThF1_f32 = arm_get_ThF1_output();
 8003ee4:	f7fe f9d8 	bl	8002298 <arm_get_ThF1_output>
 8003ee8:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		sprintf(str,"%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\r\n", delay, s1_f32, s2_f32, s3_f32, s4_f32, s5_f32, ThI1_f32, ThF1_f32);
 8003eec:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8003ef0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ef2:	f7fc fb01 	bl	80004f8 <__aeabi_f2d>
 8003ef6:	4680      	mov	r8, r0
 8003ef8:	4689      	mov	r9, r1
 8003efa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003efc:	f7fc fafc 	bl	80004f8 <__aeabi_f2d>
 8003f00:	4682      	mov	sl, r0
 8003f02:	468b      	mov	fp, r1
 8003f04:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003f06:	f7fc faf7 	bl	80004f8 <__aeabi_f2d>
 8003f0a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003f0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f10:	f7fc faf2 	bl	80004f8 <__aeabi_f2d>
 8003f14:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f1a:	f7fc faed 	bl	80004f8 <__aeabi_f2d>
 8003f1e:	e9c7 0100 	strd	r0, r1, [r7]
 8003f22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f24:	f7fc fae8 	bl	80004f8 <__aeabi_f2d>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	460d      	mov	r5, r1
 8003f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f2e:	f7fc fae3 	bl	80004f8 <__aeabi_f2d>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003f3a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003f3e:	ed97 7b00 	vldr	d7, [r7]
 8003f42:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003f46:	ed97 7b02 	vldr	d7, [r7, #8]
 8003f4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003f4e:	ed97 7b04 	vldr	d7, [r7, #16]
 8003f52:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f56:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003f5a:	e9cd 8900 	strd	r8, r9, [sp]
 8003f5e:	4632      	mov	r2, r6
 8003f60:	490a      	ldr	r1, [pc, #40]	; (8003f8c <parseLine+0x38c>)
 8003f62:	480b      	ldr	r0, [pc, #44]	; (8003f90 <parseLine+0x390>)
 8003f64:	f009 fe04 	bl	800db70 <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003f68:	bf00      	nop
 8003f6a:	f7ff fe2d 	bl	8003bc8 <findStrEnd>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4619      	mov	r1, r3
 8003f72:	4807      	ldr	r0, [pc, #28]	; (8003f90 <parseLine+0x390>)
 8003f74:	f008 fa94 	bl	800c4a0 <CDC_Transmit_FS>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f5      	bne.n	8003f6a <parseLine+0x36a>
		break;
 8003f7e:	e000      	b.n	8003f82 <parseLine+0x382>
		return;
 8003f80:	bf00      	nop
		break;
	}
}
 8003f82:	3754      	adds	r7, #84	; 0x54
 8003f84:	46bd      	mov	sp, r7
 8003f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8a:	bf00      	nop
 8003f8c:	08011798 	.word	0x08011798
 8003f90:	20002c58 	.word	0x20002c58

08003f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f9a:	f000 fb2d 	bl	80045f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  applicationState.dataType = int16asBytes;
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <main+0x9c>)
 8003fa0:	2232      	movs	r2, #50	; 0x32
 8003fa2:	701a      	strb	r2, [r3, #0]
  applicationState.selectedImplementation = hoomam650;
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <main+0x9c>)
 8003fa6:	2231      	movs	r2, #49	; 0x31
 8003fa8:	705a      	strb	r2, [r3, #1]
  PT_init();
 8003faa:	f7fc fff7 	bl	8000f9c <PT_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fae:	f000 f845 	bl	800403c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003fb2:	f000 f8af 	bl	8004114 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fb6:	f000 f90b 	bl	80041d0 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8003fba:	f008 f9ab 	bl	800c314 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003fbe:	f000 f8c7 	bl	8004150 <MX_I2C1_Init>
  extern uint32_t byteInBuffer;
  extern uint8_t* bufferPointer;
  while (1)
  {
    /* USER CODE END WHILE */
	  if (byteInBuffer>0)
 8003fc2:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <main+0xa0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d02e      	beq.n	8004028 <main+0x94>
	  {
		  uint32_t index = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
		  uint32_t count = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
		  uint32_t i = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
		  do
		  {
			  i++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	607b      	str	r3, [r7, #4]
			  count++;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
			  if (*(bufferPointer+i)=='\n')
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <main+0xa4>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b0a      	cmp	r3, #10
 8003fee:	d113      	bne.n	8004018 <main+0x84>
			  {
				 count++;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60bb      	str	r3, [r7, #8]
				 parseLine (bufferPointer +index, count);
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <main+0xa4>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fdfd 	bl	8003c00 <parseLine>
				 index += count;
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4413      	add	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
				 i++;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3301      	adds	r3, #1
 8004012:	607b      	str	r3, [r7, #4]
				 count = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	60bb      	str	r3, [r7, #8]
			  }
		  }while (i<byteInBuffer);
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <main+0xa0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d3d9      	bcc.n	8003fd6 <main+0x42>
		  byteInBuffer = 0;
 8004022:	4b04      	ldr	r3, [pc, #16]	; (8004034 <main+0xa0>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(5);
 8004028:	2005      	movs	r0, #5
 800402a:	f000 fb6b 	bl	8004704 <HAL_Delay>
	  if (byteInBuffer>0)
 800402e:	e7c8      	b.n	8003fc2 <main+0x2e>
 8004030:	20002c54 	.word	0x20002c54
 8004034:	20004030 	.word	0x20004030
 8004038:	20000124 	.word	0x20000124

0800403c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b09a      	sub	sp, #104	; 0x68
 8004040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004042:	f107 0320 	add.w	r3, r7, #32
 8004046:	2248      	movs	r2, #72	; 0x48
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f008 ff08 	bl	800ce60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	609a      	str	r2, [r3, #8]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	611a      	str	r2, [r3, #16]
 800405e:	615a      	str	r2, [r3, #20]
 8004060:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004062:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <SystemClock_Config+0xd4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800406a:	4a29      	ldr	r2, [pc, #164]	; (8004110 <SystemClock_Config+0xd4>)
 800406c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b27      	ldr	r3, [pc, #156]	; (8004110 <SystemClock_Config+0xd4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800407e:	2326      	movs	r3, #38	; 0x26
 8004080:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8004082:	2300      	movs	r3, #0
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800408c:	2301      	movs	r3, #1
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004090:	2340      	movs	r3, #64	; 0x40
 8004092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004094:	2300      	movs	r3, #0
 8004096:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004098:	2360      	movs	r3, #96	; 0x60
 800409a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800409c:	2302      	movs	r3, #2
 800409e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80040a0:	2301      	movs	r3, #1
 80040a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80040a4:	2300      	movs	r3, #0
 80040a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80040a8:	2320      	movs	r3, #32
 80040aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80040b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80040b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80040b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040be:	f107 0320 	add.w	r3, r7, #32
 80040c2:	4618      	mov	r0, r3
 80040c4:	f002 ffc6 	bl	8007054 <HAL_RCC_OscConfig>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80040ce:	f000 f889 	bl	80041e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80040d2:	236f      	movs	r3, #111	; 0x6f
 80040d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040d6:	2303      	movs	r3, #3
 80040d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	2103      	movs	r1, #3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f003 fb22 	bl	800773c <HAL_RCC_ClockConfig>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80040fe:	f000 f871 	bl	80041e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004102:	f004 f8b3 	bl	800826c <HAL_RCCEx_EnableMSIPLLMode>
}
 8004106:	bf00      	nop
 8004108:	3768      	adds	r7, #104	; 0x68
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	58000400 	.word	0x58000400

08004114 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b094      	sub	sp, #80	; 0x50
 8004118:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800411a:	463b      	mov	r3, r7
 800411c:	2250      	movs	r2, #80	; 0x50
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f008 fe9d 	bl	800ce60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8004126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800412a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800412c:	2300      	movs	r3, #0
 800412e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004130:	2310      	movs	r3, #16
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004134:	463b      	mov	r3, r7
 8004136:	4618      	mov	r0, r3
 8004138:	f003 ff22 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8004142:	f000 f84f 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004146:	bf00      	nop
 8004148:	3750      	adds	r7, #80	; 0x50
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <MX_I2C1_Init+0x74>)
 8004156:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <MX_I2C1_Init+0x78>)
 8004158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800415a:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <MX_I2C1_Init+0x74>)
 800415c:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <MX_I2C1_Init+0x7c>)
 800415e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004160:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <MX_I2C1_Init+0x74>)
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004166:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <MX_I2C1_Init+0x74>)
 8004168:	2201      	movs	r2, #1
 800416a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800416c:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <MX_I2C1_Init+0x74>)
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004172:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <MX_I2C1_Init+0x74>)
 8004174:	2200      	movs	r2, #0
 8004176:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004178:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <MX_I2C1_Init+0x74>)
 800417a:	2200      	movs	r2, #0
 800417c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <MX_I2C1_Init+0x74>)
 8004180:	2200      	movs	r2, #0
 8004182:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <MX_I2C1_Init+0x74>)
 8004186:	2200      	movs	r2, #0
 8004188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800418a:	480e      	ldr	r0, [pc, #56]	; (80041c4 <MX_I2C1_Init+0x74>)
 800418c:	f000 fd5e 	bl	8004c4c <HAL_I2C_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004196:	f000 f825 	bl	80041e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800419a:	2100      	movs	r1, #0
 800419c:	4809      	ldr	r0, [pc, #36]	; (80041c4 <MX_I2C1_Init+0x74>)
 800419e:	f000 fde4 	bl	8004d6a <HAL_I2CEx_ConfigAnalogFilter>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80041a8:	f000 f81c 	bl	80041e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80041ac:	2100      	movs	r1, #0
 80041ae:	4805      	ldr	r0, [pc, #20]	; (80041c4 <MX_I2C1_Init+0x74>)
 80041b0:	f000 fe26 	bl	8004e00 <HAL_I2CEx_ConfigDigitalFilter>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80041ba:	f000 f813 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20002c00 	.word	0x20002c00
 80041c8:	40005400 	.word	0x40005400
 80041cc:	10707dbc 	.word	0x10707dbc

080041d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d4:	2002      	movs	r0, #2
 80041d6:	f7ff fcdd 	bl	8003b94 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041da:	2001      	movs	r0, #1
 80041dc:	f7ff fcda 	bl	8003b94 <LL_AHB2_GRP1_EnableClock>

}
 80041e0:	bf00      	nop
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041e8:	b672      	cpsid	i
}
 80041ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041ec:	e7fe      	b.n	80041ec <Error_Handler+0x8>

080041ee <LL_AHB2_GRP1_EnableClock>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4313      	orrs	r3, r2
 8004204:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4013      	ands	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800422e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4313      	orrs	r3, r2
 8004236:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4013      	ands	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004244:	68fb      	ldr	r3, [r7, #12]
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b09c      	sub	sp, #112	; 0x70
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	2250      	movs	r2, #80	; 0x50
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f008 fded 	bl	800ce60 <memset>
  if(hi2c->Instance==I2C1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <HAL_I2C_MspInit+0x88>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d126      	bne.n	80042de <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004290:	2304      	movs	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004294:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800429a:	f107 030c 	add.w	r3, r7, #12
 800429e:	4618      	mov	r0, r3
 80042a0:	f003 fe6e 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80042aa:	f7ff ff9b 	bl	80041e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ae:	2002      	movs	r0, #2
 80042b0:	f7ff ff9d 	bl	80041ee <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042ba:	2312      	movs	r3, #18
 80042bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c2:	2300      	movs	r3, #0
 80042c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042c6:	2304      	movs	r3, #4
 80042c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042ce:	4619      	mov	r1, r3
 80042d0:	4806      	ldr	r0, [pc, #24]	; (80042ec <HAL_I2C_MspInit+0x8c>)
 80042d2:	f000 fb4b 	bl	800496c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042d6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80042da:	f7ff ffa1 	bl	8004220 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80042de:	bf00      	nop
 80042e0:	3770      	adds	r7, #112	; 0x70
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40005400 	.word	0x40005400
 80042ec:	48000400 	.word	0x48000400

080042f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042f4:	e7fe      	b.n	80042f4 <NMI_Handler+0x4>

080042f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f6:	b480      	push	{r7}
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042fa:	e7fe      	b.n	80042fa <HardFault_Handler+0x4>

080042fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004300:	e7fe      	b.n	8004300 <MemManage_Handler+0x4>

08004302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004306:	e7fe      	b.n	8004306 <BusFault_Handler+0x4>

08004308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800430c:	e7fe      	b.n	800430c <UsageFault_Handler+0x4>

0800430e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800432a:	b480      	push	{r7}
 800432c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800433c:	f000 f9b6 	bl	80046ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}

08004344 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <USB_LP_IRQHandler+0x10>)
 800434a:	f000 feb2 	bl	80050b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20004234 	.word	0x20004234

08004358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	return 1;
 800435c:	2301      	movs	r3, #1
}
 800435e:	4618      	mov	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_kill>:

int _kill(int pid, int sig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004372:	f008 fd3d 	bl	800cdf0 <__errno>
 8004376:	4603      	mov	r3, r0
 8004378:	2216      	movs	r2, #22
 800437a:	601a      	str	r2, [r3, #0]
	return -1;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_exit>:

void _exit (int status)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004390:	f04f 31ff 	mov.w	r1, #4294967295
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ffe7 	bl	8004368 <_kill>
	while (1) {}		/* Make sure we hang here */
 800439a:	e7fe      	b.n	800439a <_exit+0x12>

0800439c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e00a      	b.n	80043c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043ae:	f3af 8000 	nop.w
 80043b2:	4601      	mov	r1, r0
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	60ba      	str	r2, [r7, #8]
 80043ba:	b2ca      	uxtb	r2, r1
 80043bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	3301      	adds	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	dbf0      	blt.n	80043ae <_read+0x12>
	}

return len;
 80043cc:	687b      	ldr	r3, [r7, #4]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e009      	b.n	80043fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	60ba      	str	r2, [r7, #8]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3301      	adds	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	dbf1      	blt.n	80043e8 <_write+0x12>
	}
	return len;
 8004404:	687b      	ldr	r3, [r7, #4]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <_close>:

int _close(int file)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
	return -1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004436:	605a      	str	r2, [r3, #4]
	return 0;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <_isatty>:

int _isatty(int file)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
	return 1;
 800444e:	2301      	movs	r3, #1
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
	return 0;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004480:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <_sbrk+0x5c>)
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <_sbrk+0x60>)
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <_sbrk+0x64>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <_sbrk+0x64>)
 8004496:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <_sbrk+0x68>)
 8004498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <_sbrk+0x64>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d207      	bcs.n	80044b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044a8:	f008 fca2 	bl	800cdf0 <__errno>
 80044ac:	4603      	mov	r3, r0
 80044ae:	220c      	movs	r2, #12
 80044b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044b2:	f04f 33ff 	mov.w	r3, #4294967295
 80044b6:	e009      	b.n	80044cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <_sbrk+0x64>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044be:	4b07      	ldr	r3, [pc, #28]	; (80044dc <_sbrk+0x64>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	4a05      	ldr	r2, [pc, #20]	; (80044dc <_sbrk+0x64>)
 80044c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044ca:	68fb      	ldr	r3, [r7, #12]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20030000 	.word	0x20030000
 80044d8:	00000400 	.word	0x00000400
 80044dc:	20002d54 	.word	0x20002d54
 80044e0:	20004760 	.word	0x20004760

080044e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80044e8:	4b24      	ldr	r3, [pc, #144]	; (800457c <SystemInit+0x98>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	4a23      	ldr	r2, [pc, #140]	; (800457c <SystemInit+0x98>)
 80044f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80044f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004510:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <SystemInit+0x9c>)
 800451e:	4013      	ands	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800452e:	f023 0305 	bic.w	r3, r3, #5
 8004532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800453e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <SystemInit+0xa0>)
 8004550:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004556:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <SystemInit+0xa0>)
 8004558:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800455a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004568:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800456a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456e:	2200      	movs	r2, #0
 8004570:	619a      	str	r2, [r3, #24]
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	e000ed00 	.word	0xe000ed00
 8004580:	faf6fefb 	.word	0xfaf6fefb
 8004584:	22041000 	.word	0x22041000

08004588 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004588:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800458a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800458c:	3304      	adds	r3, #4

0800458e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800458e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004590:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004592:	d3f9      	bcc.n	8004588 <CopyDataInit>
  bx lr
 8004594:	4770      	bx	lr

08004596 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004596:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004598:	3004      	adds	r0, #4

0800459a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800459a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800459c:	d3fb      	bcc.n	8004596 <FillZerobss>
  bx lr
 800459e:	4770      	bx	lr

080045a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80045a0:	480c      	ldr	r0, [pc, #48]	; (80045d4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80045a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80045a4:	f7ff ff9e 	bl	80044e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80045a8:	480b      	ldr	r0, [pc, #44]	; (80045d8 <LoopForever+0x8>)
 80045aa:	490c      	ldr	r1, [pc, #48]	; (80045dc <LoopForever+0xc>)
 80045ac:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <LoopForever+0x10>)
 80045ae:	2300      	movs	r3, #0
 80045b0:	f7ff ffed 	bl	800458e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80045b4:	480b      	ldr	r0, [pc, #44]	; (80045e4 <LoopForever+0x14>)
 80045b6:	490c      	ldr	r1, [pc, #48]	; (80045e8 <LoopForever+0x18>)
 80045b8:	2300      	movs	r3, #0
 80045ba:	f7ff ffee 	bl	800459a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80045be:	480b      	ldr	r0, [pc, #44]	; (80045ec <LoopForever+0x1c>)
 80045c0:	490b      	ldr	r1, [pc, #44]	; (80045f0 <LoopForever+0x20>)
 80045c2:	2300      	movs	r3, #0
 80045c4:	f7ff ffe9 	bl	800459a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80045c8:	f008 fc18 	bl	800cdfc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80045cc:	f7ff fce2 	bl	8003f94 <main>

080045d0 <LoopForever>:

LoopForever:
  b LoopForever
 80045d0:	e7fe      	b.n	80045d0 <LoopForever>
 80045d2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80045d4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80045d8:	20000004 	.word	0x20000004
 80045dc:	20000364 	.word	0x20000364
 80045e0:	08011d9c 	.word	0x08011d9c
  INIT_BSS _sbss, _ebss
 80045e4:	20000364 	.word	0x20000364
 80045e8:	2000475c 	.word	0x2000475c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80045ec:	20030000 	.word	0x20030000
 80045f0:	20030000 	.word	0x20030000

080045f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045f4:	e7fe      	b.n	80045f4 <ADC1_IRQHandler>
	...

080045f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <HAL_Init+0x3c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <HAL_Init+0x3c>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800460e:	2003      	movs	r0, #3
 8004610:	f000 f96c 	bl	80048ec <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004614:	200f      	movs	r0, #15
 8004616:	f000 f80f 	bl	8004638 <HAL_InitTick>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	71fb      	strb	r3, [r7, #7]
 8004624:	e001      	b.n	800462a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004626:	f7ff fe14 	bl	8004252 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800462a:	79fb      	ldrb	r3, [r7, #7]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	58004000 	.word	0x58004000

08004638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004644:	4b17      	ldr	r3, [pc, #92]	; (80046a4 <HAL_InitTick+0x6c>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d024      	beq.n	8004696 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800464c:	f003 fa24 	bl	8007a98 <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HAL_InitTick+0x6c>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	4619      	mov	r1, r3
 8004658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800465c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f974 	bl	8004952 <HAL_SYSTICK_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10f      	bne.n	8004690 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	d809      	bhi.n	800468a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004676:	2200      	movs	r2, #0
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	f04f 30ff 	mov.w	r0, #4294967295
 800467e:	f000 f940 	bl	8004902 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004682:	4a09      	ldr	r2, [pc, #36]	; (80046a8 <HAL_InitTick+0x70>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	e007      	b.n	800469a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	e004      	b.n	800469a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
 8004694:	e001      	b.n	800469a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800469a:	7bfb      	ldrb	r3, [r7, #15]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000010 	.word	0x20000010
 80046a8:	2000000c 	.word	0x2000000c

080046ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_IncTick+0x20>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_IncTick+0x24>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4413      	add	r3, r2
 80046bc:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <HAL_IncTick+0x24>)
 80046be:	6013      	str	r3, [r2, #0]
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	20000010 	.word	0x20000010
 80046d0:	20002d58 	.word	0x20002d58

080046d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return uwTick;
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <HAL_GetTick+0x14>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20002d58 	.word	0x20002d58

080046ec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <HAL_GetTickPrio+0x14>)
 80046f2:	681b      	ldr	r3, [r3, #0]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	2000000c 	.word	0x2000000c

08004704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800470c:	f7ff ffe2 	bl	80046d4 <HAL_GetTick>
 8004710:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d005      	beq.n	800472a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <HAL_Delay+0x44>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800472a:	bf00      	nop
 800472c:	f7ff ffd2 	bl	80046d4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	429a      	cmp	r2, r3
 800473a:	d8f7      	bhi.n	800472c <HAL_Delay+0x28>
    {
    }
  }
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000010 	.word	0x20000010

0800474c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004768:	4013      	ands	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800477e:	4a04      	ldr	r2, [pc, #16]	; (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	60d3      	str	r3, [r2, #12]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <__NVIC_GetPriorityGrouping+0x18>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	f003 0307 	and.w	r3, r3, #7
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	db0b      	blt.n	80047da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	4907      	ldr	r1, [pc, #28]	; (80047e8 <__NVIC_EnableIRQ+0x38>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2001      	movs	r0, #1
 80047d2:	fa00 f202 	lsl.w	r2, r0, r2
 80047d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	e000e100 	.word	0xe000e100

080047ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	db0a      	blt.n	8004816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	490c      	ldr	r1, [pc, #48]	; (8004838 <__NVIC_SetPriority+0x4c>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	440b      	add	r3, r1
 8004810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004814:	e00a      	b.n	800482c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4908      	ldr	r1, [pc, #32]	; (800483c <__NVIC_SetPriority+0x50>)
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	3b04      	subs	r3, #4
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	440b      	add	r3, r1
 800482a:	761a      	strb	r2, [r3, #24]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000e100 	.word	0xe000e100
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f1c3 0307 	rsb	r3, r3, #7
 800485a:	2b04      	cmp	r3, #4
 800485c:	bf28      	it	cs
 800485e:	2304      	movcs	r3, #4
 8004860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3304      	adds	r3, #4
 8004866:	2b06      	cmp	r3, #6
 8004868:	d902      	bls.n	8004870 <NVIC_EncodePriority+0x30>
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3b03      	subs	r3, #3
 800486e:	e000      	b.n	8004872 <NVIC_EncodePriority+0x32>
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	f04f 32ff 	mov.w	r2, #4294967295
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43da      	mvns	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	401a      	ands	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004888:	f04f 31ff 	mov.w	r1, #4294967295
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	43d9      	mvns	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004898:	4313      	orrs	r3, r2
         );
}
 800489a:	4618      	mov	r0, r3
 800489c:	3724      	adds	r7, #36	; 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b8:	d301      	bcc.n	80048be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ba:	2301      	movs	r3, #1
 80048bc:	e00f      	b.n	80048de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048be:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <SysTick_Config+0x40>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048c6:	210f      	movs	r1, #15
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	f7ff ff8e 	bl	80047ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <SysTick_Config+0x40>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048d6:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <SysTick_Config+0x40>)
 80048d8:	2207      	movs	r2, #7
 80048da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	e000e010 	.word	0xe000e010

080048ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff29 	bl	800474c <__NVIC_SetPriorityGrouping>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	4603      	mov	r3, r0
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004910:	f7ff ff40 	bl	8004794 <__NVIC_GetPriorityGrouping>
 8004914:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	6978      	ldr	r0, [r7, #20]
 800491c:	f7ff ff90 	bl	8004840 <NVIC_EncodePriority>
 8004920:	4602      	mov	r2, r0
 8004922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ff5f 	bl	80047ec <__NVIC_SetPriority>
}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff33 	bl	80047b0 <__NVIC_EnableIRQ>
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ffa4 	bl	80048a8 <SysTick_Config>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800497a:	e14c      	b.n	8004c16 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2101      	movs	r1, #1
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 813e 	beq.w	8004c10 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d005      	beq.n	80049ac <HAL_GPIO_Init+0x40>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d130      	bne.n	8004a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	2203      	movs	r2, #3
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049e2:	2201      	movs	r2, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43db      	mvns	r3, r3
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4013      	ands	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	f003 0201 	and.w	r2, r3, #1
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d017      	beq.n	8004a4a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	2203      	movs	r2, #3
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d123      	bne.n	8004a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	08da      	lsrs	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3208      	adds	r2, #8
 8004a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	08da      	lsrs	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3208      	adds	r2, #8
 8004a98:	6939      	ldr	r1, [r7, #16]
 8004a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0203 	and.w	r2, r3, #3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 8098 	beq.w	8004c10 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004ae0:	4a54      	ldr	r2, [pc, #336]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	089b      	lsrs	r3, r3, #2
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	220f      	movs	r2, #15
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4013      	ands	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b0a:	d019      	beq.n	8004b40 <HAL_GPIO_Init+0x1d4>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a4a      	ldr	r2, [pc, #296]	; (8004c38 <HAL_GPIO_Init+0x2cc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <HAL_GPIO_Init+0x1d0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a49      	ldr	r2, [pc, #292]	; (8004c3c <HAL_GPIO_Init+0x2d0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00d      	beq.n	8004b38 <HAL_GPIO_Init+0x1cc>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a48      	ldr	r2, [pc, #288]	; (8004c40 <HAL_GPIO_Init+0x2d4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <HAL_GPIO_Init+0x1c8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a47      	ldr	r2, [pc, #284]	; (8004c44 <HAL_GPIO_Init+0x2d8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d101      	bne.n	8004b30 <HAL_GPIO_Init+0x1c4>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	e008      	b.n	8004b42 <HAL_GPIO_Init+0x1d6>
 8004b30:	2307      	movs	r3, #7
 8004b32:	e006      	b.n	8004b42 <HAL_GPIO_Init+0x1d6>
 8004b34:	2303      	movs	r3, #3
 8004b36:	e004      	b.n	8004b42 <HAL_GPIO_Init+0x1d6>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e002      	b.n	8004b42 <HAL_GPIO_Init+0x1d6>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_GPIO_Init+0x1d6>
 8004b40:	2300      	movs	r3, #0
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	f002 0203 	and.w	r2, r2, #3
 8004b48:	0092      	lsls	r2, r2, #2
 8004b4a:	4093      	lsls	r3, r2
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b52:	4938      	ldr	r1, [pc, #224]	; (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	089b      	lsrs	r3, r3, #2
 8004b58:	3302      	adds	r3, #2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b60:	4b39      	ldr	r3, [pc, #228]	; (8004c48 <HAL_GPIO_Init+0x2dc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b84:	4a30      	ldr	r2, [pc, #192]	; (8004c48 <HAL_GPIO_Init+0x2dc>)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b8a:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <HAL_GPIO_Init+0x2dc>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4013      	ands	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bae:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <HAL_GPIO_Init+0x2dc>)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bb4:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <HAL_GPIO_Init+0x2dc>)
 8004bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bda:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <HAL_GPIO_Init+0x2dc>)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004be2:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_GPIO_Init+0x2dc>)
 8004be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c08:	4a0f      	ldr	r2, [pc, #60]	; (8004c48 <HAL_GPIO_Init+0x2dc>)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3301      	adds	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f47f aeab 	bne.w	800497c <HAL_GPIO_Init+0x10>
  }
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40010000 	.word	0x40010000
 8004c38:	48000400 	.word	0x48000400
 8004c3c:	48000800 	.word	0x48000800
 8004c40:	48000c00 	.word	0x48000c00
 8004c44:	48001000 	.word	0x48001000
 8004c48:	58000800 	.word	0x58000800

08004c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e081      	b.n	8004d62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff faf4 	bl	8004260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2224      	movs	r2, #36	; 0x24
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d107      	bne.n	8004cc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	e006      	b.n	8004cd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004cd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d104      	bne.n	8004ce6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69d9      	ldr	r1, [r3, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1a      	ldr	r2, [r3, #32]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d138      	bne.n	8004df2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e032      	b.n	8004df4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2224      	movs	r2, #36	; 0x24
 8004d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0201 	bic.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dbc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d139      	bne.n	8004e8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e033      	b.n	8004e8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e000      	b.n	8004e8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
  }
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9a:	b08b      	sub	sp, #44	; 0x2c
 8004e9c:	af06      	add	r7, sp, #24
 8004e9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0dd      	b.n	8005066 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f007 fc68 	bl	800c794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f003 faf6 	bl	80084c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]
 8004ee0:	e04d      	b.n	8004f7e <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3305      	adds	r3, #5
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	440b      	add	r3, r1
 8004f08:	3304      	adds	r3, #4
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f0e:	7bfa      	ldrb	r2, [r7, #15]
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	b298      	uxth	r0, r3
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	440b      	add	r3, r1
 8004f20:	333a      	adds	r3, #58	; 0x3a
 8004f22:	4602      	mov	r2, r0
 8004f24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	440b      	add	r3, r1
 8004f36:	3307      	adds	r3, #7
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	440b      	add	r3, r1
 8004f4a:	333c      	adds	r3, #60	; 0x3c
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f50:	7bfa      	ldrb	r2, [r7, #15]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3340      	adds	r3, #64	; 0x40
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f64:	7bfa      	ldrb	r2, [r7, #15]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	440b      	add	r3, r1
 8004f72:	3344      	adds	r3, #68	; 0x44
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
 8004f7e:	7bfa      	ldrb	r2, [r7, #15]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3ac      	bcc.n	8004ee2 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	e044      	b.n	8005018 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f8e:	7bfa      	ldrb	r2, [r7, #15]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fa4:	7bfa      	ldrb	r2, [r7, #15]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	440b      	add	r3, r1
 8004fb2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004fb6:	7bfa      	ldrb	r2, [r7, #15]
 8004fb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fba:	7bfa      	ldrb	r2, [r7, #15]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	440b      	add	r3, r1
 8004fc8:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	440b      	add	r3, r1
 8004fde:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fe6:	7bfa      	ldrb	r2, [r7, #15]
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ffc:	7bfa      	ldrb	r2, [r7, #15]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	440b      	add	r3, r1
 800500a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	3301      	adds	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d3b5      	bcc.n	8004f8e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	687e      	ldr	r6, [r7, #4]
 800502a:	466d      	mov	r5, sp
 800502c:	f106 0410 	add.w	r4, r6, #16
 8005030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005034:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005038:	e885 0003 	stmia.w	r5, {r0, r1}
 800503c:	1d33      	adds	r3, r6, #4
 800503e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005040:	6838      	ldr	r0, [r7, #0]
 8005042:	f003 fa5c 	bl	80084fe <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d102      	bne.n	8005064 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f001 fc42 	bl	80068e8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800506e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_PCD_Start+0x16>
 8005080:	2302      	movs	r3, #2
 8005082:	e012      	b.n	80050aa <HAL_PCD_Start+0x3c>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f003 fa02 	bl	800849a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f005 fc40 	bl	800a920 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f005 fc45 	bl	800a94e <USB_ReadInterrupts>
 80050c4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fb30 	bl	8005736 <PCD_EP_ISR_Handler>

    return;
 80050d6:	e110      	b.n	80052fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d013      	beq.n	800510a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f4:	b292      	uxth	r2, r2
 80050f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f007 fbfd 	bl	800c8fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005100:	2100      	movs	r1, #0
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8fc 	bl	8005300 <HAL_PCD_SetAddress>

    return;
 8005108:	e0f7      	b.n	80052fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00c      	beq.n	800512e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800511c:	b29a      	uxth	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005126:	b292      	uxth	r2, r2
 8005128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800512c:	e0e5      	b.n	80052fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00c      	beq.n	8005152 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800514a:	b292      	uxth	r2, r2
 800514c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005150:	e0d3      	b.n	80052fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d034      	beq.n	80051c6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005164:	b29a      	uxth	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0204 	bic.w	r2, r2, #4
 800516e:	b292      	uxth	r2, r2
 8005170:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800517c:	b29a      	uxth	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0208 	bic.w	r2, r2, #8
 8005186:	b292      	uxth	r2, r2
 8005188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005192:	2b01      	cmp	r3, #1
 8005194:	d107      	bne.n	80051a6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800519e:	2100      	movs	r1, #0
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f007 fda1 	bl	800cce8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f007 fbe0 	bl	800c96c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051be:	b292      	uxth	r2, r2
 80051c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80051c4:	e099      	b.n	80052fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d027      	beq.n	8005220 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051d8:	b29a      	uxth	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0208 	orr.w	r2, r2, #8
 80051e2:	b292      	uxth	r2, r2
 80051e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051fa:	b292      	uxth	r2, r2
 80051fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005208:	b29a      	uxth	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0204 	orr.w	r2, r2, #4
 8005212:	b292      	uxth	r2, r2
 8005214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f007 fb8d 	bl	800c938 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800521e:	e06c      	b.n	80052fa <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d040      	beq.n	80052ac <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005232:	b29a      	uxth	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800523c:	b292      	uxth	r2, r2
 800523e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d12b      	bne.n	80052a4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005254:	b29a      	uxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0204 	orr.w	r2, r2, #4
 800525e:	b292      	uxth	r2, r2
 8005260:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0208 	orr.w	r2, r2, #8
 8005276:	b292      	uxth	r2, r2
 8005278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800528c:	b29b      	uxth	r3, r3
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800529a:	2101      	movs	r1, #1
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f007 fd23 	bl	800cce8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80052a2:	e02a      	b.n	80052fa <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f007 fb47 	bl	800c938 <HAL_PCD_SuspendCallback>
    return;
 80052aa:	e026      	b.n	80052fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00f      	beq.n	80052d6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052c8:	b292      	uxth	r2, r2
 80052ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f007 fb05 	bl	800c8de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80052d4:	e011      	b.n	80052fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00c      	beq.n	80052fa <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f2:	b292      	uxth	r2, r2
 80052f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80052f8:	bf00      	nop
  }
}
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_PCD_SetAddress+0x1a>
 8005316:	2302      	movs	r3, #2
 8005318:	e013      	b.n	8005342 <HAL_PCD_SetAddress+0x42>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	78fa      	ldrb	r2, [r7, #3]
 8005330:	4611      	mov	r1, r2
 8005332:	4618      	mov	r0, r3
 8005334:	f005 fae0 	bl	800a8f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	4608      	mov	r0, r1
 8005354:	4611      	mov	r1, r2
 8005356:	461a      	mov	r2, r3
 8005358:	4603      	mov	r3, r0
 800535a:	70fb      	strb	r3, [r7, #3]
 800535c:	460b      	mov	r3, r1
 800535e:	803b      	strh	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800536c:	2b00      	cmp	r3, #0
 800536e:	da0f      	bge.n	8005390 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4413      	add	r3, r2
 8005384:	3304      	adds	r3, #4
 8005386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	705a      	strb	r2, [r3, #1]
 800538e:	e00f      	b.n	80053b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	f003 0207 	and.w	r2, r3, #7
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4413      	add	r3, r2
 80053a6:	3304      	adds	r3, #4
 80053a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80053bc:	883a      	ldrh	r2, [r7, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	78ba      	ldrb	r2, [r7, #2]
 80053c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053da:	78bb      	ldrb	r3, [r7, #2]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d102      	bne.n	80053e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_PCD_EP_Open+0xaa>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e00e      	b.n	8005412 <HAL_PCD_EP_Open+0xc8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68f9      	ldr	r1, [r7, #12]
 8005402:	4618      	mov	r0, r3
 8005404:	f003 f89c 	bl	8008540 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8005410:	7afb      	ldrb	r3, [r7, #11]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800542a:	2b00      	cmp	r3, #0
 800542c:	da0f      	bge.n	800544e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	3304      	adds	r3, #4
 8005444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	705a      	strb	r2, [r3, #1]
 800544c:	e00f      	b.n	800546e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	f003 0207 	and.w	r2, r3, #7
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	4413      	add	r3, r2
 8005464:	3304      	adds	r3, #4
 8005466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_PCD_EP_Close+0x6e>
 8005484:	2302      	movs	r3, #2
 8005486:	e00e      	b.n	80054a6 <HAL_PCD_EP_Close+0x8c>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	4618      	mov	r0, r3
 8005498:	f003 fc0c 	bl	8008cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b086      	sub	sp, #24
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	460b      	mov	r3, r1
 80054bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054be:	7afb      	ldrb	r3, [r7, #11]
 80054c0:	f003 0207 	and.w	r2, r3, #7
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	3304      	adds	r3, #4
 80054d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2200      	movs	r2, #0
 80054e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054f0:	7afb      	ldrb	r3, [r7, #11]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054fc:	7afb      	ldrb	r3, [r7, #11]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	4618      	mov	r0, r3
 800550e:	f003 fdbe 	bl	800908e <USB_EPStartXfer>
 8005512:	e005      	b.n	8005520 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6979      	ldr	r1, [r7, #20]
 800551a:	4618      	mov	r0, r3
 800551c:	f003 fdb7 	bl	800908e <USB_EPStartXfer>
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	f003 0207 	and.w	r2, r3, #7
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	440b      	add	r3, r1
 8005548:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800554c:	681b      	ldr	r3, [r3, #0]
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	460b      	mov	r3, r1
 8005568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800556a:	7afb      	ldrb	r3, [r7, #11]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	3304      	adds	r3, #4
 8005580:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2200      	movs	r2, #0
 80055a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2201      	movs	r2, #1
 80055a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055a8:	7afb      	ldrb	r3, [r7, #11]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055b4:	7afb      	ldrb	r3, [r7, #11]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6979      	ldr	r1, [r7, #20]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f003 fd62 	bl	800908e <USB_EPStartXfer>
 80055ca:	e005      	b.n	80055d8 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6979      	ldr	r1, [r7, #20]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f003 fd5b 	bl	800908e <USB_EPStartXfer>
  }

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	460b      	mov	r3, r1
 80055ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 0207 	and.w	r2, r3, #7
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d901      	bls.n	8005600 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e040      	b.n	8005682 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005604:	2b00      	cmp	r3, #0
 8005606:	da0f      	bge.n	8005628 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4413      	add	r3, r2
 800561c:	3304      	adds	r3, #4
 800561e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	705a      	strb	r2, [r3, #1]
 8005626:	e00d      	b.n	8005644 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005628:	78fa      	ldrb	r2, [r7, #3]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4413      	add	r3, r2
 800563a:	3304      	adds	r3, #4
 800563c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_PCD_EP_SetStall+0x82>
 8005660:	2302      	movs	r3, #2
 8005662:	e00e      	b.n	8005682 <HAL_PCD_EP_SetStall+0xa0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68f9      	ldr	r1, [r7, #12]
 8005672:	4618      	mov	r0, r3
 8005674:	f005 f841 	bl	800a6fa <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	f003 020f 	and.w	r2, r3, #15
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d901      	bls.n	80056a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e042      	b.n	800572e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	da0f      	bge.n	80056d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	4413      	add	r3, r2
 80056c4:	3304      	adds	r3, #4
 80056c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	705a      	strb	r2, [r3, #1]
 80056ce:	e00f      	b.n	80056f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	f003 0207 	and.w	r2, r3, #7
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4413      	add	r3, r2
 80056e6:	3304      	adds	r3, #4
 80056e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_PCD_EP_ClrStall+0x86>
 800570c:	2302      	movs	r3, #2
 800570e:	e00e      	b.n	800572e <HAL_PCD_EP_ClrStall+0xa4>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68f9      	ldr	r1, [r7, #12]
 800571e:	4618      	mov	r0, r3
 8005720:	f005 f83c 	bl	800a79c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b096      	sub	sp, #88	; 0x58
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800573e:	e3a9      	b.n	8005e94 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005748:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800574c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800575a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8169 	bne.w	8005a36 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005764:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	d150      	bne.n	8005812 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800577c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005780:	81fb      	strh	r3, [r7, #14]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	89fb      	ldrh	r3, [r7, #14]
 8005788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005790:	b29b      	uxth	r3, r3
 8005792:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	332c      	adds	r3, #44	; 0x2c
 8005798:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	4413      	add	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	4413      	add	r3, r2
 80057b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80057c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	441a      	add	r2, r3
 80057cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80057d0:	2100      	movs	r1, #0
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f007 f869 	bl	800c8aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8357 	beq.w	8005e94 <PCD_EP_ISR_Handler+0x75e>
 80057e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f040 8352 	bne.w	8005e94 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	b292      	uxth	r2, r2
 8005804:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005810:	e340      	b.n	8005e94 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005818:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005824:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800582c:	2b00      	cmp	r3, #0
 800582e:	d032      	beq.n	8005896 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005838:	b29b      	uxth	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	4413      	add	r3, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	4413      	add	r3, r2
 800584a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005856:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8005862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005864:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005868:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800586a:	b29b      	uxth	r3, r3
 800586c:	f005 f8c1 	bl	800a9f2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29a      	uxth	r2, r3
 8005878:	f640 738f 	movw	r3, #3983	; 0xf8f
 800587c:	4013      	ands	r3, r2
 800587e:	823b      	strh	r3, [r7, #16]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	8a3a      	ldrh	r2, [r7, #16]
 8005886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800588a:	b292      	uxth	r2, r2
 800588c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f006 ffde 	bl	800c850 <HAL_PCD_SetupStageCallback>
 8005894:	e2fe      	b.n	8005e94 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005896:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800589a:	2b00      	cmp	r3, #0
 800589c:	f280 82fa 	bge.w	8005e94 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80058ac:	4013      	ands	r3, r2
 80058ae:	83fb      	strh	r3, [r7, #30]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	8bfa      	ldrh	r2, [r7, #30]
 80058b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ba:	b292      	uxth	r2, r2
 80058bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	4413      	add	r3, r2
 80058d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d019      	beq.n	8005922 <PCD_EP_ISR_Handler+0x1ec>
 80058ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d015      	beq.n	8005922 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fc:	6959      	ldr	r1, [r3, #20]
 80058fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005900:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005904:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005906:	b29b      	uxth	r3, r3
 8005908:	f005 f873 	bl	800a9f2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800590c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590e:	695a      	ldr	r2, [r3, #20]
 8005910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	441a      	add	r2, r3
 8005916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005918:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800591a:	2100      	movs	r1, #0
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f006 ffa9 	bl	800c874 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800592c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 82ad 	bne.w	8005e94 <PCD_EP_ISR_Handler+0x75e>
 800593a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800593e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005942:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005946:	f000 82a5 	beq.w	8005e94 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	4413      	add	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b3e      	cmp	r3, #62	; 0x3e
 8005970:	d918      	bls.n	80059a4 <PCD_EP_ISR_Handler+0x26e>
 8005972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	647b      	str	r3, [r7, #68]	; 0x44
 800597a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <PCD_EP_ISR_Handler+0x256>
 8005986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005988:	3b01      	subs	r3, #1
 800598a:	647b      	str	r3, [r7, #68]	; 0x44
 800598c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29b      	uxth	r3, r3
 8005994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599c:	b29a      	uxth	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e029      	b.n	80059f8 <PCD_EP_ISR_Handler+0x2c2>
 80059a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d112      	bne.n	80059d2 <PCD_EP_ISR_Handler+0x29c>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e012      	b.n	80059f8 <PCD_EP_ISR_Handler+0x2c2>
 80059d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	647b      	str	r3, [r7, #68]	; 0x44
 80059da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <PCD_EP_ISR_Handler+0x2b6>
 80059e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e8:	3301      	adds	r3, #1
 80059ea:	647b      	str	r3, [r7, #68]	; 0x44
 80059ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	029b      	lsls	r3, r3, #10
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a08:	827b      	strh	r3, [r7, #18]
 8005a0a:	8a7b      	ldrh	r3, [r7, #18]
 8005a0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a10:	827b      	strh	r3, [r7, #18]
 8005a12:	8a7b      	ldrh	r3, [r7, #18]
 8005a14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a18:	827b      	strh	r3, [r7, #18]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	8a7b      	ldrh	r3, [r7, #18]
 8005a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	8013      	strh	r3, [r2, #0]
 8005a34:	e22e      	b.n	8005e94 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a4a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f280 80f7 	bge.w	8005c42 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a86:	b292      	uxth	r2, r2
 8005a88:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005a8a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa4:	7b1b      	ldrb	r3, [r3, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d123      	bne.n	8005af2 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4413      	add	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ace:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005ad2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 808e 	beq.w	8005bf8 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae2:	6959      	ldr	r1, [r3, #20]
 8005ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae6:	88da      	ldrh	r2, [r3, #6]
 8005ae8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005aec:	f004 ff81 	bl	800a9f2 <USB_ReadPMA>
 8005af0:	e082      	b.n	8005bf8 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af4:	78db      	ldrb	r3, [r3, #3]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d10a      	bne.n	8005b10 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005afa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005afe:	461a      	mov	r2, r3
 8005b00:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f9d4 	bl	8005eb0 <HAL_PCD_EP_DB_Receive>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005b0e:	e073      	b.n	8005bf8 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	441a      	add	r2, r3
 8005b3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d022      	beq.n	8005bb4 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	4413      	add	r3, r2
 8005b88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005b96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d02c      	beq.n	8005bf8 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba4:	6959      	ldr	r1, [r3, #20]
 8005ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba8:	891a      	ldrh	r2, [r3, #8]
 8005baa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005bae:	f004 ff20 	bl	800a9f2 <USB_ReadPMA>
 8005bb2:	e021      	b.n	8005bf8 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bd8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005bdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d009      	beq.n	8005bf8 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bea:	6959      	ldr	r1, [r3, #20]
 8005bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bee:	895a      	ldrh	r2, [r3, #10]
 8005bf0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005bf4:	f004 fefd 	bl	800a9f2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c00:	441a      	add	r2, r3
 8005c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c04:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c08:	695a      	ldr	r2, [r3, #20]
 8005c0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c0e:	441a      	add	r2, r3
 8005c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c12:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <PCD_EP_ISR_Handler+0x4f2>
 8005c1c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d206      	bcs.n	8005c36 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f006 fe20 	bl	800c874 <HAL_PCD_DataOutStageCallback>
 8005c34:	e005      	b.n	8005c42 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f003 fa26 	bl	800908e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005c42:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8122 	beq.w	8005e94 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005c50:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4413      	add	r3, r2
 8005c62:	3304      	adds	r3, #4
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	441a      	add	r2, r3
 8005c92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca4:	78db      	ldrb	r3, [r3, #3]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	f040 80a2 	bne.w	8005df0 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8005cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cae:	2200      	movs	r2, #0
 8005cb0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb4:	7b1b      	ldrb	r3, [r3, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8093 	beq.w	8005de2 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005cbc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d046      	beq.n	8005d56 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d126      	bne.n	8005d1e <PCD_EP_ISR_Handler+0x5e8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	4413      	add	r3, r2
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	00da      	lsls	r2, r3, #3
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cf6:	623b      	str	r3, [r7, #32]
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e061      	b.n	8005de2 <PCD_EP_ISR_Handler+0x6ac>
 8005d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d15d      	bne.n	8005de2 <PCD_EP_ISR_Handler+0x6ac>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	4413      	add	r3, r2
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	00da      	lsls	r2, r3, #3
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	4413      	add	r3, r2
 8005d48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	2200      	movs	r2, #0
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	e045      	b.n	8005de2 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d126      	bne.n	8005db2 <PCD_EP_ISR_Handler+0x67c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d78:	4413      	add	r3, r2
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	00da      	lsls	r2, r3, #3
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	4413      	add	r3, r2
 8005d86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e017      	b.n	8005de2 <PCD_EP_ISR_Handler+0x6ac>
 8005db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d113      	bne.n	8005de2 <PCD_EP_ISR_Handler+0x6ac>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc8:	4413      	add	r3, r2
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	00da      	lsls	r2, r3, #3
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	2200      	movs	r2, #0
 8005de0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f006 fd5e 	bl	800c8aa <HAL_PCD_DataInStageCallback>
 8005dee:	e051      	b.n	8005e94 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005df0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d144      	bne.n	8005e86 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4413      	add	r3, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	4413      	add	r3, r2
 8005e16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d907      	bls.n	8005e40 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8005e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e38:	1ad2      	subs	r2, r2, r3
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3c:	619a      	str	r2, [r3, #24]
 8005e3e:	e002      	b.n	8005e46 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8005e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e42:	2200      	movs	r2, #0
 8005e44:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f006 fd28 	bl	800c8aa <HAL_PCD_DataInStageCallback>
 8005e5a:	e01b      	b.n	8005e94 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e64:	441a      	add	r2, r3
 8005e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e68:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e72:	441a      	add	r2, r3
 8005e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e76:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f003 f905 	bl	800908e <USB_EPStartXfer>
 8005e84:	e006      	b.n	8005e94 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005e86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f917 	bl	80060c2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b21b      	sxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f6ff ac4d 	blt.w	8005740 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3758      	adds	r7, #88	; 0x58
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d07c      	beq.n	8005fc2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4413      	add	r3, r2
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	8b7b      	ldrh	r3, [r7, #26]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d306      	bcc.n	8005f06 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	8b7b      	ldrh	r3, [r7, #26]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	619a      	str	r2, [r3, #24]
 8005f04:	e002      	b.n	8005f0c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d123      	bne.n	8005f5c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	833b      	strh	r3, [r7, #24]
 8005f30:	8b3b      	ldrh	r3, [r7, #24]
 8005f32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f36:	833b      	strh	r3, [r7, #24]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	441a      	add	r2, r3
 8005f46:	8b3b      	ldrh	r3, [r7, #24]
 8005f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f5c:	88fb      	ldrh	r3, [r7, #6]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01f      	beq.n	8005fa6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f80:	82fb      	strh	r3, [r7, #22]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	8afb      	ldrh	r3, [r7, #22]
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005fa6:	8b7b      	ldrh	r3, [r7, #26]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8085 	beq.w	80060b8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6959      	ldr	r1, [r3, #20]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	891a      	ldrh	r2, [r3, #8]
 8005fba:	8b7b      	ldrh	r3, [r7, #26]
 8005fbc:	f004 fd19 	bl	800a9f2 <USB_ReadPMA>
 8005fc0:	e07a      	b.n	80060b8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	8b7b      	ldrh	r3, [r7, #26]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d306      	bcc.n	8006000 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	8b7b      	ldrh	r3, [r7, #26]
 8005ff8:	1ad2      	subs	r2, r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	619a      	str	r2, [r3, #24]
 8005ffe:	e002      	b.n	8006006 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d123      	bne.n	8006056 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	83fb      	strh	r3, [r7, #30]
 800602a:	8bfb      	ldrh	r3, [r7, #30]
 800602c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006030:	83fb      	strh	r3, [r7, #30]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	441a      	add	r2, r3
 8006040:	8bfb      	ldrh	r3, [r7, #30]
 8006042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	b29b      	uxth	r3, r3
 8006054:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d11f      	bne.n	80060a0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	83bb      	strh	r3, [r7, #28]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	8bbb      	ldrh	r3, [r7, #28]
 800608c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006098:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800609c:	b29b      	uxth	r3, r3
 800609e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80060a0:	8b7b      	ldrh	r3, [r7, #26]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	6959      	ldr	r1, [r3, #20]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	895a      	ldrh	r2, [r3, #10]
 80060b2:	8b7b      	ldrh	r3, [r7, #26]
 80060b4:	f004 fc9d 	bl	800a9f2 <USB_ReadPMA>
    }
  }

  return count;
 80060b8:	8b7b      	ldrh	r3, [r7, #26]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b0a2      	sub	sp, #136	; 0x88
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	4613      	mov	r3, r2
 80060ce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 81c5 	beq.w	8006466 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4413      	add	r3, r2
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006100:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800610c:	429a      	cmp	r2, r3
 800610e:	d907      	bls.n	8006120 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006118:	1ad2      	subs	r2, r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	619a      	str	r2, [r3, #24]
 800611e:	e002      	b.n	8006126 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2200      	movs	r2, #0
 8006124:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f040 80b9 	bne.w	80062a2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d126      	bne.n	8006186 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006146:	b29b      	uxth	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	4413      	add	r3, r2
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	00da      	lsls	r2, r3, #3
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	4413      	add	r3, r2
 800615a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800616a:	b29a      	uxth	r2, r3
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617e:	b29a      	uxth	r2, r3
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e01a      	b.n	80061bc <HAL_PCD_EP_DB_Transmit+0xfa>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d116      	bne.n	80061bc <HAL_PCD_EP_DB_Transmit+0xfa>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	633b      	str	r3, [r7, #48]	; 0x30
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	4413      	add	r3, r2
 80061a4:	633b      	str	r3, [r7, #48]	; 0x30
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	00da      	lsls	r2, r3, #3
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	4413      	add	r3, r2
 80061b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	2200      	movs	r2, #0
 80061ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	623b      	str	r3, [r7, #32]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d126      	bne.n	8006218 <HAL_PCD_EP_DB_Transmit+0x156>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d8:	b29b      	uxth	r3, r3
 80061da:	461a      	mov	r2, r3
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	4413      	add	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	00da      	lsls	r2, r3, #3
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	4413      	add	r3, r2
 80061ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006210:	b29a      	uxth	r2, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e017      	b.n	8006248 <HAL_PCD_EP_DB_Transmit+0x186>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d113      	bne.n	8006248 <HAL_PCD_EP_DB_Transmit+0x186>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	4413      	add	r3, r2
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	00da      	lsls	r2, r3, #3
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	4413      	add	r3, r2
 800623c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2200      	movs	r2, #0
 8006246:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	4619      	mov	r1, r3
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f006 fb2b 	bl	800c8aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006254:	88fb      	ldrh	r3, [r7, #6]
 8006256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 82d2 	beq.w	8006804 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	827b      	strh	r3, [r7, #18]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	441a      	add	r2, r3
 800628a:	8a7b      	ldrh	r3, [r7, #18]
 800628c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629c:	b29b      	uxth	r3, r3
 800629e:	8013      	strh	r3, [r2, #0]
 80062a0:	e2b0      	b.n	8006804 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d021      	beq.n	80062f0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	441a      	add	r2, r3
 80062d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	f040 8284 	bne.w	8006804 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006304:	441a      	add	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	69da      	ldr	r2, [r3, #28]
 800630e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006312:	441a      	add	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	429a      	cmp	r2, r3
 8006322:	d309      	bcc.n	8006338 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6a1a      	ldr	r2, [r3, #32]
 800632e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006330:	1ad2      	subs	r2, r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	621a      	str	r2, [r3, #32]
 8006336:	e015      	b.n	8006364 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d107      	bne.n	8006350 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006344:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800634e:	e009      	b.n	8006364 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2200      	movs	r2, #0
 8006362:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d155      	bne.n	8006418 <HAL_PCD_EP_DB_Transmit+0x356>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	63bb      	str	r3, [r7, #56]	; 0x38
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637a:	b29b      	uxth	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	4413      	add	r3, r2
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	00da      	lsls	r2, r3, #3
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	4413      	add	r3, r2
 800638e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
 8006394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006396:	2b3e      	cmp	r3, #62	; 0x3e
 8006398:	d916      	bls.n	80063c8 <HAL_PCD_EP_DB_Transmit+0x306>
 800639a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a2:	f003 031f 	and.w	r3, r3, #31
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80063aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ac:	3b01      	subs	r3, #1
 80063ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	029b      	lsls	r3, r3, #10
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	e043      	b.n	8006450 <HAL_PCD_EP_DB_Transmit+0x38e>
 80063c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d112      	bne.n	80063f4 <HAL_PCD_EP_DB_Transmit+0x332>
 80063ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063d8:	b29a      	uxth	r2, r3
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	e02d      	b.n	8006450 <HAL_PCD_EP_DB_Transmit+0x38e>
 80063f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <HAL_PCD_EP_DB_Transmit+0x348>
 8006404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006406:	3301      	adds	r3, #1
 8006408:	64bb      	str	r3, [r7, #72]	; 0x48
 800640a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640c:	b29b      	uxth	r3, r3
 800640e:	029b      	lsls	r3, r3, #10
 8006410:	b29a      	uxth	r2, r3
 8006412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	e01b      	b.n	8006450 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d117      	bne.n	8006450 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	643b      	str	r3, [r7, #64]	; 0x40
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006434:	4413      	add	r3, r2
 8006436:	643b      	str	r3, [r7, #64]	; 0x40
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	00da      	lsls	r2, r3, #3
 800643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006440:	4413      	add	r3, r2
 8006442:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800644a:	b29a      	uxth	r2, r3
 800644c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6959      	ldr	r1, [r3, #20]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	891a      	ldrh	r2, [r3, #8]
 800645c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800645e:	b29b      	uxth	r3, r3
 8006460:	f004 fa85 	bl	800a96e <USB_WritePMA>
 8006464:	e1ce      	b.n	8006804 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646e:	b29b      	uxth	r3, r3
 8006470:	461a      	mov	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4413      	add	r3, r2
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	4413      	add	r3, r2
 8006480:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800648a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006496:	429a      	cmp	r2, r3
 8006498:	d307      	bcc.n	80064aa <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	619a      	str	r2, [r3, #24]
 80064a8:	e002      	b.n	80064b0 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f040 80c4 	bne.w	8006642 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d126      	bne.n	8006510 <HAL_PCD_EP_DB_Transmit+0x44e>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064d6:	4413      	add	r3, r2
 80064d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	00da      	lsls	r2, r3, #3
 80064e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064e2:	4413      	add	r3, r2
 80064e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064e8:	667b      	str	r3, [r7, #100]	; 0x64
 80064ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006508:	b29a      	uxth	r2, r3
 800650a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	e01a      	b.n	8006546 <HAL_PCD_EP_DB_Transmit+0x484>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d116      	bne.n	8006546 <HAL_PCD_EP_DB_Transmit+0x484>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	673b      	str	r3, [r7, #112]	; 0x70
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006526:	b29b      	uxth	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800652c:	4413      	add	r3, r2
 800652e:	673b      	str	r3, [r7, #112]	; 0x70
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	00da      	lsls	r2, r3, #3
 8006536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006538:	4413      	add	r3, r2
 800653a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800653e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006542:	2200      	movs	r2, #0
 8006544:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d12f      	bne.n	80065b4 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006564:	b29b      	uxth	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800656c:	4413      	add	r3, r2
 800656e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800657c:	4413      	add	r3, r2
 800657e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29b      	uxth	r3, r3
 800658e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006592:	b29a      	uxth	r2, r3
 8006594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065b0:	801a      	strh	r2, [r3, #0]
 80065b2:	e017      	b.n	80065e4 <HAL_PCD_EP_DB_Transmit+0x522>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d113      	bne.n	80065e4 <HAL_PCD_EP_DB_Transmit+0x522>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	461a      	mov	r2, r3
 80065c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065ca:	4413      	add	r3, r2
 80065cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	00da      	lsls	r2, r3, #3
 80065d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065d6:	4413      	add	r3, r2
 80065d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80065de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e0:	2200      	movs	r2, #0
 80065e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	4619      	mov	r1, r3
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f006 f95d 	bl	800c8aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80065f0:	88fb      	ldrh	r3, [r7, #6]
 80065f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 8104 	bne.w	8006804 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800662c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663c:	b29b      	uxth	r3, r3
 800663e:	8013      	strh	r3, [r2, #0]
 8006640:	e0e0      	b.n	8006804 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d121      	bne.n	8006690 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006666:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006696:	2b01      	cmp	r3, #1
 8006698:	f040 80b4 	bne.w	8006804 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	695a      	ldr	r2, [r3, #20]
 80066a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80066a4:	441a      	add	r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	69da      	ldr	r2, [r3, #28]
 80066ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80066b2:	441a      	add	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6a1a      	ldr	r2, [r3, #32]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d309      	bcc.n	80066d8 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6a1a      	ldr	r2, [r3, #32]
 80066ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d0:	1ad2      	subs	r2, r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	621a      	str	r2, [r3, #32]
 80066d6:	e015      	b.n	8006704 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d107      	bne.n	80066f0 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80066e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80066e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80066ee:	e009      	b.n	8006704 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	663b      	str	r3, [r7, #96]	; 0x60
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d155      	bne.n	80067be <HAL_PCD_EP_DB_Transmit+0x6fc>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	65bb      	str	r3, [r7, #88]	; 0x58
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006720:	b29b      	uxth	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006726:	4413      	add	r3, r2
 8006728:	65bb      	str	r3, [r7, #88]	; 0x58
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	00da      	lsls	r2, r3, #3
 8006730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006732:	4413      	add	r3, r2
 8006734:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006738:	657b      	str	r3, [r7, #84]	; 0x54
 800673a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800673c:	2b3e      	cmp	r3, #62	; 0x3e
 800673e:	d916      	bls.n	800676e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	677b      	str	r3, [r7, #116]	; 0x74
 8006746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <HAL_PCD_EP_DB_Transmit+0x694>
 8006750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006752:	3b01      	subs	r3, #1
 8006754:	677b      	str	r3, [r7, #116]	; 0x74
 8006756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006758:	b29b      	uxth	r3, r3
 800675a:	029b      	lsls	r3, r3, #10
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e040      	b.n	80067f0 <HAL_PCD_EP_DB_Transmit+0x72e>
 800676e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006770:	2b00      	cmp	r3, #0
 8006772:	d112      	bne.n	800679a <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800677e:	b29a      	uxth	r2, r3
 8006780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006792:	b29a      	uxth	r2, r3
 8006794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	e02a      	b.n	80067f0 <HAL_PCD_EP_DB_Transmit+0x72e>
 800679a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	677b      	str	r3, [r7, #116]	; 0x74
 80067a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80067aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ac:	3301      	adds	r3, #1
 80067ae:	677b      	str	r3, [r7, #116]	; 0x74
 80067b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	029b      	lsls	r3, r3, #10
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	e018      	b.n	80067f0 <HAL_PCD_EP_DB_Transmit+0x72e>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d114      	bne.n	80067f0 <HAL_PCD_EP_DB_Transmit+0x72e>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d4:	4413      	add	r3, r2
 80067d6:	663b      	str	r3, [r7, #96]	; 0x60
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	00da      	lsls	r2, r3, #3
 80067de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e0:	4413      	add	r3, r2
 80067e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6959      	ldr	r1, [r3, #20]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	895a      	ldrh	r2, [r3, #10]
 80067fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f004 f8b5 	bl	800a96e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681e:	823b      	strh	r3, [r7, #16]
 8006820:	8a3b      	ldrh	r3, [r7, #16]
 8006822:	f083 0310 	eor.w	r3, r3, #16
 8006826:	823b      	strh	r3, [r7, #16]
 8006828:	8a3b      	ldrh	r3, [r7, #16]
 800682a:	f083 0320 	eor.w	r3, r3, #32
 800682e:	823b      	strh	r3, [r7, #16]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	8a3b      	ldrh	r3, [r7, #16]
 8006840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006850:	b29b      	uxth	r3, r3
 8006852:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3788      	adds	r7, #136	; 0x88
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800685e:	b480      	push	{r7}
 8006860:	b087      	sub	sp, #28
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	817b      	strh	r3, [r7, #10]
 800686c:	4613      	mov	r3, r2
 800686e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006870:	897b      	ldrh	r3, [r7, #10]
 8006872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00c      	beq.n	8006896 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800687c:	897b      	ldrh	r3, [r7, #10]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	3304      	adds	r3, #4
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e00a      	b.n	80068ac <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006896:	897a      	ldrh	r2, [r7, #10]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	3304      	adds	r3, #4
 80068aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80068ac:	893b      	ldrh	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2200      	movs	r2, #0
 80068b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	80da      	strh	r2, [r3, #6]
 80068c0:	e00b      	b.n	80068da <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2201      	movs	r2, #1
 80068c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	0c1b      	lsrs	r3, r3, #16
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800690c:	b29b      	uxth	r3, r3
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006920:	b29b      	uxth	r3, r3
 8006922:	f043 0302 	orr.w	r3, r3, #2
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a04      	ldr	r2, [pc, #16]	; (8006958 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694a:	6013      	str	r3, [r2, #0]
}
 800694c:	bf00      	nop
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	58000400 	.word	0x58000400

0800695c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <HAL_PWREx_GetVoltageRange+0x18>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006968:	4618      	mov	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	58000400 	.word	0x58000400

08006978 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <HAL_PWREx_EnableVddUSB+0x1c>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4a04      	ldr	r2, [pc, #16]	; (8006994 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006986:	6053      	str	r3, [r2, #4]
}
 8006988:	bf00      	nop
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	58000400 	.word	0x58000400

08006998 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800699c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069aa:	d101      	bne.n	80069b0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80069c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ce:	6013      	str	r3, [r2, #0]
}
 80069d0:	bf00      	nop
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80069da:	b480      	push	{r7}
 80069dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80069de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ec:	6013      	str	r3, [r2, #0]
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80069fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a0a:	d101      	bne.n	8006a10 <LL_RCC_HSE_IsReady+0x18>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <LL_RCC_HSE_IsReady+0x1a>
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2e:	6013      	str	r3, [r2, #0]
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4c:	6013      	str	r3, [r2, #0]
}
 8006a4e:	bf00      	nop
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6a:	d101      	bne.n	8006a70 <LL_RCC_HSI_IsReady+0x18>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e000      	b.n	8006a72 <LL_RCC_HSI_IsReady+0x1a>
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	061b      	lsls	r3, r3, #24
 8006a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a96:	4313      	orrs	r3, r2
 8006a98:	604b      	str	r3, [r1, #4]
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006abe:	bf00      	nop
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006ae0:	bf00      	nop
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006aea:	b480      	push	{r7}
 8006aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d101      	bne.n	8006b02 <LL_RCC_HSI48_IsReady+0x18>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e000      	b.n	8006b04 <LL_RCC_HSI48_IsReady+0x1a>
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b26:	bf00      	nop
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b48:	bf00      	nop
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8006b52:	b480      	push	{r7}
 8006b54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b62:	f043 0304 	orr.w	r3, r3, #4
 8006b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b6a:	bf00      	nop
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b84:	f023 0304 	bic.w	r3, r3, #4
 8006b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b8c:	bf00      	nop
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006b96:	b480      	push	{r7}
 8006b98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d101      	bne.n	8006bae <LL_RCC_LSE_IsReady+0x18>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <LL_RCC_LSE_IsReady+0x1a>
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006bd2:	bf00      	nop
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006bf4:	bf00      	nop
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d101      	bne.n	8006c16 <LL_RCC_LSI1_IsReady+0x18>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <LL_RCC_LSI1_IsReady+0x1a>
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8006c22:	b480      	push	{r7}
 8006c24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c32:	f043 0304 	orr.w	r3, r3, #4
 8006c36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006c3a:	bf00      	nop
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c54:	f023 0304 	bic.w	r3, r3, #4
 8006c58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006c5c:	bf00      	nop
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006c66:	b480      	push	{r7}
 8006c68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d101      	bne.n	8006c7e <LL_RCC_LSI2_IsReady+0x18>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <LL_RCC_LSI2_IsReady+0x1a>
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	6013      	str	r3, [r2, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	6013      	str	r3, [r2, #0]
}
 8006cea:	bf00      	nop
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d101      	bne.n	8006d0a <LL_RCC_MSI_IsReady+0x16>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <LL_RCC_MSI_IsReady+0x18>
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	600b      	str	r3, [r1, #0]
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d4e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2bb0      	cmp	r3, #176	; 0xb0
 8006d54:	d901      	bls.n	8006d5a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006d56:	23b0      	movs	r3, #176	; 0xb0
 8006d58:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006d5a:	687b      	ldr	r3, [r7, #4]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d82:	4313      	orrs	r3, r2
 8006d84:	604b      	str	r3, [r1, #4]
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f023 0203 	bic.w	r2, r3, #3
 8006da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	608b      	str	r3, [r1, #8]
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 030c 	and.w	r3, r3, #12
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	608b      	str	r3, [r1, #8]
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006e36:	f023 020f 	bic.w	r2, r3, #15
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	608b      	str	r3, [r1, #8]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	608b      	str	r3, [r1, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eea:	6013      	str	r3, [r2, #0]
}
 8006eec:	bf00      	nop
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f08:	6013      	str	r3, [r2, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f26:	d101      	bne.n	8006f2c <LL_RCC_PLL_IsReady+0x18>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <LL_RCC_PLL_IsReady+0x1a>
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	0a1b      	lsrs	r3, r3, #8
 8006f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006f52:	b480      	push	{r7}
 8006f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006f82:	b480      	push	{r7}
 8006f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0303 	and.w	r3, r3, #3
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fac:	d101      	bne.n	8006fb2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fd2:	d101      	bne.n	8006fd8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e000      	b.n	8006fda <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff8:	d101      	bne.n	8006ffe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800700a:	b480      	push	{r7}
 800700c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800700e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800701c:	d101      	bne.n	8007022 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800702e:	b480      	push	{r7}
 8007030:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800703c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007040:	d101      	bne.n	8007046 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007054:	b590      	push	{r4, r7, lr}
 8007056:	b08d      	sub	sp, #52	; 0x34
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e363      	b.n	800772e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 808d 	beq.w	800718e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007074:	f7ff fea1 	bl	8006dba <LL_RCC_GetSysClkSource>
 8007078:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800707a:	f7ff ff82 	bl	8006f82 <LL_RCC_PLL_GetMainSource>
 800707e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <HAL_RCC_OscConfig+0x3e>
 8007086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007088:	2b0c      	cmp	r3, #12
 800708a:	d147      	bne.n	800711c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	2b01      	cmp	r3, #1
 8007090:	d144      	bne.n	800711c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e347      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80070a2:	f7ff fe4c 	bl	8006d3e <LL_RCC_MSI_GetRange>
 80070a6:	4603      	mov	r3, r0
 80070a8:	429c      	cmp	r4, r3
 80070aa:	d914      	bls.n	80070d6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 fd05 	bl	8007ac0 <RCC_SetFlashLatencyFromMSIRange>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e336      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff fe26 	bl	8006d16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff fe4a 	bl	8006d68 <LL_RCC_MSI_SetCalibTrimming>
 80070d4:	e013      	b.n	80070fe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fe1b 	bl	8006d16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff fe3f 	bl	8006d68 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fce6 	bl	8007ac0 <RCC_SetFlashLatencyFromMSIRange>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e317      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80070fe:	f000 fccb 	bl	8007a98 <HAL_RCC_GetHCLKFreq>
 8007102:	4603      	mov	r3, r0
 8007104:	4aa4      	ldr	r2, [pc, #656]	; (8007398 <HAL_RCC_OscConfig+0x344>)
 8007106:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007108:	4ba4      	ldr	r3, [pc, #656]	; (800739c <HAL_RCC_OscConfig+0x348>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f7fd fa93 	bl	8004638 <HAL_InitTick>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d039      	beq.n	800718c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e308      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01e      	beq.n	8007162 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007124:	f7ff fdc8 	bl	8006cb8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007128:	f7fd fad4 	bl	80046d4 <HAL_GetTick>
 800712c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007130:	f7fd fad0 	bl	80046d4 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e2f5      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007142:	f7ff fdd7 	bl	8006cf4 <LL_RCC_MSI_IsReady>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0f1      	beq.n	8007130 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff fde0 	bl	8006d16 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fe04 	bl	8006d68 <LL_RCC_MSI_SetCalibTrimming>
 8007160:	e015      	b.n	800718e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007162:	f7ff fdb8 	bl	8006cd6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007166:	f7fd fab5 	bl	80046d4 <HAL_GetTick>
 800716a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800716e:	f7fd fab1 	bl	80046d4 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e2d6      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007180:	f7ff fdb8 	bl	8006cf4 <LL_RCC_MSI_IsReady>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f1      	bne.n	800716e <HAL_RCC_OscConfig+0x11a>
 800718a:	e000      	b.n	800718e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800718c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d047      	beq.n	800722a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800719a:	f7ff fe0e 	bl	8006dba <LL_RCC_GetSysClkSource>
 800719e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071a0:	f7ff feef 	bl	8006f82 <LL_RCC_PLL_GetMainSource>
 80071a4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d005      	beq.n	80071b8 <HAL_RCC_OscConfig+0x164>
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	2b0c      	cmp	r3, #12
 80071b0:	d108      	bne.n	80071c4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d105      	bne.n	80071c4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d134      	bne.n	800722a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e2b4      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071cc:	d102      	bne.n	80071d4 <HAL_RCC_OscConfig+0x180>
 80071ce:	f7ff fbf5 	bl	80069bc <LL_RCC_HSE_Enable>
 80071d2:	e001      	b.n	80071d8 <HAL_RCC_OscConfig+0x184>
 80071d4:	f7ff fc01 	bl	80069da <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d012      	beq.n	8007206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e0:	f7fd fa78 	bl	80046d4 <HAL_GetTick>
 80071e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071e8:	f7fd fa74 	bl	80046d4 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b64      	cmp	r3, #100	; 0x64
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e299      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80071fa:	f7ff fbfd 	bl	80069f8 <LL_RCC_HSE_IsReady>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f1      	beq.n	80071e8 <HAL_RCC_OscConfig+0x194>
 8007204:	e011      	b.n	800722a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007206:	f7fd fa65 	bl	80046d4 <HAL_GetTick>
 800720a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800720c:	e008      	b.n	8007220 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800720e:	f7fd fa61 	bl	80046d4 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b64      	cmp	r3, #100	; 0x64
 800721a:	d901      	bls.n	8007220 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e286      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007220:	f7ff fbea 	bl	80069f8 <LL_RCC_HSE_IsReady>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1f1      	bne.n	800720e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04c      	beq.n	80072d0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007236:	f7ff fdc0 	bl	8006dba <LL_RCC_GetSysClkSource>
 800723a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800723c:	f7ff fea1 	bl	8006f82 <LL_RCC_PLL_GetMainSource>
 8007240:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d005      	beq.n	8007254 <HAL_RCC_OscConfig+0x200>
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b0c      	cmp	r3, #12
 800724c:	d10e      	bne.n	800726c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d10b      	bne.n	800726c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e266      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff fc09 	bl	8006a7c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800726a:	e031      	b.n	80072d0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d019      	beq.n	80072a8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007274:	f7ff fbd2 	bl	8006a1c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fd fa2c 	bl	80046d4 <HAL_GetTick>
 800727c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007280:	f7fd fa28 	bl	80046d4 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e24d      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007292:	f7ff fbe1 	bl	8006a58 <LL_RCC_HSI_IsReady>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f1      	beq.n	8007280 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fbeb 	bl	8006a7c <LL_RCC_HSI_SetCalibTrimming>
 80072a6:	e013      	b.n	80072d0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072a8:	f7ff fbc7 	bl	8006a3a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ac:	f7fd fa12 	bl	80046d4 <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072b4:	f7fd fa0e 	bl	80046d4 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e233      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80072c6:	f7ff fbc7 	bl	8006a58 <LL_RCC_HSI_IsReady>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1f1      	bne.n	80072b4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d106      	bne.n	80072ea <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80a3 	beq.w	8007430 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d076      	beq.n	80073e0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d046      	beq.n	800738c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80072fe:	f7ff fc7e 	bl	8006bfe <LL_RCC_LSI1_IsReady>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d113      	bne.n	8007330 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007308:	f7ff fc57 	bl	8006bba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800730c:	f7fd f9e2 	bl	80046d4 <HAL_GetTick>
 8007310:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007314:	f7fd f9de 	bl	80046d4 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e203      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007326:	f7ff fc6a 	bl	8006bfe <LL_RCC_LSI1_IsReady>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f1      	beq.n	8007314 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007330:	f7ff fc77 	bl	8006c22 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fd f9ce 	bl	80046d4 <HAL_GetTick>
 8007338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800733c:	f7fd f9ca 	bl	80046d4 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b03      	cmp	r3, #3
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e1ef      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800734e:	f7ff fc8a 	bl	8006c66 <LL_RCC_LSI2_IsReady>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0f1      	beq.n	800733c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fc94 	bl	8006c8a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007362:	f7ff fc3b 	bl	8006bdc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007366:	f7fd f9b5 	bl	80046d4 <HAL_GetTick>
 800736a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800736e:	f7fd f9b1 	bl	80046d4 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e1d6      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007380:	f7ff fc3d 	bl	8006bfe <LL_RCC_LSI1_IsReady>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f1      	bne.n	800736e <HAL_RCC_OscConfig+0x31a>
 800738a:	e051      	b.n	8007430 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800738c:	f7ff fc15 	bl	8006bba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fd f9a0 	bl	80046d4 <HAL_GetTick>
 8007394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007396:	e00c      	b.n	80073b2 <HAL_RCC_OscConfig+0x35e>
 8007398:	20000008 	.word	0x20000008
 800739c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80073a0:	f7fd f998 	bl	80046d4 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e1bd      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80073b2:	f7ff fc24 	bl	8006bfe <LL_RCC_LSI1_IsReady>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0f1      	beq.n	80073a0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80073bc:	f7ff fc42 	bl	8006c44 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80073c2:	f7fd f987 	bl	80046d4 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e1ac      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80073d4:	f7ff fc47 	bl	8006c66 <LL_RCC_LSI2_IsReady>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f1      	bne.n	80073c2 <HAL_RCC_OscConfig+0x36e>
 80073de:	e027      	b.n	8007430 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80073e0:	f7ff fc30 	bl	8006c44 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e4:	f7fd f976 	bl	80046d4 <HAL_GetTick>
 80073e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80073ec:	f7fd f972 	bl	80046d4 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e197      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80073fe:	f7ff fc32 	bl	8006c66 <LL_RCC_LSI2_IsReady>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f1      	bne.n	80073ec <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007408:	f7ff fbe8 	bl	8006bdc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800740c:	f7fd f962 	bl	80046d4 <HAL_GetTick>
 8007410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007414:	f7fd f95e 	bl	80046d4 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e183      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007426:	f7ff fbea 	bl	8006bfe <LL_RCC_LSI1_IsReady>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1f1      	bne.n	8007414 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	d05b      	beq.n	80074f4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800743c:	4ba7      	ldr	r3, [pc, #668]	; (80076dc <HAL_RCC_OscConfig+0x688>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d114      	bne.n	8007472 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007448:	f7ff fa78 	bl	800693c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800744c:	f7fd f942 	bl	80046d4 <HAL_GetTick>
 8007450:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007454:	f7fd f93e 	bl	80046d4 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e163      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007466:	4b9d      	ldr	r3, [pc, #628]	; (80076dc <HAL_RCC_OscConfig+0x688>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f0      	beq.n	8007454 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d102      	bne.n	8007480 <HAL_RCC_OscConfig+0x42c>
 800747a:	f7ff fb48 	bl	8006b0e <LL_RCC_LSE_Enable>
 800747e:	e00c      	b.n	800749a <HAL_RCC_OscConfig+0x446>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	2b05      	cmp	r3, #5
 8007486:	d104      	bne.n	8007492 <HAL_RCC_OscConfig+0x43e>
 8007488:	f7ff fb63 	bl	8006b52 <LL_RCC_LSE_EnableBypass>
 800748c:	f7ff fb3f 	bl	8006b0e <LL_RCC_LSE_Enable>
 8007490:	e003      	b.n	800749a <HAL_RCC_OscConfig+0x446>
 8007492:	f7ff fb4d 	bl	8006b30 <LL_RCC_LSE_Disable>
 8007496:	f7ff fb6d 	bl	8006b74 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d014      	beq.n	80074cc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a2:	f7fd f917 	bl	80046d4 <HAL_GetTick>
 80074a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80074a8:	e00a      	b.n	80074c0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074aa:	f7fd f913 	bl	80046d4 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d901      	bls.n	80074c0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e136      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80074c0:	f7ff fb69 	bl	8006b96 <LL_RCC_LSE_IsReady>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0ef      	beq.n	80074aa <HAL_RCC_OscConfig+0x456>
 80074ca:	e013      	b.n	80074f4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074cc:	f7fd f902 	bl	80046d4 <HAL_GetTick>
 80074d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80074d2:	e00a      	b.n	80074ea <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074d4:	f7fd f8fe 	bl	80046d4 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e121      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80074ea:	f7ff fb54 	bl	8006b96 <LL_RCC_LSE_IsReady>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1ef      	bne.n	80074d4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d02c      	beq.n	800755a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	d014      	beq.n	8007532 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007508:	f7ff facd 	bl	8006aa6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750c:	f7fd f8e2 	bl	80046d4 <HAL_GetTick>
 8007510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007514:	f7fd f8de 	bl	80046d4 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e103      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007526:	f7ff fae0 	bl	8006aea <LL_RCC_HSI48_IsReady>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0f1      	beq.n	8007514 <HAL_RCC_OscConfig+0x4c0>
 8007530:	e013      	b.n	800755a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007532:	f7ff fac9 	bl	8006ac8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007536:	f7fd f8cd 	bl	80046d4 <HAL_GetTick>
 800753a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800753c:	e008      	b.n	8007550 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800753e:	f7fd f8c9 	bl	80046d4 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e0ee      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007550:	f7ff facb 	bl	8006aea <LL_RCC_HSI48_IsReady>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f1      	bne.n	800753e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80e4 	beq.w	800772c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007564:	f7ff fc29 	bl	8006dba <LL_RCC_GetSysClkSource>
 8007568:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800756a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	2b02      	cmp	r3, #2
 8007578:	f040 80b4 	bne.w	80076e4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f003 0203 	and.w	r2, r3, #3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	429a      	cmp	r2, r3
 8007588:	d123      	bne.n	80075d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007594:	429a      	cmp	r2, r3
 8007596:	d11c      	bne.n	80075d2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	0a1b      	lsrs	r3, r3, #8
 800759c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d114      	bne.n	80075d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d10d      	bne.n	80075d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d106      	bne.n	80075d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d05d      	beq.n	800768e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b0c      	cmp	r3, #12
 80075d6:	d058      	beq.n	800768a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80075d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e0a1      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80075ea:	f7ff fc84 	bl	8006ef6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075ee:	f7fd f871 	bl	80046d4 <HAL_GetTick>
 80075f2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075f4:	e008      	b.n	8007608 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f6:	f7fd f86d 	bl	80046d4 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e092      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ef      	bne.n	80075f6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	4b30      	ldr	r3, [pc, #192]	; (80076e0 <HAL_RCC_OscConfig+0x68c>)
 800761e:	4013      	ands	r3, r2
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007628:	4311      	orrs	r1, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800762e:	0212      	lsls	r2, r2, #8
 8007630:	4311      	orrs	r1, r2
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007636:	4311      	orrs	r1, r2
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800763c:	4311      	orrs	r1, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007642:	430a      	orrs	r2, r1
 8007644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007648:	4313      	orrs	r3, r2
 800764a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800764c:	f7ff fc44 	bl	8006ed8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800765a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007660:	f7fd f838 	bl	80046d4 <HAL_GetTick>
 8007664:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007668:	f7fd f834 	bl	80046d4 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e059      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800767a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0ef      	beq.n	8007668 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007688:	e050      	b.n	800772c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e04f      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800768e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d147      	bne.n	800772c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800769c:	f7ff fc1c 	bl	8006ed8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076b0:	f7fd f810 	bl	80046d4 <HAL_GetTick>
 80076b4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b8:	f7fd f80c 	bl	80046d4 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e031      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0ef      	beq.n	80076b8 <HAL_RCC_OscConfig+0x664>
 80076d8:	e028      	b.n	800772c <HAL_RCC_OscConfig+0x6d8>
 80076da:	bf00      	nop
 80076dc:	58000400 	.word	0x58000400
 80076e0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b0c      	cmp	r3, #12
 80076e8:	d01e      	beq.n	8007728 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ea:	f7ff fc04 	bl	8006ef6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ee:	f7fc fff1 	bl	80046d4 <HAL_GetTick>
 80076f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076f4:	e008      	b.n	8007708 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f6:	f7fc ffed 	bl	80046d4 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d901      	bls.n	8007708 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e012      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1ef      	bne.n	80076f6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <HAL_RCC_OscConfig+0x6e4>)
 8007722:	4013      	ands	r3, r2
 8007724:	60cb      	str	r3, [r1, #12]
 8007726:	e001      	b.n	800772c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e000      	b.n	800772e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3734      	adds	r7, #52	; 0x34
 8007732:	46bd      	mov	sp, r7
 8007734:	bd90      	pop	{r4, r7, pc}
 8007736:	bf00      	nop
 8007738:	eefefffc 	.word	0xeefefffc

0800773c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e12d      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007750:	4b98      	ldr	r3, [pc, #608]	; (80079b4 <HAL_RCC_ClockConfig+0x278>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d91b      	bls.n	8007796 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800775e:	4b95      	ldr	r3, [pc, #596]	; (80079b4 <HAL_RCC_ClockConfig+0x278>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f023 0207 	bic.w	r2, r3, #7
 8007766:	4993      	ldr	r1, [pc, #588]	; (80079b4 <HAL_RCC_ClockConfig+0x278>)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	4313      	orrs	r3, r2
 800776c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776e:	f7fc ffb1 	bl	80046d4 <HAL_GetTick>
 8007772:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007774:	e008      	b.n	8007788 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007776:	f7fc ffad 	bl	80046d4 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d901      	bls.n	8007788 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e111      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007788:	4b8a      	ldr	r3, [pc, #552]	; (80079b4 <HAL_RCC_ClockConfig+0x278>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d1ef      	bne.n	8007776 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fb13 	bl	8006dd2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077ac:	f7fc ff92 	bl	80046d4 <HAL_GetTick>
 80077b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077b4:	f7fc ff8e 	bl	80046d4 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e0f2      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80077c6:	f7ff fbe8 	bl	8006f9a <LL_RCC_IsActiveFlag_HPRE>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0f1      	beq.n	80077b4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d016      	beq.n	800780a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fb0a 	bl	8006dfa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077e6:	f7fc ff75 	bl	80046d4 <HAL_GetTick>
 80077ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077ee:	f7fc ff71 	bl	80046d4 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e0d5      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007800:	f7ff fbdd 	bl	8006fbe <LL_RCC_IsActiveFlag_C2HPRE>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0f1      	beq.n	80077ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d016      	beq.n	8007844 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff fb03 	bl	8006e26 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007820:	f7fc ff58 	bl	80046d4 <HAL_GetTick>
 8007824:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007826:	e008      	b.n	800783a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007828:	f7fc ff54 	bl	80046d4 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e0b8      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800783a:	f7ff fbd3 	bl	8006fe4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d0f1      	beq.n	8007828 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d016      	beq.n	800787e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff fafd 	bl	8006e54 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800785a:	f7fc ff3b 	bl	80046d4 <HAL_GetTick>
 800785e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007860:	e008      	b.n	8007874 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007862:	f7fc ff37 	bl	80046d4 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e09b      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007874:	f7ff fbc9 	bl	800700a <LL_RCC_IsActiveFlag_PPRE1>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f1      	beq.n	8007862 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d017      	beq.n	80078ba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff faf3 	bl	8006e7c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007896:	f7fc ff1d 	bl	80046d4 <HAL_GetTick>
 800789a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800789c:	e008      	b.n	80078b0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800789e:	f7fc ff19 	bl	80046d4 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e07d      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80078b0:	f7ff fbbd 	bl	800702e <LL_RCC_IsActiveFlag_PPRE2>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0f1      	beq.n	800789e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d043      	beq.n	800794e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d106      	bne.n	80078dc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80078ce:	f7ff f893 	bl	80069f8 <LL_RCC_HSE_IsReady>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d11e      	bne.n	8007916 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e067      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d106      	bne.n	80078f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80078e4:	f7ff fb16 	bl	8006f14 <LL_RCC_PLL_IsReady>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d113      	bne.n	8007916 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e05c      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80078fa:	f7ff f9fb 	bl	8006cf4 <LL_RCC_MSI_IsReady>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d108      	bne.n	8007916 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e051      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007908:	f7ff f8a6 	bl	8006a58 <LL_RCC_HSI_IsReady>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e04a      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff fa39 	bl	8006d92 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007920:	f7fc fed8 	bl	80046d4 <HAL_GetTick>
 8007924:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007926:	e00a      	b.n	800793e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007928:	f7fc fed4 	bl	80046d4 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	f241 3288 	movw	r2, #5000	; 0x1388
 8007936:	4293      	cmp	r3, r2
 8007938:	d901      	bls.n	800793e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e036      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800793e:	f7ff fa3c 	bl	8006dba <LL_RCC_GetSysClkSource>
 8007942:	4602      	mov	r2, r0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	429a      	cmp	r2, r3
 800794c:	d1ec      	bne.n	8007928 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800794e:	4b19      	ldr	r3, [pc, #100]	; (80079b4 <HAL_RCC_ClockConfig+0x278>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	429a      	cmp	r2, r3
 800795a:	d21b      	bcs.n	8007994 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800795c:	4b15      	ldr	r3, [pc, #84]	; (80079b4 <HAL_RCC_ClockConfig+0x278>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f023 0207 	bic.w	r2, r3, #7
 8007964:	4913      	ldr	r1, [pc, #76]	; (80079b4 <HAL_RCC_ClockConfig+0x278>)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	4313      	orrs	r3, r2
 800796a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800796c:	f7fc feb2 	bl	80046d4 <HAL_GetTick>
 8007970:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007972:	e008      	b.n	8007986 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007974:	f7fc feae 	bl	80046d4 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d901      	bls.n	8007986 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e012      	b.n	80079ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <HAL_RCC_ClockConfig+0x278>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d1ef      	bne.n	8007974 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007994:	f000 f880 	bl	8007a98 <HAL_RCC_GetHCLKFreq>
 8007998:	4603      	mov	r3, r0
 800799a:	4a07      	ldr	r2, [pc, #28]	; (80079b8 <HAL_RCC_ClockConfig+0x27c>)
 800799c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800799e:	f7fc fea5 	bl	80046ec <HAL_GetTickPrio>
 80079a2:	4603      	mov	r3, r0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fc fe47 	bl	8004638 <HAL_InitTick>
 80079aa:	4603      	mov	r3, r0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	58004000 	.word	0x58004000
 80079b8:	20000008 	.word	0x20000008

080079bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079bc:	b590      	push	{r4, r7, lr}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079c2:	f7ff f9fa 	bl	8006dba <LL_RCC_GetSysClkSource>
 80079c6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80079ce:	f7ff f9b6 	bl	8006d3e <LL_RCC_MSI_GetRange>
 80079d2:	4603      	mov	r3, r0
 80079d4:	091b      	lsrs	r3, r3, #4
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	4a2b      	ldr	r2, [pc, #172]	; (8007a88 <HAL_RCC_GetSysClockFreq+0xcc>)
 80079dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	e04b      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d102      	bne.n	80079f0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80079ea:	4b28      	ldr	r3, [pc, #160]	; (8007a8c <HAL_RCC_GetSysClockFreq+0xd0>)
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	e045      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d10a      	bne.n	8007a0c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80079f6:	f7fe ffcf 	bl	8006998 <LL_RCC_HSE_IsEnabledDiv2>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d102      	bne.n	8007a06 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007a00:	4b23      	ldr	r3, [pc, #140]	; (8007a90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	e03a      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007a06:	4b23      	ldr	r3, [pc, #140]	; (8007a94 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	e037      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007a0c:	f7ff fab9 	bl	8006f82 <LL_RCC_PLL_GetMainSource>
 8007a10:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d003      	beq.n	8007a20 <HAL_RCC_GetSysClockFreq+0x64>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d003      	beq.n	8007a26 <HAL_RCC_GetSysClockFreq+0x6a>
 8007a1e:	e00d      	b.n	8007a3c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007a22:	60bb      	str	r3, [r7, #8]
        break;
 8007a24:	e015      	b.n	8007a52 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007a26:	f7fe ffb7 	bl	8006998 <LL_RCC_HSE_IsEnabledDiv2>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d102      	bne.n	8007a36 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007a30:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007a32:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007a34:	e00d      	b.n	8007a52 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007a36:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007a38:	60bb      	str	r3, [r7, #8]
        break;
 8007a3a:	e00a      	b.n	8007a52 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007a3c:	f7ff f97f 	bl	8006d3e <LL_RCC_MSI_GetRange>
 8007a40:	4603      	mov	r3, r0
 8007a42:	091b      	lsrs	r3, r3, #4
 8007a44:	f003 030f 	and.w	r3, r3, #15
 8007a48:	4a0f      	ldr	r2, [pc, #60]	; (8007a88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a4e:	60bb      	str	r3, [r7, #8]
        break;
 8007a50:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007a52:	f7ff fa71 	bl	8006f38 <LL_RCC_PLL_GetN>
 8007a56:	4602      	mov	r2, r0
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	fb03 f402 	mul.w	r4, r3, r2
 8007a5e:	f7ff fa84 	bl	8006f6a <LL_RCC_PLL_GetDivider>
 8007a62:	4603      	mov	r3, r0
 8007a64:	091b      	lsrs	r3, r3, #4
 8007a66:	3301      	adds	r3, #1
 8007a68:	fbb4 f4f3 	udiv	r4, r4, r3
 8007a6c:	f7ff fa71 	bl	8006f52 <LL_RCC_PLL_GetR>
 8007a70:	4603      	mov	r3, r0
 8007a72:	0f5b      	lsrs	r3, r3, #29
 8007a74:	3301      	adds	r3, #1
 8007a76:	fbb4 f3f3 	udiv	r3, r4, r3
 8007a7a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd90      	pop	{r4, r7, pc}
 8007a86:	bf00      	nop
 8007a88:	080118b0 	.word	0x080118b0
 8007a8c:	00f42400 	.word	0x00f42400
 8007a90:	003d0900 	.word	0x003d0900
 8007a94:	007a1200 	.word	0x007a1200

08007a98 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a98:	b598      	push	{r3, r4, r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007a9c:	f7ff ff8e 	bl	80079bc <HAL_RCC_GetSysClockFreq>
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	f7ff f9ff 	bl	8006ea4 <LL_RCC_GetAHBPrescaler>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	091b      	lsrs	r3, r3, #4
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	4a03      	ldr	r2, [pc, #12]	; (8007abc <HAL_RCC_GetHCLKFreq+0x24>)
 8007ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	bd98      	pop	{r3, r4, r7, pc}
 8007abc:	08011870 	.word	0x08011870

08007ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007ac0:	b590      	push	{r4, r7, lr}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2bb0      	cmp	r3, #176	; 0xb0
 8007acc:	d903      	bls.n	8007ad6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007ace:	4b15      	ldr	r3, [pc, #84]	; (8007b24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e007      	b.n	8007ae6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	4a11      	ldr	r2, [pc, #68]	; (8007b24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007ae6:	f7ff f9e9 	bl	8006ebc <LL_RCC_GetAHB4Prescaler>
 8007aea:	4603      	mov	r3, r0
 8007aec:	091b      	lsrs	r3, r3, #4
 8007aee:	f003 030f 	and.w	r3, r3, #15
 8007af2:	4a0d      	ldr	r2, [pc, #52]	; (8007b28 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007b04:	fba2 2303 	umull	r2, r3, r2, r3
 8007b08:	0c9c      	lsrs	r4, r3, #18
 8007b0a:	f7fe ff27 	bl	800695c <HAL_PWREx_GetVoltageRange>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4619      	mov	r1, r3
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 f80c 	bl	8007b30 <RCC_SetFlashLatency>
 8007b18:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd90      	pop	{r4, r7, pc}
 8007b22:	bf00      	nop
 8007b24:	080118b0 	.word	0x080118b0
 8007b28:	08011870 	.word	0x08011870
 8007b2c:	431bde83 	.word	0x431bde83

08007b30 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007b30:	b590      	push	{r4, r7, lr}
 8007b32:	b093      	sub	sp, #76	; 0x4c
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007b3a:	4b37      	ldr	r3, [pc, #220]	; (8007c18 <RCC_SetFlashLatency+0xe8>)
 8007b3c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007b46:	4a35      	ldr	r2, [pc, #212]	; (8007c1c <RCC_SetFlashLatency+0xec>)
 8007b48:	f107 031c 	add.w	r3, r7, #28
 8007b4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007b52:	4b33      	ldr	r3, [pc, #204]	; (8007c20 <RCC_SetFlashLatency+0xf0>)
 8007b54:	f107 040c 	add.w	r4, r7, #12
 8007b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007b5e:	2300      	movs	r3, #0
 8007b60:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b68:	d11a      	bne.n	8007ba0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b6e:	e013      	b.n	8007b98 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	3348      	adds	r3, #72	; 0x48
 8007b76:	443b      	add	r3, r7
 8007b78:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d807      	bhi.n	8007b92 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	3348      	adds	r3, #72	; 0x48
 8007b88:	443b      	add	r3, r7
 8007b8a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007b8e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007b90:	e020      	b.n	8007bd4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b94:	3301      	adds	r3, #1
 8007b96:	643b      	str	r3, [r7, #64]	; 0x40
 8007b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d9e8      	bls.n	8007b70 <RCC_SetFlashLatency+0x40>
 8007b9e:	e019      	b.n	8007bd4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ba4:	e013      	b.n	8007bce <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	3348      	adds	r3, #72	; 0x48
 8007bac:	443b      	add	r3, r7
 8007bae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d807      	bhi.n	8007bc8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	3348      	adds	r3, #72	; 0x48
 8007bbe:	443b      	add	r3, r7
 8007bc0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007bc4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007bc6:	e005      	b.n	8007bd4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bca:	3301      	adds	r3, #1
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d9e8      	bls.n	8007ba6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007bd4:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <RCC_SetFlashLatency+0xf4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f023 0207 	bic.w	r2, r3, #7
 8007bdc:	4911      	ldr	r1, [pc, #68]	; (8007c24 <RCC_SetFlashLatency+0xf4>)
 8007bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be0:	4313      	orrs	r3, r2
 8007be2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007be4:	f7fc fd76 	bl	80046d4 <HAL_GetTick>
 8007be8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bea:	e008      	b.n	8007bfe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007bec:	f7fc fd72 	bl	80046d4 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e007      	b.n	8007c0e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bfe:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <RCC_SetFlashLatency+0xf4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d1ef      	bne.n	8007bec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	374c      	adds	r7, #76	; 0x4c
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd90      	pop	{r4, r7, pc}
 8007c16:	bf00      	nop
 8007c18:	080117c0 	.word	0x080117c0
 8007c1c:	080117d0 	.word	0x080117d0
 8007c20:	080117dc 	.word	0x080117dc
 8007c24:	58004000 	.word	0x58004000

08007c28 <LL_RCC_LSE_IsEnabled>:
{
 8007c28:	b480      	push	{r7}
 8007c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d101      	bne.n	8007c40 <LL_RCC_LSE_IsEnabled+0x18>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <LL_RCC_LSE_IsEnabled+0x1a>
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <LL_RCC_LSE_IsReady>:
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d101      	bne.n	8007c64 <LL_RCC_LSE_IsReady+0x18>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e000      	b.n	8007c66 <LL_RCC_LSE_IsReady+0x1a>
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <LL_RCC_MSI_EnablePLLMode>:
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c7e:	f043 0304 	orr.w	r3, r3, #4
 8007c82:	6013      	str	r3, [r2, #0]
}
 8007c84:	bf00      	nop
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <LL_RCC_SetRFWKPClockSource>:
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <LL_RCC_SetSMPSClockSource>:
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	f023 0203 	bic.w	r2, r3, #3
 8007ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <LL_RCC_SetSMPSPrescaler>:
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <LL_RCC_SetUSARTClockSource>:
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1a:	f023 0203 	bic.w	r2, r3, #3
 8007d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <LL_RCC_SetLPUARTClockSource>:
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <LL_RCC_SetI2CClockSource>:
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	091b      	lsrs	r3, r3, #4
 8007d76:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007d7a:	43db      	mvns	r3, r3
 8007d7c:	401a      	ands	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <LL_RCC_SetLPTIMClockSource>:
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	0c1b      	lsrs	r3, r3, #16
 8007db0:	041b      	lsls	r3, r3, #16
 8007db2:	43db      	mvns	r3, r3
 8007db4:	401a      	ands	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	041b      	lsls	r3, r3, #16
 8007dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <LL_RCC_SetSAIClockSource>:
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <LL_RCC_SetRNGClockSource>:
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <LL_RCC_SetCLK48ClockSource>:
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <LL_RCC_SetUSBClockSource>:
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ffe3 	bl	8007e28 <LL_RCC_SetCLK48ClockSource>
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <LL_RCC_SetADCClockSource>:
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <LL_RCC_SetRTCClockSource>:
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <LL_RCC_GetRTCClockSource>:
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <LL_RCC_ForceBackupDomainReset>:
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <LL_RCC_ReleaseBackupDomainReset>:
{
 8007efe:	b480      	push	{r7}
 8007f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007f16:	bf00      	nop
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <LL_RCC_PLLSAI1_Enable>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f32:	6013      	str	r3, [r2, #0]
}
 8007f34:	bf00      	nop
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <LL_RCC_PLLSAI1_Disable>:
{
 8007f3e:	b480      	push	{r7}
 8007f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f50:	6013      	str	r3, [r2, #0]
}
 8007f52:	bf00      	nop
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <LL_RCC_PLLSAI1_IsReady>:
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f6e:	d101      	bne.n	8007f74 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d034      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007fa4:	d021      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007fa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007faa:	d81b      	bhi.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fb0:	d01d      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fb6:	d815      	bhi.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fc0:	d110      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007fd2:	e00d      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 f94d 	bl	8008278 <RCCEx_PLLSAI1_ConfigNP>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007fe2:	e005      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	77fb      	strb	r3, [r7, #31]
        break;
 8007fe8:	e002      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007fea:	bf00      	nop
 8007fec:	e000      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ff0:	7ffb      	ldrb	r3, [r7, #31]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d105      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff fee8 	bl	8007dd0 <LL_RCC_SetSAIClockSource>
 8008000:	e001      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008002:	7ffb      	ldrb	r3, [r7, #31]
 8008004:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800800e:	2b00      	cmp	r3, #0
 8008010:	d046      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008012:	f7ff ff56 	bl	8007ec2 <LL_RCC_GetRTCClockSource>
 8008016:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	429a      	cmp	r2, r3
 8008020:	d03c      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008022:	f7fe fc8b 	bl	800693c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d105      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff ff30 	bl	8007e96 <LL_RCC_SetRTCClockSource>
 8008036:	e02e      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008040:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008042:	f7ff ff4b 	bl	8007edc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008046:	f7ff ff5a 	bl	8007efe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008062:	f7ff fde1 	bl	8007c28 <LL_RCC_LSE_IsEnabled>
 8008066:	4603      	mov	r3, r0
 8008068:	2b01      	cmp	r3, #1
 800806a:	d114      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800806c:	f7fc fb32 	bl	80046d4 <HAL_GetTick>
 8008070:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008072:	e00b      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008074:	f7fc fb2e 	bl	80046d4 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008082:	4293      	cmp	r3, r2
 8008084:	d902      	bls.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	77fb      	strb	r3, [r7, #31]
              break;
 800808a:	e004      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800808c:	f7ff fdde 	bl	8007c4c <LL_RCC_LSE_IsReady>
 8008090:	4603      	mov	r3, r0
 8008092:	2b01      	cmp	r3, #1
 8008094:	d1ee      	bne.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008096:	7ffb      	ldrb	r3, [r7, #31]
 8008098:	77bb      	strb	r3, [r7, #30]
 800809a:	e001      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809c:	7ffb      	ldrb	r3, [r7, #31]
 800809e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff fe2a 	bl	8007d0a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d004      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff fe35 	bl	8007d36 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d004      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	4618      	mov	r0, r3
 80080de:	f7ff fe5d 	bl	8007d9c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d004      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff fe52 	bl	8007d9c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fe2a 	bl	8007d62 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0308 	and.w	r3, r3, #8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff fe1f 	bl	8007d62 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d022      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff fe8d 	bl	8007e54 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008142:	d107      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800814e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008152:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800815c:	d10b      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3304      	adds	r3, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f000 f8e3 	bl	800832e <RCCEx_PLLSAI1_ConfigNQ>
 8008168:	4603      	mov	r3, r0
 800816a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800816c:	7ffb      	ldrb	r3, [r7, #31]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008172:	7ffb      	ldrb	r3, [r7, #31]
 8008174:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800817e:	2b00      	cmp	r3, #0
 8008180:	d02b      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818a:	d008      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008194:	d003      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	2b00      	cmp	r3, #0
 800819c:	d105      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fe2a 	bl	8007dfc <LL_RCC_SetRNGClockSource>
 80081a8:	e00a      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	2000      	movs	r0, #0
 80081b6:	f7ff fe21 	bl	8007dfc <LL_RCC_SetRNGClockSource>
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff fe34 	bl	8007e28 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80081c8:	d107      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80081ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d022      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fe3d 	bl	8007e6a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f8:	d107      	bne.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80081fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008208:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008212:	d10b      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3304      	adds	r3, #4
 8008218:	4618      	mov	r0, r3
 800821a:	f000 f8e3 	bl	80083e4 <RCCEx_PLLSAI1_ConfigNR>
 800821e:	4603      	mov	r3, r0
 8008220:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008222:	7ffb      	ldrb	r3, [r7, #31]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008228:	7ffb      	ldrb	r3, [r7, #31]
 800822a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d004      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff fd26 	bl	8007c8e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d009      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff fd45 	bl	8007ce2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff fd2c 	bl	8007cba <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008262:	7fbb      	ldrb	r3, [r7, #30]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3720      	adds	r7, #32
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8008270:	f7ff fcfe 	bl	8007c70 <LL_RCC_MSI_EnablePLLMode>
}
 8008274:	bf00      	nop
 8008276:	bd80      	pop	{r7, pc}

08008278 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008284:	f7ff fe5b 	bl	8007f3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008288:	f7fc fa24 	bl	80046d4 <HAL_GetTick>
 800828c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800828e:	e009      	b.n	80082a4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008290:	f7fc fa20 	bl	80046d4 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d902      	bls.n	80082a4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	73fb      	strb	r3, [r7, #15]
      break;
 80082a2:	e004      	b.n	80082ae <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80082a4:	f7ff fe5a 	bl	8007f5c <LL_RCC_PLLSAI1_IsReady>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f0      	bne.n	8008290 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d137      	bne.n	8008324 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80082b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082c8:	4313      	orrs	r3, r2
 80082ca:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80082cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082de:	4313      	orrs	r3, r2
 80082e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80082e2:	f7ff fe1d 	bl	8007f20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082e6:	f7fc f9f5 	bl	80046d4 <HAL_GetTick>
 80082ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80082ec:	e009      	b.n	8008302 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082ee:	f7fc f9f1 	bl	80046d4 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d902      	bls.n	8008302 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	73fb      	strb	r3, [r7, #15]
        break;
 8008300:	e004      	b.n	800830c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008302:	f7ff fe2b 	bl	8007f5c <LL_RCC_PLLSAI1_IsReady>
 8008306:	4603      	mov	r3, r0
 8008308:	2b01      	cmp	r3, #1
 800830a:	d1f0      	bne.n	80082ee <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d108      	bne.n	8008324 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008320:	4313      	orrs	r3, r2
 8008322:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800833a:	f7ff fe00 	bl	8007f3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800833e:	f7fc f9c9 	bl	80046d4 <HAL_GetTick>
 8008342:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008344:	e009      	b.n	800835a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008346:	f7fc f9c5 	bl	80046d4 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d902      	bls.n	800835a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	73fb      	strb	r3, [r7, #15]
      break;
 8008358:	e004      	b.n	8008364 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800835a:	f7ff fdff 	bl	8007f5c <LL_RCC_PLLSAI1_IsReady>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1f0      	bne.n	8008346 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d137      	bne.n	80083da <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800836a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800837e:	4313      	orrs	r3, r2
 8008380:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008394:	4313      	orrs	r3, r2
 8008396:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008398:	f7ff fdc2 	bl	8007f20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800839c:	f7fc f99a 	bl	80046d4 <HAL_GetTick>
 80083a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083a2:	e009      	b.n	80083b8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083a4:	f7fc f996 	bl	80046d4 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d902      	bls.n	80083b8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	73fb      	strb	r3, [r7, #15]
        break;
 80083b6:	e004      	b.n	80083c2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083b8:	f7ff fdd0 	bl	8007f5c <LL_RCC_PLLSAI1_IsReady>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d1f0      	bne.n	80083a4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d108      	bne.n	80083da <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80083c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083d6:	4313      	orrs	r3, r2
 80083d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80083f0:	f7ff fda5 	bl	8007f3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80083f4:	f7fc f96e 	bl	80046d4 <HAL_GetTick>
 80083f8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80083fa:	e009      	b.n	8008410 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083fc:	f7fc f96a 	bl	80046d4 <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b02      	cmp	r3, #2
 8008408:	d902      	bls.n	8008410 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	73fb      	strb	r3, [r7, #15]
      break;
 800840e:	e004      	b.n	800841a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008410:	f7ff fda4 	bl	8007f5c <LL_RCC_PLLSAI1_IsReady>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1f0      	bne.n	80083fc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d137      	bne.n	8008490 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008434:	4313      	orrs	r3, r2
 8008436:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800844a:	4313      	orrs	r3, r2
 800844c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800844e:	f7ff fd67 	bl	8007f20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008452:	f7fc f93f 	bl	80046d4 <HAL_GetTick>
 8008456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008458:	e009      	b.n	800846e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800845a:	f7fc f93b 	bl	80046d4 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d902      	bls.n	800846e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	73fb      	strb	r3, [r7, #15]
        break;
 800846c:	e004      	b.n	8008478 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800846e:	f7ff fd75 	bl	8007f5c <LL_RCC_PLLSAI1_IsReady>
 8008472:	4603      	mov	r3, r0
 8008474:	2b01      	cmp	r3, #1
 8008476:	d1f0      	bne.n	800845a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d108      	bne.n	8008490 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800847e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800848c:	4313      	orrs	r3, r2
 800848e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008490:	7bfb      	ldrb	r3, [r7, #15]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80084aa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80084ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80084d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80084d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	43db      	mvns	r3, r3
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	4013      	ands	r3, r2
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80084fe:	b084      	sub	sp, #16
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	f107 0014 	add.w	r0, r7, #20
 800850c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	b004      	add	sp, #16
 800853e:	4770      	bx	lr

08008540 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008540:	b480      	push	{r7}
 8008542:	b09d      	sub	sp, #116	; 0x74
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29b      	uxth	r3, r3
 800855e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008566:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	78db      	ldrb	r3, [r3, #3]
 800856e:	2b03      	cmp	r3, #3
 8008570:	d81f      	bhi.n	80085b2 <USB_ActivateEndpoint+0x72>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <USB_ActivateEndpoint+0x38>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008589 	.word	0x08008589
 800857c:	080085a5 	.word	0x080085a5
 8008580:	080085bb 	.word	0x080085bb
 8008584:	08008597 	.word	0x08008597
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008588:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800858c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008590:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008594:	e012      	b.n	80085bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008596:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800859a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800859e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80085a2:	e00b      	b.n	80085bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80085a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80085a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80085ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80085b0:	e004      	b.n	80085bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80085b8:	e000      	b.n	80085bc <USB_ActivateEndpoint+0x7c>
      break;
 80085ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	441a      	add	r2, r3
 80085c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80085ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085da:	b29b      	uxth	r3, r3
 80085dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	b21b      	sxth	r3, r3
 80085ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f6:	b21a      	sxth	r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	b21b      	sxth	r3, r3
 80085fe:	4313      	orrs	r3, r2
 8008600:	b21b      	sxth	r3, r3
 8008602:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	441a      	add	r2, r3
 8008610:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800861c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008624:	b29b      	uxth	r3, r3
 8008626:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	7b1b      	ldrb	r3, [r3, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 816e 	bne.w	800890e <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 8084 	beq.w	8008744 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	61bb      	str	r3, [r7, #24]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008646:	b29b      	uxth	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	4413      	add	r3, r2
 800864e:	61bb      	str	r3, [r7, #24]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	00da      	lsls	r2, r3, #3
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	88db      	ldrh	r3, [r3, #6]
 8008664:	085b      	lsrs	r3, r3, #1
 8008666:	b29b      	uxth	r3, r3
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	b29a      	uxth	r2, r3
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	827b      	strh	r3, [r7, #18]
 800867e:	8a7b      	ldrh	r3, [r7, #18]
 8008680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01b      	beq.n	80086c0 <USB_ActivateEndpoint+0x180>
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	823b      	strh	r3, [r7, #16]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	441a      	add	r2, r3
 80086aa:	8a3b      	ldrh	r3, [r7, #16]
 80086ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086bc:	b29b      	uxth	r3, r3
 80086be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	78db      	ldrb	r3, [r3, #3]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d020      	beq.n	800870a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086de:	81bb      	strh	r3, [r7, #12]
 80086e0:	89bb      	ldrh	r3, [r7, #12]
 80086e2:	f083 0320 	eor.w	r3, r3, #32
 80086e6:	81bb      	strh	r3, [r7, #12]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	441a      	add	r2, r3
 80086f2:	89bb      	ldrh	r3, [r7, #12]
 80086f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008704:	b29b      	uxth	r3, r3
 8008706:	8013      	strh	r3, [r2, #0]
 8008708:	e2cb      	b.n	8008ca2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b29b      	uxth	r3, r3
 8008718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008720:	81fb      	strh	r3, [r7, #14]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	441a      	add	r2, r3
 800872c:	89fb      	ldrh	r3, [r7, #14]
 800872e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800873a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873e:	b29b      	uxth	r3, r3
 8008740:	8013      	strh	r3, [r2, #0]
 8008742:	e2ae      	b.n	8008ca2 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	633b      	str	r3, [r7, #48]	; 0x30
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800874e:	b29b      	uxth	r3, r3
 8008750:	461a      	mov	r2, r3
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	4413      	add	r3, r2
 8008756:	633b      	str	r3, [r7, #48]	; 0x30
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	00da      	lsls	r2, r3, #3
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	4413      	add	r3, r2
 8008762:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	88db      	ldrh	r3, [r3, #6]
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	b29b      	uxth	r3, r3
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	b29a      	uxth	r2, r3
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008782:	b29b      	uxth	r3, r3
 8008784:	461a      	mov	r2, r3
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	4413      	add	r3, r2
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	00da      	lsls	r2, r3, #3
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	4413      	add	r3, r2
 8008796:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	2b3e      	cmp	r3, #62	; 0x3e
 80087a2:	d918      	bls.n	80087d6 <USB_ActivateEndpoint+0x296>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	095b      	lsrs	r3, r3, #5
 80087aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <USB_ActivateEndpoint+0x27e>
 80087b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087ba:	3b01      	subs	r3, #1
 80087bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80087be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	029b      	lsls	r3, r3, #10
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	801a      	strh	r2, [r3, #0]
 80087d4:	e029      	b.n	800882a <USB_ActivateEndpoint+0x2ea>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d112      	bne.n	8008804 <USB_ActivateEndpoint+0x2c4>
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	801a      	strh	r2, [r3, #0]
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	801a      	strh	r2, [r3, #0]
 8008802:	e012      	b.n	800882a <USB_ActivateEndpoint+0x2ea>
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	085b      	lsrs	r3, r3, #1
 800880a:	66bb      	str	r3, [r7, #104]	; 0x68
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <USB_ActivateEndpoint+0x2de>
 8008818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800881a:	3301      	adds	r3, #1
 800881c:	66bb      	str	r3, [r7, #104]	; 0x68
 800881e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008820:	b29b      	uxth	r3, r3
 8008822:	029b      	lsls	r3, r3, #10
 8008824:	b29a      	uxth	r2, r3
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	847b      	strh	r3, [r7, #34]	; 0x22
 8008838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800883a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d01b      	beq.n	800887a <USB_ActivateEndpoint+0x33a>
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008858:	843b      	strh	r3, [r7, #32]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	441a      	add	r2, r3
 8008864:	8c3b      	ldrh	r3, [r7, #32]
 8008866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800886a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800886e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008876:	b29b      	uxth	r3, r3
 8008878:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d124      	bne.n	80088cc <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008898:	83bb      	strh	r3, [r7, #28]
 800889a:	8bbb      	ldrh	r3, [r7, #28]
 800889c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088a0:	83bb      	strh	r3, [r7, #28]
 80088a2:	8bbb      	ldrh	r3, [r7, #28]
 80088a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088a8:	83bb      	strh	r3, [r7, #28]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	441a      	add	r2, r3
 80088b4:	8bbb      	ldrh	r3, [r7, #28]
 80088b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	8013      	strh	r3, [r2, #0]
 80088ca:	e1ea      	b.n	8008ca2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e2:	83fb      	strh	r3, [r7, #30]
 80088e4:	8bfb      	ldrh	r3, [r7, #30]
 80088e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088ea:	83fb      	strh	r3, [r7, #30]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	441a      	add	r2, r3
 80088f6:	8bfb      	ldrh	r3, [r7, #30]
 80088f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008908:	b29b      	uxth	r3, r3
 800890a:	8013      	strh	r3, [r2, #0]
 800890c:	e1c9      	b.n	8008ca2 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	78db      	ldrb	r3, [r3, #3]
 8008912:	2b02      	cmp	r3, #2
 8008914:	d11e      	bne.n	8008954 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	441a      	add	r2, r3
 800893a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800893e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008946:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800894a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894e:	b29b      	uxth	r3, r3
 8008950:	8013      	strh	r3, [r2, #0]
 8008952:	e01d      	b.n	8008990 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	b29b      	uxth	r3, r3
 8008962:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	441a      	add	r2, r3
 8008978:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800897c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898c:	b29b      	uxth	r3, r3
 800898e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800899a:	b29b      	uxth	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a0:	4413      	add	r3, r2
 80089a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	00da      	lsls	r2, r3, #3
 80089aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	891b      	ldrh	r3, [r3, #8]
 80089b8:	085b      	lsrs	r3, r3, #1
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	b29a      	uxth	r2, r3
 80089c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	657b      	str	r3, [r7, #84]	; 0x54
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	461a      	mov	r2, r3
 80089d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089d4:	4413      	add	r3, r2
 80089d6:	657b      	str	r3, [r7, #84]	; 0x54
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	00da      	lsls	r2, r3, #3
 80089de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089e0:	4413      	add	r3, r2
 80089e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089e6:	653b      	str	r3, [r7, #80]	; 0x50
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	895b      	ldrh	r3, [r3, #10]
 80089ec:	085b      	lsrs	r3, r3, #1
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f040 8093 	bne.w	8008b28 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008a12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d01b      	beq.n	8008a56 <USB_ActivateEndpoint+0x516>
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	441a      	add	r2, r3
 8008a40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008a64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d01b      	beq.n	8008aa6 <USB_ActivateEndpoint+0x566>
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	441a      	add	r2, r3
 8008a90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abc:	873b      	strh	r3, [r7, #56]	; 0x38
 8008abe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008ac0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ac4:	873b      	strh	r3, [r7, #56]	; 0x38
 8008ac6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008ac8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008acc:	873b      	strh	r3, [r7, #56]	; 0x38
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	441a      	add	r2, r3
 8008ad8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b04:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	441a      	add	r2, r3
 8008b10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	8013      	strh	r3, [r2, #0]
 8008b26:	e0bc      	b.n	8008ca2 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01d      	beq.n	8008b80 <USB_ActivateEndpoint+0x640>
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	441a      	add	r2, r3
 8008b68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008b90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01d      	beq.n	8008bd8 <USB_ActivateEndpoint+0x698>
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	441a      	add	r2, r3
 8008bc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	78db      	ldrb	r3, [r3, #3]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d024      	beq.n	8008c2a <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bf6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008bfa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008bfe:	f083 0320 	eor.w	r3, r3, #32
 8008c02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	441a      	add	r2, r3
 8008c10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	8013      	strh	r3, [r2, #0]
 8008c28:	e01d      	b.n	8008c66 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	441a      	add	r2, r3
 8008c4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	441a      	add	r2, r3
 8008c8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008ca2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3774      	adds	r7, #116	; 0x74
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop

08008cb4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b08d      	sub	sp, #52	; 0x34
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	7b1b      	ldrb	r3, [r3, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f040 808e 	bne.w	8008de4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	785b      	ldrb	r3, [r3, #1]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d044      	beq.n	8008d5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	81bb      	strh	r3, [r7, #12]
 8008cde:	89bb      	ldrh	r3, [r7, #12]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01b      	beq.n	8008d20 <USB_DeactivateEndpoint+0x6c>
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfe:	817b      	strh	r3, [r7, #10]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	441a      	add	r2, r3
 8008d0a:	897b      	ldrh	r3, [r7, #10]
 8008d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d36:	813b      	strh	r3, [r7, #8]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	441a      	add	r2, r3
 8008d42:	893b      	ldrh	r3, [r7, #8]
 8008d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	8013      	strh	r3, [r2, #0]
 8008d58:	e192      	b.n	8009080 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	827b      	strh	r3, [r7, #18]
 8008d68:	8a7b      	ldrh	r3, [r7, #18]
 8008d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d01b      	beq.n	8008daa <USB_DeactivateEndpoint+0xf6>
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d88:	823b      	strh	r3, [r7, #16]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	441a      	add	r2, r3
 8008d94:	8a3b      	ldrh	r3, [r7, #16]
 8008d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc0:	81fb      	strh	r3, [r7, #14]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	441a      	add	r2, r3
 8008dcc:	89fb      	ldrh	r3, [r7, #14]
 8008dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	8013      	strh	r3, [r2, #0]
 8008de2:	e14d      	b.n	8009080 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f040 80a5 	bne.w	8008f38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	843b      	strh	r3, [r7, #32]
 8008dfc:	8c3b      	ldrh	r3, [r7, #32]
 8008dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d01b      	beq.n	8008e3e <USB_DeactivateEndpoint+0x18a>
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1c:	83fb      	strh	r3, [r7, #30]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	441a      	add	r2, r3
 8008e28:	8bfb      	ldrh	r3, [r7, #30]
 8008e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	83bb      	strh	r3, [r7, #28]
 8008e4c:	8bbb      	ldrh	r3, [r7, #28]
 8008e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d01b      	beq.n	8008e8e <USB_DeactivateEndpoint+0x1da>
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e6c:	837b      	strh	r3, [r7, #26]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	441a      	add	r2, r3
 8008e78:	8b7b      	ldrh	r3, [r7, #26]
 8008e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea4:	833b      	strh	r3, [r7, #24]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	441a      	add	r2, r3
 8008eb0:	8b3b      	ldrh	r3, [r7, #24]
 8008eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008edc:	82fb      	strh	r3, [r7, #22]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	441a      	add	r2, r3
 8008ee8:	8afb      	ldrh	r3, [r7, #22]
 8008eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f14:	82bb      	strh	r3, [r7, #20]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	441a      	add	r2, r3
 8008f20:	8abb      	ldrh	r3, [r7, #20]
 8008f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	8013      	strh	r3, [r2, #0]
 8008f36:	e0a3      	b.n	8009080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008f46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01b      	beq.n	8008f88 <USB_DeactivateEndpoint+0x2d4>
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	441a      	add	r2, r3
 8008f72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008f96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01b      	beq.n	8008fd8 <USB_DeactivateEndpoint+0x324>
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	441a      	add	r2, r3
 8008fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	441a      	add	r2, r3
 8008ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800900c:	b29b      	uxth	r3, r3
 800900e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009026:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	441a      	add	r2, r3
 8009032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800903c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009044:	b29b      	uxth	r3, r3
 8009046:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	b29b      	uxth	r3, r3
 8009056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800905a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	441a      	add	r2, r3
 800906a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800906c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907c:	b29b      	uxth	r3, r3
 800907e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3734      	adds	r7, #52	; 0x34
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b0c2      	sub	sp, #264	; 0x108
 8009092:	af00      	add	r7, sp, #0
 8009094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800909c:	6018      	str	r0, [r3, #0]
 800909e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	785b      	ldrb	r3, [r3, #1]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	f040 867b 	bne.w	8009db0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80090ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d908      	bls.n	80090e8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80090d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090e6:	e007      	b.n	80090f8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80090e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80090f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	7b1b      	ldrb	r3, [r3, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d13a      	bne.n	800917e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800910c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6959      	ldr	r1, [r3, #20]
 8009114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	88da      	ldrh	r2, [r3, #6]
 8009120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009124:	b29b      	uxth	r3, r3
 8009126:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800912a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800912e:	6800      	ldr	r0, [r0, #0]
 8009130:	f001 fc1d 	bl	800a96e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009144:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800914e:	b29b      	uxth	r3, r3
 8009150:	461a      	mov	r2, r3
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	4413      	add	r3, r2
 8009156:	613b      	str	r3, [r7, #16]
 8009158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	00da      	lsls	r2, r3, #3
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	4413      	add	r3, r2
 800916a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009174:	b29a      	uxth	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	801a      	strh	r2, [r3, #0]
 800917a:	f000 bde3 	b.w	8009d44 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800917e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	78db      	ldrb	r3, [r3, #3]
 800918a:	2b02      	cmp	r3, #2
 800918c:	f040 843a 	bne.w	8009a04 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6a1a      	ldr	r2, [r3, #32]
 800919c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	f240 83b7 	bls.w	800991c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80091ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80091d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	441a      	add	r2, r3
 80091f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80091f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009206:	b29b      	uxth	r3, r3
 8009208:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800920a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6a1a      	ldr	r2, [r3, #32]
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921a:	1ad2      	subs	r2, r2, r3
 800921c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 81b3 	beq.w	80095b6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	633b      	str	r3, [r7, #48]	; 0x30
 800925c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d16d      	bne.n	8009348 <USB_EPStartXfer+0x2ba>
 800926c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	62bb      	str	r3, [r7, #40]	; 0x28
 8009278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009286:	b29b      	uxth	r3, r3
 8009288:	461a      	mov	r2, r3
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	4413      	add	r3, r2
 800928e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	00da      	lsls	r2, r3, #3
 800929e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a0:	4413      	add	r3, r2
 80092a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092a6:	627b      	str	r3, [r7, #36]	; 0x24
 80092a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ac:	2b3e      	cmp	r3, #62	; 0x3e
 80092ae:	d91c      	bls.n	80092ea <USB_EPStartXfer+0x25c>
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b4:	095b      	lsrs	r3, r3, #5
 80092b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80092ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092be:	f003 031f 	and.w	r3, r3, #31
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d104      	bne.n	80092d0 <USB_EPStartXfer+0x242>
 80092c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80092ca:	3b01      	subs	r3, #1
 80092cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80092d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	029b      	lsls	r3, r3, #10
 80092d8:	b29b      	uxth	r3, r3
 80092da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	801a      	strh	r2, [r3, #0]
 80092e8:	e053      	b.n	8009392 <USB_EPStartXfer+0x304>
 80092ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d112      	bne.n	8009318 <USB_EPStartXfer+0x28a>
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	801a      	strh	r2, [r3, #0]
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800930c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009310:	b29a      	uxth	r2, r3
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	801a      	strh	r2, [r3, #0]
 8009316:	e03c      	b.n	8009392 <USB_EPStartXfer+0x304>
 8009318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931c:	085b      	lsrs	r3, r3, #1
 800931e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d004      	beq.n	8009338 <USB_EPStartXfer+0x2aa>
 800932e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009332:	3301      	adds	r3, #1
 8009334:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009338:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800933c:	b29b      	uxth	r3, r3
 800933e:	029b      	lsls	r3, r3, #10
 8009340:	b29a      	uxth	r2, r3
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	801a      	strh	r2, [r3, #0]
 8009346:	e024      	b.n	8009392 <USB_EPStartXfer+0x304>
 8009348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	785b      	ldrb	r3, [r3, #1]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d11c      	bne.n	8009392 <USB_EPStartXfer+0x304>
 8009358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009366:	b29b      	uxth	r3, r3
 8009368:	461a      	mov	r2, r3
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	4413      	add	r3, r2
 800936e:	633b      	str	r3, [r7, #48]	; 0x30
 8009370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	00da      	lsls	r2, r3, #3
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	4413      	add	r3, r2
 8009382:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800938c:	b29a      	uxth	r2, r3
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	895b      	ldrh	r3, [r3, #10]
 800939e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6959      	ldr	r1, [r3, #20]
 80093ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80093bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80093c0:	6800      	ldr	r0, [r0, #0]
 80093c2:	f001 fad4 	bl	800a96e <USB_WritePMA>
            ep->xfer_buff += len;
 80093c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695a      	ldr	r2, [r3, #20]
 80093d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d6:	441a      	add	r2, r3
 80093d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80093e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6a1a      	ldr	r2, [r3, #32]
 80093f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d90f      	bls.n	8009420 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8009400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6a1a      	ldr	r2, [r3, #32]
 800940c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009410:	1ad2      	subs	r2, r2, r3
 8009412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	621a      	str	r2, [r3, #32]
 800941e:	e00e      	b.n	800943e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2200      	movs	r2, #0
 800943c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	785b      	ldrb	r3, [r3, #1]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d16d      	bne.n	800952a <USB_EPStartXfer+0x49c>
 800944e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	61bb      	str	r3, [r7, #24]
 800945a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009468:	b29b      	uxth	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	4413      	add	r3, r2
 8009470:	61bb      	str	r3, [r7, #24]
 8009472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	00da      	lsls	r2, r3, #3
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	4413      	add	r3, r2
 8009484:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948e:	2b3e      	cmp	r3, #62	; 0x3e
 8009490:	d91c      	bls.n	80094cc <USB_EPStartXfer+0x43e>
 8009492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009496:	095b      	lsrs	r3, r3, #5
 8009498:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800949c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d104      	bne.n	80094b2 <USB_EPStartXfer+0x424>
 80094a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ac:	3b01      	subs	r3, #1
 80094ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80094b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	029b      	lsls	r3, r3, #10
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	801a      	strh	r2, [r3, #0]
 80094ca:	e059      	b.n	8009580 <USB_EPStartXfer+0x4f2>
 80094cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d112      	bne.n	80094fa <USB_EPStartXfer+0x46c>
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094de:	b29a      	uxth	r2, r3
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	801a      	strh	r2, [r3, #0]
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	881b      	ldrh	r3, [r3, #0]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	e042      	b.n	8009580 <USB_EPStartXfer+0x4f2>
 80094fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	d004      	beq.n	800951a <USB_EPStartXfer+0x48c>
 8009510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009514:	3301      	adds	r3, #1
 8009516:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800951a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800951e:	b29b      	uxth	r3, r3
 8009520:	029b      	lsls	r3, r3, #10
 8009522:	b29a      	uxth	r2, r3
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	801a      	strh	r2, [r3, #0]
 8009528:	e02a      	b.n	8009580 <USB_EPStartXfer+0x4f2>
 800952a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800952e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d122      	bne.n	8009580 <USB_EPStartXfer+0x4f2>
 800953a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800953e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	623b      	str	r3, [r7, #32]
 8009546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009554:	b29b      	uxth	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	4413      	add	r3, r2
 800955c:	623b      	str	r3, [r7, #32]
 800955e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	00da      	lsls	r2, r3, #3
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	4413      	add	r3, r2
 8009570:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800957a:	b29a      	uxth	r2, r3
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	891b      	ldrh	r3, [r3, #8]
 800958c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6959      	ldr	r1, [r3, #20]
 800959c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80095a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80095aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80095ae:	6800      	ldr	r0, [r0, #0]
 80095b0:	f001 f9dd 	bl	800a96e <USB_WritePMA>
 80095b4:	e3c6      	b.n	8009d44 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80095b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d16d      	bne.n	80096a2 <USB_EPStartXfer+0x614>
 80095c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80095d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	461a      	mov	r2, r3
 80095e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095e6:	4413      	add	r3, r2
 80095e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80095ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	00da      	lsls	r2, r3, #3
 80095f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095fa:	4413      	add	r3, r2
 80095fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009600:	647b      	str	r3, [r7, #68]	; 0x44
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009606:	2b3e      	cmp	r3, #62	; 0x3e
 8009608:	d91c      	bls.n	8009644 <USB_EPStartXfer+0x5b6>
 800960a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960e:	095b      	lsrs	r3, r3, #5
 8009610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009618:	f003 031f 	and.w	r3, r3, #31
 800961c:	2b00      	cmp	r3, #0
 800961e:	d104      	bne.n	800962a <USB_EPStartXfer+0x59c>
 8009620:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009624:	3b01      	subs	r3, #1
 8009626:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800962a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800962e:	b29b      	uxth	r3, r3
 8009630:	029b      	lsls	r3, r3, #10
 8009632:	b29b      	uxth	r3, r3
 8009634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800963c:	b29a      	uxth	r2, r3
 800963e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009640:	801a      	strh	r2, [r3, #0]
 8009642:	e059      	b.n	80096f8 <USB_EPStartXfer+0x66a>
 8009644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009648:	2b00      	cmp	r3, #0
 800964a:	d112      	bne.n	8009672 <USB_EPStartXfer+0x5e4>
 800964c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	b29b      	uxth	r3, r3
 8009652:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009656:	b29a      	uxth	r2, r3
 8009658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800965a:	801a      	strh	r2, [r3, #0]
 800965c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800966a:	b29a      	uxth	r2, r3
 800966c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800966e:	801a      	strh	r2, [r3, #0]
 8009670:	e042      	b.n	80096f8 <USB_EPStartXfer+0x66a>
 8009672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800967c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <USB_EPStartXfer+0x604>
 8009688:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800968c:	3301      	adds	r3, #1
 800968e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009696:	b29b      	uxth	r3, r3
 8009698:	029b      	lsls	r3, r3, #10
 800969a:	b29a      	uxth	r2, r3
 800969c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	e02a      	b.n	80096f8 <USB_EPStartXfer+0x66a>
 80096a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d122      	bne.n	80096f8 <USB_EPStartXfer+0x66a>
 80096b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	653b      	str	r3, [r7, #80]	; 0x50
 80096be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	461a      	mov	r2, r3
 80096d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d2:	4413      	add	r3, r2
 80096d4:	653b      	str	r3, [r7, #80]	; 0x50
 80096d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	00da      	lsls	r2, r3, #3
 80096e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096e6:	4413      	add	r3, r2
 80096e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	891b      	ldrh	r3, [r3, #8]
 8009704:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6959      	ldr	r1, [r3, #20]
 8009714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009718:	b29b      	uxth	r3, r3
 800971a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800971e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009722:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009726:	6800      	ldr	r0, [r0, #0]
 8009728:	f001 f921 	bl	800a96e <USB_WritePMA>
            ep->xfer_buff += len;
 800972c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695a      	ldr	r2, [r3, #20]
 8009738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800973c:	441a      	add	r2, r3
 800973e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800974a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6a1a      	ldr	r2, [r3, #32]
 8009756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	429a      	cmp	r2, r3
 8009764:	d90f      	bls.n	8009786 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6a1a      	ldr	r2, [r3, #32]
 8009772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009776:	1ad2      	subs	r2, r2, r3
 8009778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	621a      	str	r2, [r3, #32]
 8009784:	e00e      	b.n	80097a4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2200      	movs	r2, #0
 80097a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	643b      	str	r3, [r7, #64]	; 0x40
 80097b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	785b      	ldrb	r3, [r3, #1]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d16d      	bne.n	800989c <USB_EPStartXfer+0x80e>
 80097c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80097cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097da:	b29b      	uxth	r3, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	4413      	add	r3, r2
 80097e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80097e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	00da      	lsls	r2, r3, #3
 80097f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f4:	4413      	add	r3, r2
 80097f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097fa:	637b      	str	r3, [r7, #52]	; 0x34
 80097fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009800:	2b3e      	cmp	r3, #62	; 0x3e
 8009802:	d91c      	bls.n	800983e <USB_EPStartXfer+0x7b0>
 8009804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009808:	095b      	lsrs	r3, r3, #5
 800980a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800980e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009812:	f003 031f 	and.w	r3, r3, #31
 8009816:	2b00      	cmp	r3, #0
 8009818:	d104      	bne.n	8009824 <USB_EPStartXfer+0x796>
 800981a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800981e:	3b01      	subs	r3, #1
 8009820:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009828:	b29b      	uxth	r3, r3
 800982a:	029b      	lsls	r3, r3, #10
 800982c:	b29b      	uxth	r3, r3
 800982e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009836:	b29a      	uxth	r2, r3
 8009838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983a:	801a      	strh	r2, [r3, #0]
 800983c:	e053      	b.n	80098e6 <USB_EPStartXfer+0x858>
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009842:	2b00      	cmp	r3, #0
 8009844:	d112      	bne.n	800986c <USB_EPStartXfer+0x7de>
 8009846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	b29b      	uxth	r3, r3
 800984c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009850:	b29a      	uxth	r2, r3
 8009852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009854:	801a      	strh	r2, [r3, #0]
 8009856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	b29b      	uxth	r3, r3
 800985c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009864:	b29a      	uxth	r2, r3
 8009866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009868:	801a      	strh	r2, [r3, #0]
 800986a:	e03c      	b.n	80098e6 <USB_EPStartXfer+0x858>
 800986c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009870:	085b      	lsrs	r3, r3, #1
 8009872:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d004      	beq.n	800988c <USB_EPStartXfer+0x7fe>
 8009882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009886:	3301      	adds	r3, #1
 8009888:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800988c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009890:	b29b      	uxth	r3, r3
 8009892:	029b      	lsls	r3, r3, #10
 8009894:	b29a      	uxth	r2, r3
 8009896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009898:	801a      	strh	r2, [r3, #0]
 800989a:	e024      	b.n	80098e6 <USB_EPStartXfer+0x858>
 800989c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	785b      	ldrb	r3, [r3, #1]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d11c      	bne.n	80098e6 <USB_EPStartXfer+0x858>
 80098ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	461a      	mov	r2, r3
 80098be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098c0:	4413      	add	r3, r2
 80098c2:	643b      	str	r3, [r7, #64]	; 0x40
 80098c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	00da      	lsls	r2, r3, #3
 80098d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d4:	4413      	add	r3, r2
 80098d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80098e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	895b      	ldrh	r3, [r3, #10]
 80098f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6959      	ldr	r1, [r3, #20]
 8009902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009906:	b29b      	uxth	r3, r3
 8009908:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800990c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009910:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009914:	6800      	ldr	r0, [r0, #0]
 8009916:	f001 f82a 	bl	800a96e <USB_WritePMA>
 800991a:	e213      	b.n	8009d44 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800991c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800992c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29b      	uxth	r3, r3
 800994a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800994e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009952:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800995a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	441a      	add	r2, r3
 8009970:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009984:	b29b      	uxth	r3, r3
 8009986:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	461a      	mov	r2, r3
 80099a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099a8:	4413      	add	r3, r2
 80099aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	00da      	lsls	r2, r3, #3
 80099ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099bc:	4413      	add	r3, r2
 80099be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80099c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80099ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	891b      	ldrh	r3, [r3, #8]
 80099da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6959      	ldr	r1, [r3, #20]
 80099ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80099f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80099f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80099fc:	6800      	ldr	r0, [r0, #0]
 80099fe:	f000 ffb6 	bl	800a96e <USB_WritePMA>
 8009a02:	e19f      	b.n	8009d44 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6a1a      	ldr	r2, [r3, #32]
 8009a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a14:	1ad2      	subs	r2, r2, r3
 8009a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 80bc 	beq.w	8009bc2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	673b      	str	r3, [r7, #112]	; 0x70
 8009a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	785b      	ldrb	r3, [r3, #1]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d16d      	bne.n	8009b42 <USB_EPStartXfer+0xab4>
 8009a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	461a      	mov	r2, r3
 8009a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a86:	4413      	add	r3, r2
 8009a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	00da      	lsls	r2, r3, #3
 8009a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8009aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8009aa8:	d91c      	bls.n	8009ae4 <USB_EPStartXfer+0xa56>
 8009aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab8:	f003 031f 	and.w	r3, r3, #31
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d104      	bne.n	8009aca <USB_EPStartXfer+0xa3c>
 8009ac0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009aca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	029b      	lsls	r3, r3, #10
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae0:	801a      	strh	r2, [r3, #0]
 8009ae2:	e053      	b.n	8009b8c <USB_EPStartXfer+0xafe>
 8009ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d112      	bne.n	8009b12 <USB_EPStartXfer+0xa84>
 8009aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009afa:	801a      	strh	r2, [r3, #0]
 8009afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b0e:	801a      	strh	r2, [r3, #0]
 8009b10:	e03c      	b.n	8009b8c <USB_EPStartXfer+0xafe>
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b16:	085b      	lsrs	r3, r3, #1
 8009b18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d004      	beq.n	8009b32 <USB_EPStartXfer+0xaa4>
 8009b28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	029b      	lsls	r3, r3, #10
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b3e:	801a      	strh	r2, [r3, #0]
 8009b40:	e024      	b.n	8009b8c <USB_EPStartXfer+0xafe>
 8009b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	785b      	ldrb	r3, [r3, #1]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d11c      	bne.n	8009b8c <USB_EPStartXfer+0xafe>
 8009b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	461a      	mov	r2, r3
 8009b64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b66:	4413      	add	r3, r2
 8009b68:	673b      	str	r3, [r7, #112]	; 0x70
 8009b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	00da      	lsls	r2, r3, #3
 8009b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	895b      	ldrh	r3, [r3, #10]
 8009b98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6959      	ldr	r1, [r3, #20]
 8009ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009bb2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009bb6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	f000 fed7 	bl	800a96e <USB_WritePMA>
 8009bc0:	e0c0      	b.n	8009d44 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	785b      	ldrb	r3, [r3, #1]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d16d      	bne.n	8009cae <USB_EPStartXfer+0xc20>
 8009bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bf2:	4413      	add	r3, r2
 8009bf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	00da      	lsls	r2, r3, #3
 8009c04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c06:	4413      	add	r3, r2
 8009c08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c12:	2b3e      	cmp	r3, #62	; 0x3e
 8009c14:	d91c      	bls.n	8009c50 <USB_EPStartXfer+0xbc2>
 8009c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1a:	095b      	lsrs	r3, r3, #5
 8009c1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c24:	f003 031f 	and.w	r3, r3, #31
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <USB_EPStartXfer+0xba8>
 8009c2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c30:	3b01      	subs	r3, #1
 8009c32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	029b      	lsls	r3, r3, #10
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c4c:	801a      	strh	r2, [r3, #0]
 8009c4e:	e05f      	b.n	8009d10 <USB_EPStartXfer+0xc82>
 8009c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d112      	bne.n	8009c7e <USB_EPStartXfer+0xbf0>
 8009c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c66:	801a      	strh	r2, [r3, #0]
 8009c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c7a:	801a      	strh	r2, [r3, #0]
 8009c7c:	e048      	b.n	8009d10 <USB_EPStartXfer+0xc82>
 8009c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c82:	085b      	lsrs	r3, r3, #1
 8009c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d004      	beq.n	8009c9e <USB_EPStartXfer+0xc10>
 8009c94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c98:	3301      	adds	r3, #1
 8009c9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	029b      	lsls	r3, r3, #10
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009caa:	801a      	strh	r2, [r3, #0]
 8009cac:	e030      	b.n	8009d10 <USB_EPStartXfer+0xc82>
 8009cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	785b      	ldrb	r3, [r3, #1]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d128      	bne.n	8009d10 <USB_EPStartXfer+0xc82>
 8009cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	461a      	mov	r2, r3
 8009cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	00da      	lsls	r2, r3, #3
 8009cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cfa:	4413      	add	r3, r2
 8009cfc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	891b      	ldrh	r3, [r3, #8]
 8009d1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6959      	ldr	r1, [r3, #20]
 8009d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d3e:	6800      	ldr	r0, [r0, #0]
 8009d40:	f000 fe15 	bl	800a96e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	881b      	ldrh	r3, [r3, #0]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d6a:	817b      	strh	r3, [r7, #10]
 8009d6c:	897b      	ldrh	r3, [r7, #10]
 8009d6e:	f083 0310 	eor.w	r3, r3, #16
 8009d72:	817b      	strh	r3, [r7, #10]
 8009d74:	897b      	ldrh	r3, [r7, #10]
 8009d76:	f083 0320 	eor.w	r3, r3, #32
 8009d7a:	817b      	strh	r3, [r7, #10]
 8009d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	441a      	add	r2, r3
 8009d96:	897b      	ldrh	r3, [r7, #10]
 8009d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	8013      	strh	r3, [r2, #0]
 8009dac:	f000 bc9f 	b.w	800a6ee <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	7b1b      	ldrb	r3, [r3, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f040 80ae 	bne.w	8009f1e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d917      	bls.n	8009e0e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8009dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	619a      	str	r2, [r3, #24]
 8009e0c:	e00e      	b.n	8009e2c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8009e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e50:	4413      	add	r3, r2
 8009e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	00da      	lsls	r2, r3, #3
 8009e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e68:	4413      	add	r3, r2
 8009e6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e76:	2b3e      	cmp	r3, #62	; 0x3e
 8009e78:	d91d      	bls.n	8009eb6 <USB_EPStartXfer+0xe28>
 8009e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7e:	095b      	lsrs	r3, r3, #5
 8009e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e88:	f003 031f 	and.w	r3, r3, #31
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <USB_EPStartXfer+0xe0c>
 8009e90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e94:	3b01      	subs	r3, #1
 8009e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	029b      	lsls	r3, r3, #10
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009eb2:	801a      	strh	r2, [r3, #0]
 8009eb4:	e3e1      	b.n	800a67a <USB_EPStartXfer+0x15ec>
 8009eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d116      	bne.n	8009eec <USB_EPStartXfer+0xe5e>
 8009ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ed0:	801a      	strh	r2, [r3, #0]
 8009ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ee8:	801a      	strh	r2, [r3, #0]
 8009eea:	e3c6      	b.n	800a67a <USB_EPStartXfer+0x15ec>
 8009eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef0:	085b      	lsrs	r3, r3, #1
 8009ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d004      	beq.n	8009f0c <USB_EPStartXfer+0xe7e>
 8009f02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f06:	3301      	adds	r3, #1
 8009f08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	029b      	lsls	r3, r3, #10
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f1a:	801a      	strh	r2, [r3, #0]
 8009f1c:	e3ad      	b.n	800a67a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	78db      	ldrb	r3, [r3, #3]
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	f040 8200 	bne.w	800a330 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f040 8091 	bne.w	800a064 <USB_EPStartXfer+0xfd6>
 8009f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	461a      	mov	r2, r3
 8009f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f66:	4413      	add	r3, r2
 8009f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	00da      	lsls	r2, r3, #3
 8009f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f7e:	4413      	add	r3, r2
 8009f80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	2b3e      	cmp	r3, #62	; 0x3e
 8009f96:	d925      	bls.n	8009fe4 <USB_EPStartXfer+0xf56>
 8009f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	095b      	lsrs	r3, r3, #5
 8009fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f003 031f 	and.w	r3, r3, #31
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d104      	bne.n	8009fc8 <USB_EPStartXfer+0xf3a>
 8009fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	029b      	lsls	r3, r3, #10
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009fe0:	801a      	strh	r2, [r3, #0]
 8009fe2:	e074      	b.n	800a0ce <USB_EPStartXfer+0x1040>
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d116      	bne.n	800a022 <USB_EPStartXfer+0xf94>
 8009ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a000:	b29a      	uxth	r2, r3
 800a002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a006:	801a      	strh	r2, [r3, #0]
 800a008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a018:	b29a      	uxth	r2, r3
 800a01a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a01e:	801a      	strh	r2, [r3, #0]
 800a020:	e055      	b.n	800a0ce <USB_EPStartXfer+0x1040>
 800a022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	085b      	lsrs	r3, r3, #1
 800a030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	d004      	beq.n	800a052 <USB_EPStartXfer+0xfc4>
 800a048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a04c:	3301      	adds	r3, #1
 800a04e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a056:	b29b      	uxth	r3, r3
 800a058:	029b      	lsls	r3, r3, #10
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a060:	801a      	strh	r2, [r3, #0]
 800a062:	e034      	b.n	800a0ce <USB_EPStartXfer+0x1040>
 800a064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d12c      	bne.n	800a0ce <USB_EPStartXfer+0x1040>
 800a074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a090:	b29b      	uxth	r3, r3
 800a092:	461a      	mov	r2, r3
 800a094:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a098:	4413      	add	r3, r2
 800a09a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	00da      	lsls	r2, r3, #3
 800a0ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a0cc:	801a      	strh	r2, [r3, #0]
 800a0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	785b      	ldrb	r3, [r3, #1]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f040 8091 	bne.w	800a210 <USB_EPStartXfer+0x1182>
 800a0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	461a      	mov	r2, r3
 800a10e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a112:	4413      	add	r3, r2
 800a114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a11c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	00da      	lsls	r2, r3, #3
 800a126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a12a:	4413      	add	r3, r2
 800a12c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b3e      	cmp	r3, #62	; 0x3e
 800a142:	d925      	bls.n	800a190 <USB_EPStartXfer+0x1102>
 800a144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	095b      	lsrs	r3, r3, #5
 800a152:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a15a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	f003 031f 	and.w	r3, r3, #31
 800a166:	2b00      	cmp	r3, #0
 800a168:	d104      	bne.n	800a174 <USB_EPStartXfer+0x10e6>
 800a16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a16e:	3b01      	subs	r3, #1
 800a170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a178:	b29b      	uxth	r3, r3
 800a17a:	029b      	lsls	r3, r3, #10
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a186:	b29a      	uxth	r2, r3
 800a188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a18c:	801a      	strh	r2, [r3, #0]
 800a18e:	e06d      	b.n	800a26c <USB_EPStartXfer+0x11de>
 800a190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d116      	bne.n	800a1ce <USB_EPStartXfer+0x1140>
 800a1a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1ca:	801a      	strh	r2, [r3, #0]
 800a1cc:	e04e      	b.n	800a26c <USB_EPStartXfer+0x11de>
 800a1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	085b      	lsrs	r3, r3, #1
 800a1dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d004      	beq.n	800a1fe <USB_EPStartXfer+0x1170>
 800a1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a202:	b29b      	uxth	r3, r3
 800a204:	029b      	lsls	r3, r3, #10
 800a206:	b29a      	uxth	r2, r3
 800a208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a20c:	801a      	strh	r2, [r3, #0]
 800a20e:	e02d      	b.n	800a26c <USB_EPStartXfer+0x11de>
 800a210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d125      	bne.n	800a26c <USB_EPStartXfer+0x11de>
 800a220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a22e:	b29b      	uxth	r3, r3
 800a230:	461a      	mov	r2, r3
 800a232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a236:	4413      	add	r3, r2
 800a238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	00da      	lsls	r2, r3, #3
 800a24a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a24e:	4413      	add	r3, r2
 800a250:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	b29a      	uxth	r2, r3
 800a266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a26a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 81fe 	beq.w	800a67a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a29e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a2a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d005      	beq.n	800a2b6 <USB_EPStartXfer+0x1228>
 800a2aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a2ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10d      	bne.n	800a2d2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a2b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a2ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f040 81db 	bne.w	800a67a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a2c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f040 81d4 	bne.w	800a67a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	441a      	add	r2, r3
 800a316:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a31a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a31e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a326:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	8013      	strh	r3, [r2, #0]
 800a32e:	e1a4      	b.n	800a67a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	78db      	ldrb	r3, [r3, #3]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	f040 819a 	bne.w	800a676 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699a      	ldr	r2, [r3, #24]
 800a34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d917      	bls.n	800a38e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800a35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	699a      	ldr	r2, [r3, #24]
 800a37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	619a      	str	r2, [r3, #24]
 800a38c:	e00e      	b.n	800a3ac <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800a38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d178      	bne.n	800a4ae <USB_EPStartXfer+0x1420>
 800a3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	00da      	lsls	r2, r3, #3
 800a3f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a406:	2b3e      	cmp	r3, #62	; 0x3e
 800a408:	d91d      	bls.n	800a446 <USB_EPStartXfer+0x13b8>
 800a40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a40e:	095b      	lsrs	r3, r3, #5
 800a410:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a418:	f003 031f 	and.w	r3, r3, #31
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d104      	bne.n	800a42a <USB_EPStartXfer+0x139c>
 800a420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a424:	3b01      	subs	r3, #1
 800a426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a42a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a42e:	b29b      	uxth	r3, r3
 800a430:	029b      	lsls	r3, r3, #10
 800a432:	b29b      	uxth	r3, r3
 800a434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a442:	801a      	strh	r2, [r3, #0]
 800a444:	e064      	b.n	800a510 <USB_EPStartXfer+0x1482>
 800a446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d116      	bne.n	800a47c <USB_EPStartXfer+0x13ee>
 800a44e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	b29b      	uxth	r3, r3
 800a456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a460:	801a      	strh	r2, [r3, #0]
 800a462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	b29b      	uxth	r3, r3
 800a46a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a46e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a472:	b29a      	uxth	r2, r3
 800a474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a478:	801a      	strh	r2, [r3, #0]
 800a47a:	e049      	b.n	800a510 <USB_EPStartXfer+0x1482>
 800a47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a480:	085b      	lsrs	r3, r3, #1
 800a482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d004      	beq.n	800a49c <USB_EPStartXfer+0x140e>
 800a492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a496:	3301      	adds	r3, #1
 800a498:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a49c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	029b      	lsls	r3, r3, #10
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4aa:	801a      	strh	r2, [r3, #0]
 800a4ac:	e030      	b.n	800a510 <USB_EPStartXfer+0x1482>
 800a4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d128      	bne.n	800a510 <USB_EPStartXfer+0x1482>
 800a4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	461a      	mov	r2, r3
 800a4de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	00da      	lsls	r2, r3, #3
 800a4f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a508:	b29a      	uxth	r2, r3
 800a50a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a50e:	801a      	strh	r2, [r3, #0]
 800a510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d178      	bne.n	800a620 <USB_EPStartXfer+0x1592>
 800a52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	461a      	mov	r2, r3
 800a54e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a552:	4413      	add	r3, r2
 800a554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	00da      	lsls	r2, r3, #3
 800a566:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a56a:	4413      	add	r3, r2
 800a56c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a578:	2b3e      	cmp	r3, #62	; 0x3e
 800a57a:	d91d      	bls.n	800a5b8 <USB_EPStartXfer+0x152a>
 800a57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a580:	095b      	lsrs	r3, r3, #5
 800a582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58a:	f003 031f 	and.w	r3, r3, #31
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d104      	bne.n	800a59c <USB_EPStartXfer+0x150e>
 800a592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a596:	3b01      	subs	r3, #1
 800a598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a59c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	029b      	lsls	r3, r3, #10
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5b4:	801a      	strh	r2, [r3, #0]
 800a5b6:	e060      	b.n	800a67a <USB_EPStartXfer+0x15ec>
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d116      	bne.n	800a5ee <USB_EPStartXfer+0x1560>
 800a5c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5d2:	801a      	strh	r2, [r3, #0]
 800a5d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5ea:	801a      	strh	r2, [r3, #0]
 800a5ec:	e045      	b.n	800a67a <USB_EPStartXfer+0x15ec>
 800a5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f2:	085b      	lsrs	r3, r3, #1
 800a5f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d004      	beq.n	800a60e <USB_EPStartXfer+0x1580>
 800a604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a608:	3301      	adds	r3, #1
 800a60a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a60e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a612:	b29b      	uxth	r3, r3
 800a614:	029b      	lsls	r3, r3, #10
 800a616:	b29a      	uxth	r2, r3
 800a618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a61c:	801a      	strh	r2, [r3, #0]
 800a61e:	e02c      	b.n	800a67a <USB_EPStartXfer+0x15ec>
 800a620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	785b      	ldrb	r3, [r3, #1]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d124      	bne.n	800a67a <USB_EPStartXfer+0x15ec>
 800a630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a63e:	b29b      	uxth	r3, r3
 800a640:	461a      	mov	r2, r3
 800a642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a646:	4413      	add	r3, r2
 800a648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	00da      	lsls	r2, r3, #3
 800a65a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a65e:	4413      	add	r3, r2
 800a660:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a672:	801a      	strh	r2, [r3, #0]
 800a674:	e001      	b.n	800a67a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e03a      	b.n	800a6f0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	b29b      	uxth	r3, r3
 800a698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a69c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a6a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a6a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a6ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a6b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a6b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a6b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a6bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	441a      	add	r2, r3
 800a6d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a6da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b085      	sub	sp, #20
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	785b      	ldrb	r3, [r3, #1]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d020      	beq.n	800a74e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4413      	add	r3, r2
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a71e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a722:	81bb      	strh	r3, [r7, #12]
 800a724:	89bb      	ldrh	r3, [r7, #12]
 800a726:	f083 0310 	eor.w	r3, r3, #16
 800a72a:	81bb      	strh	r3, [r7, #12]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	441a      	add	r2, r3
 800a736:	89bb      	ldrh	r3, [r7, #12]
 800a738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a73c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a748:	b29b      	uxth	r3, r3
 800a74a:	8013      	strh	r3, [r2, #0]
 800a74c:	e01f      	b.n	800a78e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a764:	81fb      	strh	r3, [r7, #14]
 800a766:	89fb      	ldrh	r3, [r7, #14]
 800a768:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a76c:	81fb      	strh	r3, [r7, #14]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	441a      	add	r2, r3
 800a778:	89fb      	ldrh	r3, [r7, #14]
 800a77a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a77e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	7b1b      	ldrb	r3, [r3, #12]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f040 809d 	bne.w	800a8ea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	785b      	ldrb	r3, [r3, #1]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d04c      	beq.n	800a852 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	823b      	strh	r3, [r7, #16]
 800a7c6:	8a3b      	ldrh	r3, [r7, #16]
 800a7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d01b      	beq.n	800a808 <USB_EPClearStall+0x6c>
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7e6:	81fb      	strh	r3, [r7, #14]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	441a      	add	r2, r3
 800a7f2:	89fb      	ldrh	r3, [r7, #14]
 800a7f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a800:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a804:	b29b      	uxth	r3, r3
 800a806:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	78db      	ldrb	r3, [r3, #3]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d06c      	beq.n	800a8ea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4413      	add	r3, r2
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a826:	81bb      	strh	r3, [r7, #12]
 800a828:	89bb      	ldrh	r3, [r7, #12]
 800a82a:	f083 0320 	eor.w	r3, r3, #32
 800a82e:	81bb      	strh	r3, [r7, #12]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	441a      	add	r2, r3
 800a83a:	89bb      	ldrh	r3, [r7, #12]
 800a83c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	8013      	strh	r3, [r2, #0]
 800a850:	e04b      	b.n	800a8ea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	82fb      	strh	r3, [r7, #22]
 800a860:	8afb      	ldrh	r3, [r7, #22]
 800a862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a866:	2b00      	cmp	r3, #0
 800a868:	d01b      	beq.n	800a8a2 <USB_EPClearStall+0x106>
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	b29b      	uxth	r3, r3
 800a878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a87c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a880:	82bb      	strh	r3, [r7, #20]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	441a      	add	r2, r3
 800a88c:	8abb      	ldrh	r3, [r7, #20]
 800a88e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8b8:	827b      	strh	r3, [r7, #18]
 800a8ba:	8a7b      	ldrh	r3, [r7, #18]
 800a8bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8c0:	827b      	strh	r3, [r7, #18]
 800a8c2:	8a7b      	ldrh	r3, [r7, #18]
 800a8c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a8c8:	827b      	strh	r3, [r7, #18]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	441a      	add	r2, r3
 800a8d4:	8a7b      	ldrh	r3, [r7, #18]
 800a8d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	371c      	adds	r7, #28
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	460b      	mov	r3, r1
 800a902:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a904:	78fb      	ldrb	r3, [r7, #3]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d103      	bne.n	800a912 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2280      	movs	r2, #128	; 0x80
 800a90e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a92e:	b29b      	uxth	r3, r3
 800a930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a938:	b29a      	uxth	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a94e:	b480      	push	{r7}
 800a950:	b085      	sub	sp, #20
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a960:	68fb      	ldr	r3, [r7, #12]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a96e:	b480      	push	{r7}
 800a970:	b08b      	sub	sp, #44	; 0x2c
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	4611      	mov	r1, r2
 800a97a:	461a      	mov	r2, r3
 800a97c:	460b      	mov	r3, r1
 800a97e:	80fb      	strh	r3, [r7, #6]
 800a980:	4613      	mov	r3, r2
 800a982:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a984:	88bb      	ldrh	r3, [r7, #4]
 800a986:	3301      	adds	r3, #1
 800a988:	085b      	lsrs	r3, r3, #1
 800a98a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a994:	88fa      	ldrh	r2, [r7, #6]
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a99e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a4:	e01b      	b.n	800a9de <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	021b      	lsls	r3, r3, #8
 800a9b4:	b21a      	sxth	r2, r3
 800a9b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	b21b      	sxth	r3, r3
 800a9be:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a9c0:	6a3b      	ldr	r3, [r7, #32]
 800a9c2:	8a7a      	ldrh	r2, [r7, #18]
 800a9c4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	3302      	adds	r3, #2
 800a9ca:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e0      	bne.n	800a9a6 <USB_WritePMA+0x38>
  }
}
 800a9e4:	bf00      	nop
 800a9e6:	bf00      	nop
 800a9e8:	372c      	adds	r7, #44	; 0x2c
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b08b      	sub	sp, #44	; 0x2c
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	461a      	mov	r2, r3
 800aa00:	460b      	mov	r3, r1
 800aa02:	80fb      	strh	r3, [r7, #6]
 800aa04:	4613      	mov	r3, r2
 800aa06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aa08:	88bb      	ldrh	r3, [r7, #4]
 800aa0a:	085b      	lsrs	r3, r3, #1
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa18:	88fa      	ldrh	r2, [r7, #6]
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa22:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	627b      	str	r3, [r7, #36]	; 0x24
 800aa28:	e018      	b.n	800aa5c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	3302      	adds	r3, #2
 800aa36:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	3301      	adds	r3, #1
 800aa44:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	0a1b      	lsrs	r3, r3, #8
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	3301      	adds	r3, #1
 800aa54:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1e3      	bne.n	800aa2a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800aa62:	88bb      	ldrh	r3, [r7, #4]
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d007      	beq.n	800aa7e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	701a      	strb	r2, [r3, #0]
  }
}
 800aa7e:	bf00      	nop
 800aa80:	372c      	adds	r7, #44	; 0x2c
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa96:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aa9a:	f002 f95b 	bl	800cd54 <USBD_static_malloc>
 800aa9e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d105      	bne.n	800aab2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800aaae:	2302      	movs	r3, #2
 800aab0:	e066      	b.n	800ab80 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	7c1b      	ldrb	r3, [r3, #16]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d119      	bne.n	800aaf6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aac6:	2202      	movs	r2, #2
 800aac8:	2181      	movs	r1, #129	; 0x81
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f001 ffe7 	bl	800ca9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aada:	2202      	movs	r2, #2
 800aadc:	2101      	movs	r1, #1
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 ffdd 	bl	800ca9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2210      	movs	r2, #16
 800aaf0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800aaf4:	e016      	b.n	800ab24 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aaf6:	2340      	movs	r3, #64	; 0x40
 800aaf8:	2202      	movs	r2, #2
 800aafa:	2181      	movs	r1, #129	; 0x81
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 ffce 	bl	800ca9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab08:	2340      	movs	r3, #64	; 0x40
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f001 ffc5 	bl	800ca9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2210      	movs	r2, #16
 800ab20:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab24:	2308      	movs	r3, #8
 800ab26:	2203      	movs	r2, #3
 800ab28:	2182      	movs	r1, #130	; 0x82
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f001 ffb7 	bl	800ca9e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	7c1b      	ldrb	r3, [r3, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d109      	bne.n	800ab6e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab64:	2101      	movs	r1, #1
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f002 f889 	bl	800cc7e <USBD_LL_PrepareReceive>
 800ab6c:	e007      	b.n	800ab7e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	2101      	movs	r1, #1
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f002 f880 	bl	800cc7e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ab94:	2181      	movs	r1, #129	; 0x81
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f001 ffa7 	bl	800caea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aba2:	2101      	movs	r1, #1
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 ffa0 	bl	800caea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800abb2:	2182      	movs	r1, #130	; 0x82
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f001 ff98 	bl	800caea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00e      	beq.n	800abf2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abe4:	4618      	mov	r0, r3
 800abe6:	f002 f8c3 	bl	800cd70 <USBD_static_free>
    pdev->pClassData = NULL;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e0af      	b.n	800ad84 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d03f      	beq.n	800acb0 <USBD_CDC_Setup+0xb4>
 800ac30:	2b20      	cmp	r3, #32
 800ac32:	f040 809f 	bne.w	800ad74 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	88db      	ldrh	r3, [r3, #6]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d02e      	beq.n	800ac9c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	b25b      	sxtb	r3, r3
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	da16      	bge.n	800ac76 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ac54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	88d2      	ldrh	r2, [r2, #6]
 800ac5a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	88db      	ldrh	r3, [r3, #6]
 800ac60:	2b07      	cmp	r3, #7
 800ac62:	bf28      	it	cs
 800ac64:	2307      	movcs	r3, #7
 800ac66:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	89fa      	ldrh	r2, [r7, #14]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f001 facf 	bl	800c212 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ac74:	e085      	b.n	800ad82 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	785a      	ldrb	r2, [r3, #1]
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	88db      	ldrh	r3, [r3, #6]
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ac8c:	6939      	ldr	r1, [r7, #16]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	88db      	ldrh	r3, [r3, #6]
 800ac92:	461a      	mov	r2, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f001 fae8 	bl	800c26a <USBD_CtlPrepareRx>
      break;
 800ac9a:	e072      	b.n	800ad82 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	7850      	ldrb	r0, [r2, #1]
 800aca8:	2200      	movs	r2, #0
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	4798      	blx	r3
      break;
 800acae:	e068      	b.n	800ad82 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	785b      	ldrb	r3, [r3, #1]
 800acb4:	2b0b      	cmp	r3, #11
 800acb6:	d852      	bhi.n	800ad5e <USBD_CDC_Setup+0x162>
 800acb8:	a201      	add	r2, pc, #4	; (adr r2, 800acc0 <USBD_CDC_Setup+0xc4>)
 800acba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbe:	bf00      	nop
 800acc0:	0800acf1 	.word	0x0800acf1
 800acc4:	0800ad6d 	.word	0x0800ad6d
 800acc8:	0800ad5f 	.word	0x0800ad5f
 800accc:	0800ad5f 	.word	0x0800ad5f
 800acd0:	0800ad5f 	.word	0x0800ad5f
 800acd4:	0800ad5f 	.word	0x0800ad5f
 800acd8:	0800ad5f 	.word	0x0800ad5f
 800acdc:	0800ad5f 	.word	0x0800ad5f
 800ace0:	0800ad5f 	.word	0x0800ad5f
 800ace4:	0800ad5f 	.word	0x0800ad5f
 800ace8:	0800ad1b 	.word	0x0800ad1b
 800acec:	0800ad45 	.word	0x0800ad45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d107      	bne.n	800ad0c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800acfc:	f107 030a 	add.w	r3, r7, #10
 800ad00:	2202      	movs	r2, #2
 800ad02:	4619      	mov	r1, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 fa84 	bl	800c212 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad0a:	e032      	b.n	800ad72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f001 fa0e 	bl	800c130 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad14:	2303      	movs	r3, #3
 800ad16:	75fb      	strb	r3, [r7, #23]
          break;
 800ad18:	e02b      	b.n	800ad72 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d107      	bne.n	800ad36 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ad26:	f107 030d 	add.w	r3, r7, #13
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f001 fa6f 	bl	800c212 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad34:	e01d      	b.n	800ad72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 f9f9 	bl	800c130 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	75fb      	strb	r3, [r7, #23]
          break;
 800ad42:	e016      	b.n	800ad72 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d00f      	beq.n	800ad70 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f001 f9ec 	bl	800c130 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ad5c:	e008      	b.n	800ad70 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f001 f9e5 	bl	800c130 <USBD_CtlError>
          ret = USBD_FAIL;
 800ad66:	2303      	movs	r3, #3
 800ad68:	75fb      	strb	r3, [r7, #23]
          break;
 800ad6a:	e002      	b.n	800ad72 <USBD_CDC_Setup+0x176>
          break;
 800ad6c:	bf00      	nop
 800ad6e:	e008      	b.n	800ad82 <USBD_CDC_Setup+0x186>
          break;
 800ad70:	bf00      	nop
      }
      break;
 800ad72:	e006      	b.n	800ad82 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f001 f9da 	bl	800c130 <USBD_CtlError>
      ret = USBD_FAIL;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad80:	bf00      	nop
  }

  return (uint8_t)ret;
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800adaa:	2303      	movs	r3, #3
 800adac:	e04f      	b.n	800ae4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800adb6:	78fa      	ldrb	r2, [r7, #3]
 800adb8:	6879      	ldr	r1, [r7, #4]
 800adba:	4613      	mov	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	440b      	add	r3, r1
 800adc4:	3318      	adds	r3, #24
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d029      	beq.n	800ae20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800adcc:	78fa      	ldrb	r2, [r7, #3]
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	4613      	mov	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	440b      	add	r3, r1
 800adda:	3318      	adds	r3, #24
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	78f9      	ldrb	r1, [r7, #3]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	460b      	mov	r3, r1
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	440b      	add	r3, r1
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	4403      	add	r3, r0
 800adec:	333c      	adds	r3, #60	; 0x3c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	fbb2 f1f3 	udiv	r1, r2, r3
 800adf4:	fb01 f303 	mul.w	r3, r1, r3
 800adf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d110      	bne.n	800ae20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800adfe:	78fa      	ldrb	r2, [r7, #3]
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	440b      	add	r3, r1
 800ae0c:	3318      	adds	r3, #24
 800ae0e:	2200      	movs	r2, #0
 800ae10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae12:	78f9      	ldrb	r1, [r7, #3]
 800ae14:	2300      	movs	r3, #0
 800ae16:	2200      	movs	r2, #0
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f001 ff0f 	bl	800cc3c <USBD_LL_Transmit>
 800ae1e:	e015      	b.n	800ae4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00b      	beq.n	800ae4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ae48:	78fa      	ldrb	r2, [r7, #3]
 800ae4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b084      	sub	sp, #16
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	460b      	mov	r3, r1
 800ae60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e015      	b.n	800aea4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 ff1f 	bl	800ccc0 <USBD_LL_GetRxDataSize>
 800ae82:	4602      	mov	r2, r0
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ae9e:	4611      	mov	r1, r2
 800aea0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aeba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e01b      	b.n	800aefe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d015      	beq.n	800aefc <USBD_CDC_EP0_RxReady+0x50>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aed6:	2bff      	cmp	r3, #255	; 0xff
 800aed8:	d010      	beq.n	800aefc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800aee8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aef0:	b292      	uxth	r2, r2
 800aef2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	22ff      	movs	r2, #255	; 0xff
 800aef8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2243      	movs	r2, #67	; 0x43
 800af14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800af16:	4b03      	ldr	r3, [pc, #12]	; (800af24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	2000009c 	.word	0x2000009c

0800af28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2243      	movs	r2, #67	; 0x43
 800af34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800af36:	4b03      	ldr	r3, [pc, #12]	; (800af44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	20000058 	.word	0x20000058

0800af48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2243      	movs	r2, #67	; 0x43
 800af54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800af56:	4b03      	ldr	r3, [pc, #12]	; (800af64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800af58:	4618      	mov	r0, r3
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	200000e0 	.word	0x200000e0

0800af68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	220a      	movs	r2, #10
 800af74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800af76:	4b03      	ldr	r3, [pc, #12]	; (800af84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	20000014 	.word	0x20000014

0800af88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800af98:	2303      	movs	r3, #3
 800af9a:	e004      	b.n	800afa6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b087      	sub	sp, #28
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afc4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800afcc:	2303      	movs	r3, #3
 800afce:	e008      	b.n	800afe2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	371c      	adds	r7, #28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800affe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d101      	bne.n	800b00a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b006:	2303      	movs	r3, #3
 800b008:	e004      	b.n	800b014 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b02e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b030:	2301      	movs	r3, #1
 800b032:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b03e:	2303      	movs	r3, #3
 800b040:	e01a      	b.n	800b078 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d114      	bne.n	800b076 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2201      	movs	r2, #1
 800b050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b06a:	2181      	movs	r1, #129	; 0x81
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 fde5 	bl	800cc3c <USBD_LL_Transmit>

    ret = USBD_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b08e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e016      	b.n	800b0cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	7c1b      	ldrb	r3, [r3, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d109      	bne.n	800b0ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f001 fde3 	bl	800cc7e <USBD_LL_PrepareReceive>
 800b0b8:	e007      	b.n	800b0ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0c0:	2340      	movs	r3, #64	; 0x40
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f001 fdda 	bl	800cc7e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e01f      	b.n	800b12c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	79fa      	ldrb	r2, [r7, #7]
 800b11e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f001 fc3f 	bl	800c9a4 <USBD_LL_Init>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b13e:	2300      	movs	r3, #0
 800b140:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b148:	2303      	movs	r3, #3
 800b14a:	e016      	b.n	800b17a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b168:	f107 020e 	add.w	r2, r7, #14
 800b16c:	4610      	mov	r0, r2
 800b16e:	4798      	blx	r3
 800b170:	4602      	mov	r2, r0
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f001 fc6c 	bl	800ca68 <USBD_LL_Start>
 800b190:	4603      	mov	r3, r0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b19a:	b480      	push	{r7}
 800b19c:	b083      	sub	sp, #12
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d009      	beq.n	800b1de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	78fa      	ldrb	r2, [r7, #3]
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	4798      	blx	r3
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d007      	beq.n	800b20e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	4611      	mov	r1, r2
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	4798      	blx	r3
  }

  return USBD_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 ff46 	bl	800c0bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b23e:	461a      	mov	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b24c:	f003 031f 	and.w	r3, r3, #31
 800b250:	2b02      	cmp	r3, #2
 800b252:	d01a      	beq.n	800b28a <USBD_LL_SetupStage+0x72>
 800b254:	2b02      	cmp	r3, #2
 800b256:	d822      	bhi.n	800b29e <USBD_LL_SetupStage+0x86>
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <USBD_LL_SetupStage+0x4a>
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d00a      	beq.n	800b276 <USBD_LL_SetupStage+0x5e>
 800b260:	e01d      	b.n	800b29e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b268:	4619      	mov	r1, r3
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f9ee 	bl	800b64c <USBD_StdDevReq>
 800b270:	4603      	mov	r3, r0
 800b272:	73fb      	strb	r3, [r7, #15]
      break;
 800b274:	e020      	b.n	800b2b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fa52 	bl	800b728 <USBD_StdItfReq>
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]
      break;
 800b288:	e016      	b.n	800b2b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 fa91 	bl	800b7ba <USBD_StdEPReq>
 800b298:	4603      	mov	r3, r0
 800b29a:	73fb      	strb	r3, [r7, #15]
      break;
 800b29c:	e00c      	b.n	800b2b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 fc3b 	bl	800cb28 <USBD_LL_StallEP>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b2b6:	bf00      	nop
  }

  return ret;
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b086      	sub	sp, #24
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	60f8      	str	r0, [r7, #12]
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	607a      	str	r2, [r7, #4]
 800b2ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b2d0:	7afb      	ldrb	r3, [r7, #11]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d138      	bne.n	800b348 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d14a      	bne.n	800b37e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	689a      	ldr	r2, [r3, #8]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d913      	bls.n	800b31c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	689a      	ldr	r2, [r3, #8]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	1ad2      	subs	r2, r2, r3
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	bf28      	it	cs
 800b30e:	4613      	movcs	r3, r2
 800b310:	461a      	mov	r2, r3
 800b312:	6879      	ldr	r1, [r7, #4]
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 ffc5 	bl	800c2a4 <USBD_CtlContinueRx>
 800b31a:	e030      	b.n	800b37e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b322:	b2db      	uxtb	r3, r3
 800b324:	2b03      	cmp	r3, #3
 800b326:	d10b      	bne.n	800b340 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d005      	beq.n	800b340 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f000 ffc0 	bl	800c2c6 <USBD_CtlSendStatus>
 800b346:	e01a      	b.n	800b37e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b03      	cmp	r3, #3
 800b352:	d114      	bne.n	800b37e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00e      	beq.n	800b37e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	7afa      	ldrb	r2, [r7, #11]
 800b36a:	4611      	mov	r1, r2
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	4798      	blx	r3
 800b370:	4603      	mov	r3, r0
 800b372:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b374:	7dfb      	ldrb	r3, [r7, #23]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b37a:	7dfb      	ldrb	r3, [r7, #23]
 800b37c:	e000      	b.n	800b380 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	460b      	mov	r3, r1
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b396:	7afb      	ldrb	r3, [r7, #11]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d16b      	bne.n	800b474 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	3314      	adds	r3, #20
 800b3a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d156      	bne.n	800b45a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	689a      	ldr	r2, [r3, #8]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d914      	bls.n	800b3e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	1ad2      	subs	r2, r2, r3
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 ff3a 	bl	800c248 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2100      	movs	r1, #0
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f001 fc4f 	bl	800cc7e <USBD_LL_PrepareReceive>
 800b3e0:	e03b      	b.n	800b45a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	68da      	ldr	r2, [r3, #12]
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d11c      	bne.n	800b428 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d316      	bcc.n	800b428 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b404:	429a      	cmp	r2, r3
 800b406:	d20f      	bcs.n	800b428 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b408:	2200      	movs	r2, #0
 800b40a:	2100      	movs	r1, #0
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f000 ff1b 	bl	800c248 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b41a:	2300      	movs	r3, #0
 800b41c:	2200      	movs	r2, #0
 800b41e:	2100      	movs	r1, #0
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f001 fc2c 	bl	800cc7e <USBD_LL_PrepareReceive>
 800b426:	e018      	b.n	800b45a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b03      	cmp	r3, #3
 800b432:	d10b      	bne.n	800b44c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d005      	beq.n	800b44c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b44c:	2180      	movs	r1, #128	; 0x80
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f001 fb6a 	bl	800cb28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 ff49 	bl	800c2ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b460:	2b01      	cmp	r3, #1
 800b462:	d122      	bne.n	800b4aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7ff fe98 	bl	800b19a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b472:	e01a      	b.n	800b4aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	2b03      	cmp	r3, #3
 800b47e:	d114      	bne.n	800b4aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00e      	beq.n	800b4aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	7afa      	ldrb	r2, [r7, #11]
 800b496:	4611      	mov	r1, r2
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	4798      	blx	r3
 800b49c:	4603      	mov	r3, r0
 800b49e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	e000      	b.n	800b4ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3718      	adds	r7, #24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e02f      	b.n	800b548 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00f      	beq.n	800b512 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d009      	beq.n	800b512 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	6852      	ldr	r2, [r2, #4]
 800b50a:	b2d2      	uxtb	r2, r2
 800b50c:	4611      	mov	r1, r2
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b512:	2340      	movs	r3, #64	; 0x40
 800b514:	2200      	movs	r2, #0
 800b516:	2100      	movs	r1, #0
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f001 fac0 	bl	800ca9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2240      	movs	r2, #64	; 0x40
 800b52a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b52e:	2340      	movs	r3, #64	; 0x40
 800b530:	2200      	movs	r2, #0
 800b532:	2180      	movs	r1, #128	; 0x80
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 fab2 	bl	800ca9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2201      	movs	r2, #1
 800b53e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2240      	movs	r2, #64	; 0x40
 800b544:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	78fa      	ldrb	r2, [r7, #3]
 800b560:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2204      	movs	r2, #4
 800b58a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b04      	cmp	r3, #4
 800b5ae:	d106      	bne.n	800b5be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e012      	b.n	800b608 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d10b      	bne.n	800b606 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d005      	beq.n	800b606 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	3301      	adds	r3, #1
 800b626:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b62e:	8a3b      	ldrh	r3, [r7, #16]
 800b630:	021b      	lsls	r3, r3, #8
 800b632:	b21a      	sxth	r2, r3
 800b634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b638:	4313      	orrs	r3, r2
 800b63a:	b21b      	sxth	r3, r3
 800b63c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b63e:	89fb      	ldrh	r3, [r7, #14]
}
 800b640:	4618      	mov	r0, r3
 800b642:	371c      	adds	r7, #28
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b662:	2b40      	cmp	r3, #64	; 0x40
 800b664:	d005      	beq.n	800b672 <USBD_StdDevReq+0x26>
 800b666:	2b40      	cmp	r3, #64	; 0x40
 800b668:	d853      	bhi.n	800b712 <USBD_StdDevReq+0xc6>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00b      	beq.n	800b686 <USBD_StdDevReq+0x3a>
 800b66e:	2b20      	cmp	r3, #32
 800b670:	d14f      	bne.n	800b712 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	4798      	blx	r3
 800b680:	4603      	mov	r3, r0
 800b682:	73fb      	strb	r3, [r7, #15]
      break;
 800b684:	e04a      	b.n	800b71c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	785b      	ldrb	r3, [r3, #1]
 800b68a:	2b09      	cmp	r3, #9
 800b68c:	d83b      	bhi.n	800b706 <USBD_StdDevReq+0xba>
 800b68e:	a201      	add	r2, pc, #4	; (adr r2, 800b694 <USBD_StdDevReq+0x48>)
 800b690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b694:	0800b6e9 	.word	0x0800b6e9
 800b698:	0800b6fd 	.word	0x0800b6fd
 800b69c:	0800b707 	.word	0x0800b707
 800b6a0:	0800b6f3 	.word	0x0800b6f3
 800b6a4:	0800b707 	.word	0x0800b707
 800b6a8:	0800b6c7 	.word	0x0800b6c7
 800b6ac:	0800b6bd 	.word	0x0800b6bd
 800b6b0:	0800b707 	.word	0x0800b707
 800b6b4:	0800b6df 	.word	0x0800b6df
 800b6b8:	0800b6d1 	.word	0x0800b6d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f9de 	bl	800ba80 <USBD_GetDescriptor>
          break;
 800b6c4:	e024      	b.n	800b710 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fb6d 	bl	800bda8 <USBD_SetAddress>
          break;
 800b6ce:	e01f      	b.n	800b710 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fbac 	bl	800be30 <USBD_SetConfig>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73fb      	strb	r3, [r7, #15]
          break;
 800b6dc:	e018      	b.n	800b710 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fc4b 	bl	800bf7c <USBD_GetConfig>
          break;
 800b6e6:	e013      	b.n	800b710 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fc7c 	bl	800bfe8 <USBD_GetStatus>
          break;
 800b6f0:	e00e      	b.n	800b710 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fcab 	bl	800c050 <USBD_SetFeature>
          break;
 800b6fa:	e009      	b.n	800b710 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fcba 	bl	800c078 <USBD_ClrFeature>
          break;
 800b704:	e004      	b.n	800b710 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fd11 	bl	800c130 <USBD_CtlError>
          break;
 800b70e:	bf00      	nop
      }
      break;
 800b710:	e004      	b.n	800b71c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fd0b 	bl	800c130 <USBD_CtlError>
      break;
 800b71a:	bf00      	nop
  }

  return ret;
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop

0800b728 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b73e:	2b40      	cmp	r3, #64	; 0x40
 800b740:	d005      	beq.n	800b74e <USBD_StdItfReq+0x26>
 800b742:	2b40      	cmp	r3, #64	; 0x40
 800b744:	d82f      	bhi.n	800b7a6 <USBD_StdItfReq+0x7e>
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <USBD_StdItfReq+0x26>
 800b74a:	2b20      	cmp	r3, #32
 800b74c:	d12b      	bne.n	800b7a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b754:	b2db      	uxtb	r3, r3
 800b756:	3b01      	subs	r3, #1
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d81d      	bhi.n	800b798 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	889b      	ldrh	r3, [r3, #4]
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b01      	cmp	r3, #1
 800b764:	d813      	bhi.n	800b78e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	4798      	blx	r3
 800b774:	4603      	mov	r3, r0
 800b776:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	88db      	ldrh	r3, [r3, #6]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d110      	bne.n	800b7a2 <USBD_StdItfReq+0x7a>
 800b780:	7bfb      	ldrb	r3, [r7, #15]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10d      	bne.n	800b7a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fd9d 	bl	800c2c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b78c:	e009      	b.n	800b7a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fccd 	bl	800c130 <USBD_CtlError>
          break;
 800b796:	e004      	b.n	800b7a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b798:	6839      	ldr	r1, [r7, #0]
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fcc8 	bl	800c130 <USBD_CtlError>
          break;
 800b7a0:	e000      	b.n	800b7a4 <USBD_StdItfReq+0x7c>
          break;
 800b7a2:	bf00      	nop
      }
      break;
 800b7a4:	e004      	b.n	800b7b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fcc1 	bl	800c130 <USBD_CtlError>
      break;
 800b7ae:	bf00      	nop
  }

  return ret;
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	889b      	ldrh	r3, [r3, #4]
 800b7cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7d6:	2b40      	cmp	r3, #64	; 0x40
 800b7d8:	d007      	beq.n	800b7ea <USBD_StdEPReq+0x30>
 800b7da:	2b40      	cmp	r3, #64	; 0x40
 800b7dc:	f200 8145 	bhi.w	800ba6a <USBD_StdEPReq+0x2b0>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00c      	beq.n	800b7fe <USBD_StdEPReq+0x44>
 800b7e4:	2b20      	cmp	r3, #32
 800b7e6:	f040 8140 	bne.w	800ba6a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	4798      	blx	r3
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b7fc:	e13a      	b.n	800ba74 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	785b      	ldrb	r3, [r3, #1]
 800b802:	2b03      	cmp	r3, #3
 800b804:	d007      	beq.n	800b816 <USBD_StdEPReq+0x5c>
 800b806:	2b03      	cmp	r3, #3
 800b808:	f300 8129 	bgt.w	800ba5e <USBD_StdEPReq+0x2a4>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d07f      	beq.n	800b910 <USBD_StdEPReq+0x156>
 800b810:	2b01      	cmp	r3, #1
 800b812:	d03c      	beq.n	800b88e <USBD_StdEPReq+0xd4>
 800b814:	e123      	b.n	800ba5e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d002      	beq.n	800b828 <USBD_StdEPReq+0x6e>
 800b822:	2b03      	cmp	r3, #3
 800b824:	d016      	beq.n	800b854 <USBD_StdEPReq+0x9a>
 800b826:	e02c      	b.n	800b882 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00d      	beq.n	800b84a <USBD_StdEPReq+0x90>
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
 800b830:	2b80      	cmp	r3, #128	; 0x80
 800b832:	d00a      	beq.n	800b84a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b834:	7bbb      	ldrb	r3, [r7, #14]
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 f975 	bl	800cb28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b83e:	2180      	movs	r1, #128	; 0x80
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f001 f971 	bl	800cb28 <USBD_LL_StallEP>
 800b846:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b848:	e020      	b.n	800b88c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fc6f 	bl	800c130 <USBD_CtlError>
              break;
 800b852:	e01b      	b.n	800b88c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	885b      	ldrh	r3, [r3, #2]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10e      	bne.n	800b87a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00b      	beq.n	800b87a <USBD_StdEPReq+0xc0>
 800b862:	7bbb      	ldrb	r3, [r7, #14]
 800b864:	2b80      	cmp	r3, #128	; 0x80
 800b866:	d008      	beq.n	800b87a <USBD_StdEPReq+0xc0>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	88db      	ldrh	r3, [r3, #6]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d104      	bne.n	800b87a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b870:	7bbb      	ldrb	r3, [r7, #14]
 800b872:	4619      	mov	r1, r3
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 f957 	bl	800cb28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fd23 	bl	800c2c6 <USBD_CtlSendStatus>

              break;
 800b880:	e004      	b.n	800b88c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b882:	6839      	ldr	r1, [r7, #0]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fc53 	bl	800c130 <USBD_CtlError>
              break;
 800b88a:	bf00      	nop
          }
          break;
 800b88c:	e0ec      	b.n	800ba68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b894:	b2db      	uxtb	r3, r3
 800b896:	2b02      	cmp	r3, #2
 800b898:	d002      	beq.n	800b8a0 <USBD_StdEPReq+0xe6>
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	d016      	beq.n	800b8cc <USBD_StdEPReq+0x112>
 800b89e:	e030      	b.n	800b902 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00d      	beq.n	800b8c2 <USBD_StdEPReq+0x108>
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	2b80      	cmp	r3, #128	; 0x80
 800b8aa:	d00a      	beq.n	800b8c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8ac:	7bbb      	ldrb	r3, [r7, #14]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f001 f939 	bl	800cb28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8b6:	2180      	movs	r1, #128	; 0x80
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f001 f935 	bl	800cb28 <USBD_LL_StallEP>
 800b8be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8c0:	e025      	b.n	800b90e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fc33 	bl	800c130 <USBD_CtlError>
              break;
 800b8ca:	e020      	b.n	800b90e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	885b      	ldrh	r3, [r3, #2]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d11b      	bne.n	800b90c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b8d4:	7bbb      	ldrb	r3, [r7, #14]
 800b8d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d004      	beq.n	800b8e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f001 f93f 	bl	800cb66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fcec 	bl	800c2c6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	4798      	blx	r3
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b900:	e004      	b.n	800b90c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fc13 	bl	800c130 <USBD_CtlError>
              break;
 800b90a:	e000      	b.n	800b90e <USBD_StdEPReq+0x154>
              break;
 800b90c:	bf00      	nop
          }
          break;
 800b90e:	e0ab      	b.n	800ba68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b916:	b2db      	uxtb	r3, r3
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d002      	beq.n	800b922 <USBD_StdEPReq+0x168>
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	d032      	beq.n	800b986 <USBD_StdEPReq+0x1cc>
 800b920:	e097      	b.n	800ba52 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b922:	7bbb      	ldrb	r3, [r7, #14]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d007      	beq.n	800b938 <USBD_StdEPReq+0x17e>
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	2b80      	cmp	r3, #128	; 0x80
 800b92c:	d004      	beq.n	800b938 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fbfd 	bl	800c130 <USBD_CtlError>
                break;
 800b936:	e091      	b.n	800ba5c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	da0b      	bge.n	800b958 <USBD_StdEPReq+0x19e>
 800b940:	7bbb      	ldrb	r3, [r7, #14]
 800b942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b946:	4613      	mov	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	3310      	adds	r3, #16
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	4413      	add	r3, r2
 800b954:	3304      	adds	r3, #4
 800b956:	e00b      	b.n	800b970 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b958:	7bbb      	ldrb	r3, [r7, #14]
 800b95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b95e:	4613      	mov	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	3304      	adds	r3, #4
 800b970:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2200      	movs	r2, #0
 800b976:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	2202      	movs	r2, #2
 800b97c:	4619      	mov	r1, r3
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fc47 	bl	800c212 <USBD_CtlSendData>
              break;
 800b984:	e06a      	b.n	800ba5c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	da11      	bge.n	800b9b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	f003 020f 	and.w	r2, r3, #15
 800b994:	6879      	ldr	r1, [r7, #4]
 800b996:	4613      	mov	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	440b      	add	r3, r1
 800b9a0:	3324      	adds	r3, #36	; 0x24
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d117      	bne.n	800b9d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fbc0 	bl	800c130 <USBD_CtlError>
                  break;
 800b9b0:	e054      	b.n	800ba5c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
 800b9b4:	f003 020f 	and.w	r2, r3, #15
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	440b      	add	r3, r1
 800b9c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d104      	bne.n	800b9d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fbad 	bl	800c130 <USBD_CtlError>
                  break;
 800b9d6:	e041      	b.n	800ba5c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	da0b      	bge.n	800b9f8 <USBD_StdEPReq+0x23e>
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	3310      	adds	r3, #16
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	e00b      	b.n	800ba10 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3304      	adds	r3, #4
 800ba10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <USBD_StdEPReq+0x264>
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
 800ba1a:	2b80      	cmp	r3, #128	; 0x80
 800ba1c:	d103      	bne.n	800ba26 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	2200      	movs	r2, #0
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	e00e      	b.n	800ba44 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f001 f8ba 	bl	800cba4 <USBD_LL_IsStallEP>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	e002      	b.n	800ba44 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2200      	movs	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2202      	movs	r2, #2
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fbe1 	bl	800c212 <USBD_CtlSendData>
              break;
 800ba50:	e004      	b.n	800ba5c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fb6b 	bl	800c130 <USBD_CtlError>
              break;
 800ba5a:	bf00      	nop
          }
          break;
 800ba5c:	e004      	b.n	800ba68 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fb65 	bl	800c130 <USBD_CtlError>
          break;
 800ba66:	bf00      	nop
      }
      break;
 800ba68:	e004      	b.n	800ba74 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fb5f 	bl	800c130 <USBD_CtlError>
      break;
 800ba72:	bf00      	nop
  }

  return ret;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
	...

0800ba80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	885b      	ldrh	r3, [r3, #2]
 800ba9a:	0a1b      	lsrs	r3, r3, #8
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	2b0e      	cmp	r3, #14
 800baa2:	f200 8152 	bhi.w	800bd4a <USBD_GetDescriptor+0x2ca>
 800baa6:	a201      	add	r2, pc, #4	; (adr r2, 800baac <USBD_GetDescriptor+0x2c>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bb1d 	.word	0x0800bb1d
 800bab0:	0800bb35 	.word	0x0800bb35
 800bab4:	0800bb75 	.word	0x0800bb75
 800bab8:	0800bd4b 	.word	0x0800bd4b
 800babc:	0800bd4b 	.word	0x0800bd4b
 800bac0:	0800bceb 	.word	0x0800bceb
 800bac4:	0800bd17 	.word	0x0800bd17
 800bac8:	0800bd4b 	.word	0x0800bd4b
 800bacc:	0800bd4b 	.word	0x0800bd4b
 800bad0:	0800bd4b 	.word	0x0800bd4b
 800bad4:	0800bd4b 	.word	0x0800bd4b
 800bad8:	0800bd4b 	.word	0x0800bd4b
 800badc:	0800bd4b 	.word	0x0800bd4b
 800bae0:	0800bd4b 	.word	0x0800bd4b
 800bae4:	0800bae9 	.word	0x0800bae9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	7c12      	ldrb	r2, [r2, #16]
 800bb00:	f107 0108 	add.w	r1, r7, #8
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
 800bb08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb0a:	e126      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fb0e 	bl	800c130 <USBD_CtlError>
        err++;
 800bb14:	7afb      	ldrb	r3, [r7, #11]
 800bb16:	3301      	adds	r3, #1
 800bb18:	72fb      	strb	r3, [r7, #11]
      break;
 800bb1a:	e11e      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	7c12      	ldrb	r2, [r2, #16]
 800bb28:	f107 0108 	add.w	r1, r7, #8
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	4798      	blx	r3
 800bb30:	60f8      	str	r0, [r7, #12]
      break;
 800bb32:	e112      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7c1b      	ldrb	r3, [r3, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10d      	bne.n	800bb58 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb44:	f107 0208 	add.w	r2, r7, #8
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
 800bb4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3301      	adds	r3, #1
 800bb52:	2202      	movs	r2, #2
 800bb54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb56:	e100      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb60:	f107 0208 	add.w	r2, r7, #8
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	2202      	movs	r2, #2
 800bb70:	701a      	strb	r2, [r3, #0]
      break;
 800bb72:	e0f2      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	885b      	ldrh	r3, [r3, #2]
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b05      	cmp	r3, #5
 800bb7c:	f200 80ac 	bhi.w	800bcd8 <USBD_GetDescriptor+0x258>
 800bb80:	a201      	add	r2, pc, #4	; (adr r2, 800bb88 <USBD_GetDescriptor+0x108>)
 800bb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb86:	bf00      	nop
 800bb88:	0800bba1 	.word	0x0800bba1
 800bb8c:	0800bbd5 	.word	0x0800bbd5
 800bb90:	0800bc09 	.word	0x0800bc09
 800bb94:	0800bc3d 	.word	0x0800bc3d
 800bb98:	0800bc71 	.word	0x0800bc71
 800bb9c:	0800bca5 	.word	0x0800bca5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00b      	beq.n	800bbc4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	7c12      	ldrb	r2, [r2, #16]
 800bbb8:	f107 0108 	add.w	r1, r7, #8
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	4798      	blx	r3
 800bbc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbc2:	e091      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fab2 	bl	800c130 <USBD_CtlError>
            err++;
 800bbcc:	7afb      	ldrb	r3, [r7, #11]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bbd2:	e089      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	7c12      	ldrb	r2, [r2, #16]
 800bbec:	f107 0108 	add.w	r1, r7, #8
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4798      	blx	r3
 800bbf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbf6:	e077      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fa98 	bl	800c130 <USBD_CtlError>
            err++;
 800bc00:	7afb      	ldrb	r3, [r7, #11]
 800bc02:	3301      	adds	r3, #1
 800bc04:	72fb      	strb	r3, [r7, #11]
          break;
 800bc06:	e06f      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00b      	beq.n	800bc2c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	7c12      	ldrb	r2, [r2, #16]
 800bc20:	f107 0108 	add.w	r1, r7, #8
 800bc24:	4610      	mov	r0, r2
 800bc26:	4798      	blx	r3
 800bc28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc2a:	e05d      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fa7e 	bl	800c130 <USBD_CtlError>
            err++;
 800bc34:	7afb      	ldrb	r3, [r7, #11]
 800bc36:	3301      	adds	r3, #1
 800bc38:	72fb      	strb	r3, [r7, #11]
          break;
 800bc3a:	e055      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00b      	beq.n	800bc60 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	7c12      	ldrb	r2, [r2, #16]
 800bc54:	f107 0108 	add.w	r1, r7, #8
 800bc58:	4610      	mov	r0, r2
 800bc5a:	4798      	blx	r3
 800bc5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc5e:	e043      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc60:	6839      	ldr	r1, [r7, #0]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fa64 	bl	800c130 <USBD_CtlError>
            err++;
 800bc68:	7afb      	ldrb	r3, [r7, #11]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc6e:	e03b      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	7c12      	ldrb	r2, [r2, #16]
 800bc88:	f107 0108 	add.w	r1, r7, #8
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	4798      	blx	r3
 800bc90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc92:	e029      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fa4a 	bl	800c130 <USBD_CtlError>
            err++;
 800bc9c:	7afb      	ldrb	r3, [r7, #11]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	72fb      	strb	r3, [r7, #11]
          break;
 800bca2:	e021      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	7c12      	ldrb	r2, [r2, #16]
 800bcbc:	f107 0108 	add.w	r1, r7, #8
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	4798      	blx	r3
 800bcc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcc6:	e00f      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fa30 	bl	800c130 <USBD_CtlError>
            err++;
 800bcd0:	7afb      	ldrb	r3, [r7, #11]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	72fb      	strb	r3, [r7, #11]
          break;
 800bcd6:	e007      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fa28 	bl	800c130 <USBD_CtlError>
          err++;
 800bce0:	7afb      	ldrb	r3, [r7, #11]
 800bce2:	3301      	adds	r3, #1
 800bce4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bce6:	bf00      	nop
      }
      break;
 800bce8:	e037      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	7c1b      	ldrb	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d109      	bne.n	800bd06 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfa:	f107 0208 	add.w	r2, r7, #8
 800bcfe:	4610      	mov	r0, r2
 800bd00:	4798      	blx	r3
 800bd02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd04:	e029      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fa11 	bl	800c130 <USBD_CtlError>
        err++;
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	3301      	adds	r3, #1
 800bd12:	72fb      	strb	r3, [r7, #11]
      break;
 800bd14:	e021      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	7c1b      	ldrb	r3, [r3, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10d      	bne.n	800bd3a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd26:	f107 0208 	add.w	r2, r7, #8
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	4798      	blx	r3
 800bd2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3301      	adds	r3, #1
 800bd34:	2207      	movs	r2, #7
 800bd36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd38:	e00f      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd3a:	6839      	ldr	r1, [r7, #0]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 f9f7 	bl	800c130 <USBD_CtlError>
        err++;
 800bd42:	7afb      	ldrb	r3, [r7, #11]
 800bd44:	3301      	adds	r3, #1
 800bd46:	72fb      	strb	r3, [r7, #11]
      break;
 800bd48:	e007      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f9ef 	bl	800c130 <USBD_CtlError>
      err++;
 800bd52:	7afb      	ldrb	r3, [r7, #11]
 800bd54:	3301      	adds	r3, #1
 800bd56:	72fb      	strb	r3, [r7, #11]
      break;
 800bd58:	bf00      	nop
  }

  if (err != 0U)
 800bd5a:	7afb      	ldrb	r3, [r7, #11]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d11e      	bne.n	800bd9e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	88db      	ldrh	r3, [r3, #6]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d016      	beq.n	800bd96 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bd68:	893b      	ldrh	r3, [r7, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00e      	beq.n	800bd8c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	88da      	ldrh	r2, [r3, #6]
 800bd72:	893b      	ldrh	r3, [r7, #8]
 800bd74:	4293      	cmp	r3, r2
 800bd76:	bf28      	it	cs
 800bd78:	4613      	movcs	r3, r2
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd7e:	893b      	ldrh	r3, [r7, #8]
 800bd80:	461a      	mov	r2, r3
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fa44 	bl	800c212 <USBD_CtlSendData>
 800bd8a:	e009      	b.n	800bda0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f9ce 	bl	800c130 <USBD_CtlError>
 800bd94:	e004      	b.n	800bda0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fa95 	bl	800c2c6 <USBD_CtlSendStatus>
 800bd9c:	e000      	b.n	800bda0 <USBD_GetDescriptor+0x320>
    return;
 800bd9e:	bf00      	nop
  }
}
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop

0800bda8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	889b      	ldrh	r3, [r3, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d131      	bne.n	800be1e <USBD_SetAddress+0x76>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	88db      	ldrh	r3, [r3, #6]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d12d      	bne.n	800be1e <USBD_SetAddress+0x76>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	885b      	ldrh	r3, [r3, #2]
 800bdc6:	2b7f      	cmp	r3, #127	; 0x7f
 800bdc8:	d829      	bhi.n	800be1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	885b      	ldrh	r3, [r3, #2]
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d104      	bne.n	800bdec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f9a3 	bl	800c130 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdea:	e01d      	b.n	800be28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7bfa      	ldrb	r2, [r7, #15]
 800bdf0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 ff00 	bl	800cbfe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fa61 	bl	800c2c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d004      	beq.n	800be14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2202      	movs	r2, #2
 800be0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be12:	e009      	b.n	800be28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1c:	e004      	b.n	800be28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f985 	bl	800c130 <USBD_CtlError>
  }
}
 800be26:	bf00      	nop
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	885b      	ldrh	r3, [r3, #2]
 800be42:	b2da      	uxtb	r2, r3
 800be44:	4b4c      	ldr	r3, [pc, #304]	; (800bf78 <USBD_SetConfig+0x148>)
 800be46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be48:	4b4b      	ldr	r3, [pc, #300]	; (800bf78 <USBD_SetConfig+0x148>)
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d905      	bls.n	800be5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f96c 	bl	800c130 <USBD_CtlError>
    return USBD_FAIL;
 800be58:	2303      	movs	r3, #3
 800be5a:	e088      	b.n	800bf6e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be62:	b2db      	uxtb	r3, r3
 800be64:	2b02      	cmp	r3, #2
 800be66:	d002      	beq.n	800be6e <USBD_SetConfig+0x3e>
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d025      	beq.n	800beb8 <USBD_SetConfig+0x88>
 800be6c:	e071      	b.n	800bf52 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800be6e:	4b42      	ldr	r3, [pc, #264]	; (800bf78 <USBD_SetConfig+0x148>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d01c      	beq.n	800beb0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800be76:	4b40      	ldr	r3, [pc, #256]	; (800bf78 <USBD_SetConfig+0x148>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be80:	4b3d      	ldr	r3, [pc, #244]	; (800bf78 <USBD_SetConfig+0x148>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff f992 	bl	800b1b0 <USBD_SetClassConfig>
 800be8c:	4603      	mov	r3, r0
 800be8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800be90:	7bfb      	ldrb	r3, [r7, #15]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d004      	beq.n	800bea0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f949 	bl	800c130 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be9e:	e065      	b.n	800bf6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fa10 	bl	800c2c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2203      	movs	r2, #3
 800beaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800beae:	e05d      	b.n	800bf6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fa08 	bl	800c2c6 <USBD_CtlSendStatus>
      break;
 800beb6:	e059      	b.n	800bf6c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800beb8:	4b2f      	ldr	r3, [pc, #188]	; (800bf78 <USBD_SetConfig+0x148>)
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d112      	bne.n	800bee6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2202      	movs	r2, #2
 800bec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bec8:	4b2b      	ldr	r3, [pc, #172]	; (800bf78 <USBD_SetConfig+0x148>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	461a      	mov	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bed2:	4b29      	ldr	r3, [pc, #164]	; (800bf78 <USBD_SetConfig+0x148>)
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	4619      	mov	r1, r3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff f985 	bl	800b1e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f9f1 	bl	800c2c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bee4:	e042      	b.n	800bf6c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bee6:	4b24      	ldr	r3, [pc, #144]	; (800bf78 <USBD_SetConfig+0x148>)
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d02a      	beq.n	800bf4a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7ff f973 	bl	800b1e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf02:	4b1d      	ldr	r3, [pc, #116]	; (800bf78 <USBD_SetConfig+0x148>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf0c:	4b1a      	ldr	r3, [pc, #104]	; (800bf78 <USBD_SetConfig+0x148>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	4619      	mov	r1, r3
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff f94c 	bl	800b1b0 <USBD_SetClassConfig>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00f      	beq.n	800bf42 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bf22:	6839      	ldr	r1, [r7, #0]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f903 	bl	800c130 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff f958 	bl	800b1e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2202      	movs	r2, #2
 800bf3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf40:	e014      	b.n	800bf6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f9bf 	bl	800c2c6 <USBD_CtlSendStatus>
      break;
 800bf48:	e010      	b.n	800bf6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f9bb 	bl	800c2c6 <USBD_CtlSendStatus>
      break;
 800bf50:	e00c      	b.n	800bf6c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bf52:	6839      	ldr	r1, [r7, #0]
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 f8eb 	bl	800c130 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf5a:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <USBD_SetConfig+0x148>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff f941 	bl	800b1e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf66:	2303      	movs	r3, #3
 800bf68:	73fb      	strb	r3, [r7, #15]
      break;
 800bf6a:	bf00      	nop
  }

  return ret;
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20002d5c 	.word	0x20002d5c

0800bf7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	88db      	ldrh	r3, [r3, #6]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d004      	beq.n	800bf98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f8cd 	bl	800c130 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf96:	e023      	b.n	800bfe0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	dc02      	bgt.n	800bfaa <USBD_GetConfig+0x2e>
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	dc03      	bgt.n	800bfb0 <USBD_GetConfig+0x34>
 800bfa8:	e015      	b.n	800bfd6 <USBD_GetConfig+0x5a>
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d00b      	beq.n	800bfc6 <USBD_GetConfig+0x4a>
 800bfae:	e012      	b.n	800bfd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3308      	adds	r3, #8
 800bfba:	2201      	movs	r2, #1
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f927 	bl	800c212 <USBD_CtlSendData>
        break;
 800bfc4:	e00c      	b.n	800bfe0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	2201      	movs	r2, #1
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f91f 	bl	800c212 <USBD_CtlSendData>
        break;
 800bfd4:	e004      	b.n	800bfe0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f8a9 	bl	800c130 <USBD_CtlError>
        break;
 800bfde:	bf00      	nop
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	3b01      	subs	r3, #1
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d81e      	bhi.n	800c03e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	88db      	ldrh	r3, [r3, #6]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d004      	beq.n	800c012 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 f890 	bl	800c130 <USBD_CtlError>
        break;
 800c010:	e01a      	b.n	800c048 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d005      	beq.n	800c02e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	f043 0202 	orr.w	r2, r3, #2
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	330c      	adds	r3, #12
 800c032:	2202      	movs	r2, #2
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f8eb 	bl	800c212 <USBD_CtlSendData>
      break;
 800c03c:	e004      	b.n	800c048 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f875 	bl	800c130 <USBD_CtlError>
      break;
 800c046:	bf00      	nop
  }
}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	885b      	ldrh	r3, [r3, #2]
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d106      	bne.n	800c070 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f92b 	bl	800c2c6 <USBD_CtlSendStatus>
  }
}
 800c070:	bf00      	nop
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	3b01      	subs	r3, #1
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d80b      	bhi.n	800c0a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	885b      	ldrh	r3, [r3, #2]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d10c      	bne.n	800c0b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f910 	bl	800c2c6 <USBD_CtlSendStatus>
      }
      break;
 800c0a6:	e004      	b.n	800c0b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f840 	bl	800c130 <USBD_CtlError>
      break;
 800c0b0:	e000      	b.n	800c0b4 <USBD_ClrFeature+0x3c>
      break;
 800c0b2:	bf00      	nop
  }
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	781a      	ldrb	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	781a      	ldrb	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f7ff fa92 	bl	800b610 <SWAPBYTE>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7ff fa85 	bl	800b610 <SWAPBYTE>
 800c106:	4603      	mov	r3, r0
 800c108:	461a      	mov	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3301      	adds	r3, #1
 800c112:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3301      	adds	r3, #1
 800c118:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7ff fa78 	bl	800b610 <SWAPBYTE>
 800c120:	4603      	mov	r3, r0
 800c122:	461a      	mov	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	80da      	strh	r2, [r3, #6]
}
 800c128:	bf00      	nop
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c13a:	2180      	movs	r1, #128	; 0x80
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fcf3 	bl	800cb28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c142:	2100      	movs	r1, #0
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fcef 	bl	800cb28 <USBD_LL_StallEP>
}
 800c14a:	bf00      	nop
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b086      	sub	sp, #24
 800c156:	af00      	add	r7, sp, #0
 800c158:	60f8      	str	r0, [r7, #12]
 800c15a:	60b9      	str	r1, [r7, #8]
 800c15c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c15e:	2300      	movs	r3, #0
 800c160:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d036      	beq.n	800c1d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c16c:	6938      	ldr	r0, [r7, #16]
 800c16e:	f000 f836 	bl	800c1de <USBD_GetLen>
 800c172:	4603      	mov	r3, r0
 800c174:	3301      	adds	r3, #1
 800c176:	b29b      	uxth	r3, r3
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c180:	7dfb      	ldrb	r3, [r7, #23]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	4413      	add	r3, r2
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	7812      	ldrb	r2, [r2, #0]
 800c18a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c18c:	7dfb      	ldrb	r3, [r7, #23]
 800c18e:	3301      	adds	r3, #1
 800c190:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c192:	7dfb      	ldrb	r3, [r7, #23]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	4413      	add	r3, r2
 800c198:	2203      	movs	r2, #3
 800c19a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c19c:	7dfb      	ldrb	r3, [r7, #23]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c1a2:	e013      	b.n	800c1cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c1a4:	7dfb      	ldrb	r3, [r7, #23]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	693a      	ldr	r2, [r7, #16]
 800c1ac:	7812      	ldrb	r2, [r2, #0]
 800c1ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	613b      	str	r3, [r7, #16]
    idx++;
 800c1b6:	7dfb      	ldrb	r3, [r7, #23]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c1bc:	7dfb      	ldrb	r3, [r7, #23]
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	701a      	strb	r2, [r3, #0]
    idx++;
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1e7      	bne.n	800c1a4 <USBD_GetString+0x52>
 800c1d4:	e000      	b.n	800c1d8 <USBD_GetString+0x86>
    return;
 800c1d6:	bf00      	nop
  }
}
 800c1d8:	3718      	adds	r7, #24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b085      	sub	sp, #20
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c1ee:	e005      	b.n	800c1fc <USBD_GetLen+0x1e>
  {
    len++;
 800c1f0:	7bfb      	ldrb	r3, [r7, #15]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f5      	bne.n	800c1f0 <USBD_GetLen+0x12>
  }

  return len;
 800c204:	7bfb      	ldrb	r3, [r7, #15]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3714      	adds	r7, #20
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	60f8      	str	r0, [r7, #12]
 800c21a:	60b9      	str	r1, [r7, #8]
 800c21c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2202      	movs	r2, #2
 800c222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	68ba      	ldr	r2, [r7, #8]
 800c236:	2100      	movs	r1, #0
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f000 fcff 	bl	800cc3c <USBD_LL_Transmit>

  return USBD_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	2100      	movs	r1, #0
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f000 fcee 	bl	800cc3c <USBD_LL_Transmit>

  return USBD_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2203      	movs	r2, #3
 800c27a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68ba      	ldr	r2, [r7, #8]
 800c292:	2100      	movs	r1, #0
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 fcf2 	bl	800cc7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 fce1 	bl	800cc7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b082      	sub	sp, #8
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2204      	movs	r2, #4
 800c2d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2100      	movs	r1, #0
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fcad 	bl	800cc3c <USBD_LL_Transmit>

  return USBD_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2205      	movs	r2, #5
 800c2f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	2200      	movs	r2, #0
 800c300:	2100      	movs	r1, #0
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 fcbb 	bl	800cc7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c318:	2200      	movs	r2, #0
 800c31a:	4912      	ldr	r1, [pc, #72]	; (800c364 <MX_USB_Device_Init+0x50>)
 800c31c:	4812      	ldr	r0, [pc, #72]	; (800c368 <MX_USB_Device_Init+0x54>)
 800c31e:	f7fe fed9 	bl	800b0d4 <USBD_Init>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c328:	f7f7 ff5c 	bl	80041e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c32c:	490f      	ldr	r1, [pc, #60]	; (800c36c <MX_USB_Device_Init+0x58>)
 800c32e:	480e      	ldr	r0, [pc, #56]	; (800c368 <MX_USB_Device_Init+0x54>)
 800c330:	f7fe ff00 	bl	800b134 <USBD_RegisterClass>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c33a:	f7f7 ff53 	bl	80041e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c33e:	490c      	ldr	r1, [pc, #48]	; (800c370 <MX_USB_Device_Init+0x5c>)
 800c340:	4809      	ldr	r0, [pc, #36]	; (800c368 <MX_USB_Device_Init+0x54>)
 800c342:	f7fe fe21 	bl	800af88 <USBD_CDC_RegisterInterface>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c34c:	f7f7 ff4a 	bl	80041e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c350:	4805      	ldr	r0, [pc, #20]	; (800c368 <MX_USB_Device_Init+0x54>)
 800c352:	f7fe ff16 	bl	800b182 <USBD_Start>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c35c:	f7f7 ff42 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c360:	bf00      	nop
 800c362:	bd80      	pop	{r7, pc}
 800c364:	2000013c 	.word	0x2000013c
 800c368:	20002d60 	.word	0x20002d60
 800c36c:	20000020 	.word	0x20000020
 800c370:	20000128 	.word	0x20000128

0800c374 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c378:	2200      	movs	r2, #0
 800c37a:	4905      	ldr	r1, [pc, #20]	; (800c390 <CDC_Init_FS+0x1c>)
 800c37c:	4805      	ldr	r0, [pc, #20]	; (800c394 <CDC_Init_FS+0x20>)
 800c37e:	f7fe fe18 	bl	800afb2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c382:	4905      	ldr	r1, [pc, #20]	; (800c398 <CDC_Init_FS+0x24>)
 800c384:	4803      	ldr	r0, [pc, #12]	; (800c394 <CDC_Init_FS+0x20>)
 800c386:	f7fe fe32 	bl	800afee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c38a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20003830 	.word	0x20003830
 800c394:	20002d60 	.word	0x20002d60
 800c398:	20003030 	.word	0x20003030

0800c39c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c39c:	b480      	push	{r7}
 800c39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c3a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	6039      	str	r1, [r7, #0]
 800c3b6:	71fb      	strb	r3, [r7, #7]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c3bc:	79fb      	ldrb	r3, [r7, #7]
 800c3be:	2b23      	cmp	r3, #35	; 0x23
 800c3c0:	d84a      	bhi.n	800c458 <CDC_Control_FS+0xac>
 800c3c2:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <CDC_Control_FS+0x1c>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c459 	.word	0x0800c459
 800c3cc:	0800c459 	.word	0x0800c459
 800c3d0:	0800c459 	.word	0x0800c459
 800c3d4:	0800c459 	.word	0x0800c459
 800c3d8:	0800c459 	.word	0x0800c459
 800c3dc:	0800c459 	.word	0x0800c459
 800c3e0:	0800c459 	.word	0x0800c459
 800c3e4:	0800c459 	.word	0x0800c459
 800c3e8:	0800c459 	.word	0x0800c459
 800c3ec:	0800c459 	.word	0x0800c459
 800c3f0:	0800c459 	.word	0x0800c459
 800c3f4:	0800c459 	.word	0x0800c459
 800c3f8:	0800c459 	.word	0x0800c459
 800c3fc:	0800c459 	.word	0x0800c459
 800c400:	0800c459 	.word	0x0800c459
 800c404:	0800c459 	.word	0x0800c459
 800c408:	0800c459 	.word	0x0800c459
 800c40c:	0800c459 	.word	0x0800c459
 800c410:	0800c459 	.word	0x0800c459
 800c414:	0800c459 	.word	0x0800c459
 800c418:	0800c459 	.word	0x0800c459
 800c41c:	0800c459 	.word	0x0800c459
 800c420:	0800c459 	.word	0x0800c459
 800c424:	0800c459 	.word	0x0800c459
 800c428:	0800c459 	.word	0x0800c459
 800c42c:	0800c459 	.word	0x0800c459
 800c430:	0800c459 	.word	0x0800c459
 800c434:	0800c459 	.word	0x0800c459
 800c438:	0800c459 	.word	0x0800c459
 800c43c:	0800c459 	.word	0x0800c459
 800c440:	0800c459 	.word	0x0800c459
 800c444:	0800c459 	.word	0x0800c459
 800c448:	0800c459 	.word	0x0800c459
 800c44c:	0800c459 	.word	0x0800c459
 800c450:	0800c459 	.word	0x0800c459
 800c454:	0800c459 	.word	0x0800c459
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c458:	bf00      	nop
  }

  return (USBD_OK);
 800c45a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	4808      	ldr	r0, [pc, #32]	; (800c498 <CDC_Receive_FS+0x30>)
 800c476:	f7fe fdba 	bl	800afee <USBD_CDC_SetRxBuffer>
  byteInBuffer += *Len;
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	4b07      	ldr	r3, [pc, #28]	; (800c49c <CDC_Receive_FS+0x34>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4413      	add	r3, r2
 800c484:	4a05      	ldr	r2, [pc, #20]	; (800c49c <CDC_Receive_FS+0x34>)
 800c486:	6013      	str	r3, [r2, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c488:	4803      	ldr	r0, [pc, #12]	; (800c498 <CDC_Receive_FS+0x30>)
 800c48a:	f7fe fdf9 	bl	800b080 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c48e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c490:	4618      	mov	r0, r3
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20002d60 	.word	0x20002d60
 800c49c:	20004030 	.word	0x20004030

0800c4a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c4b0:	4b0d      	ldr	r3, [pc, #52]	; (800c4e8 <CDC_Transmit_FS+0x48>)
 800c4b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e00b      	b.n	800c4de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c4c6:	887b      	ldrh	r3, [r7, #2]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	4806      	ldr	r0, [pc, #24]	; (800c4e8 <CDC_Transmit_FS+0x48>)
 800c4ce:	f7fe fd70 	bl	800afb2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c4d2:	4805      	ldr	r0, [pc, #20]	; (800c4e8 <CDC_Transmit_FS+0x48>)
 800c4d4:	f7fe fda4 	bl	800b020 <USBD_CDC_TransmitPacket>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20002d60 	.word	0x20002d60

0800c4ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b087      	sub	sp, #28
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c4fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c502:	4618      	mov	r0, r3
 800c504:	371c      	adds	r7, #28
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
	...

0800c510 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	6039      	str	r1, [r7, #0]
 800c51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2212      	movs	r2, #18
 800c520:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c522:	4b03      	ldr	r3, [pc, #12]	; (800c530 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c524:	4618      	mov	r0, r3
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	2000015c 	.word	0x2000015c

0800c534 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	6039      	str	r1, [r7, #0]
 800c53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2204      	movs	r2, #4
 800c544:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c546:	4b03      	ldr	r3, [pc, #12]	; (800c554 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c548:	4618      	mov	r0, r3
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr
 800c554:	20000170 	.word	0x20000170

0800c558 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	6039      	str	r1, [r7, #0]
 800c562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d105      	bne.n	800c576 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	4907      	ldr	r1, [pc, #28]	; (800c58c <USBD_CDC_ProductStrDescriptor+0x34>)
 800c56e:	4808      	ldr	r0, [pc, #32]	; (800c590 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c570:	f7ff fdef 	bl	800c152 <USBD_GetString>
 800c574:	e004      	b.n	800c580 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	4904      	ldr	r1, [pc, #16]	; (800c58c <USBD_CDC_ProductStrDescriptor+0x34>)
 800c57a:	4805      	ldr	r0, [pc, #20]	; (800c590 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c57c:	f7ff fde9 	bl	800c152 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c580:	4b02      	ldr	r3, [pc, #8]	; (800c58c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c582:	4618      	mov	r0, r3
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20004034 	.word	0x20004034
 800c590:	080117ec 	.word	0x080117ec

0800c594 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	4603      	mov	r3, r0
 800c59c:	6039      	str	r1, [r7, #0]
 800c59e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	4904      	ldr	r1, [pc, #16]	; (800c5b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c5a4:	4804      	ldr	r0, [pc, #16]	; (800c5b8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c5a6:	f7ff fdd4 	bl	800c152 <USBD_GetString>
  return USBD_StrDesc;
 800c5aa:	4b02      	ldr	r3, [pc, #8]	; (800c5b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20004034 	.word	0x20004034
 800c5b8:	08011804 	.word	0x08011804

0800c5bc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	6039      	str	r1, [r7, #0]
 800c5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	221a      	movs	r2, #26
 800c5cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c5ce:	f000 f843 	bl	800c658 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c5d2:	4b02      	ldr	r3, [pc, #8]	; (800c5dc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	20000174 	.word	0x20000174

0800c5e0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	6039      	str	r1, [r7, #0]
 800c5ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d105      	bne.n	800c5fe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	4907      	ldr	r1, [pc, #28]	; (800c614 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c5f6:	4808      	ldr	r0, [pc, #32]	; (800c618 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c5f8:	f7ff fdab 	bl	800c152 <USBD_GetString>
 800c5fc:	e004      	b.n	800c608 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	4904      	ldr	r1, [pc, #16]	; (800c614 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c602:	4805      	ldr	r0, [pc, #20]	; (800c618 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c604:	f7ff fda5 	bl	800c152 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c608:	4b02      	ldr	r3, [pc, #8]	; (800c614 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20004034 	.word	0x20004034
 800c618:	08011818 	.word	0x08011818

0800c61c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	4603      	mov	r3, r0
 800c624:	6039      	str	r1, [r7, #0]
 800c626:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d105      	bne.n	800c63a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	4907      	ldr	r1, [pc, #28]	; (800c650 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c632:	4808      	ldr	r0, [pc, #32]	; (800c654 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c634:	f7ff fd8d 	bl	800c152 <USBD_GetString>
 800c638:	e004      	b.n	800c644 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	4904      	ldr	r1, [pc, #16]	; (800c650 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c63e:	4805      	ldr	r0, [pc, #20]	; (800c654 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c640:	f7ff fd87 	bl	800c152 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c644:	4b02      	ldr	r3, [pc, #8]	; (800c650 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20004034 	.word	0x20004034
 800c654:	08011824 	.word	0x08011824

0800c658 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c65e:	4b0f      	ldr	r3, [pc, #60]	; (800c69c <Get_SerialNum+0x44>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c664:	4b0e      	ldr	r3, [pc, #56]	; (800c6a0 <Get_SerialNum+0x48>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c66a:	4b0e      	ldr	r3, [pc, #56]	; (800c6a4 <Get_SerialNum+0x4c>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4413      	add	r3, r2
 800c676:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d009      	beq.n	800c692 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c67e:	2208      	movs	r2, #8
 800c680:	4909      	ldr	r1, [pc, #36]	; (800c6a8 <Get_SerialNum+0x50>)
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f000 f814 	bl	800c6b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c688:	2204      	movs	r2, #4
 800c68a:	4908      	ldr	r1, [pc, #32]	; (800c6ac <Get_SerialNum+0x54>)
 800c68c:	68b8      	ldr	r0, [r7, #8]
 800c68e:	f000 f80f 	bl	800c6b0 <IntToUnicode>
  }
}
 800c692:	bf00      	nop
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	1fff7590 	.word	0x1fff7590
 800c6a0:	1fff7594 	.word	0x1fff7594
 800c6a4:	1fff7598 	.word	0x1fff7598
 800c6a8:	20000176 	.word	0x20000176
 800c6ac:	20000186 	.word	0x20000186

0800c6b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	75fb      	strb	r3, [r7, #23]
 800c6c6:	e027      	b.n	800c718 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	0f1b      	lsrs	r3, r3, #28
 800c6cc:	2b09      	cmp	r3, #9
 800c6ce:	d80b      	bhi.n	800c6e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	0f1b      	lsrs	r3, r3, #28
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
 800c6d8:	005b      	lsls	r3, r3, #1
 800c6da:	4619      	mov	r1, r3
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	440b      	add	r3, r1
 800c6e0:	3230      	adds	r2, #48	; 0x30
 800c6e2:	b2d2      	uxtb	r2, r2
 800c6e4:	701a      	strb	r2, [r3, #0]
 800c6e6:	e00a      	b.n	800c6fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	0f1b      	lsrs	r3, r3, #28
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	7dfb      	ldrb	r3, [r7, #23]
 800c6f0:	005b      	lsls	r3, r3, #1
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	440b      	add	r3, r1
 800c6f8:	3237      	adds	r2, #55	; 0x37
 800c6fa:	b2d2      	uxtb	r2, r2
 800c6fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	011b      	lsls	r3, r3, #4
 800c702:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c704:	7dfb      	ldrb	r3, [r7, #23]
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	3301      	adds	r3, #1
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	4413      	add	r3, r2
 800c70e:	2200      	movs	r2, #0
 800c710:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c712:	7dfb      	ldrb	r3, [r7, #23]
 800c714:	3301      	adds	r3, #1
 800c716:	75fb      	strb	r3, [r7, #23]
 800c718:	7dfa      	ldrb	r2, [r7, #23]
 800c71a:	79fb      	ldrb	r3, [r7, #7]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d3d3      	bcc.n	800c6c8 <IntToUnicode+0x18>
  }
}
 800c720:	bf00      	nop
 800c722:	bf00      	nop
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <LL_AHB2_GRP1_EnableClock>:
{
 800c72e:	b480      	push	{r7}
 800c730:	b085      	sub	sp, #20
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800c736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c73a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c73c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4313      	orrs	r3, r2
 800c744:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800c746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c74a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4013      	ands	r3, r2
 800c750:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c752:	68fb      	ldr	r3, [r7, #12]
}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <LL_APB1_GRP1_EnableClock>:
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800c768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c76c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c76e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4313      	orrs	r3, r2
 800c776:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800c778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c77c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4013      	ands	r3, r2
 800c782:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c784:	68fb      	ldr	r3, [r7, #12]
}
 800c786:	bf00      	nop
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
	...

0800c794 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b09c      	sub	sp, #112	; 0x70
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c79c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	605a      	str	r2, [r3, #4]
 800c7a6:	609a      	str	r2, [r3, #8]
 800c7a8:	60da      	str	r2, [r3, #12]
 800c7aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c7ac:	f107 030c 	add.w	r3, r7, #12
 800c7b0:	2250      	movs	r2, #80	; 0x50
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fb53 	bl	800ce60 <memset>
  if(pcdHandle->Instance==USB)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a23      	ldr	r2, [pc, #140]	; (800c84c <HAL_PCD_MspInit+0xb8>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d13e      	bne.n	800c842 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c7c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800c7ca:	2318      	movs	r3, #24
 800c7cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800c7ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c7d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800c7d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c7d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800c7da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c7de:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800c7e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c7e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c7e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c7ea:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c7ec:	f107 030c 	add.w	r3, r7, #12
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fb fbc5 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800c7fc:	f7f7 fcf2 	bl	80041e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c800:	2001      	movs	r0, #1
 800c802:	f7ff ff94 	bl	800c72e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c806:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c80a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c80c:	2302      	movs	r3, #2
 800c80e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c810:	2300      	movs	r3, #0
 800c812:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c814:	2300      	movs	r3, #0
 800c816:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800c818:	230a      	movs	r3, #10
 800c81a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c81c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c820:	4619      	mov	r1, r3
 800c822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c826:	f7f8 f8a1 	bl	800496c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c82a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800c82e:	f7ff ff97 	bl	800c760 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c832:	2200      	movs	r2, #0
 800c834:	2100      	movs	r1, #0
 800c836:	2014      	movs	r0, #20
 800c838:	f7f8 f863 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c83c:	2014      	movs	r0, #20
 800c83e:	f7f8 f87a 	bl	8004936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c842:	bf00      	nop
 800c844:	3770      	adds	r7, #112	; 0x70
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	40006800 	.word	0x40006800

0800c850 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800c864:	4619      	mov	r1, r3
 800c866:	4610      	mov	r0, r2
 800c868:	f7fe fcd6 	bl	800b218 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c86c:	bf00      	nop
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	460b      	mov	r3, r1
 800c87e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c886:	78fa      	ldrb	r2, [r7, #3]
 800c888:	6879      	ldr	r1, [r7, #4]
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	00db      	lsls	r3, r3, #3
 800c892:	440b      	add	r3, r1
 800c894:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	78fb      	ldrb	r3, [r7, #3]
 800c89c:	4619      	mov	r1, r3
 800c89e:	f7fe fd10 	bl	800b2c2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c8a2:	bf00      	nop
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b082      	sub	sp, #8
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c8bc:	78fa      	ldrb	r2, [r7, #3]
 800c8be:	6879      	ldr	r1, [r7, #4]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	440b      	add	r3, r1
 800c8ca:	3340      	adds	r3, #64	; 0x40
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	78fb      	ldrb	r3, [r7, #3]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f7fe fd59 	bl	800b388 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c8d6:	bf00      	nop
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fe fe6d 	bl	800b5cc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c902:	2301      	movs	r3, #1
 800c904:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	d001      	beq.n	800c912 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c90e:	f7f7 fc69 	bl	80041e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c918:	7bfa      	ldrb	r2, [r7, #15]
 800c91a:	4611      	mov	r1, r2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fe fe17 	bl	800b550 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe fdc3 	bl	800b4b4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c92e:	bf00      	nop
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe fe12 	bl	800b570 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d005      	beq.n	800c960 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c954:	4b04      	ldr	r3, [pc, #16]	; (800c968 <HAL_PCD_SuspendCallback+0x30>)
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	4a03      	ldr	r2, [pc, #12]	; (800c968 <HAL_PCD_SuspendCallback+0x30>)
 800c95a:	f043 0306 	orr.w	r3, r3, #6
 800c95e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c960:	bf00      	nop
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	e000ed00 	.word	0xe000ed00

0800c96c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	699b      	ldr	r3, [r3, #24]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d007      	beq.n	800c98c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c97c:	4b08      	ldr	r3, [pc, #32]	; (800c9a0 <HAL_PCD_ResumeCallback+0x34>)
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	4a07      	ldr	r2, [pc, #28]	; (800c9a0 <HAL_PCD_ResumeCallback+0x34>)
 800c982:	f023 0306 	bic.w	r3, r3, #6
 800c986:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c988:	f000 f9fc 	bl	800cd84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c992:	4618      	mov	r0, r3
 800c994:	f7fe fe02 	bl	800b59c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c998:	bf00      	nop
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	e000ed00 	.word	0xe000ed00

0800c9a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c9ac:	4a2c      	ldr	r2, [pc, #176]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a2a      	ldr	r2, [pc, #168]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c9bc:	f7f9 ffdc 	bl	8006978 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800c9c0:	4b27      	ldr	r3, [pc, #156]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9c2:	4a28      	ldr	r2, [pc, #160]	; (800ca64 <USBD_LL_Init+0xc0>)
 800c9c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c9c6:	4b26      	ldr	r3, [pc, #152]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9c8:	2208      	movs	r2, #8
 800c9ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c9cc:	4b24      	ldr	r3, [pc, #144]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9ce:	2202      	movs	r2, #2
 800c9d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c9d2:	4b23      	ldr	r3, [pc, #140]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9d4:	2202      	movs	r2, #2
 800c9d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c9d8:	4b21      	ldr	r3, [pc, #132]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c9de:	4b20      	ldr	r3, [pc, #128]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c9e4:	4b1e      	ldr	r3, [pc, #120]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c9ea:	4b1d      	ldr	r3, [pc, #116]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c9f0:	481b      	ldr	r0, [pc, #108]	; (800ca60 <USBD_LL_Init+0xbc>)
 800c9f2:	f7f8 fa51 	bl	8004e98 <HAL_PCD_Init>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c9fc:	f7f7 fbf2 	bl	80041e4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca06:	2318      	movs	r3, #24
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	f7f9 ff27 	bl	800685e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca16:	2358      	movs	r3, #88	; 0x58
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2180      	movs	r1, #128	; 0x80
 800ca1c:	f7f9 ff1f 	bl	800685e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca26:	23c0      	movs	r3, #192	; 0xc0
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2181      	movs	r1, #129	; 0x81
 800ca2c:	f7f9 ff17 	bl	800685e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca36:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	f7f9 ff0e 	bl	800685e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2182      	movs	r1, #130	; 0x82
 800ca50:	f7f9 ff05 	bl	800685e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20004234 	.word	0x20004234
 800ca64:	40006800 	.word	0x40006800

0800ca68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca74:	2300      	movs	r3, #0
 800ca76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7f8 faf5 	bl	800506e <HAL_PCD_Start>
 800ca84:	4603      	mov	r3, r0
 800ca86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 f980 	bl	800cd90 <USBD_Get_USB_Status>
 800ca90:	4603      	mov	r3, r0
 800ca92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	4608      	mov	r0, r1
 800caa8:	4611      	mov	r1, r2
 800caaa:	461a      	mov	r2, r3
 800caac:	4603      	mov	r3, r0
 800caae:	70fb      	strb	r3, [r7, #3]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70bb      	strb	r3, [r7, #2]
 800cab4:	4613      	mov	r3, r2
 800cab6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cac6:	78bb      	ldrb	r3, [r7, #2]
 800cac8:	883a      	ldrh	r2, [r7, #0]
 800caca:	78f9      	ldrb	r1, [r7, #3]
 800cacc:	f7f8 fc3d 	bl	800534a <HAL_PCD_EP_Open>
 800cad0:	4603      	mov	r3, r0
 800cad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 f95a 	bl	800cd90 <USBD_Get_USB_Status>
 800cadc:	4603      	mov	r3, r0
 800cade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	460b      	mov	r3, r1
 800caf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf6:	2300      	movs	r3, #0
 800caf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb04:	78fa      	ldrb	r2, [r7, #3]
 800cb06:	4611      	mov	r1, r2
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f8 fc86 	bl	800541a <HAL_PCD_EP_Close>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 f93b 	bl	800cd90 <USBD_Get_USB_Status>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	460b      	mov	r3, r1
 800cb32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb42:	78fa      	ldrb	r2, [r7, #3]
 800cb44:	4611      	mov	r1, r2
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7f8 fd4b 	bl	80055e2 <HAL_PCD_EP_SetStall>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 f91c 	bl	800cd90 <USBD_Get_USB_Status>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b084      	sub	sp, #16
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	460b      	mov	r3, r1
 800cb70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb80:	78fa      	ldrb	r2, [r7, #3]
 800cb82:	4611      	mov	r1, r2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f8 fd80 	bl	800568a <HAL_PCD_EP_ClrStall>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 f8fd 	bl	800cd90 <USBD_Get_USB_Status>
 800cb96:	4603      	mov	r3, r0
 800cb98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	460b      	mov	r3, r1
 800cbae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cbb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	da0c      	bge.n	800cbda <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbc6:	68f9      	ldr	r1, [r7, #12]
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	4613      	mov	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4413      	add	r3, r2
 800cbd0:	00db      	lsls	r3, r3, #3
 800cbd2:	440b      	add	r3, r1
 800cbd4:	3306      	adds	r3, #6
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	e00b      	b.n	800cbf2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cbda:	78fb      	ldrb	r3, [r7, #3]
 800cbdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbe0:	68f9      	ldr	r1, [r7, #12]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	440b      	add	r3, r1
 800cbec:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800cbf0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3714      	adds	r7, #20
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b084      	sub	sp, #16
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	460b      	mov	r3, r1
 800cc08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc18:	78fa      	ldrb	r2, [r7, #3]
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7f8 fb6f 	bl	8005300 <HAL_PCD_SetAddress>
 800cc22:	4603      	mov	r3, r0
 800cc24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc26:	7bfb      	ldrb	r3, [r7, #15]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f000 f8b1 	bl	800cd90 <USBD_Get_USB_Status>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc32:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b086      	sub	sp, #24
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	607a      	str	r2, [r7, #4]
 800cc46:	603b      	str	r3, [r7, #0]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc5a:	7af9      	ldrb	r1, [r7, #11]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	f7f8 fc7b 	bl	800555a <HAL_PCD_EP_Transmit>
 800cc64:	4603      	mov	r3, r0
 800cc66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 f890 	bl	800cd90 <USBD_Get_USB_Status>
 800cc70:	4603      	mov	r3, r0
 800cc72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc74:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3718      	adds	r7, #24
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b086      	sub	sp, #24
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	60f8      	str	r0, [r7, #12]
 800cc86:	607a      	str	r2, [r7, #4]
 800cc88:	603b      	str	r3, [r7, #0]
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc9c:	7af9      	ldrb	r1, [r7, #11]
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	f7f8 fc04 	bl	80054ae <HAL_PCD_EP_Receive>
 800cca6:	4603      	mov	r3, r0
 800cca8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 f86f 	bl	800cd90 <USBD_Get_USB_Status>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccb6:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3718      	adds	r7, #24
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccd2:	78fa      	ldrb	r2, [r7, #3]
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7f8 fc27 	bl	800552a <HAL_PCD_EP_GetRxCount>
 800ccdc:	4603      	mov	r3, r0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
	...

0800cce8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ccf4:	78fb      	ldrb	r3, [r7, #3]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <HAL_PCDEx_LPM_Callback+0x18>
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d013      	beq.n	800cd26 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ccfe:	e023      	b.n	800cd48 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	699b      	ldr	r3, [r3, #24]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d007      	beq.n	800cd18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cd08:	f000 f83c 	bl	800cd84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd0c:	4b10      	ldr	r3, [pc, #64]	; (800cd50 <HAL_PCDEx_LPM_Callback+0x68>)
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	4a0f      	ldr	r2, [pc, #60]	; (800cd50 <HAL_PCDEx_LPM_Callback+0x68>)
 800cd12:	f023 0306 	bic.w	r3, r3, #6
 800cd16:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fe fc3c 	bl	800b59c <USBD_LL_Resume>
    break;
 800cd24:	e010      	b.n	800cd48 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe fc1f 	bl	800b570 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d005      	beq.n	800cd46 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd3a:	4b05      	ldr	r3, [pc, #20]	; (800cd50 <HAL_PCDEx_LPM_Callback+0x68>)
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	4a04      	ldr	r2, [pc, #16]	; (800cd50 <HAL_PCDEx_LPM_Callback+0x68>)
 800cd40:	f043 0306 	orr.w	r3, r3, #6
 800cd44:	6113      	str	r3, [r2, #16]
    break;
 800cd46:	bf00      	nop
}
 800cd48:	bf00      	nop
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	e000ed00 	.word	0xe000ed00

0800cd54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cd5c:	4b03      	ldr	r3, [pc, #12]	; (800cd6c <USBD_static_malloc+0x18>)
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	2000452c 	.word	0x2000452c

0800cd70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]

}
 800cd78:	bf00      	nop
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cd88:	f7f7 f958 	bl	800403c <SystemClock_Config>
}
 800cd8c:	bf00      	nop
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	2b03      	cmp	r3, #3
 800cda2:	d817      	bhi.n	800cdd4 <USBD_Get_USB_Status+0x44>
 800cda4:	a201      	add	r2, pc, #4	; (adr r2, 800cdac <USBD_Get_USB_Status+0x1c>)
 800cda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdaa:	bf00      	nop
 800cdac:	0800cdbd 	.word	0x0800cdbd
 800cdb0:	0800cdc3 	.word	0x0800cdc3
 800cdb4:	0800cdc9 	.word	0x0800cdc9
 800cdb8:	0800cdcf 	.word	0x0800cdcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc0:	e00b      	b.n	800cdda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc6:	e008      	b.n	800cdda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	73fb      	strb	r3, [r7, #15]
    break;
 800cdcc:	e005      	b.n	800cdda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd2:	e002      	b.n	800cdda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd8:	bf00      	nop
  }
  return usb_status;
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <atoi>:
 800cde8:	220a      	movs	r2, #10
 800cdea:	2100      	movs	r1, #0
 800cdec:	f001 bd8c 	b.w	800e908 <strtol>

0800cdf0 <__errno>:
 800cdf0:	4b01      	ldr	r3, [pc, #4]	; (800cdf8 <__errno+0x8>)
 800cdf2:	6818      	ldr	r0, [r3, #0]
 800cdf4:	4770      	bx	lr
 800cdf6:	bf00      	nop
 800cdf8:	20000190 	.word	0x20000190

0800cdfc <__libc_init_array>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	4d0d      	ldr	r5, [pc, #52]	; (800ce34 <__libc_init_array+0x38>)
 800ce00:	4c0d      	ldr	r4, [pc, #52]	; (800ce38 <__libc_init_array+0x3c>)
 800ce02:	1b64      	subs	r4, r4, r5
 800ce04:	10a4      	asrs	r4, r4, #2
 800ce06:	2600      	movs	r6, #0
 800ce08:	42a6      	cmp	r6, r4
 800ce0a:	d109      	bne.n	800ce20 <__libc_init_array+0x24>
 800ce0c:	4d0b      	ldr	r5, [pc, #44]	; (800ce3c <__libc_init_array+0x40>)
 800ce0e:	4c0c      	ldr	r4, [pc, #48]	; (800ce40 <__libc_init_array+0x44>)
 800ce10:	f004 fc9a 	bl	8011748 <_init>
 800ce14:	1b64      	subs	r4, r4, r5
 800ce16:	10a4      	asrs	r4, r4, #2
 800ce18:	2600      	movs	r6, #0
 800ce1a:	42a6      	cmp	r6, r4
 800ce1c:	d105      	bne.n	800ce2a <__libc_init_array+0x2e>
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}
 800ce20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce24:	4798      	blx	r3
 800ce26:	3601      	adds	r6, #1
 800ce28:	e7ee      	b.n	800ce08 <__libc_init_array+0xc>
 800ce2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce2e:	4798      	blx	r3
 800ce30:	3601      	adds	r6, #1
 800ce32:	e7f2      	b.n	800ce1a <__libc_init_array+0x1e>
 800ce34:	08011d94 	.word	0x08011d94
 800ce38:	08011d94 	.word	0x08011d94
 800ce3c:	08011d94 	.word	0x08011d94
 800ce40:	08011d98 	.word	0x08011d98

0800ce44 <memcpy>:
 800ce44:	440a      	add	r2, r1
 800ce46:	4291      	cmp	r1, r2
 800ce48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce4c:	d100      	bne.n	800ce50 <memcpy+0xc>
 800ce4e:	4770      	bx	lr
 800ce50:	b510      	push	{r4, lr}
 800ce52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce5a:	4291      	cmp	r1, r2
 800ce5c:	d1f9      	bne.n	800ce52 <memcpy+0xe>
 800ce5e:	bd10      	pop	{r4, pc}

0800ce60 <memset>:
 800ce60:	4402      	add	r2, r0
 800ce62:	4603      	mov	r3, r0
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d100      	bne.n	800ce6a <memset+0xa>
 800ce68:	4770      	bx	lr
 800ce6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce6e:	e7f9      	b.n	800ce64 <memset+0x4>

0800ce70 <__cvt>:
 800ce70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce74:	ec55 4b10 	vmov	r4, r5, d0
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	460e      	mov	r6, r1
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	462b      	mov	r3, r5
 800ce80:	bfbb      	ittet	lt
 800ce82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce86:	461d      	movlt	r5, r3
 800ce88:	2300      	movge	r3, #0
 800ce8a:	232d      	movlt	r3, #45	; 0x2d
 800ce8c:	700b      	strb	r3, [r1, #0]
 800ce8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce94:	4691      	mov	r9, r2
 800ce96:	f023 0820 	bic.w	r8, r3, #32
 800ce9a:	bfbc      	itt	lt
 800ce9c:	4622      	movlt	r2, r4
 800ce9e:	4614      	movlt	r4, r2
 800cea0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cea4:	d005      	beq.n	800ceb2 <__cvt+0x42>
 800cea6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ceaa:	d100      	bne.n	800ceae <__cvt+0x3e>
 800ceac:	3601      	adds	r6, #1
 800ceae:	2102      	movs	r1, #2
 800ceb0:	e000      	b.n	800ceb4 <__cvt+0x44>
 800ceb2:	2103      	movs	r1, #3
 800ceb4:	ab03      	add	r3, sp, #12
 800ceb6:	9301      	str	r3, [sp, #4]
 800ceb8:	ab02      	add	r3, sp, #8
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	ec45 4b10 	vmov	d0, r4, r5
 800cec0:	4653      	mov	r3, sl
 800cec2:	4632      	mov	r2, r6
 800cec4:	f001 fdb8 	bl	800ea38 <_dtoa_r>
 800cec8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cecc:	4607      	mov	r7, r0
 800cece:	d102      	bne.n	800ced6 <__cvt+0x66>
 800ced0:	f019 0f01 	tst.w	r9, #1
 800ced4:	d022      	beq.n	800cf1c <__cvt+0xac>
 800ced6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ceda:	eb07 0906 	add.w	r9, r7, r6
 800cede:	d110      	bne.n	800cf02 <__cvt+0x92>
 800cee0:	783b      	ldrb	r3, [r7, #0]
 800cee2:	2b30      	cmp	r3, #48	; 0x30
 800cee4:	d10a      	bne.n	800cefc <__cvt+0x8c>
 800cee6:	2200      	movs	r2, #0
 800cee8:	2300      	movs	r3, #0
 800ceea:	4620      	mov	r0, r4
 800ceec:	4629      	mov	r1, r5
 800ceee:	f7f3 fdc3 	bl	8000a78 <__aeabi_dcmpeq>
 800cef2:	b918      	cbnz	r0, 800cefc <__cvt+0x8c>
 800cef4:	f1c6 0601 	rsb	r6, r6, #1
 800cef8:	f8ca 6000 	str.w	r6, [sl]
 800cefc:	f8da 3000 	ldr.w	r3, [sl]
 800cf00:	4499      	add	r9, r3
 800cf02:	2200      	movs	r2, #0
 800cf04:	2300      	movs	r3, #0
 800cf06:	4620      	mov	r0, r4
 800cf08:	4629      	mov	r1, r5
 800cf0a:	f7f3 fdb5 	bl	8000a78 <__aeabi_dcmpeq>
 800cf0e:	b108      	cbz	r0, 800cf14 <__cvt+0xa4>
 800cf10:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf14:	2230      	movs	r2, #48	; 0x30
 800cf16:	9b03      	ldr	r3, [sp, #12]
 800cf18:	454b      	cmp	r3, r9
 800cf1a:	d307      	bcc.n	800cf2c <__cvt+0xbc>
 800cf1c:	9b03      	ldr	r3, [sp, #12]
 800cf1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf20:	1bdb      	subs	r3, r3, r7
 800cf22:	4638      	mov	r0, r7
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	b004      	add	sp, #16
 800cf28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2c:	1c59      	adds	r1, r3, #1
 800cf2e:	9103      	str	r1, [sp, #12]
 800cf30:	701a      	strb	r2, [r3, #0]
 800cf32:	e7f0      	b.n	800cf16 <__cvt+0xa6>

0800cf34 <__exponent>:
 800cf34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf36:	4603      	mov	r3, r0
 800cf38:	2900      	cmp	r1, #0
 800cf3a:	bfb8      	it	lt
 800cf3c:	4249      	neglt	r1, r1
 800cf3e:	f803 2b02 	strb.w	r2, [r3], #2
 800cf42:	bfb4      	ite	lt
 800cf44:	222d      	movlt	r2, #45	; 0x2d
 800cf46:	222b      	movge	r2, #43	; 0x2b
 800cf48:	2909      	cmp	r1, #9
 800cf4a:	7042      	strb	r2, [r0, #1]
 800cf4c:	dd2a      	ble.n	800cfa4 <__exponent+0x70>
 800cf4e:	f10d 0407 	add.w	r4, sp, #7
 800cf52:	46a4      	mov	ip, r4
 800cf54:	270a      	movs	r7, #10
 800cf56:	46a6      	mov	lr, r4
 800cf58:	460a      	mov	r2, r1
 800cf5a:	fb91 f6f7 	sdiv	r6, r1, r7
 800cf5e:	fb07 1516 	mls	r5, r7, r6, r1
 800cf62:	3530      	adds	r5, #48	; 0x30
 800cf64:	2a63      	cmp	r2, #99	; 0x63
 800cf66:	f104 34ff 	add.w	r4, r4, #4294967295
 800cf6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cf6e:	4631      	mov	r1, r6
 800cf70:	dcf1      	bgt.n	800cf56 <__exponent+0x22>
 800cf72:	3130      	adds	r1, #48	; 0x30
 800cf74:	f1ae 0502 	sub.w	r5, lr, #2
 800cf78:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cf7c:	1c44      	adds	r4, r0, #1
 800cf7e:	4629      	mov	r1, r5
 800cf80:	4561      	cmp	r1, ip
 800cf82:	d30a      	bcc.n	800cf9a <__exponent+0x66>
 800cf84:	f10d 0209 	add.w	r2, sp, #9
 800cf88:	eba2 020e 	sub.w	r2, r2, lr
 800cf8c:	4565      	cmp	r5, ip
 800cf8e:	bf88      	it	hi
 800cf90:	2200      	movhi	r2, #0
 800cf92:	4413      	add	r3, r2
 800cf94:	1a18      	subs	r0, r3, r0
 800cf96:	b003      	add	sp, #12
 800cf98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cfa2:	e7ed      	b.n	800cf80 <__exponent+0x4c>
 800cfa4:	2330      	movs	r3, #48	; 0x30
 800cfa6:	3130      	adds	r1, #48	; 0x30
 800cfa8:	7083      	strb	r3, [r0, #2]
 800cfaa:	70c1      	strb	r1, [r0, #3]
 800cfac:	1d03      	adds	r3, r0, #4
 800cfae:	e7f1      	b.n	800cf94 <__exponent+0x60>

0800cfb0 <_printf_float>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	ed2d 8b02 	vpush	{d8}
 800cfb8:	b08d      	sub	sp, #52	; 0x34
 800cfba:	460c      	mov	r4, r1
 800cfbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cfc0:	4616      	mov	r6, r2
 800cfc2:	461f      	mov	r7, r3
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	f002 fe95 	bl	800fcf4 <_localeconv_r>
 800cfca:	f8d0 a000 	ldr.w	sl, [r0]
 800cfce:	4650      	mov	r0, sl
 800cfd0:	f7f3 f8d6 	bl	8000180 <strlen>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	930a      	str	r3, [sp, #40]	; 0x28
 800cfd8:	6823      	ldr	r3, [r4, #0]
 800cfda:	9305      	str	r3, [sp, #20]
 800cfdc:	f8d8 3000 	ldr.w	r3, [r8]
 800cfe0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cfe4:	3307      	adds	r3, #7
 800cfe6:	f023 0307 	bic.w	r3, r3, #7
 800cfea:	f103 0208 	add.w	r2, r3, #8
 800cfee:	f8c8 2000 	str.w	r2, [r8]
 800cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cffa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cffe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d002:	9307      	str	r3, [sp, #28]
 800d004:	f8cd 8018 	str.w	r8, [sp, #24]
 800d008:	ee08 0a10 	vmov	s16, r0
 800d00c:	4b9f      	ldr	r3, [pc, #636]	; (800d28c <_printf_float+0x2dc>)
 800d00e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d012:	f04f 32ff 	mov.w	r2, #4294967295
 800d016:	f7f3 fd61 	bl	8000adc <__aeabi_dcmpun>
 800d01a:	bb88      	cbnz	r0, 800d080 <_printf_float+0xd0>
 800d01c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d020:	4b9a      	ldr	r3, [pc, #616]	; (800d28c <_printf_float+0x2dc>)
 800d022:	f04f 32ff 	mov.w	r2, #4294967295
 800d026:	f7f3 fd3b 	bl	8000aa0 <__aeabi_dcmple>
 800d02a:	bb48      	cbnz	r0, 800d080 <_printf_float+0xd0>
 800d02c:	2200      	movs	r2, #0
 800d02e:	2300      	movs	r3, #0
 800d030:	4640      	mov	r0, r8
 800d032:	4649      	mov	r1, r9
 800d034:	f7f3 fd2a 	bl	8000a8c <__aeabi_dcmplt>
 800d038:	b110      	cbz	r0, 800d040 <_printf_float+0x90>
 800d03a:	232d      	movs	r3, #45	; 0x2d
 800d03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d040:	4b93      	ldr	r3, [pc, #588]	; (800d290 <_printf_float+0x2e0>)
 800d042:	4894      	ldr	r0, [pc, #592]	; (800d294 <_printf_float+0x2e4>)
 800d044:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d048:	bf94      	ite	ls
 800d04a:	4698      	movls	r8, r3
 800d04c:	4680      	movhi	r8, r0
 800d04e:	2303      	movs	r3, #3
 800d050:	6123      	str	r3, [r4, #16]
 800d052:	9b05      	ldr	r3, [sp, #20]
 800d054:	f023 0204 	bic.w	r2, r3, #4
 800d058:	6022      	str	r2, [r4, #0]
 800d05a:	f04f 0900 	mov.w	r9, #0
 800d05e:	9700      	str	r7, [sp, #0]
 800d060:	4633      	mov	r3, r6
 800d062:	aa0b      	add	r2, sp, #44	; 0x2c
 800d064:	4621      	mov	r1, r4
 800d066:	4628      	mov	r0, r5
 800d068:	f000 f9d8 	bl	800d41c <_printf_common>
 800d06c:	3001      	adds	r0, #1
 800d06e:	f040 8090 	bne.w	800d192 <_printf_float+0x1e2>
 800d072:	f04f 30ff 	mov.w	r0, #4294967295
 800d076:	b00d      	add	sp, #52	; 0x34
 800d078:	ecbd 8b02 	vpop	{d8}
 800d07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d080:	4642      	mov	r2, r8
 800d082:	464b      	mov	r3, r9
 800d084:	4640      	mov	r0, r8
 800d086:	4649      	mov	r1, r9
 800d088:	f7f3 fd28 	bl	8000adc <__aeabi_dcmpun>
 800d08c:	b140      	cbz	r0, 800d0a0 <_printf_float+0xf0>
 800d08e:	464b      	mov	r3, r9
 800d090:	2b00      	cmp	r3, #0
 800d092:	bfbc      	itt	lt
 800d094:	232d      	movlt	r3, #45	; 0x2d
 800d096:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d09a:	487f      	ldr	r0, [pc, #508]	; (800d298 <_printf_float+0x2e8>)
 800d09c:	4b7f      	ldr	r3, [pc, #508]	; (800d29c <_printf_float+0x2ec>)
 800d09e:	e7d1      	b.n	800d044 <_printf_float+0x94>
 800d0a0:	6863      	ldr	r3, [r4, #4]
 800d0a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d0a6:	9206      	str	r2, [sp, #24]
 800d0a8:	1c5a      	adds	r2, r3, #1
 800d0aa:	d13f      	bne.n	800d12c <_printf_float+0x17c>
 800d0ac:	2306      	movs	r3, #6
 800d0ae:	6063      	str	r3, [r4, #4]
 800d0b0:	9b05      	ldr	r3, [sp, #20]
 800d0b2:	6861      	ldr	r1, [r4, #4]
 800d0b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	9303      	str	r3, [sp, #12]
 800d0bc:	ab0a      	add	r3, sp, #40	; 0x28
 800d0be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d0c2:	ab09      	add	r3, sp, #36	; 0x24
 800d0c4:	ec49 8b10 	vmov	d0, r8, r9
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	6022      	str	r2, [r4, #0]
 800d0cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	f7ff fecd 	bl	800ce70 <__cvt>
 800d0d6:	9b06      	ldr	r3, [sp, #24]
 800d0d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0da:	2b47      	cmp	r3, #71	; 0x47
 800d0dc:	4680      	mov	r8, r0
 800d0de:	d108      	bne.n	800d0f2 <_printf_float+0x142>
 800d0e0:	1cc8      	adds	r0, r1, #3
 800d0e2:	db02      	blt.n	800d0ea <_printf_float+0x13a>
 800d0e4:	6863      	ldr	r3, [r4, #4]
 800d0e6:	4299      	cmp	r1, r3
 800d0e8:	dd41      	ble.n	800d16e <_printf_float+0x1be>
 800d0ea:	f1ab 0b02 	sub.w	fp, fp, #2
 800d0ee:	fa5f fb8b 	uxtb.w	fp, fp
 800d0f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d0f6:	d820      	bhi.n	800d13a <_printf_float+0x18a>
 800d0f8:	3901      	subs	r1, #1
 800d0fa:	465a      	mov	r2, fp
 800d0fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d100:	9109      	str	r1, [sp, #36]	; 0x24
 800d102:	f7ff ff17 	bl	800cf34 <__exponent>
 800d106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d108:	1813      	adds	r3, r2, r0
 800d10a:	2a01      	cmp	r2, #1
 800d10c:	4681      	mov	r9, r0
 800d10e:	6123      	str	r3, [r4, #16]
 800d110:	dc02      	bgt.n	800d118 <_printf_float+0x168>
 800d112:	6822      	ldr	r2, [r4, #0]
 800d114:	07d2      	lsls	r2, r2, #31
 800d116:	d501      	bpl.n	800d11c <_printf_float+0x16c>
 800d118:	3301      	adds	r3, #1
 800d11a:	6123      	str	r3, [r4, #16]
 800d11c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d120:	2b00      	cmp	r3, #0
 800d122:	d09c      	beq.n	800d05e <_printf_float+0xae>
 800d124:	232d      	movs	r3, #45	; 0x2d
 800d126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d12a:	e798      	b.n	800d05e <_printf_float+0xae>
 800d12c:	9a06      	ldr	r2, [sp, #24]
 800d12e:	2a47      	cmp	r2, #71	; 0x47
 800d130:	d1be      	bne.n	800d0b0 <_printf_float+0x100>
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1bc      	bne.n	800d0b0 <_printf_float+0x100>
 800d136:	2301      	movs	r3, #1
 800d138:	e7b9      	b.n	800d0ae <_printf_float+0xfe>
 800d13a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d13e:	d118      	bne.n	800d172 <_printf_float+0x1c2>
 800d140:	2900      	cmp	r1, #0
 800d142:	6863      	ldr	r3, [r4, #4]
 800d144:	dd0b      	ble.n	800d15e <_printf_float+0x1ae>
 800d146:	6121      	str	r1, [r4, #16]
 800d148:	b913      	cbnz	r3, 800d150 <_printf_float+0x1a0>
 800d14a:	6822      	ldr	r2, [r4, #0]
 800d14c:	07d0      	lsls	r0, r2, #31
 800d14e:	d502      	bpl.n	800d156 <_printf_float+0x1a6>
 800d150:	3301      	adds	r3, #1
 800d152:	440b      	add	r3, r1
 800d154:	6123      	str	r3, [r4, #16]
 800d156:	65a1      	str	r1, [r4, #88]	; 0x58
 800d158:	f04f 0900 	mov.w	r9, #0
 800d15c:	e7de      	b.n	800d11c <_printf_float+0x16c>
 800d15e:	b913      	cbnz	r3, 800d166 <_printf_float+0x1b6>
 800d160:	6822      	ldr	r2, [r4, #0]
 800d162:	07d2      	lsls	r2, r2, #31
 800d164:	d501      	bpl.n	800d16a <_printf_float+0x1ba>
 800d166:	3302      	adds	r3, #2
 800d168:	e7f4      	b.n	800d154 <_printf_float+0x1a4>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e7f2      	b.n	800d154 <_printf_float+0x1a4>
 800d16e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d174:	4299      	cmp	r1, r3
 800d176:	db05      	blt.n	800d184 <_printf_float+0x1d4>
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	6121      	str	r1, [r4, #16]
 800d17c:	07d8      	lsls	r0, r3, #31
 800d17e:	d5ea      	bpl.n	800d156 <_printf_float+0x1a6>
 800d180:	1c4b      	adds	r3, r1, #1
 800d182:	e7e7      	b.n	800d154 <_printf_float+0x1a4>
 800d184:	2900      	cmp	r1, #0
 800d186:	bfd4      	ite	le
 800d188:	f1c1 0202 	rsble	r2, r1, #2
 800d18c:	2201      	movgt	r2, #1
 800d18e:	4413      	add	r3, r2
 800d190:	e7e0      	b.n	800d154 <_printf_float+0x1a4>
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	055a      	lsls	r2, r3, #21
 800d196:	d407      	bmi.n	800d1a8 <_printf_float+0x1f8>
 800d198:	6923      	ldr	r3, [r4, #16]
 800d19a:	4642      	mov	r2, r8
 800d19c:	4631      	mov	r1, r6
 800d19e:	4628      	mov	r0, r5
 800d1a0:	47b8      	blx	r7
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	d12c      	bne.n	800d200 <_printf_float+0x250>
 800d1a6:	e764      	b.n	800d072 <_printf_float+0xc2>
 800d1a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1ac:	f240 80e0 	bls.w	800d370 <_printf_float+0x3c0>
 800d1b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f7f3 fc5e 	bl	8000a78 <__aeabi_dcmpeq>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	d034      	beq.n	800d22a <_printf_float+0x27a>
 800d1c0:	4a37      	ldr	r2, [pc, #220]	; (800d2a0 <_printf_float+0x2f0>)
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	47b8      	blx	r7
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	f43f af51 	beq.w	800d072 <_printf_float+0xc2>
 800d1d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	db02      	blt.n	800d1de <_printf_float+0x22e>
 800d1d8:	6823      	ldr	r3, [r4, #0]
 800d1da:	07d8      	lsls	r0, r3, #31
 800d1dc:	d510      	bpl.n	800d200 <_printf_float+0x250>
 800d1de:	ee18 3a10 	vmov	r3, s16
 800d1e2:	4652      	mov	r2, sl
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	47b8      	blx	r7
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	f43f af41 	beq.w	800d072 <_printf_float+0xc2>
 800d1f0:	f04f 0800 	mov.w	r8, #0
 800d1f4:	f104 091a 	add.w	r9, r4, #26
 800d1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	4543      	cmp	r3, r8
 800d1fe:	dc09      	bgt.n	800d214 <_printf_float+0x264>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	079b      	lsls	r3, r3, #30
 800d204:	f100 8105 	bmi.w	800d412 <_printf_float+0x462>
 800d208:	68e0      	ldr	r0, [r4, #12]
 800d20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d20c:	4298      	cmp	r0, r3
 800d20e:	bfb8      	it	lt
 800d210:	4618      	movlt	r0, r3
 800d212:	e730      	b.n	800d076 <_printf_float+0xc6>
 800d214:	2301      	movs	r3, #1
 800d216:	464a      	mov	r2, r9
 800d218:	4631      	mov	r1, r6
 800d21a:	4628      	mov	r0, r5
 800d21c:	47b8      	blx	r7
 800d21e:	3001      	adds	r0, #1
 800d220:	f43f af27 	beq.w	800d072 <_printf_float+0xc2>
 800d224:	f108 0801 	add.w	r8, r8, #1
 800d228:	e7e6      	b.n	800d1f8 <_printf_float+0x248>
 800d22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	dc39      	bgt.n	800d2a4 <_printf_float+0x2f4>
 800d230:	4a1b      	ldr	r2, [pc, #108]	; (800d2a0 <_printf_float+0x2f0>)
 800d232:	2301      	movs	r3, #1
 800d234:	4631      	mov	r1, r6
 800d236:	4628      	mov	r0, r5
 800d238:	47b8      	blx	r7
 800d23a:	3001      	adds	r0, #1
 800d23c:	f43f af19 	beq.w	800d072 <_printf_float+0xc2>
 800d240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d244:	4313      	orrs	r3, r2
 800d246:	d102      	bne.n	800d24e <_printf_float+0x29e>
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	07d9      	lsls	r1, r3, #31
 800d24c:	d5d8      	bpl.n	800d200 <_printf_float+0x250>
 800d24e:	ee18 3a10 	vmov	r3, s16
 800d252:	4652      	mov	r2, sl
 800d254:	4631      	mov	r1, r6
 800d256:	4628      	mov	r0, r5
 800d258:	47b8      	blx	r7
 800d25a:	3001      	adds	r0, #1
 800d25c:	f43f af09 	beq.w	800d072 <_printf_float+0xc2>
 800d260:	f04f 0900 	mov.w	r9, #0
 800d264:	f104 0a1a 	add.w	sl, r4, #26
 800d268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d26a:	425b      	negs	r3, r3
 800d26c:	454b      	cmp	r3, r9
 800d26e:	dc01      	bgt.n	800d274 <_printf_float+0x2c4>
 800d270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d272:	e792      	b.n	800d19a <_printf_float+0x1ea>
 800d274:	2301      	movs	r3, #1
 800d276:	4652      	mov	r2, sl
 800d278:	4631      	mov	r1, r6
 800d27a:	4628      	mov	r0, r5
 800d27c:	47b8      	blx	r7
 800d27e:	3001      	adds	r0, #1
 800d280:	f43f aef7 	beq.w	800d072 <_printf_float+0xc2>
 800d284:	f109 0901 	add.w	r9, r9, #1
 800d288:	e7ee      	b.n	800d268 <_printf_float+0x2b8>
 800d28a:	bf00      	nop
 800d28c:	7fefffff 	.word	0x7fefffff
 800d290:	080118f4 	.word	0x080118f4
 800d294:	080118f8 	.word	0x080118f8
 800d298:	08011900 	.word	0x08011900
 800d29c:	080118fc 	.word	0x080118fc
 800d2a0:	08011904 	.word	0x08011904
 800d2a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	bfa8      	it	ge
 800d2ac:	461a      	movge	r2, r3
 800d2ae:	2a00      	cmp	r2, #0
 800d2b0:	4691      	mov	r9, r2
 800d2b2:	dc37      	bgt.n	800d324 <_printf_float+0x374>
 800d2b4:	f04f 0b00 	mov.w	fp, #0
 800d2b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2bc:	f104 021a 	add.w	r2, r4, #26
 800d2c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2c2:	9305      	str	r3, [sp, #20]
 800d2c4:	eba3 0309 	sub.w	r3, r3, r9
 800d2c8:	455b      	cmp	r3, fp
 800d2ca:	dc33      	bgt.n	800d334 <_printf_float+0x384>
 800d2cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	db3b      	blt.n	800d34c <_printf_float+0x39c>
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	07da      	lsls	r2, r3, #31
 800d2d8:	d438      	bmi.n	800d34c <_printf_float+0x39c>
 800d2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2dc:	9a05      	ldr	r2, [sp, #20]
 800d2de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2e0:	1a9a      	subs	r2, r3, r2
 800d2e2:	eba3 0901 	sub.w	r9, r3, r1
 800d2e6:	4591      	cmp	r9, r2
 800d2e8:	bfa8      	it	ge
 800d2ea:	4691      	movge	r9, r2
 800d2ec:	f1b9 0f00 	cmp.w	r9, #0
 800d2f0:	dc35      	bgt.n	800d35e <_printf_float+0x3ae>
 800d2f2:	f04f 0800 	mov.w	r8, #0
 800d2f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2fa:	f104 0a1a 	add.w	sl, r4, #26
 800d2fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d302:	1a9b      	subs	r3, r3, r2
 800d304:	eba3 0309 	sub.w	r3, r3, r9
 800d308:	4543      	cmp	r3, r8
 800d30a:	f77f af79 	ble.w	800d200 <_printf_float+0x250>
 800d30e:	2301      	movs	r3, #1
 800d310:	4652      	mov	r2, sl
 800d312:	4631      	mov	r1, r6
 800d314:	4628      	mov	r0, r5
 800d316:	47b8      	blx	r7
 800d318:	3001      	adds	r0, #1
 800d31a:	f43f aeaa 	beq.w	800d072 <_printf_float+0xc2>
 800d31e:	f108 0801 	add.w	r8, r8, #1
 800d322:	e7ec      	b.n	800d2fe <_printf_float+0x34e>
 800d324:	4613      	mov	r3, r2
 800d326:	4631      	mov	r1, r6
 800d328:	4642      	mov	r2, r8
 800d32a:	4628      	mov	r0, r5
 800d32c:	47b8      	blx	r7
 800d32e:	3001      	adds	r0, #1
 800d330:	d1c0      	bne.n	800d2b4 <_printf_float+0x304>
 800d332:	e69e      	b.n	800d072 <_printf_float+0xc2>
 800d334:	2301      	movs	r3, #1
 800d336:	4631      	mov	r1, r6
 800d338:	4628      	mov	r0, r5
 800d33a:	9205      	str	r2, [sp, #20]
 800d33c:	47b8      	blx	r7
 800d33e:	3001      	adds	r0, #1
 800d340:	f43f ae97 	beq.w	800d072 <_printf_float+0xc2>
 800d344:	9a05      	ldr	r2, [sp, #20]
 800d346:	f10b 0b01 	add.w	fp, fp, #1
 800d34a:	e7b9      	b.n	800d2c0 <_printf_float+0x310>
 800d34c:	ee18 3a10 	vmov	r3, s16
 800d350:	4652      	mov	r2, sl
 800d352:	4631      	mov	r1, r6
 800d354:	4628      	mov	r0, r5
 800d356:	47b8      	blx	r7
 800d358:	3001      	adds	r0, #1
 800d35a:	d1be      	bne.n	800d2da <_printf_float+0x32a>
 800d35c:	e689      	b.n	800d072 <_printf_float+0xc2>
 800d35e:	9a05      	ldr	r2, [sp, #20]
 800d360:	464b      	mov	r3, r9
 800d362:	4442      	add	r2, r8
 800d364:	4631      	mov	r1, r6
 800d366:	4628      	mov	r0, r5
 800d368:	47b8      	blx	r7
 800d36a:	3001      	adds	r0, #1
 800d36c:	d1c1      	bne.n	800d2f2 <_printf_float+0x342>
 800d36e:	e680      	b.n	800d072 <_printf_float+0xc2>
 800d370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d372:	2a01      	cmp	r2, #1
 800d374:	dc01      	bgt.n	800d37a <_printf_float+0x3ca>
 800d376:	07db      	lsls	r3, r3, #31
 800d378:	d538      	bpl.n	800d3ec <_printf_float+0x43c>
 800d37a:	2301      	movs	r3, #1
 800d37c:	4642      	mov	r2, r8
 800d37e:	4631      	mov	r1, r6
 800d380:	4628      	mov	r0, r5
 800d382:	47b8      	blx	r7
 800d384:	3001      	adds	r0, #1
 800d386:	f43f ae74 	beq.w	800d072 <_printf_float+0xc2>
 800d38a:	ee18 3a10 	vmov	r3, s16
 800d38e:	4652      	mov	r2, sl
 800d390:	4631      	mov	r1, r6
 800d392:	4628      	mov	r0, r5
 800d394:	47b8      	blx	r7
 800d396:	3001      	adds	r0, #1
 800d398:	f43f ae6b 	beq.w	800d072 <_printf_float+0xc2>
 800d39c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f7f3 fb68 	bl	8000a78 <__aeabi_dcmpeq>
 800d3a8:	b9d8      	cbnz	r0, 800d3e2 <_printf_float+0x432>
 800d3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ac:	f108 0201 	add.w	r2, r8, #1
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	4631      	mov	r1, r6
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	47b8      	blx	r7
 800d3b8:	3001      	adds	r0, #1
 800d3ba:	d10e      	bne.n	800d3da <_printf_float+0x42a>
 800d3bc:	e659      	b.n	800d072 <_printf_float+0xc2>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	4652      	mov	r2, sl
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	47b8      	blx	r7
 800d3c8:	3001      	adds	r0, #1
 800d3ca:	f43f ae52 	beq.w	800d072 <_printf_float+0xc2>
 800d3ce:	f108 0801 	add.w	r8, r8, #1
 800d3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	4543      	cmp	r3, r8
 800d3d8:	dcf1      	bgt.n	800d3be <_printf_float+0x40e>
 800d3da:	464b      	mov	r3, r9
 800d3dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d3e0:	e6dc      	b.n	800d19c <_printf_float+0x1ec>
 800d3e2:	f04f 0800 	mov.w	r8, #0
 800d3e6:	f104 0a1a 	add.w	sl, r4, #26
 800d3ea:	e7f2      	b.n	800d3d2 <_printf_float+0x422>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	4642      	mov	r2, r8
 800d3f0:	e7df      	b.n	800d3b2 <_printf_float+0x402>
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	464a      	mov	r2, r9
 800d3f6:	4631      	mov	r1, r6
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	47b8      	blx	r7
 800d3fc:	3001      	adds	r0, #1
 800d3fe:	f43f ae38 	beq.w	800d072 <_printf_float+0xc2>
 800d402:	f108 0801 	add.w	r8, r8, #1
 800d406:	68e3      	ldr	r3, [r4, #12]
 800d408:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d40a:	1a5b      	subs	r3, r3, r1
 800d40c:	4543      	cmp	r3, r8
 800d40e:	dcf0      	bgt.n	800d3f2 <_printf_float+0x442>
 800d410:	e6fa      	b.n	800d208 <_printf_float+0x258>
 800d412:	f04f 0800 	mov.w	r8, #0
 800d416:	f104 0919 	add.w	r9, r4, #25
 800d41a:	e7f4      	b.n	800d406 <_printf_float+0x456>

0800d41c <_printf_common>:
 800d41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d420:	4616      	mov	r6, r2
 800d422:	4699      	mov	r9, r3
 800d424:	688a      	ldr	r2, [r1, #8]
 800d426:	690b      	ldr	r3, [r1, #16]
 800d428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d42c:	4293      	cmp	r3, r2
 800d42e:	bfb8      	it	lt
 800d430:	4613      	movlt	r3, r2
 800d432:	6033      	str	r3, [r6, #0]
 800d434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d438:	4607      	mov	r7, r0
 800d43a:	460c      	mov	r4, r1
 800d43c:	b10a      	cbz	r2, 800d442 <_printf_common+0x26>
 800d43e:	3301      	adds	r3, #1
 800d440:	6033      	str	r3, [r6, #0]
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	0699      	lsls	r1, r3, #26
 800d446:	bf42      	ittt	mi
 800d448:	6833      	ldrmi	r3, [r6, #0]
 800d44a:	3302      	addmi	r3, #2
 800d44c:	6033      	strmi	r3, [r6, #0]
 800d44e:	6825      	ldr	r5, [r4, #0]
 800d450:	f015 0506 	ands.w	r5, r5, #6
 800d454:	d106      	bne.n	800d464 <_printf_common+0x48>
 800d456:	f104 0a19 	add.w	sl, r4, #25
 800d45a:	68e3      	ldr	r3, [r4, #12]
 800d45c:	6832      	ldr	r2, [r6, #0]
 800d45e:	1a9b      	subs	r3, r3, r2
 800d460:	42ab      	cmp	r3, r5
 800d462:	dc26      	bgt.n	800d4b2 <_printf_common+0x96>
 800d464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d468:	1e13      	subs	r3, r2, #0
 800d46a:	6822      	ldr	r2, [r4, #0]
 800d46c:	bf18      	it	ne
 800d46e:	2301      	movne	r3, #1
 800d470:	0692      	lsls	r2, r2, #26
 800d472:	d42b      	bmi.n	800d4cc <_printf_common+0xb0>
 800d474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d478:	4649      	mov	r1, r9
 800d47a:	4638      	mov	r0, r7
 800d47c:	47c0      	blx	r8
 800d47e:	3001      	adds	r0, #1
 800d480:	d01e      	beq.n	800d4c0 <_printf_common+0xa4>
 800d482:	6823      	ldr	r3, [r4, #0]
 800d484:	68e5      	ldr	r5, [r4, #12]
 800d486:	6832      	ldr	r2, [r6, #0]
 800d488:	f003 0306 	and.w	r3, r3, #6
 800d48c:	2b04      	cmp	r3, #4
 800d48e:	bf08      	it	eq
 800d490:	1aad      	subeq	r5, r5, r2
 800d492:	68a3      	ldr	r3, [r4, #8]
 800d494:	6922      	ldr	r2, [r4, #16]
 800d496:	bf0c      	ite	eq
 800d498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d49c:	2500      	movne	r5, #0
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	bfc4      	itt	gt
 800d4a2:	1a9b      	subgt	r3, r3, r2
 800d4a4:	18ed      	addgt	r5, r5, r3
 800d4a6:	2600      	movs	r6, #0
 800d4a8:	341a      	adds	r4, #26
 800d4aa:	42b5      	cmp	r5, r6
 800d4ac:	d11a      	bne.n	800d4e4 <_printf_common+0xc8>
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	e008      	b.n	800d4c4 <_printf_common+0xa8>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	4652      	mov	r2, sl
 800d4b6:	4649      	mov	r1, r9
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	47c0      	blx	r8
 800d4bc:	3001      	adds	r0, #1
 800d4be:	d103      	bne.n	800d4c8 <_printf_common+0xac>
 800d4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c8:	3501      	adds	r5, #1
 800d4ca:	e7c6      	b.n	800d45a <_printf_common+0x3e>
 800d4cc:	18e1      	adds	r1, r4, r3
 800d4ce:	1c5a      	adds	r2, r3, #1
 800d4d0:	2030      	movs	r0, #48	; 0x30
 800d4d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4d6:	4422      	add	r2, r4
 800d4d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4e0:	3302      	adds	r3, #2
 800d4e2:	e7c7      	b.n	800d474 <_printf_common+0x58>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	4622      	mov	r2, r4
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	47c0      	blx	r8
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	d0e6      	beq.n	800d4c0 <_printf_common+0xa4>
 800d4f2:	3601      	adds	r6, #1
 800d4f4:	e7d9      	b.n	800d4aa <_printf_common+0x8e>
	...

0800d4f8 <_printf_i>:
 800d4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4fc:	7e0f      	ldrb	r7, [r1, #24]
 800d4fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d500:	2f78      	cmp	r7, #120	; 0x78
 800d502:	4691      	mov	r9, r2
 800d504:	4680      	mov	r8, r0
 800d506:	460c      	mov	r4, r1
 800d508:	469a      	mov	sl, r3
 800d50a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d50e:	d807      	bhi.n	800d520 <_printf_i+0x28>
 800d510:	2f62      	cmp	r7, #98	; 0x62
 800d512:	d80a      	bhi.n	800d52a <_printf_i+0x32>
 800d514:	2f00      	cmp	r7, #0
 800d516:	f000 80d8 	beq.w	800d6ca <_printf_i+0x1d2>
 800d51a:	2f58      	cmp	r7, #88	; 0x58
 800d51c:	f000 80a3 	beq.w	800d666 <_printf_i+0x16e>
 800d520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d528:	e03a      	b.n	800d5a0 <_printf_i+0xa8>
 800d52a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d52e:	2b15      	cmp	r3, #21
 800d530:	d8f6      	bhi.n	800d520 <_printf_i+0x28>
 800d532:	a101      	add	r1, pc, #4	; (adr r1, 800d538 <_printf_i+0x40>)
 800d534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d538:	0800d591 	.word	0x0800d591
 800d53c:	0800d5a5 	.word	0x0800d5a5
 800d540:	0800d521 	.word	0x0800d521
 800d544:	0800d521 	.word	0x0800d521
 800d548:	0800d521 	.word	0x0800d521
 800d54c:	0800d521 	.word	0x0800d521
 800d550:	0800d5a5 	.word	0x0800d5a5
 800d554:	0800d521 	.word	0x0800d521
 800d558:	0800d521 	.word	0x0800d521
 800d55c:	0800d521 	.word	0x0800d521
 800d560:	0800d521 	.word	0x0800d521
 800d564:	0800d6b1 	.word	0x0800d6b1
 800d568:	0800d5d5 	.word	0x0800d5d5
 800d56c:	0800d693 	.word	0x0800d693
 800d570:	0800d521 	.word	0x0800d521
 800d574:	0800d521 	.word	0x0800d521
 800d578:	0800d6d3 	.word	0x0800d6d3
 800d57c:	0800d521 	.word	0x0800d521
 800d580:	0800d5d5 	.word	0x0800d5d5
 800d584:	0800d521 	.word	0x0800d521
 800d588:	0800d521 	.word	0x0800d521
 800d58c:	0800d69b 	.word	0x0800d69b
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	1d1a      	adds	r2, r3, #4
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	602a      	str	r2, [r5, #0]
 800d598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d59c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e0a3      	b.n	800d6ec <_printf_i+0x1f4>
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	6829      	ldr	r1, [r5, #0]
 800d5a8:	0606      	lsls	r6, r0, #24
 800d5aa:	f101 0304 	add.w	r3, r1, #4
 800d5ae:	d50a      	bpl.n	800d5c6 <_printf_i+0xce>
 800d5b0:	680e      	ldr	r6, [r1, #0]
 800d5b2:	602b      	str	r3, [r5, #0]
 800d5b4:	2e00      	cmp	r6, #0
 800d5b6:	da03      	bge.n	800d5c0 <_printf_i+0xc8>
 800d5b8:	232d      	movs	r3, #45	; 0x2d
 800d5ba:	4276      	negs	r6, r6
 800d5bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c0:	485e      	ldr	r0, [pc, #376]	; (800d73c <_printf_i+0x244>)
 800d5c2:	230a      	movs	r3, #10
 800d5c4:	e019      	b.n	800d5fa <_printf_i+0x102>
 800d5c6:	680e      	ldr	r6, [r1, #0]
 800d5c8:	602b      	str	r3, [r5, #0]
 800d5ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5ce:	bf18      	it	ne
 800d5d0:	b236      	sxthne	r6, r6
 800d5d2:	e7ef      	b.n	800d5b4 <_printf_i+0xbc>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	6820      	ldr	r0, [r4, #0]
 800d5d8:	1d19      	adds	r1, r3, #4
 800d5da:	6029      	str	r1, [r5, #0]
 800d5dc:	0601      	lsls	r1, r0, #24
 800d5de:	d501      	bpl.n	800d5e4 <_printf_i+0xec>
 800d5e0:	681e      	ldr	r6, [r3, #0]
 800d5e2:	e002      	b.n	800d5ea <_printf_i+0xf2>
 800d5e4:	0646      	lsls	r6, r0, #25
 800d5e6:	d5fb      	bpl.n	800d5e0 <_printf_i+0xe8>
 800d5e8:	881e      	ldrh	r6, [r3, #0]
 800d5ea:	4854      	ldr	r0, [pc, #336]	; (800d73c <_printf_i+0x244>)
 800d5ec:	2f6f      	cmp	r7, #111	; 0x6f
 800d5ee:	bf0c      	ite	eq
 800d5f0:	2308      	moveq	r3, #8
 800d5f2:	230a      	movne	r3, #10
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5fa:	6865      	ldr	r5, [r4, #4]
 800d5fc:	60a5      	str	r5, [r4, #8]
 800d5fe:	2d00      	cmp	r5, #0
 800d600:	bfa2      	ittt	ge
 800d602:	6821      	ldrge	r1, [r4, #0]
 800d604:	f021 0104 	bicge.w	r1, r1, #4
 800d608:	6021      	strge	r1, [r4, #0]
 800d60a:	b90e      	cbnz	r6, 800d610 <_printf_i+0x118>
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	d04d      	beq.n	800d6ac <_printf_i+0x1b4>
 800d610:	4615      	mov	r5, r2
 800d612:	fbb6 f1f3 	udiv	r1, r6, r3
 800d616:	fb03 6711 	mls	r7, r3, r1, r6
 800d61a:	5dc7      	ldrb	r7, [r0, r7]
 800d61c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d620:	4637      	mov	r7, r6
 800d622:	42bb      	cmp	r3, r7
 800d624:	460e      	mov	r6, r1
 800d626:	d9f4      	bls.n	800d612 <_printf_i+0x11a>
 800d628:	2b08      	cmp	r3, #8
 800d62a:	d10b      	bne.n	800d644 <_printf_i+0x14c>
 800d62c:	6823      	ldr	r3, [r4, #0]
 800d62e:	07de      	lsls	r6, r3, #31
 800d630:	d508      	bpl.n	800d644 <_printf_i+0x14c>
 800d632:	6923      	ldr	r3, [r4, #16]
 800d634:	6861      	ldr	r1, [r4, #4]
 800d636:	4299      	cmp	r1, r3
 800d638:	bfde      	ittt	le
 800d63a:	2330      	movle	r3, #48	; 0x30
 800d63c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d640:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d644:	1b52      	subs	r2, r2, r5
 800d646:	6122      	str	r2, [r4, #16]
 800d648:	f8cd a000 	str.w	sl, [sp]
 800d64c:	464b      	mov	r3, r9
 800d64e:	aa03      	add	r2, sp, #12
 800d650:	4621      	mov	r1, r4
 800d652:	4640      	mov	r0, r8
 800d654:	f7ff fee2 	bl	800d41c <_printf_common>
 800d658:	3001      	adds	r0, #1
 800d65a:	d14c      	bne.n	800d6f6 <_printf_i+0x1fe>
 800d65c:	f04f 30ff 	mov.w	r0, #4294967295
 800d660:	b004      	add	sp, #16
 800d662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d666:	4835      	ldr	r0, [pc, #212]	; (800d73c <_printf_i+0x244>)
 800d668:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d66c:	6829      	ldr	r1, [r5, #0]
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	f851 6b04 	ldr.w	r6, [r1], #4
 800d674:	6029      	str	r1, [r5, #0]
 800d676:	061d      	lsls	r5, r3, #24
 800d678:	d514      	bpl.n	800d6a4 <_printf_i+0x1ac>
 800d67a:	07df      	lsls	r7, r3, #31
 800d67c:	bf44      	itt	mi
 800d67e:	f043 0320 	orrmi.w	r3, r3, #32
 800d682:	6023      	strmi	r3, [r4, #0]
 800d684:	b91e      	cbnz	r6, 800d68e <_printf_i+0x196>
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	f023 0320 	bic.w	r3, r3, #32
 800d68c:	6023      	str	r3, [r4, #0]
 800d68e:	2310      	movs	r3, #16
 800d690:	e7b0      	b.n	800d5f4 <_printf_i+0xfc>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	f043 0320 	orr.w	r3, r3, #32
 800d698:	6023      	str	r3, [r4, #0]
 800d69a:	2378      	movs	r3, #120	; 0x78
 800d69c:	4828      	ldr	r0, [pc, #160]	; (800d740 <_printf_i+0x248>)
 800d69e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6a2:	e7e3      	b.n	800d66c <_printf_i+0x174>
 800d6a4:	0659      	lsls	r1, r3, #25
 800d6a6:	bf48      	it	mi
 800d6a8:	b2b6      	uxthmi	r6, r6
 800d6aa:	e7e6      	b.n	800d67a <_printf_i+0x182>
 800d6ac:	4615      	mov	r5, r2
 800d6ae:	e7bb      	b.n	800d628 <_printf_i+0x130>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	6826      	ldr	r6, [r4, #0]
 800d6b4:	6961      	ldr	r1, [r4, #20]
 800d6b6:	1d18      	adds	r0, r3, #4
 800d6b8:	6028      	str	r0, [r5, #0]
 800d6ba:	0635      	lsls	r5, r6, #24
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	d501      	bpl.n	800d6c4 <_printf_i+0x1cc>
 800d6c0:	6019      	str	r1, [r3, #0]
 800d6c2:	e002      	b.n	800d6ca <_printf_i+0x1d2>
 800d6c4:	0670      	lsls	r0, r6, #25
 800d6c6:	d5fb      	bpl.n	800d6c0 <_printf_i+0x1c8>
 800d6c8:	8019      	strh	r1, [r3, #0]
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	6123      	str	r3, [r4, #16]
 800d6ce:	4615      	mov	r5, r2
 800d6d0:	e7ba      	b.n	800d648 <_printf_i+0x150>
 800d6d2:	682b      	ldr	r3, [r5, #0]
 800d6d4:	1d1a      	adds	r2, r3, #4
 800d6d6:	602a      	str	r2, [r5, #0]
 800d6d8:	681d      	ldr	r5, [r3, #0]
 800d6da:	6862      	ldr	r2, [r4, #4]
 800d6dc:	2100      	movs	r1, #0
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f7f2 fd56 	bl	8000190 <memchr>
 800d6e4:	b108      	cbz	r0, 800d6ea <_printf_i+0x1f2>
 800d6e6:	1b40      	subs	r0, r0, r5
 800d6e8:	6060      	str	r0, [r4, #4]
 800d6ea:	6863      	ldr	r3, [r4, #4]
 800d6ec:	6123      	str	r3, [r4, #16]
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6f4:	e7a8      	b.n	800d648 <_printf_i+0x150>
 800d6f6:	6923      	ldr	r3, [r4, #16]
 800d6f8:	462a      	mov	r2, r5
 800d6fa:	4649      	mov	r1, r9
 800d6fc:	4640      	mov	r0, r8
 800d6fe:	47d0      	blx	sl
 800d700:	3001      	adds	r0, #1
 800d702:	d0ab      	beq.n	800d65c <_printf_i+0x164>
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	079b      	lsls	r3, r3, #30
 800d708:	d413      	bmi.n	800d732 <_printf_i+0x23a>
 800d70a:	68e0      	ldr	r0, [r4, #12]
 800d70c:	9b03      	ldr	r3, [sp, #12]
 800d70e:	4298      	cmp	r0, r3
 800d710:	bfb8      	it	lt
 800d712:	4618      	movlt	r0, r3
 800d714:	e7a4      	b.n	800d660 <_printf_i+0x168>
 800d716:	2301      	movs	r3, #1
 800d718:	4632      	mov	r2, r6
 800d71a:	4649      	mov	r1, r9
 800d71c:	4640      	mov	r0, r8
 800d71e:	47d0      	blx	sl
 800d720:	3001      	adds	r0, #1
 800d722:	d09b      	beq.n	800d65c <_printf_i+0x164>
 800d724:	3501      	adds	r5, #1
 800d726:	68e3      	ldr	r3, [r4, #12]
 800d728:	9903      	ldr	r1, [sp, #12]
 800d72a:	1a5b      	subs	r3, r3, r1
 800d72c:	42ab      	cmp	r3, r5
 800d72e:	dcf2      	bgt.n	800d716 <_printf_i+0x21e>
 800d730:	e7eb      	b.n	800d70a <_printf_i+0x212>
 800d732:	2500      	movs	r5, #0
 800d734:	f104 0619 	add.w	r6, r4, #25
 800d738:	e7f5      	b.n	800d726 <_printf_i+0x22e>
 800d73a:	bf00      	nop
 800d73c:	08011906 	.word	0x08011906
 800d740:	08011917 	.word	0x08011917

0800d744 <_scanf_float>:
 800d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d748:	b087      	sub	sp, #28
 800d74a:	4617      	mov	r7, r2
 800d74c:	9303      	str	r3, [sp, #12]
 800d74e:	688b      	ldr	r3, [r1, #8]
 800d750:	1e5a      	subs	r2, r3, #1
 800d752:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d756:	bf83      	ittte	hi
 800d758:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d75c:	195b      	addhi	r3, r3, r5
 800d75e:	9302      	strhi	r3, [sp, #8]
 800d760:	2300      	movls	r3, #0
 800d762:	bf86      	itte	hi
 800d764:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d768:	608b      	strhi	r3, [r1, #8]
 800d76a:	9302      	strls	r3, [sp, #8]
 800d76c:	680b      	ldr	r3, [r1, #0]
 800d76e:	468b      	mov	fp, r1
 800d770:	2500      	movs	r5, #0
 800d772:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d776:	f84b 3b1c 	str.w	r3, [fp], #28
 800d77a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d77e:	4680      	mov	r8, r0
 800d780:	460c      	mov	r4, r1
 800d782:	465e      	mov	r6, fp
 800d784:	46aa      	mov	sl, r5
 800d786:	46a9      	mov	r9, r5
 800d788:	9501      	str	r5, [sp, #4]
 800d78a:	68a2      	ldr	r2, [r4, #8]
 800d78c:	b152      	cbz	r2, 800d7a4 <_scanf_float+0x60>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	2b4e      	cmp	r3, #78	; 0x4e
 800d794:	d864      	bhi.n	800d860 <_scanf_float+0x11c>
 800d796:	2b40      	cmp	r3, #64	; 0x40
 800d798:	d83c      	bhi.n	800d814 <_scanf_float+0xd0>
 800d79a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d79e:	b2c8      	uxtb	r0, r1
 800d7a0:	280e      	cmp	r0, #14
 800d7a2:	d93a      	bls.n	800d81a <_scanf_float+0xd6>
 800d7a4:	f1b9 0f00 	cmp.w	r9, #0
 800d7a8:	d003      	beq.n	800d7b2 <_scanf_float+0x6e>
 800d7aa:	6823      	ldr	r3, [r4, #0]
 800d7ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7b6:	f1ba 0f01 	cmp.w	sl, #1
 800d7ba:	f200 8113 	bhi.w	800d9e4 <_scanf_float+0x2a0>
 800d7be:	455e      	cmp	r6, fp
 800d7c0:	f200 8105 	bhi.w	800d9ce <_scanf_float+0x28a>
 800d7c4:	2501      	movs	r5, #1
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	b007      	add	sp, #28
 800d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d7d2:	2a0d      	cmp	r2, #13
 800d7d4:	d8e6      	bhi.n	800d7a4 <_scanf_float+0x60>
 800d7d6:	a101      	add	r1, pc, #4	; (adr r1, 800d7dc <_scanf_float+0x98>)
 800d7d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d7dc:	0800d91b 	.word	0x0800d91b
 800d7e0:	0800d7a5 	.word	0x0800d7a5
 800d7e4:	0800d7a5 	.word	0x0800d7a5
 800d7e8:	0800d7a5 	.word	0x0800d7a5
 800d7ec:	0800d97b 	.word	0x0800d97b
 800d7f0:	0800d953 	.word	0x0800d953
 800d7f4:	0800d7a5 	.word	0x0800d7a5
 800d7f8:	0800d7a5 	.word	0x0800d7a5
 800d7fc:	0800d929 	.word	0x0800d929
 800d800:	0800d7a5 	.word	0x0800d7a5
 800d804:	0800d7a5 	.word	0x0800d7a5
 800d808:	0800d7a5 	.word	0x0800d7a5
 800d80c:	0800d7a5 	.word	0x0800d7a5
 800d810:	0800d8e1 	.word	0x0800d8e1
 800d814:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d818:	e7db      	b.n	800d7d2 <_scanf_float+0x8e>
 800d81a:	290e      	cmp	r1, #14
 800d81c:	d8c2      	bhi.n	800d7a4 <_scanf_float+0x60>
 800d81e:	a001      	add	r0, pc, #4	; (adr r0, 800d824 <_scanf_float+0xe0>)
 800d820:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d824:	0800d8d3 	.word	0x0800d8d3
 800d828:	0800d7a5 	.word	0x0800d7a5
 800d82c:	0800d8d3 	.word	0x0800d8d3
 800d830:	0800d967 	.word	0x0800d967
 800d834:	0800d7a5 	.word	0x0800d7a5
 800d838:	0800d881 	.word	0x0800d881
 800d83c:	0800d8bd 	.word	0x0800d8bd
 800d840:	0800d8bd 	.word	0x0800d8bd
 800d844:	0800d8bd 	.word	0x0800d8bd
 800d848:	0800d8bd 	.word	0x0800d8bd
 800d84c:	0800d8bd 	.word	0x0800d8bd
 800d850:	0800d8bd 	.word	0x0800d8bd
 800d854:	0800d8bd 	.word	0x0800d8bd
 800d858:	0800d8bd 	.word	0x0800d8bd
 800d85c:	0800d8bd 	.word	0x0800d8bd
 800d860:	2b6e      	cmp	r3, #110	; 0x6e
 800d862:	d809      	bhi.n	800d878 <_scanf_float+0x134>
 800d864:	2b60      	cmp	r3, #96	; 0x60
 800d866:	d8b2      	bhi.n	800d7ce <_scanf_float+0x8a>
 800d868:	2b54      	cmp	r3, #84	; 0x54
 800d86a:	d077      	beq.n	800d95c <_scanf_float+0x218>
 800d86c:	2b59      	cmp	r3, #89	; 0x59
 800d86e:	d199      	bne.n	800d7a4 <_scanf_float+0x60>
 800d870:	2d07      	cmp	r5, #7
 800d872:	d197      	bne.n	800d7a4 <_scanf_float+0x60>
 800d874:	2508      	movs	r5, #8
 800d876:	e029      	b.n	800d8cc <_scanf_float+0x188>
 800d878:	2b74      	cmp	r3, #116	; 0x74
 800d87a:	d06f      	beq.n	800d95c <_scanf_float+0x218>
 800d87c:	2b79      	cmp	r3, #121	; 0x79
 800d87e:	e7f6      	b.n	800d86e <_scanf_float+0x12a>
 800d880:	6821      	ldr	r1, [r4, #0]
 800d882:	05c8      	lsls	r0, r1, #23
 800d884:	d51a      	bpl.n	800d8bc <_scanf_float+0x178>
 800d886:	9b02      	ldr	r3, [sp, #8]
 800d888:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d88c:	6021      	str	r1, [r4, #0]
 800d88e:	f109 0901 	add.w	r9, r9, #1
 800d892:	b11b      	cbz	r3, 800d89c <_scanf_float+0x158>
 800d894:	3b01      	subs	r3, #1
 800d896:	3201      	adds	r2, #1
 800d898:	9302      	str	r3, [sp, #8]
 800d89a:	60a2      	str	r2, [r4, #8]
 800d89c:	68a3      	ldr	r3, [r4, #8]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	60a3      	str	r3, [r4, #8]
 800d8a2:	6923      	ldr	r3, [r4, #16]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	6123      	str	r3, [r4, #16]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	f340 8084 	ble.w	800d9bc <_scanf_float+0x278>
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	603b      	str	r3, [r7, #0]
 800d8ba:	e766      	b.n	800d78a <_scanf_float+0x46>
 800d8bc:	eb1a 0f05 	cmn.w	sl, r5
 800d8c0:	f47f af70 	bne.w	800d7a4 <_scanf_float+0x60>
 800d8c4:	6822      	ldr	r2, [r4, #0]
 800d8c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d8ca:	6022      	str	r2, [r4, #0]
 800d8cc:	f806 3b01 	strb.w	r3, [r6], #1
 800d8d0:	e7e4      	b.n	800d89c <_scanf_float+0x158>
 800d8d2:	6822      	ldr	r2, [r4, #0]
 800d8d4:	0610      	lsls	r0, r2, #24
 800d8d6:	f57f af65 	bpl.w	800d7a4 <_scanf_float+0x60>
 800d8da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d8de:	e7f4      	b.n	800d8ca <_scanf_float+0x186>
 800d8e0:	f1ba 0f00 	cmp.w	sl, #0
 800d8e4:	d10e      	bne.n	800d904 <_scanf_float+0x1c0>
 800d8e6:	f1b9 0f00 	cmp.w	r9, #0
 800d8ea:	d10e      	bne.n	800d90a <_scanf_float+0x1c6>
 800d8ec:	6822      	ldr	r2, [r4, #0]
 800d8ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d8f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d8f6:	d108      	bne.n	800d90a <_scanf_float+0x1c6>
 800d8f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d8fc:	6022      	str	r2, [r4, #0]
 800d8fe:	f04f 0a01 	mov.w	sl, #1
 800d902:	e7e3      	b.n	800d8cc <_scanf_float+0x188>
 800d904:	f1ba 0f02 	cmp.w	sl, #2
 800d908:	d055      	beq.n	800d9b6 <_scanf_float+0x272>
 800d90a:	2d01      	cmp	r5, #1
 800d90c:	d002      	beq.n	800d914 <_scanf_float+0x1d0>
 800d90e:	2d04      	cmp	r5, #4
 800d910:	f47f af48 	bne.w	800d7a4 <_scanf_float+0x60>
 800d914:	3501      	adds	r5, #1
 800d916:	b2ed      	uxtb	r5, r5
 800d918:	e7d8      	b.n	800d8cc <_scanf_float+0x188>
 800d91a:	f1ba 0f01 	cmp.w	sl, #1
 800d91e:	f47f af41 	bne.w	800d7a4 <_scanf_float+0x60>
 800d922:	f04f 0a02 	mov.w	sl, #2
 800d926:	e7d1      	b.n	800d8cc <_scanf_float+0x188>
 800d928:	b97d      	cbnz	r5, 800d94a <_scanf_float+0x206>
 800d92a:	f1b9 0f00 	cmp.w	r9, #0
 800d92e:	f47f af3c 	bne.w	800d7aa <_scanf_float+0x66>
 800d932:	6822      	ldr	r2, [r4, #0]
 800d934:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d938:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d93c:	f47f af39 	bne.w	800d7b2 <_scanf_float+0x6e>
 800d940:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d944:	6022      	str	r2, [r4, #0]
 800d946:	2501      	movs	r5, #1
 800d948:	e7c0      	b.n	800d8cc <_scanf_float+0x188>
 800d94a:	2d03      	cmp	r5, #3
 800d94c:	d0e2      	beq.n	800d914 <_scanf_float+0x1d0>
 800d94e:	2d05      	cmp	r5, #5
 800d950:	e7de      	b.n	800d910 <_scanf_float+0x1cc>
 800d952:	2d02      	cmp	r5, #2
 800d954:	f47f af26 	bne.w	800d7a4 <_scanf_float+0x60>
 800d958:	2503      	movs	r5, #3
 800d95a:	e7b7      	b.n	800d8cc <_scanf_float+0x188>
 800d95c:	2d06      	cmp	r5, #6
 800d95e:	f47f af21 	bne.w	800d7a4 <_scanf_float+0x60>
 800d962:	2507      	movs	r5, #7
 800d964:	e7b2      	b.n	800d8cc <_scanf_float+0x188>
 800d966:	6822      	ldr	r2, [r4, #0]
 800d968:	0591      	lsls	r1, r2, #22
 800d96a:	f57f af1b 	bpl.w	800d7a4 <_scanf_float+0x60>
 800d96e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d972:	6022      	str	r2, [r4, #0]
 800d974:	f8cd 9004 	str.w	r9, [sp, #4]
 800d978:	e7a8      	b.n	800d8cc <_scanf_float+0x188>
 800d97a:	6822      	ldr	r2, [r4, #0]
 800d97c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d980:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d984:	d006      	beq.n	800d994 <_scanf_float+0x250>
 800d986:	0550      	lsls	r0, r2, #21
 800d988:	f57f af0c 	bpl.w	800d7a4 <_scanf_float+0x60>
 800d98c:	f1b9 0f00 	cmp.w	r9, #0
 800d990:	f43f af0f 	beq.w	800d7b2 <_scanf_float+0x6e>
 800d994:	0591      	lsls	r1, r2, #22
 800d996:	bf58      	it	pl
 800d998:	9901      	ldrpl	r1, [sp, #4]
 800d99a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d99e:	bf58      	it	pl
 800d9a0:	eba9 0101 	subpl.w	r1, r9, r1
 800d9a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d9a8:	bf58      	it	pl
 800d9aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d9ae:	6022      	str	r2, [r4, #0]
 800d9b0:	f04f 0900 	mov.w	r9, #0
 800d9b4:	e78a      	b.n	800d8cc <_scanf_float+0x188>
 800d9b6:	f04f 0a03 	mov.w	sl, #3
 800d9ba:	e787      	b.n	800d8cc <_scanf_float+0x188>
 800d9bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d9c0:	4639      	mov	r1, r7
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4798      	blx	r3
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	f43f aedf 	beq.w	800d78a <_scanf_float+0x46>
 800d9cc:	e6ea      	b.n	800d7a4 <_scanf_float+0x60>
 800d9ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9d6:	463a      	mov	r2, r7
 800d9d8:	4640      	mov	r0, r8
 800d9da:	4798      	blx	r3
 800d9dc:	6923      	ldr	r3, [r4, #16]
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	6123      	str	r3, [r4, #16]
 800d9e2:	e6ec      	b.n	800d7be <_scanf_float+0x7a>
 800d9e4:	1e6b      	subs	r3, r5, #1
 800d9e6:	2b06      	cmp	r3, #6
 800d9e8:	d825      	bhi.n	800da36 <_scanf_float+0x2f2>
 800d9ea:	2d02      	cmp	r5, #2
 800d9ec:	d836      	bhi.n	800da5c <_scanf_float+0x318>
 800d9ee:	455e      	cmp	r6, fp
 800d9f0:	f67f aee8 	bls.w	800d7c4 <_scanf_float+0x80>
 800d9f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9fc:	463a      	mov	r2, r7
 800d9fe:	4640      	mov	r0, r8
 800da00:	4798      	blx	r3
 800da02:	6923      	ldr	r3, [r4, #16]
 800da04:	3b01      	subs	r3, #1
 800da06:	6123      	str	r3, [r4, #16]
 800da08:	e7f1      	b.n	800d9ee <_scanf_float+0x2aa>
 800da0a:	9802      	ldr	r0, [sp, #8]
 800da0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800da14:	9002      	str	r0, [sp, #8]
 800da16:	463a      	mov	r2, r7
 800da18:	4640      	mov	r0, r8
 800da1a:	4798      	blx	r3
 800da1c:	6923      	ldr	r3, [r4, #16]
 800da1e:	3b01      	subs	r3, #1
 800da20:	6123      	str	r3, [r4, #16]
 800da22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da26:	fa5f fa8a 	uxtb.w	sl, sl
 800da2a:	f1ba 0f02 	cmp.w	sl, #2
 800da2e:	d1ec      	bne.n	800da0a <_scanf_float+0x2c6>
 800da30:	3d03      	subs	r5, #3
 800da32:	b2ed      	uxtb	r5, r5
 800da34:	1b76      	subs	r6, r6, r5
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	05da      	lsls	r2, r3, #23
 800da3a:	d52f      	bpl.n	800da9c <_scanf_float+0x358>
 800da3c:	055b      	lsls	r3, r3, #21
 800da3e:	d510      	bpl.n	800da62 <_scanf_float+0x31e>
 800da40:	455e      	cmp	r6, fp
 800da42:	f67f aebf 	bls.w	800d7c4 <_scanf_float+0x80>
 800da46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da4e:	463a      	mov	r2, r7
 800da50:	4640      	mov	r0, r8
 800da52:	4798      	blx	r3
 800da54:	6923      	ldr	r3, [r4, #16]
 800da56:	3b01      	subs	r3, #1
 800da58:	6123      	str	r3, [r4, #16]
 800da5a:	e7f1      	b.n	800da40 <_scanf_float+0x2fc>
 800da5c:	46aa      	mov	sl, r5
 800da5e:	9602      	str	r6, [sp, #8]
 800da60:	e7df      	b.n	800da22 <_scanf_float+0x2de>
 800da62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800da66:	6923      	ldr	r3, [r4, #16]
 800da68:	2965      	cmp	r1, #101	; 0x65
 800da6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800da6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800da72:	6123      	str	r3, [r4, #16]
 800da74:	d00c      	beq.n	800da90 <_scanf_float+0x34c>
 800da76:	2945      	cmp	r1, #69	; 0x45
 800da78:	d00a      	beq.n	800da90 <_scanf_float+0x34c>
 800da7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da7e:	463a      	mov	r2, r7
 800da80:	4640      	mov	r0, r8
 800da82:	4798      	blx	r3
 800da84:	6923      	ldr	r3, [r4, #16]
 800da86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	1eb5      	subs	r5, r6, #2
 800da8e:	6123      	str	r3, [r4, #16]
 800da90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da94:	463a      	mov	r2, r7
 800da96:	4640      	mov	r0, r8
 800da98:	4798      	blx	r3
 800da9a:	462e      	mov	r6, r5
 800da9c:	6825      	ldr	r5, [r4, #0]
 800da9e:	f015 0510 	ands.w	r5, r5, #16
 800daa2:	d159      	bne.n	800db58 <_scanf_float+0x414>
 800daa4:	7035      	strb	r5, [r6, #0]
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800daac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dab0:	d11b      	bne.n	800daea <_scanf_float+0x3a6>
 800dab2:	9b01      	ldr	r3, [sp, #4]
 800dab4:	454b      	cmp	r3, r9
 800dab6:	eba3 0209 	sub.w	r2, r3, r9
 800daba:	d123      	bne.n	800db04 <_scanf_float+0x3c0>
 800dabc:	2200      	movs	r2, #0
 800dabe:	4659      	mov	r1, fp
 800dac0:	4640      	mov	r0, r8
 800dac2:	f000 fe97 	bl	800e7f4 <_strtod_r>
 800dac6:	6822      	ldr	r2, [r4, #0]
 800dac8:	9b03      	ldr	r3, [sp, #12]
 800daca:	f012 0f02 	tst.w	r2, #2
 800dace:	ec57 6b10 	vmov	r6, r7, d0
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	d021      	beq.n	800db1a <_scanf_float+0x3d6>
 800dad6:	9903      	ldr	r1, [sp, #12]
 800dad8:	1d1a      	adds	r2, r3, #4
 800dada:	600a      	str	r2, [r1, #0]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	e9c3 6700 	strd	r6, r7, [r3]
 800dae2:	68e3      	ldr	r3, [r4, #12]
 800dae4:	3301      	adds	r3, #1
 800dae6:	60e3      	str	r3, [r4, #12]
 800dae8:	e66d      	b.n	800d7c6 <_scanf_float+0x82>
 800daea:	9b04      	ldr	r3, [sp, #16]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d0e5      	beq.n	800dabc <_scanf_float+0x378>
 800daf0:	9905      	ldr	r1, [sp, #20]
 800daf2:	230a      	movs	r3, #10
 800daf4:	462a      	mov	r2, r5
 800daf6:	3101      	adds	r1, #1
 800daf8:	4640      	mov	r0, r8
 800dafa:	f000 ff03 	bl	800e904 <_strtol_r>
 800dafe:	9b04      	ldr	r3, [sp, #16]
 800db00:	9e05      	ldr	r6, [sp, #20]
 800db02:	1ac2      	subs	r2, r0, r3
 800db04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800db08:	429e      	cmp	r6, r3
 800db0a:	bf28      	it	cs
 800db0c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800db10:	4912      	ldr	r1, [pc, #72]	; (800db5c <_scanf_float+0x418>)
 800db12:	4630      	mov	r0, r6
 800db14:	f000 f82c 	bl	800db70 <siprintf>
 800db18:	e7d0      	b.n	800dabc <_scanf_float+0x378>
 800db1a:	9903      	ldr	r1, [sp, #12]
 800db1c:	f012 0f04 	tst.w	r2, #4
 800db20:	f103 0204 	add.w	r2, r3, #4
 800db24:	600a      	str	r2, [r1, #0]
 800db26:	d1d9      	bne.n	800dadc <_scanf_float+0x398>
 800db28:	f8d3 8000 	ldr.w	r8, [r3]
 800db2c:	ee10 2a10 	vmov	r2, s0
 800db30:	ee10 0a10 	vmov	r0, s0
 800db34:	463b      	mov	r3, r7
 800db36:	4639      	mov	r1, r7
 800db38:	f7f2 ffd0 	bl	8000adc <__aeabi_dcmpun>
 800db3c:	b128      	cbz	r0, 800db4a <_scanf_float+0x406>
 800db3e:	4808      	ldr	r0, [pc, #32]	; (800db60 <_scanf_float+0x41c>)
 800db40:	f000 f810 	bl	800db64 <nanf>
 800db44:	ed88 0a00 	vstr	s0, [r8]
 800db48:	e7cb      	b.n	800dae2 <_scanf_float+0x39e>
 800db4a:	4630      	mov	r0, r6
 800db4c:	4639      	mov	r1, r7
 800db4e:	f7f3 f823 	bl	8000b98 <__aeabi_d2f>
 800db52:	f8c8 0000 	str.w	r0, [r8]
 800db56:	e7c4      	b.n	800dae2 <_scanf_float+0x39e>
 800db58:	2500      	movs	r5, #0
 800db5a:	e634      	b.n	800d7c6 <_scanf_float+0x82>
 800db5c:	08011928 	.word	0x08011928
 800db60:	08011d30 	.word	0x08011d30

0800db64 <nanf>:
 800db64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800db6c <nanf+0x8>
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	7fc00000 	.word	0x7fc00000

0800db70 <siprintf>:
 800db70:	b40e      	push	{r1, r2, r3}
 800db72:	b500      	push	{lr}
 800db74:	b09c      	sub	sp, #112	; 0x70
 800db76:	ab1d      	add	r3, sp, #116	; 0x74
 800db78:	9002      	str	r0, [sp, #8]
 800db7a:	9006      	str	r0, [sp, #24]
 800db7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db80:	4809      	ldr	r0, [pc, #36]	; (800dba8 <siprintf+0x38>)
 800db82:	9107      	str	r1, [sp, #28]
 800db84:	9104      	str	r1, [sp, #16]
 800db86:	4909      	ldr	r1, [pc, #36]	; (800dbac <siprintf+0x3c>)
 800db88:	f853 2b04 	ldr.w	r2, [r3], #4
 800db8c:	9105      	str	r1, [sp, #20]
 800db8e:	6800      	ldr	r0, [r0, #0]
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	a902      	add	r1, sp, #8
 800db94:	f002 fee0 	bl	8010958 <_svfiprintf_r>
 800db98:	9b02      	ldr	r3, [sp, #8]
 800db9a:	2200      	movs	r2, #0
 800db9c:	701a      	strb	r2, [r3, #0]
 800db9e:	b01c      	add	sp, #112	; 0x70
 800dba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dba4:	b003      	add	sp, #12
 800dba6:	4770      	bx	lr
 800dba8:	20000190 	.word	0x20000190
 800dbac:	ffff0208 	.word	0xffff0208

0800dbb0 <sulp>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	460d      	mov	r5, r1
 800dbb6:	ec45 4b10 	vmov	d0, r4, r5
 800dbba:	4616      	mov	r6, r2
 800dbbc:	f002 fc2a 	bl	8010414 <__ulp>
 800dbc0:	ec51 0b10 	vmov	r0, r1, d0
 800dbc4:	b17e      	cbz	r6, 800dbe6 <sulp+0x36>
 800dbc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dbca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	dd09      	ble.n	800dbe6 <sulp+0x36>
 800dbd2:	051b      	lsls	r3, r3, #20
 800dbd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dbd8:	2400      	movs	r4, #0
 800dbda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dbde:	4622      	mov	r2, r4
 800dbe0:	462b      	mov	r3, r5
 800dbe2:	f7f2 fce1 	bl	80005a8 <__aeabi_dmul>
 800dbe6:	bd70      	pop	{r4, r5, r6, pc}

0800dbe8 <_strtod_l>:
 800dbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	ed2d 8b02 	vpush	{d8}
 800dbf0:	b09d      	sub	sp, #116	; 0x74
 800dbf2:	461f      	mov	r7, r3
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	9318      	str	r3, [sp, #96]	; 0x60
 800dbf8:	4ba2      	ldr	r3, [pc, #648]	; (800de84 <_strtod_l+0x29c>)
 800dbfa:	9213      	str	r2, [sp, #76]	; 0x4c
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	9305      	str	r3, [sp, #20]
 800dc00:	4604      	mov	r4, r0
 800dc02:	4618      	mov	r0, r3
 800dc04:	4688      	mov	r8, r1
 800dc06:	f7f2 fabb 	bl	8000180 <strlen>
 800dc0a:	f04f 0a00 	mov.w	sl, #0
 800dc0e:	4605      	mov	r5, r0
 800dc10:	f04f 0b00 	mov.w	fp, #0
 800dc14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dc18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc1a:	781a      	ldrb	r2, [r3, #0]
 800dc1c:	2a2b      	cmp	r2, #43	; 0x2b
 800dc1e:	d04e      	beq.n	800dcbe <_strtod_l+0xd6>
 800dc20:	d83b      	bhi.n	800dc9a <_strtod_l+0xb2>
 800dc22:	2a0d      	cmp	r2, #13
 800dc24:	d834      	bhi.n	800dc90 <_strtod_l+0xa8>
 800dc26:	2a08      	cmp	r2, #8
 800dc28:	d834      	bhi.n	800dc94 <_strtod_l+0xac>
 800dc2a:	2a00      	cmp	r2, #0
 800dc2c:	d03e      	beq.n	800dcac <_strtod_l+0xc4>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	930a      	str	r3, [sp, #40]	; 0x28
 800dc32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800dc34:	7833      	ldrb	r3, [r6, #0]
 800dc36:	2b30      	cmp	r3, #48	; 0x30
 800dc38:	f040 80b0 	bne.w	800dd9c <_strtod_l+0x1b4>
 800dc3c:	7873      	ldrb	r3, [r6, #1]
 800dc3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dc42:	2b58      	cmp	r3, #88	; 0x58
 800dc44:	d168      	bne.n	800dd18 <_strtod_l+0x130>
 800dc46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc48:	9301      	str	r3, [sp, #4]
 800dc4a:	ab18      	add	r3, sp, #96	; 0x60
 800dc4c:	9702      	str	r7, [sp, #8]
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	4a8d      	ldr	r2, [pc, #564]	; (800de88 <_strtod_l+0x2a0>)
 800dc52:	ab19      	add	r3, sp, #100	; 0x64
 800dc54:	a917      	add	r1, sp, #92	; 0x5c
 800dc56:	4620      	mov	r0, r4
 800dc58:	f001 fd44 	bl	800f6e4 <__gethex>
 800dc5c:	f010 0707 	ands.w	r7, r0, #7
 800dc60:	4605      	mov	r5, r0
 800dc62:	d005      	beq.n	800dc70 <_strtod_l+0x88>
 800dc64:	2f06      	cmp	r7, #6
 800dc66:	d12c      	bne.n	800dcc2 <_strtod_l+0xda>
 800dc68:	3601      	adds	r6, #1
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	9617      	str	r6, [sp, #92]	; 0x5c
 800dc6e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f040 8590 	bne.w	800e798 <_strtod_l+0xbb0>
 800dc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc7a:	b1eb      	cbz	r3, 800dcb8 <_strtod_l+0xd0>
 800dc7c:	4652      	mov	r2, sl
 800dc7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dc82:	ec43 2b10 	vmov	d0, r2, r3
 800dc86:	b01d      	add	sp, #116	; 0x74
 800dc88:	ecbd 8b02 	vpop	{d8}
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc90:	2a20      	cmp	r2, #32
 800dc92:	d1cc      	bne.n	800dc2e <_strtod_l+0x46>
 800dc94:	3301      	adds	r3, #1
 800dc96:	9317      	str	r3, [sp, #92]	; 0x5c
 800dc98:	e7be      	b.n	800dc18 <_strtod_l+0x30>
 800dc9a:	2a2d      	cmp	r2, #45	; 0x2d
 800dc9c:	d1c7      	bne.n	800dc2e <_strtod_l+0x46>
 800dc9e:	2201      	movs	r2, #1
 800dca0:	920a      	str	r2, [sp, #40]	; 0x28
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	9217      	str	r2, [sp, #92]	; 0x5c
 800dca6:	785b      	ldrb	r3, [r3, #1]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1c2      	bne.n	800dc32 <_strtod_l+0x4a>
 800dcac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dcae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f040 856e 	bne.w	800e794 <_strtod_l+0xbac>
 800dcb8:	4652      	mov	r2, sl
 800dcba:	465b      	mov	r3, fp
 800dcbc:	e7e1      	b.n	800dc82 <_strtod_l+0x9a>
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	e7ee      	b.n	800dca0 <_strtod_l+0xb8>
 800dcc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dcc4:	b13a      	cbz	r2, 800dcd6 <_strtod_l+0xee>
 800dcc6:	2135      	movs	r1, #53	; 0x35
 800dcc8:	a81a      	add	r0, sp, #104	; 0x68
 800dcca:	f002 fcae 	bl	801062a <__copybits>
 800dcce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f002 f86d 	bl	800fdb0 <_Bfree>
 800dcd6:	3f01      	subs	r7, #1
 800dcd8:	2f04      	cmp	r7, #4
 800dcda:	d806      	bhi.n	800dcea <_strtod_l+0x102>
 800dcdc:	e8df f007 	tbb	[pc, r7]
 800dce0:	1714030a 	.word	0x1714030a
 800dce4:	0a          	.byte	0x0a
 800dce5:	00          	.byte	0x00
 800dce6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800dcea:	0728      	lsls	r0, r5, #28
 800dcec:	d5c0      	bpl.n	800dc70 <_strtod_l+0x88>
 800dcee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dcf2:	e7bd      	b.n	800dc70 <_strtod_l+0x88>
 800dcf4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800dcf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dcfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dcfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dd02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dd06:	e7f0      	b.n	800dcea <_strtod_l+0x102>
 800dd08:	f8df b180 	ldr.w	fp, [pc, #384]	; 800de8c <_strtod_l+0x2a4>
 800dd0c:	e7ed      	b.n	800dcea <_strtod_l+0x102>
 800dd0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dd12:	f04f 3aff 	mov.w	sl, #4294967295
 800dd16:	e7e8      	b.n	800dcea <_strtod_l+0x102>
 800dd18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd1a:	1c5a      	adds	r2, r3, #1
 800dd1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800dd1e:	785b      	ldrb	r3, [r3, #1]
 800dd20:	2b30      	cmp	r3, #48	; 0x30
 800dd22:	d0f9      	beq.n	800dd18 <_strtod_l+0x130>
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d0a3      	beq.n	800dc70 <_strtod_l+0x88>
 800dd28:	2301      	movs	r3, #1
 800dd2a:	f04f 0900 	mov.w	r9, #0
 800dd2e:	9304      	str	r3, [sp, #16]
 800dd30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd32:	9308      	str	r3, [sp, #32]
 800dd34:	f8cd 901c 	str.w	r9, [sp, #28]
 800dd38:	464f      	mov	r7, r9
 800dd3a:	220a      	movs	r2, #10
 800dd3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dd3e:	7806      	ldrb	r6, [r0, #0]
 800dd40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dd44:	b2d9      	uxtb	r1, r3
 800dd46:	2909      	cmp	r1, #9
 800dd48:	d92a      	bls.n	800dda0 <_strtod_l+0x1b8>
 800dd4a:	9905      	ldr	r1, [sp, #20]
 800dd4c:	462a      	mov	r2, r5
 800dd4e:	f002 ff1b 	bl	8010b88 <strncmp>
 800dd52:	b398      	cbz	r0, 800ddbc <_strtod_l+0x1d4>
 800dd54:	2000      	movs	r0, #0
 800dd56:	4632      	mov	r2, r6
 800dd58:	463d      	mov	r5, r7
 800dd5a:	9005      	str	r0, [sp, #20]
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2a65      	cmp	r2, #101	; 0x65
 800dd60:	d001      	beq.n	800dd66 <_strtod_l+0x17e>
 800dd62:	2a45      	cmp	r2, #69	; 0x45
 800dd64:	d118      	bne.n	800dd98 <_strtod_l+0x1b0>
 800dd66:	b91d      	cbnz	r5, 800dd70 <_strtod_l+0x188>
 800dd68:	9a04      	ldr	r2, [sp, #16]
 800dd6a:	4302      	orrs	r2, r0
 800dd6c:	d09e      	beq.n	800dcac <_strtod_l+0xc4>
 800dd6e:	2500      	movs	r5, #0
 800dd70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800dd74:	f108 0201 	add.w	r2, r8, #1
 800dd78:	9217      	str	r2, [sp, #92]	; 0x5c
 800dd7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800dd7e:	2a2b      	cmp	r2, #43	; 0x2b
 800dd80:	d075      	beq.n	800de6e <_strtod_l+0x286>
 800dd82:	2a2d      	cmp	r2, #45	; 0x2d
 800dd84:	d07b      	beq.n	800de7e <_strtod_l+0x296>
 800dd86:	f04f 0c00 	mov.w	ip, #0
 800dd8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dd8e:	2909      	cmp	r1, #9
 800dd90:	f240 8082 	bls.w	800de98 <_strtod_l+0x2b0>
 800dd94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dd98:	2600      	movs	r6, #0
 800dd9a:	e09d      	b.n	800ded8 <_strtod_l+0x2f0>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e7c4      	b.n	800dd2a <_strtod_l+0x142>
 800dda0:	2f08      	cmp	r7, #8
 800dda2:	bfd8      	it	le
 800dda4:	9907      	ldrle	r1, [sp, #28]
 800dda6:	f100 0001 	add.w	r0, r0, #1
 800ddaa:	bfda      	itte	le
 800ddac:	fb02 3301 	mlale	r3, r2, r1, r3
 800ddb0:	9307      	strle	r3, [sp, #28]
 800ddb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ddb6:	3701      	adds	r7, #1
 800ddb8:	9017      	str	r0, [sp, #92]	; 0x5c
 800ddba:	e7bf      	b.n	800dd3c <_strtod_l+0x154>
 800ddbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddbe:	195a      	adds	r2, r3, r5
 800ddc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800ddc2:	5d5a      	ldrb	r2, [r3, r5]
 800ddc4:	2f00      	cmp	r7, #0
 800ddc6:	d037      	beq.n	800de38 <_strtod_l+0x250>
 800ddc8:	9005      	str	r0, [sp, #20]
 800ddca:	463d      	mov	r5, r7
 800ddcc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ddd0:	2b09      	cmp	r3, #9
 800ddd2:	d912      	bls.n	800ddfa <_strtod_l+0x212>
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e7c2      	b.n	800dd5e <_strtod_l+0x176>
 800ddd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddda:	1c5a      	adds	r2, r3, #1
 800dddc:	9217      	str	r2, [sp, #92]	; 0x5c
 800ddde:	785a      	ldrb	r2, [r3, #1]
 800dde0:	3001      	adds	r0, #1
 800dde2:	2a30      	cmp	r2, #48	; 0x30
 800dde4:	d0f8      	beq.n	800ddd8 <_strtod_l+0x1f0>
 800dde6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ddea:	2b08      	cmp	r3, #8
 800ddec:	f200 84d9 	bhi.w	800e7a2 <_strtod_l+0xbba>
 800ddf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddf2:	9005      	str	r0, [sp, #20]
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	9308      	str	r3, [sp, #32]
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	3a30      	subs	r2, #48	; 0x30
 800ddfc:	f100 0301 	add.w	r3, r0, #1
 800de00:	d014      	beq.n	800de2c <_strtod_l+0x244>
 800de02:	9905      	ldr	r1, [sp, #20]
 800de04:	4419      	add	r1, r3
 800de06:	9105      	str	r1, [sp, #20]
 800de08:	462b      	mov	r3, r5
 800de0a:	eb00 0e05 	add.w	lr, r0, r5
 800de0e:	210a      	movs	r1, #10
 800de10:	4573      	cmp	r3, lr
 800de12:	d113      	bne.n	800de3c <_strtod_l+0x254>
 800de14:	182b      	adds	r3, r5, r0
 800de16:	2b08      	cmp	r3, #8
 800de18:	f105 0501 	add.w	r5, r5, #1
 800de1c:	4405      	add	r5, r0
 800de1e:	dc1c      	bgt.n	800de5a <_strtod_l+0x272>
 800de20:	9907      	ldr	r1, [sp, #28]
 800de22:	230a      	movs	r3, #10
 800de24:	fb03 2301 	mla	r3, r3, r1, r2
 800de28:	9307      	str	r3, [sp, #28]
 800de2a:	2300      	movs	r3, #0
 800de2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800de2e:	1c51      	adds	r1, r2, #1
 800de30:	9117      	str	r1, [sp, #92]	; 0x5c
 800de32:	7852      	ldrb	r2, [r2, #1]
 800de34:	4618      	mov	r0, r3
 800de36:	e7c9      	b.n	800ddcc <_strtod_l+0x1e4>
 800de38:	4638      	mov	r0, r7
 800de3a:	e7d2      	b.n	800dde2 <_strtod_l+0x1fa>
 800de3c:	2b08      	cmp	r3, #8
 800de3e:	dc04      	bgt.n	800de4a <_strtod_l+0x262>
 800de40:	9e07      	ldr	r6, [sp, #28]
 800de42:	434e      	muls	r6, r1
 800de44:	9607      	str	r6, [sp, #28]
 800de46:	3301      	adds	r3, #1
 800de48:	e7e2      	b.n	800de10 <_strtod_l+0x228>
 800de4a:	f103 0c01 	add.w	ip, r3, #1
 800de4e:	f1bc 0f10 	cmp.w	ip, #16
 800de52:	bfd8      	it	le
 800de54:	fb01 f909 	mulle.w	r9, r1, r9
 800de58:	e7f5      	b.n	800de46 <_strtod_l+0x25e>
 800de5a:	2d10      	cmp	r5, #16
 800de5c:	bfdc      	itt	le
 800de5e:	230a      	movle	r3, #10
 800de60:	fb03 2909 	mlale	r9, r3, r9, r2
 800de64:	e7e1      	b.n	800de2a <_strtod_l+0x242>
 800de66:	2300      	movs	r3, #0
 800de68:	9305      	str	r3, [sp, #20]
 800de6a:	2301      	movs	r3, #1
 800de6c:	e77c      	b.n	800dd68 <_strtod_l+0x180>
 800de6e:	f04f 0c00 	mov.w	ip, #0
 800de72:	f108 0202 	add.w	r2, r8, #2
 800de76:	9217      	str	r2, [sp, #92]	; 0x5c
 800de78:	f898 2002 	ldrb.w	r2, [r8, #2]
 800de7c:	e785      	b.n	800dd8a <_strtod_l+0x1a2>
 800de7e:	f04f 0c01 	mov.w	ip, #1
 800de82:	e7f6      	b.n	800de72 <_strtod_l+0x28a>
 800de84:	08011b78 	.word	0x08011b78
 800de88:	08011930 	.word	0x08011930
 800de8c:	7ff00000 	.word	0x7ff00000
 800de90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800de92:	1c51      	adds	r1, r2, #1
 800de94:	9117      	str	r1, [sp, #92]	; 0x5c
 800de96:	7852      	ldrb	r2, [r2, #1]
 800de98:	2a30      	cmp	r2, #48	; 0x30
 800de9a:	d0f9      	beq.n	800de90 <_strtod_l+0x2a8>
 800de9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dea0:	2908      	cmp	r1, #8
 800dea2:	f63f af79 	bhi.w	800dd98 <_strtod_l+0x1b0>
 800dea6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800deaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800deac:	9206      	str	r2, [sp, #24]
 800deae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800deb0:	1c51      	adds	r1, r2, #1
 800deb2:	9117      	str	r1, [sp, #92]	; 0x5c
 800deb4:	7852      	ldrb	r2, [r2, #1]
 800deb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800deba:	2e09      	cmp	r6, #9
 800debc:	d937      	bls.n	800df2e <_strtod_l+0x346>
 800debe:	9e06      	ldr	r6, [sp, #24]
 800dec0:	1b89      	subs	r1, r1, r6
 800dec2:	2908      	cmp	r1, #8
 800dec4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800dec8:	dc02      	bgt.n	800ded0 <_strtod_l+0x2e8>
 800deca:	4576      	cmp	r6, lr
 800decc:	bfa8      	it	ge
 800dece:	4676      	movge	r6, lr
 800ded0:	f1bc 0f00 	cmp.w	ip, #0
 800ded4:	d000      	beq.n	800ded8 <_strtod_l+0x2f0>
 800ded6:	4276      	negs	r6, r6
 800ded8:	2d00      	cmp	r5, #0
 800deda:	d14d      	bne.n	800df78 <_strtod_l+0x390>
 800dedc:	9904      	ldr	r1, [sp, #16]
 800dede:	4301      	orrs	r1, r0
 800dee0:	f47f aec6 	bne.w	800dc70 <_strtod_l+0x88>
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f47f aee1 	bne.w	800dcac <_strtod_l+0xc4>
 800deea:	2a69      	cmp	r2, #105	; 0x69
 800deec:	d027      	beq.n	800df3e <_strtod_l+0x356>
 800deee:	dc24      	bgt.n	800df3a <_strtod_l+0x352>
 800def0:	2a49      	cmp	r2, #73	; 0x49
 800def2:	d024      	beq.n	800df3e <_strtod_l+0x356>
 800def4:	2a4e      	cmp	r2, #78	; 0x4e
 800def6:	f47f aed9 	bne.w	800dcac <_strtod_l+0xc4>
 800defa:	499f      	ldr	r1, [pc, #636]	; (800e178 <_strtod_l+0x590>)
 800defc:	a817      	add	r0, sp, #92	; 0x5c
 800defe:	f001 fe49 	bl	800fb94 <__match>
 800df02:	2800      	cmp	r0, #0
 800df04:	f43f aed2 	beq.w	800dcac <_strtod_l+0xc4>
 800df08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	2b28      	cmp	r3, #40	; 0x28
 800df0e:	d12d      	bne.n	800df6c <_strtod_l+0x384>
 800df10:	499a      	ldr	r1, [pc, #616]	; (800e17c <_strtod_l+0x594>)
 800df12:	aa1a      	add	r2, sp, #104	; 0x68
 800df14:	a817      	add	r0, sp, #92	; 0x5c
 800df16:	f001 fe51 	bl	800fbbc <__hexnan>
 800df1a:	2805      	cmp	r0, #5
 800df1c:	d126      	bne.n	800df6c <_strtod_l+0x384>
 800df1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800df20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800df24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800df28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800df2c:	e6a0      	b.n	800dc70 <_strtod_l+0x88>
 800df2e:	210a      	movs	r1, #10
 800df30:	fb01 2e0e 	mla	lr, r1, lr, r2
 800df34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800df38:	e7b9      	b.n	800deae <_strtod_l+0x2c6>
 800df3a:	2a6e      	cmp	r2, #110	; 0x6e
 800df3c:	e7db      	b.n	800def6 <_strtod_l+0x30e>
 800df3e:	4990      	ldr	r1, [pc, #576]	; (800e180 <_strtod_l+0x598>)
 800df40:	a817      	add	r0, sp, #92	; 0x5c
 800df42:	f001 fe27 	bl	800fb94 <__match>
 800df46:	2800      	cmp	r0, #0
 800df48:	f43f aeb0 	beq.w	800dcac <_strtod_l+0xc4>
 800df4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df4e:	498d      	ldr	r1, [pc, #564]	; (800e184 <_strtod_l+0x59c>)
 800df50:	3b01      	subs	r3, #1
 800df52:	a817      	add	r0, sp, #92	; 0x5c
 800df54:	9317      	str	r3, [sp, #92]	; 0x5c
 800df56:	f001 fe1d 	bl	800fb94 <__match>
 800df5a:	b910      	cbnz	r0, 800df62 <_strtod_l+0x37a>
 800df5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df5e:	3301      	adds	r3, #1
 800df60:	9317      	str	r3, [sp, #92]	; 0x5c
 800df62:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e194 <_strtod_l+0x5ac>
 800df66:	f04f 0a00 	mov.w	sl, #0
 800df6a:	e681      	b.n	800dc70 <_strtod_l+0x88>
 800df6c:	4886      	ldr	r0, [pc, #536]	; (800e188 <_strtod_l+0x5a0>)
 800df6e:	f002 fdf3 	bl	8010b58 <nan>
 800df72:	ec5b ab10 	vmov	sl, fp, d0
 800df76:	e67b      	b.n	800dc70 <_strtod_l+0x88>
 800df78:	9b05      	ldr	r3, [sp, #20]
 800df7a:	9807      	ldr	r0, [sp, #28]
 800df7c:	1af3      	subs	r3, r6, r3
 800df7e:	2f00      	cmp	r7, #0
 800df80:	bf08      	it	eq
 800df82:	462f      	moveq	r7, r5
 800df84:	2d10      	cmp	r5, #16
 800df86:	9306      	str	r3, [sp, #24]
 800df88:	46a8      	mov	r8, r5
 800df8a:	bfa8      	it	ge
 800df8c:	f04f 0810 	movge.w	r8, #16
 800df90:	f7f2 fa90 	bl	80004b4 <__aeabi_ui2d>
 800df94:	2d09      	cmp	r5, #9
 800df96:	4682      	mov	sl, r0
 800df98:	468b      	mov	fp, r1
 800df9a:	dd13      	ble.n	800dfc4 <_strtod_l+0x3dc>
 800df9c:	4b7b      	ldr	r3, [pc, #492]	; (800e18c <_strtod_l+0x5a4>)
 800df9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dfa2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dfa6:	f7f2 faff 	bl	80005a8 <__aeabi_dmul>
 800dfaa:	4682      	mov	sl, r0
 800dfac:	4648      	mov	r0, r9
 800dfae:	468b      	mov	fp, r1
 800dfb0:	f7f2 fa80 	bl	80004b4 <__aeabi_ui2d>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	4650      	mov	r0, sl
 800dfba:	4659      	mov	r1, fp
 800dfbc:	f7f2 f93e 	bl	800023c <__adddf3>
 800dfc0:	4682      	mov	sl, r0
 800dfc2:	468b      	mov	fp, r1
 800dfc4:	2d0f      	cmp	r5, #15
 800dfc6:	dc38      	bgt.n	800e03a <_strtod_l+0x452>
 800dfc8:	9b06      	ldr	r3, [sp, #24]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f43f ae50 	beq.w	800dc70 <_strtod_l+0x88>
 800dfd0:	dd24      	ble.n	800e01c <_strtod_l+0x434>
 800dfd2:	2b16      	cmp	r3, #22
 800dfd4:	dc0b      	bgt.n	800dfee <_strtod_l+0x406>
 800dfd6:	496d      	ldr	r1, [pc, #436]	; (800e18c <_strtod_l+0x5a4>)
 800dfd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dfdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfe0:	4652      	mov	r2, sl
 800dfe2:	465b      	mov	r3, fp
 800dfe4:	f7f2 fae0 	bl	80005a8 <__aeabi_dmul>
 800dfe8:	4682      	mov	sl, r0
 800dfea:	468b      	mov	fp, r1
 800dfec:	e640      	b.n	800dc70 <_strtod_l+0x88>
 800dfee:	9a06      	ldr	r2, [sp, #24]
 800dff0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dff4:	4293      	cmp	r3, r2
 800dff6:	db20      	blt.n	800e03a <_strtod_l+0x452>
 800dff8:	4c64      	ldr	r4, [pc, #400]	; (800e18c <_strtod_l+0x5a4>)
 800dffa:	f1c5 050f 	rsb	r5, r5, #15
 800dffe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e002:	4652      	mov	r2, sl
 800e004:	465b      	mov	r3, fp
 800e006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e00a:	f7f2 facd 	bl	80005a8 <__aeabi_dmul>
 800e00e:	9b06      	ldr	r3, [sp, #24]
 800e010:	1b5d      	subs	r5, r3, r5
 800e012:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e016:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e01a:	e7e3      	b.n	800dfe4 <_strtod_l+0x3fc>
 800e01c:	9b06      	ldr	r3, [sp, #24]
 800e01e:	3316      	adds	r3, #22
 800e020:	db0b      	blt.n	800e03a <_strtod_l+0x452>
 800e022:	9b05      	ldr	r3, [sp, #20]
 800e024:	1b9e      	subs	r6, r3, r6
 800e026:	4b59      	ldr	r3, [pc, #356]	; (800e18c <_strtod_l+0x5a4>)
 800e028:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e02c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e030:	4650      	mov	r0, sl
 800e032:	4659      	mov	r1, fp
 800e034:	f7f2 fbe2 	bl	80007fc <__aeabi_ddiv>
 800e038:	e7d6      	b.n	800dfe8 <_strtod_l+0x400>
 800e03a:	9b06      	ldr	r3, [sp, #24]
 800e03c:	eba5 0808 	sub.w	r8, r5, r8
 800e040:	4498      	add	r8, r3
 800e042:	f1b8 0f00 	cmp.w	r8, #0
 800e046:	dd74      	ble.n	800e132 <_strtod_l+0x54a>
 800e048:	f018 030f 	ands.w	r3, r8, #15
 800e04c:	d00a      	beq.n	800e064 <_strtod_l+0x47c>
 800e04e:	494f      	ldr	r1, [pc, #316]	; (800e18c <_strtod_l+0x5a4>)
 800e050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e054:	4652      	mov	r2, sl
 800e056:	465b      	mov	r3, fp
 800e058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e05c:	f7f2 faa4 	bl	80005a8 <__aeabi_dmul>
 800e060:	4682      	mov	sl, r0
 800e062:	468b      	mov	fp, r1
 800e064:	f038 080f 	bics.w	r8, r8, #15
 800e068:	d04f      	beq.n	800e10a <_strtod_l+0x522>
 800e06a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e06e:	dd22      	ble.n	800e0b6 <_strtod_l+0x4ce>
 800e070:	2500      	movs	r5, #0
 800e072:	462e      	mov	r6, r5
 800e074:	9507      	str	r5, [sp, #28]
 800e076:	9505      	str	r5, [sp, #20]
 800e078:	2322      	movs	r3, #34	; 0x22
 800e07a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e194 <_strtod_l+0x5ac>
 800e07e:	6023      	str	r3, [r4, #0]
 800e080:	f04f 0a00 	mov.w	sl, #0
 800e084:	9b07      	ldr	r3, [sp, #28]
 800e086:	2b00      	cmp	r3, #0
 800e088:	f43f adf2 	beq.w	800dc70 <_strtod_l+0x88>
 800e08c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e08e:	4620      	mov	r0, r4
 800e090:	f001 fe8e 	bl	800fdb0 <_Bfree>
 800e094:	9905      	ldr	r1, [sp, #20]
 800e096:	4620      	mov	r0, r4
 800e098:	f001 fe8a 	bl	800fdb0 <_Bfree>
 800e09c:	4631      	mov	r1, r6
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f001 fe86 	bl	800fdb0 <_Bfree>
 800e0a4:	9907      	ldr	r1, [sp, #28]
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f001 fe82 	bl	800fdb0 <_Bfree>
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	f001 fe7e 	bl	800fdb0 <_Bfree>
 800e0b4:	e5dc      	b.n	800dc70 <_strtod_l+0x88>
 800e0b6:	4b36      	ldr	r3, [pc, #216]	; (800e190 <_strtod_l+0x5a8>)
 800e0b8:	9304      	str	r3, [sp, #16]
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e0c0:	4650      	mov	r0, sl
 800e0c2:	4659      	mov	r1, fp
 800e0c4:	4699      	mov	r9, r3
 800e0c6:	f1b8 0f01 	cmp.w	r8, #1
 800e0ca:	dc21      	bgt.n	800e110 <_strtod_l+0x528>
 800e0cc:	b10b      	cbz	r3, 800e0d2 <_strtod_l+0x4ea>
 800e0ce:	4682      	mov	sl, r0
 800e0d0:	468b      	mov	fp, r1
 800e0d2:	4b2f      	ldr	r3, [pc, #188]	; (800e190 <_strtod_l+0x5a8>)
 800e0d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e0d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e0dc:	4652      	mov	r2, sl
 800e0de:	465b      	mov	r3, fp
 800e0e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e0e4:	f7f2 fa60 	bl	80005a8 <__aeabi_dmul>
 800e0e8:	4b2a      	ldr	r3, [pc, #168]	; (800e194 <_strtod_l+0x5ac>)
 800e0ea:	460a      	mov	r2, r1
 800e0ec:	400b      	ands	r3, r1
 800e0ee:	492a      	ldr	r1, [pc, #168]	; (800e198 <_strtod_l+0x5b0>)
 800e0f0:	428b      	cmp	r3, r1
 800e0f2:	4682      	mov	sl, r0
 800e0f4:	d8bc      	bhi.n	800e070 <_strtod_l+0x488>
 800e0f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e0fa:	428b      	cmp	r3, r1
 800e0fc:	bf86      	itte	hi
 800e0fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e19c <_strtod_l+0x5b4>
 800e102:	f04f 3aff 	movhi.w	sl, #4294967295
 800e106:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e10a:	2300      	movs	r3, #0
 800e10c:	9304      	str	r3, [sp, #16]
 800e10e:	e084      	b.n	800e21a <_strtod_l+0x632>
 800e110:	f018 0f01 	tst.w	r8, #1
 800e114:	d005      	beq.n	800e122 <_strtod_l+0x53a>
 800e116:	9b04      	ldr	r3, [sp, #16]
 800e118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11c:	f7f2 fa44 	bl	80005a8 <__aeabi_dmul>
 800e120:	2301      	movs	r3, #1
 800e122:	9a04      	ldr	r2, [sp, #16]
 800e124:	3208      	adds	r2, #8
 800e126:	f109 0901 	add.w	r9, r9, #1
 800e12a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e12e:	9204      	str	r2, [sp, #16]
 800e130:	e7c9      	b.n	800e0c6 <_strtod_l+0x4de>
 800e132:	d0ea      	beq.n	800e10a <_strtod_l+0x522>
 800e134:	f1c8 0800 	rsb	r8, r8, #0
 800e138:	f018 020f 	ands.w	r2, r8, #15
 800e13c:	d00a      	beq.n	800e154 <_strtod_l+0x56c>
 800e13e:	4b13      	ldr	r3, [pc, #76]	; (800e18c <_strtod_l+0x5a4>)
 800e140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e144:	4650      	mov	r0, sl
 800e146:	4659      	mov	r1, fp
 800e148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14c:	f7f2 fb56 	bl	80007fc <__aeabi_ddiv>
 800e150:	4682      	mov	sl, r0
 800e152:	468b      	mov	fp, r1
 800e154:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e158:	d0d7      	beq.n	800e10a <_strtod_l+0x522>
 800e15a:	f1b8 0f1f 	cmp.w	r8, #31
 800e15e:	dd1f      	ble.n	800e1a0 <_strtod_l+0x5b8>
 800e160:	2500      	movs	r5, #0
 800e162:	462e      	mov	r6, r5
 800e164:	9507      	str	r5, [sp, #28]
 800e166:	9505      	str	r5, [sp, #20]
 800e168:	2322      	movs	r3, #34	; 0x22
 800e16a:	f04f 0a00 	mov.w	sl, #0
 800e16e:	f04f 0b00 	mov.w	fp, #0
 800e172:	6023      	str	r3, [r4, #0]
 800e174:	e786      	b.n	800e084 <_strtod_l+0x49c>
 800e176:	bf00      	nop
 800e178:	08011901 	.word	0x08011901
 800e17c:	08011944 	.word	0x08011944
 800e180:	080118f9 	.word	0x080118f9
 800e184:	08011a84 	.word	0x08011a84
 800e188:	08011d30 	.word	0x08011d30
 800e18c:	08011c10 	.word	0x08011c10
 800e190:	08011be8 	.word	0x08011be8
 800e194:	7ff00000 	.word	0x7ff00000
 800e198:	7ca00000 	.word	0x7ca00000
 800e19c:	7fefffff 	.word	0x7fefffff
 800e1a0:	f018 0310 	ands.w	r3, r8, #16
 800e1a4:	bf18      	it	ne
 800e1a6:	236a      	movne	r3, #106	; 0x6a
 800e1a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e558 <_strtod_l+0x970>
 800e1ac:	9304      	str	r3, [sp, #16]
 800e1ae:	4650      	mov	r0, sl
 800e1b0:	4659      	mov	r1, fp
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	f018 0f01 	tst.w	r8, #1
 800e1b8:	d004      	beq.n	800e1c4 <_strtod_l+0x5dc>
 800e1ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e1be:	f7f2 f9f3 	bl	80005a8 <__aeabi_dmul>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e1c8:	f109 0908 	add.w	r9, r9, #8
 800e1cc:	d1f2      	bne.n	800e1b4 <_strtod_l+0x5cc>
 800e1ce:	b10b      	cbz	r3, 800e1d4 <_strtod_l+0x5ec>
 800e1d0:	4682      	mov	sl, r0
 800e1d2:	468b      	mov	fp, r1
 800e1d4:	9b04      	ldr	r3, [sp, #16]
 800e1d6:	b1c3      	cbz	r3, 800e20a <_strtod_l+0x622>
 800e1d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e1dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	4659      	mov	r1, fp
 800e1e4:	dd11      	ble.n	800e20a <_strtod_l+0x622>
 800e1e6:	2b1f      	cmp	r3, #31
 800e1e8:	f340 8124 	ble.w	800e434 <_strtod_l+0x84c>
 800e1ec:	2b34      	cmp	r3, #52	; 0x34
 800e1ee:	bfde      	ittt	le
 800e1f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e1f4:	f04f 33ff 	movle.w	r3, #4294967295
 800e1f8:	fa03 f202 	lslle.w	r2, r3, r2
 800e1fc:	f04f 0a00 	mov.w	sl, #0
 800e200:	bfcc      	ite	gt
 800e202:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e206:	ea02 0b01 	andle.w	fp, r2, r1
 800e20a:	2200      	movs	r2, #0
 800e20c:	2300      	movs	r3, #0
 800e20e:	4650      	mov	r0, sl
 800e210:	4659      	mov	r1, fp
 800e212:	f7f2 fc31 	bl	8000a78 <__aeabi_dcmpeq>
 800e216:	2800      	cmp	r0, #0
 800e218:	d1a2      	bne.n	800e160 <_strtod_l+0x578>
 800e21a:	9b07      	ldr	r3, [sp, #28]
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	9908      	ldr	r1, [sp, #32]
 800e220:	462b      	mov	r3, r5
 800e222:	463a      	mov	r2, r7
 800e224:	4620      	mov	r0, r4
 800e226:	f001 fe2b 	bl	800fe80 <__s2b>
 800e22a:	9007      	str	r0, [sp, #28]
 800e22c:	2800      	cmp	r0, #0
 800e22e:	f43f af1f 	beq.w	800e070 <_strtod_l+0x488>
 800e232:	9b05      	ldr	r3, [sp, #20]
 800e234:	1b9e      	subs	r6, r3, r6
 800e236:	9b06      	ldr	r3, [sp, #24]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	bfb4      	ite	lt
 800e23c:	4633      	movlt	r3, r6
 800e23e:	2300      	movge	r3, #0
 800e240:	930c      	str	r3, [sp, #48]	; 0x30
 800e242:	9b06      	ldr	r3, [sp, #24]
 800e244:	2500      	movs	r5, #0
 800e246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e24a:	9312      	str	r3, [sp, #72]	; 0x48
 800e24c:	462e      	mov	r6, r5
 800e24e:	9b07      	ldr	r3, [sp, #28]
 800e250:	4620      	mov	r0, r4
 800e252:	6859      	ldr	r1, [r3, #4]
 800e254:	f001 fd6c 	bl	800fd30 <_Balloc>
 800e258:	9005      	str	r0, [sp, #20]
 800e25a:	2800      	cmp	r0, #0
 800e25c:	f43f af0c 	beq.w	800e078 <_strtod_l+0x490>
 800e260:	9b07      	ldr	r3, [sp, #28]
 800e262:	691a      	ldr	r2, [r3, #16]
 800e264:	3202      	adds	r2, #2
 800e266:	f103 010c 	add.w	r1, r3, #12
 800e26a:	0092      	lsls	r2, r2, #2
 800e26c:	300c      	adds	r0, #12
 800e26e:	f7fe fde9 	bl	800ce44 <memcpy>
 800e272:	ec4b ab10 	vmov	d0, sl, fp
 800e276:	aa1a      	add	r2, sp, #104	; 0x68
 800e278:	a919      	add	r1, sp, #100	; 0x64
 800e27a:	4620      	mov	r0, r4
 800e27c:	f002 f946 	bl	801050c <__d2b>
 800e280:	ec4b ab18 	vmov	d8, sl, fp
 800e284:	9018      	str	r0, [sp, #96]	; 0x60
 800e286:	2800      	cmp	r0, #0
 800e288:	f43f aef6 	beq.w	800e078 <_strtod_l+0x490>
 800e28c:	2101      	movs	r1, #1
 800e28e:	4620      	mov	r0, r4
 800e290:	f001 fe90 	bl	800ffb4 <__i2b>
 800e294:	4606      	mov	r6, r0
 800e296:	2800      	cmp	r0, #0
 800e298:	f43f aeee 	beq.w	800e078 <_strtod_l+0x490>
 800e29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e29e:	9904      	ldr	r1, [sp, #16]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	bfab      	itete	ge
 800e2a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e2a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e2a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e2aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e2ae:	bfac      	ite	ge
 800e2b0:	eb03 0902 	addge.w	r9, r3, r2
 800e2b4:	1ad7      	sublt	r7, r2, r3
 800e2b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e2b8:	eba3 0801 	sub.w	r8, r3, r1
 800e2bc:	4490      	add	r8, r2
 800e2be:	4ba1      	ldr	r3, [pc, #644]	; (800e544 <_strtod_l+0x95c>)
 800e2c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2c4:	4598      	cmp	r8, r3
 800e2c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e2ca:	f280 80c7 	bge.w	800e45c <_strtod_l+0x874>
 800e2ce:	eba3 0308 	sub.w	r3, r3, r8
 800e2d2:	2b1f      	cmp	r3, #31
 800e2d4:	eba2 0203 	sub.w	r2, r2, r3
 800e2d8:	f04f 0101 	mov.w	r1, #1
 800e2dc:	f300 80b1 	bgt.w	800e442 <_strtod_l+0x85a>
 800e2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e2e4:	930d      	str	r3, [sp, #52]	; 0x34
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	9308      	str	r3, [sp, #32]
 800e2ea:	eb09 0802 	add.w	r8, r9, r2
 800e2ee:	9b04      	ldr	r3, [sp, #16]
 800e2f0:	45c1      	cmp	r9, r8
 800e2f2:	4417      	add	r7, r2
 800e2f4:	441f      	add	r7, r3
 800e2f6:	464b      	mov	r3, r9
 800e2f8:	bfa8      	it	ge
 800e2fa:	4643      	movge	r3, r8
 800e2fc:	42bb      	cmp	r3, r7
 800e2fe:	bfa8      	it	ge
 800e300:	463b      	movge	r3, r7
 800e302:	2b00      	cmp	r3, #0
 800e304:	bfc2      	ittt	gt
 800e306:	eba8 0803 	subgt.w	r8, r8, r3
 800e30a:	1aff      	subgt	r7, r7, r3
 800e30c:	eba9 0903 	subgt.w	r9, r9, r3
 800e310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e312:	2b00      	cmp	r3, #0
 800e314:	dd17      	ble.n	800e346 <_strtod_l+0x75e>
 800e316:	4631      	mov	r1, r6
 800e318:	461a      	mov	r2, r3
 800e31a:	4620      	mov	r0, r4
 800e31c:	f001 ff0a 	bl	8010134 <__pow5mult>
 800e320:	4606      	mov	r6, r0
 800e322:	2800      	cmp	r0, #0
 800e324:	f43f aea8 	beq.w	800e078 <_strtod_l+0x490>
 800e328:	4601      	mov	r1, r0
 800e32a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e32c:	4620      	mov	r0, r4
 800e32e:	f001 fe57 	bl	800ffe0 <__multiply>
 800e332:	900b      	str	r0, [sp, #44]	; 0x2c
 800e334:	2800      	cmp	r0, #0
 800e336:	f43f ae9f 	beq.w	800e078 <_strtod_l+0x490>
 800e33a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e33c:	4620      	mov	r0, r4
 800e33e:	f001 fd37 	bl	800fdb0 <_Bfree>
 800e342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e344:	9318      	str	r3, [sp, #96]	; 0x60
 800e346:	f1b8 0f00 	cmp.w	r8, #0
 800e34a:	f300 808c 	bgt.w	800e466 <_strtod_l+0x87e>
 800e34e:	9b06      	ldr	r3, [sp, #24]
 800e350:	2b00      	cmp	r3, #0
 800e352:	dd08      	ble.n	800e366 <_strtod_l+0x77e>
 800e354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e356:	9905      	ldr	r1, [sp, #20]
 800e358:	4620      	mov	r0, r4
 800e35a:	f001 feeb 	bl	8010134 <__pow5mult>
 800e35e:	9005      	str	r0, [sp, #20]
 800e360:	2800      	cmp	r0, #0
 800e362:	f43f ae89 	beq.w	800e078 <_strtod_l+0x490>
 800e366:	2f00      	cmp	r7, #0
 800e368:	dd08      	ble.n	800e37c <_strtod_l+0x794>
 800e36a:	9905      	ldr	r1, [sp, #20]
 800e36c:	463a      	mov	r2, r7
 800e36e:	4620      	mov	r0, r4
 800e370:	f001 ff3a 	bl	80101e8 <__lshift>
 800e374:	9005      	str	r0, [sp, #20]
 800e376:	2800      	cmp	r0, #0
 800e378:	f43f ae7e 	beq.w	800e078 <_strtod_l+0x490>
 800e37c:	f1b9 0f00 	cmp.w	r9, #0
 800e380:	dd08      	ble.n	800e394 <_strtod_l+0x7ac>
 800e382:	4631      	mov	r1, r6
 800e384:	464a      	mov	r2, r9
 800e386:	4620      	mov	r0, r4
 800e388:	f001 ff2e 	bl	80101e8 <__lshift>
 800e38c:	4606      	mov	r6, r0
 800e38e:	2800      	cmp	r0, #0
 800e390:	f43f ae72 	beq.w	800e078 <_strtod_l+0x490>
 800e394:	9a05      	ldr	r2, [sp, #20]
 800e396:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e398:	4620      	mov	r0, r4
 800e39a:	f001 ffb1 	bl	8010300 <__mdiff>
 800e39e:	4605      	mov	r5, r0
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	f43f ae69 	beq.w	800e078 <_strtod_l+0x490>
 800e3a6:	68c3      	ldr	r3, [r0, #12]
 800e3a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	60c3      	str	r3, [r0, #12]
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	f001 ff8a 	bl	80102c8 <__mcmp>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	da60      	bge.n	800e47a <_strtod_l+0x892>
 800e3b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3ba:	ea53 030a 	orrs.w	r3, r3, sl
 800e3be:	f040 8082 	bne.w	800e4c6 <_strtod_l+0x8de>
 800e3c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d17d      	bne.n	800e4c6 <_strtod_l+0x8de>
 800e3ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e3ce:	0d1b      	lsrs	r3, r3, #20
 800e3d0:	051b      	lsls	r3, r3, #20
 800e3d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e3d6:	d976      	bls.n	800e4c6 <_strtod_l+0x8de>
 800e3d8:	696b      	ldr	r3, [r5, #20]
 800e3da:	b913      	cbnz	r3, 800e3e2 <_strtod_l+0x7fa>
 800e3dc:	692b      	ldr	r3, [r5, #16]
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	dd71      	ble.n	800e4c6 <_strtod_l+0x8de>
 800e3e2:	4629      	mov	r1, r5
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f001 fefe 	bl	80101e8 <__lshift>
 800e3ec:	4631      	mov	r1, r6
 800e3ee:	4605      	mov	r5, r0
 800e3f0:	f001 ff6a 	bl	80102c8 <__mcmp>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	dd66      	ble.n	800e4c6 <_strtod_l+0x8de>
 800e3f8:	9904      	ldr	r1, [sp, #16]
 800e3fa:	4a53      	ldr	r2, [pc, #332]	; (800e548 <_strtod_l+0x960>)
 800e3fc:	465b      	mov	r3, fp
 800e3fe:	2900      	cmp	r1, #0
 800e400:	f000 8081 	beq.w	800e506 <_strtod_l+0x91e>
 800e404:	ea02 010b 	and.w	r1, r2, fp
 800e408:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e40c:	dc7b      	bgt.n	800e506 <_strtod_l+0x91e>
 800e40e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e412:	f77f aea9 	ble.w	800e168 <_strtod_l+0x580>
 800e416:	4b4d      	ldr	r3, [pc, #308]	; (800e54c <_strtod_l+0x964>)
 800e418:	4650      	mov	r0, sl
 800e41a:	4659      	mov	r1, fp
 800e41c:	2200      	movs	r2, #0
 800e41e:	f7f2 f8c3 	bl	80005a8 <__aeabi_dmul>
 800e422:	460b      	mov	r3, r1
 800e424:	4303      	orrs	r3, r0
 800e426:	bf08      	it	eq
 800e428:	2322      	moveq	r3, #34	; 0x22
 800e42a:	4682      	mov	sl, r0
 800e42c:	468b      	mov	fp, r1
 800e42e:	bf08      	it	eq
 800e430:	6023      	streq	r3, [r4, #0]
 800e432:	e62b      	b.n	800e08c <_strtod_l+0x4a4>
 800e434:	f04f 32ff 	mov.w	r2, #4294967295
 800e438:	fa02 f303 	lsl.w	r3, r2, r3
 800e43c:	ea03 0a0a 	and.w	sl, r3, sl
 800e440:	e6e3      	b.n	800e20a <_strtod_l+0x622>
 800e442:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e446:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e44a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e44e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e452:	fa01 f308 	lsl.w	r3, r1, r8
 800e456:	9308      	str	r3, [sp, #32]
 800e458:	910d      	str	r1, [sp, #52]	; 0x34
 800e45a:	e746      	b.n	800e2ea <_strtod_l+0x702>
 800e45c:	2300      	movs	r3, #0
 800e45e:	9308      	str	r3, [sp, #32]
 800e460:	2301      	movs	r3, #1
 800e462:	930d      	str	r3, [sp, #52]	; 0x34
 800e464:	e741      	b.n	800e2ea <_strtod_l+0x702>
 800e466:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e468:	4642      	mov	r2, r8
 800e46a:	4620      	mov	r0, r4
 800e46c:	f001 febc 	bl	80101e8 <__lshift>
 800e470:	9018      	str	r0, [sp, #96]	; 0x60
 800e472:	2800      	cmp	r0, #0
 800e474:	f47f af6b 	bne.w	800e34e <_strtod_l+0x766>
 800e478:	e5fe      	b.n	800e078 <_strtod_l+0x490>
 800e47a:	465f      	mov	r7, fp
 800e47c:	d16e      	bne.n	800e55c <_strtod_l+0x974>
 800e47e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e480:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e484:	b342      	cbz	r2, 800e4d8 <_strtod_l+0x8f0>
 800e486:	4a32      	ldr	r2, [pc, #200]	; (800e550 <_strtod_l+0x968>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d128      	bne.n	800e4de <_strtod_l+0x8f6>
 800e48c:	9b04      	ldr	r3, [sp, #16]
 800e48e:	4651      	mov	r1, sl
 800e490:	b1eb      	cbz	r3, 800e4ce <_strtod_l+0x8e6>
 800e492:	4b2d      	ldr	r3, [pc, #180]	; (800e548 <_strtod_l+0x960>)
 800e494:	403b      	ands	r3, r7
 800e496:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e49a:	f04f 32ff 	mov.w	r2, #4294967295
 800e49e:	d819      	bhi.n	800e4d4 <_strtod_l+0x8ec>
 800e4a0:	0d1b      	lsrs	r3, r3, #20
 800e4a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800e4aa:	4299      	cmp	r1, r3
 800e4ac:	d117      	bne.n	800e4de <_strtod_l+0x8f6>
 800e4ae:	4b29      	ldr	r3, [pc, #164]	; (800e554 <_strtod_l+0x96c>)
 800e4b0:	429f      	cmp	r7, r3
 800e4b2:	d102      	bne.n	800e4ba <_strtod_l+0x8d2>
 800e4b4:	3101      	adds	r1, #1
 800e4b6:	f43f addf 	beq.w	800e078 <_strtod_l+0x490>
 800e4ba:	4b23      	ldr	r3, [pc, #140]	; (800e548 <_strtod_l+0x960>)
 800e4bc:	403b      	ands	r3, r7
 800e4be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e4c2:	f04f 0a00 	mov.w	sl, #0
 800e4c6:	9b04      	ldr	r3, [sp, #16]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1a4      	bne.n	800e416 <_strtod_l+0x82e>
 800e4cc:	e5de      	b.n	800e08c <_strtod_l+0x4a4>
 800e4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e4d2:	e7ea      	b.n	800e4aa <_strtod_l+0x8c2>
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	e7e8      	b.n	800e4aa <_strtod_l+0x8c2>
 800e4d8:	ea53 030a 	orrs.w	r3, r3, sl
 800e4dc:	d08c      	beq.n	800e3f8 <_strtod_l+0x810>
 800e4de:	9b08      	ldr	r3, [sp, #32]
 800e4e0:	b1db      	cbz	r3, 800e51a <_strtod_l+0x932>
 800e4e2:	423b      	tst	r3, r7
 800e4e4:	d0ef      	beq.n	800e4c6 <_strtod_l+0x8de>
 800e4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4e8:	9a04      	ldr	r2, [sp, #16]
 800e4ea:	4650      	mov	r0, sl
 800e4ec:	4659      	mov	r1, fp
 800e4ee:	b1c3      	cbz	r3, 800e522 <_strtod_l+0x93a>
 800e4f0:	f7ff fb5e 	bl	800dbb0 <sulp>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	ec51 0b18 	vmov	r0, r1, d8
 800e4fc:	f7f1 fe9e 	bl	800023c <__adddf3>
 800e500:	4682      	mov	sl, r0
 800e502:	468b      	mov	fp, r1
 800e504:	e7df      	b.n	800e4c6 <_strtod_l+0x8de>
 800e506:	4013      	ands	r3, r2
 800e508:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e50c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e510:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e514:	f04f 3aff 	mov.w	sl, #4294967295
 800e518:	e7d5      	b.n	800e4c6 <_strtod_l+0x8de>
 800e51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e51c:	ea13 0f0a 	tst.w	r3, sl
 800e520:	e7e0      	b.n	800e4e4 <_strtod_l+0x8fc>
 800e522:	f7ff fb45 	bl	800dbb0 <sulp>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	ec51 0b18 	vmov	r0, r1, d8
 800e52e:	f7f1 fe83 	bl	8000238 <__aeabi_dsub>
 800e532:	2200      	movs	r2, #0
 800e534:	2300      	movs	r3, #0
 800e536:	4682      	mov	sl, r0
 800e538:	468b      	mov	fp, r1
 800e53a:	f7f2 fa9d 	bl	8000a78 <__aeabi_dcmpeq>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d0c1      	beq.n	800e4c6 <_strtod_l+0x8de>
 800e542:	e611      	b.n	800e168 <_strtod_l+0x580>
 800e544:	fffffc02 	.word	0xfffffc02
 800e548:	7ff00000 	.word	0x7ff00000
 800e54c:	39500000 	.word	0x39500000
 800e550:	000fffff 	.word	0x000fffff
 800e554:	7fefffff 	.word	0x7fefffff
 800e558:	08011958 	.word	0x08011958
 800e55c:	4631      	mov	r1, r6
 800e55e:	4628      	mov	r0, r5
 800e560:	f002 f830 	bl	80105c4 <__ratio>
 800e564:	ec59 8b10 	vmov	r8, r9, d0
 800e568:	ee10 0a10 	vmov	r0, s0
 800e56c:	2200      	movs	r2, #0
 800e56e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e572:	4649      	mov	r1, r9
 800e574:	f7f2 fa94 	bl	8000aa0 <__aeabi_dcmple>
 800e578:	2800      	cmp	r0, #0
 800e57a:	d07a      	beq.n	800e672 <_strtod_l+0xa8a>
 800e57c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d04a      	beq.n	800e618 <_strtod_l+0xa30>
 800e582:	4b95      	ldr	r3, [pc, #596]	; (800e7d8 <_strtod_l+0xbf0>)
 800e584:	2200      	movs	r2, #0
 800e586:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e58a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e7d8 <_strtod_l+0xbf0>
 800e58e:	f04f 0800 	mov.w	r8, #0
 800e592:	4b92      	ldr	r3, [pc, #584]	; (800e7dc <_strtod_l+0xbf4>)
 800e594:	403b      	ands	r3, r7
 800e596:	930d      	str	r3, [sp, #52]	; 0x34
 800e598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e59a:	4b91      	ldr	r3, [pc, #580]	; (800e7e0 <_strtod_l+0xbf8>)
 800e59c:	429a      	cmp	r2, r3
 800e59e:	f040 80b0 	bne.w	800e702 <_strtod_l+0xb1a>
 800e5a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e5a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e5aa:	ec4b ab10 	vmov	d0, sl, fp
 800e5ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e5b2:	f001 ff2f 	bl	8010414 <__ulp>
 800e5b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e5ba:	ec53 2b10 	vmov	r2, r3, d0
 800e5be:	f7f1 fff3 	bl	80005a8 <__aeabi_dmul>
 800e5c2:	4652      	mov	r2, sl
 800e5c4:	465b      	mov	r3, fp
 800e5c6:	f7f1 fe39 	bl	800023c <__adddf3>
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	4983      	ldr	r1, [pc, #524]	; (800e7dc <_strtod_l+0xbf4>)
 800e5ce:	4a85      	ldr	r2, [pc, #532]	; (800e7e4 <_strtod_l+0xbfc>)
 800e5d0:	4019      	ands	r1, r3
 800e5d2:	4291      	cmp	r1, r2
 800e5d4:	4682      	mov	sl, r0
 800e5d6:	d960      	bls.n	800e69a <_strtod_l+0xab2>
 800e5d8:	ee18 3a90 	vmov	r3, s17
 800e5dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d104      	bne.n	800e5ee <_strtod_l+0xa06>
 800e5e4:	ee18 3a10 	vmov	r3, s16
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	f43f ad45 	beq.w	800e078 <_strtod_l+0x490>
 800e5ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e7f0 <_strtod_l+0xc08>
 800e5f2:	f04f 3aff 	mov.w	sl, #4294967295
 800e5f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f001 fbd9 	bl	800fdb0 <_Bfree>
 800e5fe:	9905      	ldr	r1, [sp, #20]
 800e600:	4620      	mov	r0, r4
 800e602:	f001 fbd5 	bl	800fdb0 <_Bfree>
 800e606:	4631      	mov	r1, r6
 800e608:	4620      	mov	r0, r4
 800e60a:	f001 fbd1 	bl	800fdb0 <_Bfree>
 800e60e:	4629      	mov	r1, r5
 800e610:	4620      	mov	r0, r4
 800e612:	f001 fbcd 	bl	800fdb0 <_Bfree>
 800e616:	e61a      	b.n	800e24e <_strtod_l+0x666>
 800e618:	f1ba 0f00 	cmp.w	sl, #0
 800e61c:	d11b      	bne.n	800e656 <_strtod_l+0xa6e>
 800e61e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e622:	b9f3      	cbnz	r3, 800e662 <_strtod_l+0xa7a>
 800e624:	4b6c      	ldr	r3, [pc, #432]	; (800e7d8 <_strtod_l+0xbf0>)
 800e626:	2200      	movs	r2, #0
 800e628:	4640      	mov	r0, r8
 800e62a:	4649      	mov	r1, r9
 800e62c:	f7f2 fa2e 	bl	8000a8c <__aeabi_dcmplt>
 800e630:	b9d0      	cbnz	r0, 800e668 <_strtod_l+0xa80>
 800e632:	4640      	mov	r0, r8
 800e634:	4649      	mov	r1, r9
 800e636:	4b6c      	ldr	r3, [pc, #432]	; (800e7e8 <_strtod_l+0xc00>)
 800e638:	2200      	movs	r2, #0
 800e63a:	f7f1 ffb5 	bl	80005a8 <__aeabi_dmul>
 800e63e:	4680      	mov	r8, r0
 800e640:	4689      	mov	r9, r1
 800e642:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e646:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e64a:	9315      	str	r3, [sp, #84]	; 0x54
 800e64c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e650:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e654:	e79d      	b.n	800e592 <_strtod_l+0x9aa>
 800e656:	f1ba 0f01 	cmp.w	sl, #1
 800e65a:	d102      	bne.n	800e662 <_strtod_l+0xa7a>
 800e65c:	2f00      	cmp	r7, #0
 800e65e:	f43f ad83 	beq.w	800e168 <_strtod_l+0x580>
 800e662:	4b62      	ldr	r3, [pc, #392]	; (800e7ec <_strtod_l+0xc04>)
 800e664:	2200      	movs	r2, #0
 800e666:	e78e      	b.n	800e586 <_strtod_l+0x99e>
 800e668:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e7e8 <_strtod_l+0xc00>
 800e66c:	f04f 0800 	mov.w	r8, #0
 800e670:	e7e7      	b.n	800e642 <_strtod_l+0xa5a>
 800e672:	4b5d      	ldr	r3, [pc, #372]	; (800e7e8 <_strtod_l+0xc00>)
 800e674:	4640      	mov	r0, r8
 800e676:	4649      	mov	r1, r9
 800e678:	2200      	movs	r2, #0
 800e67a:	f7f1 ff95 	bl	80005a8 <__aeabi_dmul>
 800e67e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e680:	4680      	mov	r8, r0
 800e682:	4689      	mov	r9, r1
 800e684:	b933      	cbnz	r3, 800e694 <_strtod_l+0xaac>
 800e686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e68a:	900e      	str	r0, [sp, #56]	; 0x38
 800e68c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e68e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e692:	e7dd      	b.n	800e650 <_strtod_l+0xa68>
 800e694:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e698:	e7f9      	b.n	800e68e <_strtod_l+0xaa6>
 800e69a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e69e:	9b04      	ldr	r3, [sp, #16]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1a8      	bne.n	800e5f6 <_strtod_l+0xa0e>
 800e6a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6aa:	0d1b      	lsrs	r3, r3, #20
 800e6ac:	051b      	lsls	r3, r3, #20
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d1a1      	bne.n	800e5f6 <_strtod_l+0xa0e>
 800e6b2:	4640      	mov	r0, r8
 800e6b4:	4649      	mov	r1, r9
 800e6b6:	f7f2 fabf 	bl	8000c38 <__aeabi_d2lz>
 800e6ba:	f7f1 ff47 	bl	800054c <__aeabi_l2d>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	4640      	mov	r0, r8
 800e6c4:	4649      	mov	r1, r9
 800e6c6:	f7f1 fdb7 	bl	8000238 <__aeabi_dsub>
 800e6ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6d0:	ea43 030a 	orr.w	r3, r3, sl
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	4680      	mov	r8, r0
 800e6d8:	4689      	mov	r9, r1
 800e6da:	d055      	beq.n	800e788 <_strtod_l+0xba0>
 800e6dc:	a336      	add	r3, pc, #216	; (adr r3, 800e7b8 <_strtod_l+0xbd0>)
 800e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e2:	f7f2 f9d3 	bl	8000a8c <__aeabi_dcmplt>
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	f47f acd0 	bne.w	800e08c <_strtod_l+0x4a4>
 800e6ec:	a334      	add	r3, pc, #208	; (adr r3, 800e7c0 <_strtod_l+0xbd8>)
 800e6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f2:	4640      	mov	r0, r8
 800e6f4:	4649      	mov	r1, r9
 800e6f6:	f7f2 f9e7 	bl	8000ac8 <__aeabi_dcmpgt>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	f43f af7b 	beq.w	800e5f6 <_strtod_l+0xa0e>
 800e700:	e4c4      	b.n	800e08c <_strtod_l+0x4a4>
 800e702:	9b04      	ldr	r3, [sp, #16]
 800e704:	b333      	cbz	r3, 800e754 <_strtod_l+0xb6c>
 800e706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e708:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e70c:	d822      	bhi.n	800e754 <_strtod_l+0xb6c>
 800e70e:	a32e      	add	r3, pc, #184	; (adr r3, 800e7c8 <_strtod_l+0xbe0>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	4640      	mov	r0, r8
 800e716:	4649      	mov	r1, r9
 800e718:	f7f2 f9c2 	bl	8000aa0 <__aeabi_dcmple>
 800e71c:	b1a0      	cbz	r0, 800e748 <_strtod_l+0xb60>
 800e71e:	4649      	mov	r1, r9
 800e720:	4640      	mov	r0, r8
 800e722:	f7f2 fa19 	bl	8000b58 <__aeabi_d2uiz>
 800e726:	2801      	cmp	r0, #1
 800e728:	bf38      	it	cc
 800e72a:	2001      	movcc	r0, #1
 800e72c:	f7f1 fec2 	bl	80004b4 <__aeabi_ui2d>
 800e730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e732:	4680      	mov	r8, r0
 800e734:	4689      	mov	r9, r1
 800e736:	bb23      	cbnz	r3, 800e782 <_strtod_l+0xb9a>
 800e738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e73c:	9010      	str	r0, [sp, #64]	; 0x40
 800e73e:	9311      	str	r3, [sp, #68]	; 0x44
 800e740:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e744:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e74a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e74c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e750:	1a9b      	subs	r3, r3, r2
 800e752:	9309      	str	r3, [sp, #36]	; 0x24
 800e754:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e758:	eeb0 0a48 	vmov.f32	s0, s16
 800e75c:	eef0 0a68 	vmov.f32	s1, s17
 800e760:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e764:	f001 fe56 	bl	8010414 <__ulp>
 800e768:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e76c:	ec53 2b10 	vmov	r2, r3, d0
 800e770:	f7f1 ff1a 	bl	80005a8 <__aeabi_dmul>
 800e774:	ec53 2b18 	vmov	r2, r3, d8
 800e778:	f7f1 fd60 	bl	800023c <__adddf3>
 800e77c:	4682      	mov	sl, r0
 800e77e:	468b      	mov	fp, r1
 800e780:	e78d      	b.n	800e69e <_strtod_l+0xab6>
 800e782:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e786:	e7db      	b.n	800e740 <_strtod_l+0xb58>
 800e788:	a311      	add	r3, pc, #68	; (adr r3, 800e7d0 <_strtod_l+0xbe8>)
 800e78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78e:	f7f2 f97d 	bl	8000a8c <__aeabi_dcmplt>
 800e792:	e7b2      	b.n	800e6fa <_strtod_l+0xb12>
 800e794:	2300      	movs	r3, #0
 800e796:	930a      	str	r3, [sp, #40]	; 0x28
 800e798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e79a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e79c:	6013      	str	r3, [r2, #0]
 800e79e:	f7ff ba6b 	b.w	800dc78 <_strtod_l+0x90>
 800e7a2:	2a65      	cmp	r2, #101	; 0x65
 800e7a4:	f43f ab5f 	beq.w	800de66 <_strtod_l+0x27e>
 800e7a8:	2a45      	cmp	r2, #69	; 0x45
 800e7aa:	f43f ab5c 	beq.w	800de66 <_strtod_l+0x27e>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	f7ff bb94 	b.w	800dedc <_strtod_l+0x2f4>
 800e7b4:	f3af 8000 	nop.w
 800e7b8:	94a03595 	.word	0x94a03595
 800e7bc:	3fdfffff 	.word	0x3fdfffff
 800e7c0:	35afe535 	.word	0x35afe535
 800e7c4:	3fe00000 	.word	0x3fe00000
 800e7c8:	ffc00000 	.word	0xffc00000
 800e7cc:	41dfffff 	.word	0x41dfffff
 800e7d0:	94a03595 	.word	0x94a03595
 800e7d4:	3fcfffff 	.word	0x3fcfffff
 800e7d8:	3ff00000 	.word	0x3ff00000
 800e7dc:	7ff00000 	.word	0x7ff00000
 800e7e0:	7fe00000 	.word	0x7fe00000
 800e7e4:	7c9fffff 	.word	0x7c9fffff
 800e7e8:	3fe00000 	.word	0x3fe00000
 800e7ec:	bff00000 	.word	0xbff00000
 800e7f0:	7fefffff 	.word	0x7fefffff

0800e7f4 <_strtod_r>:
 800e7f4:	4b01      	ldr	r3, [pc, #4]	; (800e7fc <_strtod_r+0x8>)
 800e7f6:	f7ff b9f7 	b.w	800dbe8 <_strtod_l>
 800e7fa:	bf00      	nop
 800e7fc:	200001f8 	.word	0x200001f8

0800e800 <_strtol_l.constprop.0>:
 800e800:	2b01      	cmp	r3, #1
 800e802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e806:	d001      	beq.n	800e80c <_strtol_l.constprop.0+0xc>
 800e808:	2b24      	cmp	r3, #36	; 0x24
 800e80a:	d906      	bls.n	800e81a <_strtol_l.constprop.0+0x1a>
 800e80c:	f7fe faf0 	bl	800cdf0 <__errno>
 800e810:	2316      	movs	r3, #22
 800e812:	6003      	str	r3, [r0, #0]
 800e814:	2000      	movs	r0, #0
 800e816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e81a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e900 <_strtol_l.constprop.0+0x100>
 800e81e:	460d      	mov	r5, r1
 800e820:	462e      	mov	r6, r5
 800e822:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e826:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e82a:	f017 0708 	ands.w	r7, r7, #8
 800e82e:	d1f7      	bne.n	800e820 <_strtol_l.constprop.0+0x20>
 800e830:	2c2d      	cmp	r4, #45	; 0x2d
 800e832:	d132      	bne.n	800e89a <_strtol_l.constprop.0+0x9a>
 800e834:	782c      	ldrb	r4, [r5, #0]
 800e836:	2701      	movs	r7, #1
 800e838:	1cb5      	adds	r5, r6, #2
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d05b      	beq.n	800e8f6 <_strtol_l.constprop.0+0xf6>
 800e83e:	2b10      	cmp	r3, #16
 800e840:	d109      	bne.n	800e856 <_strtol_l.constprop.0+0x56>
 800e842:	2c30      	cmp	r4, #48	; 0x30
 800e844:	d107      	bne.n	800e856 <_strtol_l.constprop.0+0x56>
 800e846:	782c      	ldrb	r4, [r5, #0]
 800e848:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e84c:	2c58      	cmp	r4, #88	; 0x58
 800e84e:	d14d      	bne.n	800e8ec <_strtol_l.constprop.0+0xec>
 800e850:	786c      	ldrb	r4, [r5, #1]
 800e852:	2310      	movs	r3, #16
 800e854:	3502      	adds	r5, #2
 800e856:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e85a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e85e:	f04f 0c00 	mov.w	ip, #0
 800e862:	fbb8 f9f3 	udiv	r9, r8, r3
 800e866:	4666      	mov	r6, ip
 800e868:	fb03 8a19 	mls	sl, r3, r9, r8
 800e86c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e870:	f1be 0f09 	cmp.w	lr, #9
 800e874:	d816      	bhi.n	800e8a4 <_strtol_l.constprop.0+0xa4>
 800e876:	4674      	mov	r4, lr
 800e878:	42a3      	cmp	r3, r4
 800e87a:	dd24      	ble.n	800e8c6 <_strtol_l.constprop.0+0xc6>
 800e87c:	f1bc 0f00 	cmp.w	ip, #0
 800e880:	db1e      	blt.n	800e8c0 <_strtol_l.constprop.0+0xc0>
 800e882:	45b1      	cmp	r9, r6
 800e884:	d31c      	bcc.n	800e8c0 <_strtol_l.constprop.0+0xc0>
 800e886:	d101      	bne.n	800e88c <_strtol_l.constprop.0+0x8c>
 800e888:	45a2      	cmp	sl, r4
 800e88a:	db19      	blt.n	800e8c0 <_strtol_l.constprop.0+0xc0>
 800e88c:	fb06 4603 	mla	r6, r6, r3, r4
 800e890:	f04f 0c01 	mov.w	ip, #1
 800e894:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e898:	e7e8      	b.n	800e86c <_strtol_l.constprop.0+0x6c>
 800e89a:	2c2b      	cmp	r4, #43	; 0x2b
 800e89c:	bf04      	itt	eq
 800e89e:	782c      	ldrbeq	r4, [r5, #0]
 800e8a0:	1cb5      	addeq	r5, r6, #2
 800e8a2:	e7ca      	b.n	800e83a <_strtol_l.constprop.0+0x3a>
 800e8a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e8a8:	f1be 0f19 	cmp.w	lr, #25
 800e8ac:	d801      	bhi.n	800e8b2 <_strtol_l.constprop.0+0xb2>
 800e8ae:	3c37      	subs	r4, #55	; 0x37
 800e8b0:	e7e2      	b.n	800e878 <_strtol_l.constprop.0+0x78>
 800e8b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e8b6:	f1be 0f19 	cmp.w	lr, #25
 800e8ba:	d804      	bhi.n	800e8c6 <_strtol_l.constprop.0+0xc6>
 800e8bc:	3c57      	subs	r4, #87	; 0x57
 800e8be:	e7db      	b.n	800e878 <_strtol_l.constprop.0+0x78>
 800e8c0:	f04f 3cff 	mov.w	ip, #4294967295
 800e8c4:	e7e6      	b.n	800e894 <_strtol_l.constprop.0+0x94>
 800e8c6:	f1bc 0f00 	cmp.w	ip, #0
 800e8ca:	da05      	bge.n	800e8d8 <_strtol_l.constprop.0+0xd8>
 800e8cc:	2322      	movs	r3, #34	; 0x22
 800e8ce:	6003      	str	r3, [r0, #0]
 800e8d0:	4646      	mov	r6, r8
 800e8d2:	b942      	cbnz	r2, 800e8e6 <_strtol_l.constprop.0+0xe6>
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	e79e      	b.n	800e816 <_strtol_l.constprop.0+0x16>
 800e8d8:	b107      	cbz	r7, 800e8dc <_strtol_l.constprop.0+0xdc>
 800e8da:	4276      	negs	r6, r6
 800e8dc:	2a00      	cmp	r2, #0
 800e8de:	d0f9      	beq.n	800e8d4 <_strtol_l.constprop.0+0xd4>
 800e8e0:	f1bc 0f00 	cmp.w	ip, #0
 800e8e4:	d000      	beq.n	800e8e8 <_strtol_l.constprop.0+0xe8>
 800e8e6:	1e69      	subs	r1, r5, #1
 800e8e8:	6011      	str	r1, [r2, #0]
 800e8ea:	e7f3      	b.n	800e8d4 <_strtol_l.constprop.0+0xd4>
 800e8ec:	2430      	movs	r4, #48	; 0x30
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1b1      	bne.n	800e856 <_strtol_l.constprop.0+0x56>
 800e8f2:	2308      	movs	r3, #8
 800e8f4:	e7af      	b.n	800e856 <_strtol_l.constprop.0+0x56>
 800e8f6:	2c30      	cmp	r4, #48	; 0x30
 800e8f8:	d0a5      	beq.n	800e846 <_strtol_l.constprop.0+0x46>
 800e8fa:	230a      	movs	r3, #10
 800e8fc:	e7ab      	b.n	800e856 <_strtol_l.constprop.0+0x56>
 800e8fe:	bf00      	nop
 800e900:	08011981 	.word	0x08011981

0800e904 <_strtol_r>:
 800e904:	f7ff bf7c 	b.w	800e800 <_strtol_l.constprop.0>

0800e908 <strtol>:
 800e908:	4613      	mov	r3, r2
 800e90a:	460a      	mov	r2, r1
 800e90c:	4601      	mov	r1, r0
 800e90e:	4802      	ldr	r0, [pc, #8]	; (800e918 <strtol+0x10>)
 800e910:	6800      	ldr	r0, [r0, #0]
 800e912:	f7ff bf75 	b.w	800e800 <_strtol_l.constprop.0>
 800e916:	bf00      	nop
 800e918:	20000190 	.word	0x20000190

0800e91c <quorem>:
 800e91c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	6903      	ldr	r3, [r0, #16]
 800e922:	690c      	ldr	r4, [r1, #16]
 800e924:	42a3      	cmp	r3, r4
 800e926:	4607      	mov	r7, r0
 800e928:	f2c0 8081 	blt.w	800ea2e <quorem+0x112>
 800e92c:	3c01      	subs	r4, #1
 800e92e:	f101 0814 	add.w	r8, r1, #20
 800e932:	f100 0514 	add.w	r5, r0, #20
 800e936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e944:	3301      	adds	r3, #1
 800e946:	429a      	cmp	r2, r3
 800e948:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e94c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e950:	fbb2 f6f3 	udiv	r6, r2, r3
 800e954:	d331      	bcc.n	800e9ba <quorem+0x9e>
 800e956:	f04f 0e00 	mov.w	lr, #0
 800e95a:	4640      	mov	r0, r8
 800e95c:	46ac      	mov	ip, r5
 800e95e:	46f2      	mov	sl, lr
 800e960:	f850 2b04 	ldr.w	r2, [r0], #4
 800e964:	b293      	uxth	r3, r2
 800e966:	fb06 e303 	mla	r3, r6, r3, lr
 800e96a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e96e:	b29b      	uxth	r3, r3
 800e970:	ebaa 0303 	sub.w	r3, sl, r3
 800e974:	f8dc a000 	ldr.w	sl, [ip]
 800e978:	0c12      	lsrs	r2, r2, #16
 800e97a:	fa13 f38a 	uxtah	r3, r3, sl
 800e97e:	fb06 e202 	mla	r2, r6, r2, lr
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	9b00      	ldr	r3, [sp, #0]
 800e986:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e98a:	b292      	uxth	r2, r2
 800e98c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e994:	f8bd 3000 	ldrh.w	r3, [sp]
 800e998:	4581      	cmp	r9, r0
 800e99a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e99e:	f84c 3b04 	str.w	r3, [ip], #4
 800e9a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e9a6:	d2db      	bcs.n	800e960 <quorem+0x44>
 800e9a8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e9ac:	b92b      	cbnz	r3, 800e9ba <quorem+0x9e>
 800e9ae:	9b01      	ldr	r3, [sp, #4]
 800e9b0:	3b04      	subs	r3, #4
 800e9b2:	429d      	cmp	r5, r3
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	d32e      	bcc.n	800ea16 <quorem+0xfa>
 800e9b8:	613c      	str	r4, [r7, #16]
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	f001 fc84 	bl	80102c8 <__mcmp>
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	db24      	blt.n	800ea0e <quorem+0xf2>
 800e9c4:	3601      	adds	r6, #1
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f04f 0c00 	mov.w	ip, #0
 800e9cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9d0:	f8d0 e000 	ldr.w	lr, [r0]
 800e9d4:	b293      	uxth	r3, r2
 800e9d6:	ebac 0303 	sub.w	r3, ip, r3
 800e9da:	0c12      	lsrs	r2, r2, #16
 800e9dc:	fa13 f38e 	uxtah	r3, r3, lr
 800e9e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e9e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9ee:	45c1      	cmp	r9, r8
 800e9f0:	f840 3b04 	str.w	r3, [r0], #4
 800e9f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e9f8:	d2e8      	bcs.n	800e9cc <quorem+0xb0>
 800e9fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea02:	b922      	cbnz	r2, 800ea0e <quorem+0xf2>
 800ea04:	3b04      	subs	r3, #4
 800ea06:	429d      	cmp	r5, r3
 800ea08:	461a      	mov	r2, r3
 800ea0a:	d30a      	bcc.n	800ea22 <quorem+0x106>
 800ea0c:	613c      	str	r4, [r7, #16]
 800ea0e:	4630      	mov	r0, r6
 800ea10:	b003      	add	sp, #12
 800ea12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea16:	6812      	ldr	r2, [r2, #0]
 800ea18:	3b04      	subs	r3, #4
 800ea1a:	2a00      	cmp	r2, #0
 800ea1c:	d1cc      	bne.n	800e9b8 <quorem+0x9c>
 800ea1e:	3c01      	subs	r4, #1
 800ea20:	e7c7      	b.n	800e9b2 <quorem+0x96>
 800ea22:	6812      	ldr	r2, [r2, #0]
 800ea24:	3b04      	subs	r3, #4
 800ea26:	2a00      	cmp	r2, #0
 800ea28:	d1f0      	bne.n	800ea0c <quorem+0xf0>
 800ea2a:	3c01      	subs	r4, #1
 800ea2c:	e7eb      	b.n	800ea06 <quorem+0xea>
 800ea2e:	2000      	movs	r0, #0
 800ea30:	e7ee      	b.n	800ea10 <quorem+0xf4>
 800ea32:	0000      	movs	r0, r0
 800ea34:	0000      	movs	r0, r0
	...

0800ea38 <_dtoa_r>:
 800ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	ed2d 8b04 	vpush	{d8-d9}
 800ea40:	ec57 6b10 	vmov	r6, r7, d0
 800ea44:	b093      	sub	sp, #76	; 0x4c
 800ea46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ea48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ea4c:	9106      	str	r1, [sp, #24]
 800ea4e:	ee10 aa10 	vmov	sl, s0
 800ea52:	4604      	mov	r4, r0
 800ea54:	9209      	str	r2, [sp, #36]	; 0x24
 800ea56:	930c      	str	r3, [sp, #48]	; 0x30
 800ea58:	46bb      	mov	fp, r7
 800ea5a:	b975      	cbnz	r5, 800ea7a <_dtoa_r+0x42>
 800ea5c:	2010      	movs	r0, #16
 800ea5e:	f001 f94d 	bl	800fcfc <malloc>
 800ea62:	4602      	mov	r2, r0
 800ea64:	6260      	str	r0, [r4, #36]	; 0x24
 800ea66:	b920      	cbnz	r0, 800ea72 <_dtoa_r+0x3a>
 800ea68:	4ba7      	ldr	r3, [pc, #668]	; (800ed08 <_dtoa_r+0x2d0>)
 800ea6a:	21ea      	movs	r1, #234	; 0xea
 800ea6c:	48a7      	ldr	r0, [pc, #668]	; (800ed0c <_dtoa_r+0x2d4>)
 800ea6e:	f002 f8ad 	bl	8010bcc <__assert_func>
 800ea72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ea76:	6005      	str	r5, [r0, #0]
 800ea78:	60c5      	str	r5, [r0, #12]
 800ea7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea7c:	6819      	ldr	r1, [r3, #0]
 800ea7e:	b151      	cbz	r1, 800ea96 <_dtoa_r+0x5e>
 800ea80:	685a      	ldr	r2, [r3, #4]
 800ea82:	604a      	str	r2, [r1, #4]
 800ea84:	2301      	movs	r3, #1
 800ea86:	4093      	lsls	r3, r2
 800ea88:	608b      	str	r3, [r1, #8]
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f001 f990 	bl	800fdb0 <_Bfree>
 800ea90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea92:	2200      	movs	r2, #0
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	1e3b      	subs	r3, r7, #0
 800ea98:	bfaa      	itet	ge
 800ea9a:	2300      	movge	r3, #0
 800ea9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800eaa0:	f8c8 3000 	strge.w	r3, [r8]
 800eaa4:	4b9a      	ldr	r3, [pc, #616]	; (800ed10 <_dtoa_r+0x2d8>)
 800eaa6:	bfbc      	itt	lt
 800eaa8:	2201      	movlt	r2, #1
 800eaaa:	f8c8 2000 	strlt.w	r2, [r8]
 800eaae:	ea33 030b 	bics.w	r3, r3, fp
 800eab2:	d11b      	bne.n	800eaec <_dtoa_r+0xb4>
 800eab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eab6:	f242 730f 	movw	r3, #9999	; 0x270f
 800eaba:	6013      	str	r3, [r2, #0]
 800eabc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eac0:	4333      	orrs	r3, r6
 800eac2:	f000 8592 	beq.w	800f5ea <_dtoa_r+0xbb2>
 800eac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eac8:	b963      	cbnz	r3, 800eae4 <_dtoa_r+0xac>
 800eaca:	4b92      	ldr	r3, [pc, #584]	; (800ed14 <_dtoa_r+0x2dc>)
 800eacc:	e022      	b.n	800eb14 <_dtoa_r+0xdc>
 800eace:	4b92      	ldr	r3, [pc, #584]	; (800ed18 <_dtoa_r+0x2e0>)
 800ead0:	9301      	str	r3, [sp, #4]
 800ead2:	3308      	adds	r3, #8
 800ead4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ead6:	6013      	str	r3, [r2, #0]
 800ead8:	9801      	ldr	r0, [sp, #4]
 800eada:	b013      	add	sp, #76	; 0x4c
 800eadc:	ecbd 8b04 	vpop	{d8-d9}
 800eae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae4:	4b8b      	ldr	r3, [pc, #556]	; (800ed14 <_dtoa_r+0x2dc>)
 800eae6:	9301      	str	r3, [sp, #4]
 800eae8:	3303      	adds	r3, #3
 800eaea:	e7f3      	b.n	800ead4 <_dtoa_r+0x9c>
 800eaec:	2200      	movs	r2, #0
 800eaee:	2300      	movs	r3, #0
 800eaf0:	4650      	mov	r0, sl
 800eaf2:	4659      	mov	r1, fp
 800eaf4:	f7f1 ffc0 	bl	8000a78 <__aeabi_dcmpeq>
 800eaf8:	ec4b ab19 	vmov	d9, sl, fp
 800eafc:	4680      	mov	r8, r0
 800eafe:	b158      	cbz	r0, 800eb18 <_dtoa_r+0xe0>
 800eb00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb02:	2301      	movs	r3, #1
 800eb04:	6013      	str	r3, [r2, #0]
 800eb06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f000 856b 	beq.w	800f5e4 <_dtoa_r+0xbac>
 800eb0e:	4883      	ldr	r0, [pc, #524]	; (800ed1c <_dtoa_r+0x2e4>)
 800eb10:	6018      	str	r0, [r3, #0]
 800eb12:	1e43      	subs	r3, r0, #1
 800eb14:	9301      	str	r3, [sp, #4]
 800eb16:	e7df      	b.n	800ead8 <_dtoa_r+0xa0>
 800eb18:	ec4b ab10 	vmov	d0, sl, fp
 800eb1c:	aa10      	add	r2, sp, #64	; 0x40
 800eb1e:	a911      	add	r1, sp, #68	; 0x44
 800eb20:	4620      	mov	r0, r4
 800eb22:	f001 fcf3 	bl	801050c <__d2b>
 800eb26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800eb2a:	ee08 0a10 	vmov	s16, r0
 800eb2e:	2d00      	cmp	r5, #0
 800eb30:	f000 8084 	beq.w	800ec3c <_dtoa_r+0x204>
 800eb34:	ee19 3a90 	vmov	r3, s19
 800eb38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800eb40:	4656      	mov	r6, sl
 800eb42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800eb46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eb4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800eb4e:	4b74      	ldr	r3, [pc, #464]	; (800ed20 <_dtoa_r+0x2e8>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	4630      	mov	r0, r6
 800eb54:	4639      	mov	r1, r7
 800eb56:	f7f1 fb6f 	bl	8000238 <__aeabi_dsub>
 800eb5a:	a365      	add	r3, pc, #404	; (adr r3, 800ecf0 <_dtoa_r+0x2b8>)
 800eb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb60:	f7f1 fd22 	bl	80005a8 <__aeabi_dmul>
 800eb64:	a364      	add	r3, pc, #400	; (adr r3, 800ecf8 <_dtoa_r+0x2c0>)
 800eb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6a:	f7f1 fb67 	bl	800023c <__adddf3>
 800eb6e:	4606      	mov	r6, r0
 800eb70:	4628      	mov	r0, r5
 800eb72:	460f      	mov	r7, r1
 800eb74:	f7f1 fcae 	bl	80004d4 <__aeabi_i2d>
 800eb78:	a361      	add	r3, pc, #388	; (adr r3, 800ed00 <_dtoa_r+0x2c8>)
 800eb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7e:	f7f1 fd13 	bl	80005a8 <__aeabi_dmul>
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	4630      	mov	r0, r6
 800eb88:	4639      	mov	r1, r7
 800eb8a:	f7f1 fb57 	bl	800023c <__adddf3>
 800eb8e:	4606      	mov	r6, r0
 800eb90:	460f      	mov	r7, r1
 800eb92:	f7f1 ffb9 	bl	8000b08 <__aeabi_d2iz>
 800eb96:	2200      	movs	r2, #0
 800eb98:	9000      	str	r0, [sp, #0]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	4630      	mov	r0, r6
 800eb9e:	4639      	mov	r1, r7
 800eba0:	f7f1 ff74 	bl	8000a8c <__aeabi_dcmplt>
 800eba4:	b150      	cbz	r0, 800ebbc <_dtoa_r+0x184>
 800eba6:	9800      	ldr	r0, [sp, #0]
 800eba8:	f7f1 fc94 	bl	80004d4 <__aeabi_i2d>
 800ebac:	4632      	mov	r2, r6
 800ebae:	463b      	mov	r3, r7
 800ebb0:	f7f1 ff62 	bl	8000a78 <__aeabi_dcmpeq>
 800ebb4:	b910      	cbnz	r0, 800ebbc <_dtoa_r+0x184>
 800ebb6:	9b00      	ldr	r3, [sp, #0]
 800ebb8:	3b01      	subs	r3, #1
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	9b00      	ldr	r3, [sp, #0]
 800ebbe:	2b16      	cmp	r3, #22
 800ebc0:	d85a      	bhi.n	800ec78 <_dtoa_r+0x240>
 800ebc2:	9a00      	ldr	r2, [sp, #0]
 800ebc4:	4b57      	ldr	r3, [pc, #348]	; (800ed24 <_dtoa_r+0x2ec>)
 800ebc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebce:	ec51 0b19 	vmov	r0, r1, d9
 800ebd2:	f7f1 ff5b 	bl	8000a8c <__aeabi_dcmplt>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	d050      	beq.n	800ec7c <_dtoa_r+0x244>
 800ebda:	9b00      	ldr	r3, [sp, #0]
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ebe6:	1b5d      	subs	r5, r3, r5
 800ebe8:	1e6b      	subs	r3, r5, #1
 800ebea:	9305      	str	r3, [sp, #20]
 800ebec:	bf45      	ittet	mi
 800ebee:	f1c5 0301 	rsbmi	r3, r5, #1
 800ebf2:	9304      	strmi	r3, [sp, #16]
 800ebf4:	2300      	movpl	r3, #0
 800ebf6:	2300      	movmi	r3, #0
 800ebf8:	bf4c      	ite	mi
 800ebfa:	9305      	strmi	r3, [sp, #20]
 800ebfc:	9304      	strpl	r3, [sp, #16]
 800ebfe:	9b00      	ldr	r3, [sp, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	db3d      	blt.n	800ec80 <_dtoa_r+0x248>
 800ec04:	9b05      	ldr	r3, [sp, #20]
 800ec06:	9a00      	ldr	r2, [sp, #0]
 800ec08:	920a      	str	r2, [sp, #40]	; 0x28
 800ec0a:	4413      	add	r3, r2
 800ec0c:	9305      	str	r3, [sp, #20]
 800ec0e:	2300      	movs	r3, #0
 800ec10:	9307      	str	r3, [sp, #28]
 800ec12:	9b06      	ldr	r3, [sp, #24]
 800ec14:	2b09      	cmp	r3, #9
 800ec16:	f200 8089 	bhi.w	800ed2c <_dtoa_r+0x2f4>
 800ec1a:	2b05      	cmp	r3, #5
 800ec1c:	bfc4      	itt	gt
 800ec1e:	3b04      	subgt	r3, #4
 800ec20:	9306      	strgt	r3, [sp, #24]
 800ec22:	9b06      	ldr	r3, [sp, #24]
 800ec24:	f1a3 0302 	sub.w	r3, r3, #2
 800ec28:	bfcc      	ite	gt
 800ec2a:	2500      	movgt	r5, #0
 800ec2c:	2501      	movle	r5, #1
 800ec2e:	2b03      	cmp	r3, #3
 800ec30:	f200 8087 	bhi.w	800ed42 <_dtoa_r+0x30a>
 800ec34:	e8df f003 	tbb	[pc, r3]
 800ec38:	59383a2d 	.word	0x59383a2d
 800ec3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ec40:	441d      	add	r5, r3
 800ec42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ec46:	2b20      	cmp	r3, #32
 800ec48:	bfc1      	itttt	gt
 800ec4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ec52:	fa0b f303 	lslgt.w	r3, fp, r3
 800ec56:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ec5a:	bfda      	itte	le
 800ec5c:	f1c3 0320 	rsble	r3, r3, #32
 800ec60:	fa06 f003 	lslle.w	r0, r6, r3
 800ec64:	4318      	orrgt	r0, r3
 800ec66:	f7f1 fc25 	bl	80004b4 <__aeabi_ui2d>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	4606      	mov	r6, r0
 800ec6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ec72:	3d01      	subs	r5, #1
 800ec74:	930e      	str	r3, [sp, #56]	; 0x38
 800ec76:	e76a      	b.n	800eb4e <_dtoa_r+0x116>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e7b2      	b.n	800ebe2 <_dtoa_r+0x1aa>
 800ec7c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ec7e:	e7b1      	b.n	800ebe4 <_dtoa_r+0x1ac>
 800ec80:	9b04      	ldr	r3, [sp, #16]
 800ec82:	9a00      	ldr	r2, [sp, #0]
 800ec84:	1a9b      	subs	r3, r3, r2
 800ec86:	9304      	str	r3, [sp, #16]
 800ec88:	4253      	negs	r3, r2
 800ec8a:	9307      	str	r3, [sp, #28]
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec90:	e7bf      	b.n	800ec12 <_dtoa_r+0x1da>
 800ec92:	2300      	movs	r3, #0
 800ec94:	9308      	str	r3, [sp, #32]
 800ec96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	dc55      	bgt.n	800ed48 <_dtoa_r+0x310>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eca2:	461a      	mov	r2, r3
 800eca4:	9209      	str	r2, [sp, #36]	; 0x24
 800eca6:	e00c      	b.n	800ecc2 <_dtoa_r+0x28a>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e7f3      	b.n	800ec94 <_dtoa_r+0x25c>
 800ecac:	2300      	movs	r3, #0
 800ecae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecb0:	9308      	str	r3, [sp, #32]
 800ecb2:	9b00      	ldr	r3, [sp, #0]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	9302      	str	r3, [sp, #8]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	9303      	str	r3, [sp, #12]
 800ecbe:	bfb8      	it	lt
 800ecc0:	2301      	movlt	r3, #1
 800ecc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	6042      	str	r2, [r0, #4]
 800ecc8:	2204      	movs	r2, #4
 800ecca:	f102 0614 	add.w	r6, r2, #20
 800ecce:	429e      	cmp	r6, r3
 800ecd0:	6841      	ldr	r1, [r0, #4]
 800ecd2:	d93d      	bls.n	800ed50 <_dtoa_r+0x318>
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	f001 f82b 	bl	800fd30 <_Balloc>
 800ecda:	9001      	str	r0, [sp, #4]
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d13b      	bne.n	800ed58 <_dtoa_r+0x320>
 800ece0:	4b11      	ldr	r3, [pc, #68]	; (800ed28 <_dtoa_r+0x2f0>)
 800ece2:	4602      	mov	r2, r0
 800ece4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ece8:	e6c0      	b.n	800ea6c <_dtoa_r+0x34>
 800ecea:	2301      	movs	r3, #1
 800ecec:	e7df      	b.n	800ecae <_dtoa_r+0x276>
 800ecee:	bf00      	nop
 800ecf0:	636f4361 	.word	0x636f4361
 800ecf4:	3fd287a7 	.word	0x3fd287a7
 800ecf8:	8b60c8b3 	.word	0x8b60c8b3
 800ecfc:	3fc68a28 	.word	0x3fc68a28
 800ed00:	509f79fb 	.word	0x509f79fb
 800ed04:	3fd34413 	.word	0x3fd34413
 800ed08:	08011a8e 	.word	0x08011a8e
 800ed0c:	08011aa5 	.word	0x08011aa5
 800ed10:	7ff00000 	.word	0x7ff00000
 800ed14:	08011a8a 	.word	0x08011a8a
 800ed18:	08011a81 	.word	0x08011a81
 800ed1c:	08011905 	.word	0x08011905
 800ed20:	3ff80000 	.word	0x3ff80000
 800ed24:	08011c10 	.word	0x08011c10
 800ed28:	08011b00 	.word	0x08011b00
 800ed2c:	2501      	movs	r5, #1
 800ed2e:	2300      	movs	r3, #0
 800ed30:	9306      	str	r3, [sp, #24]
 800ed32:	9508      	str	r5, [sp, #32]
 800ed34:	f04f 33ff 	mov.w	r3, #4294967295
 800ed38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	2312      	movs	r3, #18
 800ed40:	e7b0      	b.n	800eca4 <_dtoa_r+0x26c>
 800ed42:	2301      	movs	r3, #1
 800ed44:	9308      	str	r3, [sp, #32]
 800ed46:	e7f5      	b.n	800ed34 <_dtoa_r+0x2fc>
 800ed48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ed4e:	e7b8      	b.n	800ecc2 <_dtoa_r+0x28a>
 800ed50:	3101      	adds	r1, #1
 800ed52:	6041      	str	r1, [r0, #4]
 800ed54:	0052      	lsls	r2, r2, #1
 800ed56:	e7b8      	b.n	800ecca <_dtoa_r+0x292>
 800ed58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed5a:	9a01      	ldr	r2, [sp, #4]
 800ed5c:	601a      	str	r2, [r3, #0]
 800ed5e:	9b03      	ldr	r3, [sp, #12]
 800ed60:	2b0e      	cmp	r3, #14
 800ed62:	f200 809d 	bhi.w	800eea0 <_dtoa_r+0x468>
 800ed66:	2d00      	cmp	r5, #0
 800ed68:	f000 809a 	beq.w	800eea0 <_dtoa_r+0x468>
 800ed6c:	9b00      	ldr	r3, [sp, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	dd32      	ble.n	800edd8 <_dtoa_r+0x3a0>
 800ed72:	4ab7      	ldr	r2, [pc, #732]	; (800f050 <_dtoa_r+0x618>)
 800ed74:	f003 030f 	and.w	r3, r3, #15
 800ed78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed80:	9b00      	ldr	r3, [sp, #0]
 800ed82:	05d8      	lsls	r0, r3, #23
 800ed84:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ed88:	d516      	bpl.n	800edb8 <_dtoa_r+0x380>
 800ed8a:	4bb2      	ldr	r3, [pc, #712]	; (800f054 <_dtoa_r+0x61c>)
 800ed8c:	ec51 0b19 	vmov	r0, r1, d9
 800ed90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed94:	f7f1 fd32 	bl	80007fc <__aeabi_ddiv>
 800ed98:	f007 070f 	and.w	r7, r7, #15
 800ed9c:	4682      	mov	sl, r0
 800ed9e:	468b      	mov	fp, r1
 800eda0:	2503      	movs	r5, #3
 800eda2:	4eac      	ldr	r6, [pc, #688]	; (800f054 <_dtoa_r+0x61c>)
 800eda4:	b957      	cbnz	r7, 800edbc <_dtoa_r+0x384>
 800eda6:	4642      	mov	r2, r8
 800eda8:	464b      	mov	r3, r9
 800edaa:	4650      	mov	r0, sl
 800edac:	4659      	mov	r1, fp
 800edae:	f7f1 fd25 	bl	80007fc <__aeabi_ddiv>
 800edb2:	4682      	mov	sl, r0
 800edb4:	468b      	mov	fp, r1
 800edb6:	e028      	b.n	800ee0a <_dtoa_r+0x3d2>
 800edb8:	2502      	movs	r5, #2
 800edba:	e7f2      	b.n	800eda2 <_dtoa_r+0x36a>
 800edbc:	07f9      	lsls	r1, r7, #31
 800edbe:	d508      	bpl.n	800edd2 <_dtoa_r+0x39a>
 800edc0:	4640      	mov	r0, r8
 800edc2:	4649      	mov	r1, r9
 800edc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800edc8:	f7f1 fbee 	bl	80005a8 <__aeabi_dmul>
 800edcc:	3501      	adds	r5, #1
 800edce:	4680      	mov	r8, r0
 800edd0:	4689      	mov	r9, r1
 800edd2:	107f      	asrs	r7, r7, #1
 800edd4:	3608      	adds	r6, #8
 800edd6:	e7e5      	b.n	800eda4 <_dtoa_r+0x36c>
 800edd8:	f000 809b 	beq.w	800ef12 <_dtoa_r+0x4da>
 800eddc:	9b00      	ldr	r3, [sp, #0]
 800edde:	4f9d      	ldr	r7, [pc, #628]	; (800f054 <_dtoa_r+0x61c>)
 800ede0:	425e      	negs	r6, r3
 800ede2:	4b9b      	ldr	r3, [pc, #620]	; (800f050 <_dtoa_r+0x618>)
 800ede4:	f006 020f 	and.w	r2, r6, #15
 800ede8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf0:	ec51 0b19 	vmov	r0, r1, d9
 800edf4:	f7f1 fbd8 	bl	80005a8 <__aeabi_dmul>
 800edf8:	1136      	asrs	r6, r6, #4
 800edfa:	4682      	mov	sl, r0
 800edfc:	468b      	mov	fp, r1
 800edfe:	2300      	movs	r3, #0
 800ee00:	2502      	movs	r5, #2
 800ee02:	2e00      	cmp	r6, #0
 800ee04:	d17a      	bne.n	800eefc <_dtoa_r+0x4c4>
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1d3      	bne.n	800edb2 <_dtoa_r+0x37a>
 800ee0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	f000 8082 	beq.w	800ef16 <_dtoa_r+0x4de>
 800ee12:	4b91      	ldr	r3, [pc, #580]	; (800f058 <_dtoa_r+0x620>)
 800ee14:	2200      	movs	r2, #0
 800ee16:	4650      	mov	r0, sl
 800ee18:	4659      	mov	r1, fp
 800ee1a:	f7f1 fe37 	bl	8000a8c <__aeabi_dcmplt>
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	d079      	beq.n	800ef16 <_dtoa_r+0x4de>
 800ee22:	9b03      	ldr	r3, [sp, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d076      	beq.n	800ef16 <_dtoa_r+0x4de>
 800ee28:	9b02      	ldr	r3, [sp, #8]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	dd36      	ble.n	800ee9c <_dtoa_r+0x464>
 800ee2e:	9b00      	ldr	r3, [sp, #0]
 800ee30:	4650      	mov	r0, sl
 800ee32:	4659      	mov	r1, fp
 800ee34:	1e5f      	subs	r7, r3, #1
 800ee36:	2200      	movs	r2, #0
 800ee38:	4b88      	ldr	r3, [pc, #544]	; (800f05c <_dtoa_r+0x624>)
 800ee3a:	f7f1 fbb5 	bl	80005a8 <__aeabi_dmul>
 800ee3e:	9e02      	ldr	r6, [sp, #8]
 800ee40:	4682      	mov	sl, r0
 800ee42:	468b      	mov	fp, r1
 800ee44:	3501      	adds	r5, #1
 800ee46:	4628      	mov	r0, r5
 800ee48:	f7f1 fb44 	bl	80004d4 <__aeabi_i2d>
 800ee4c:	4652      	mov	r2, sl
 800ee4e:	465b      	mov	r3, fp
 800ee50:	f7f1 fbaa 	bl	80005a8 <__aeabi_dmul>
 800ee54:	4b82      	ldr	r3, [pc, #520]	; (800f060 <_dtoa_r+0x628>)
 800ee56:	2200      	movs	r2, #0
 800ee58:	f7f1 f9f0 	bl	800023c <__adddf3>
 800ee5c:	46d0      	mov	r8, sl
 800ee5e:	46d9      	mov	r9, fp
 800ee60:	4682      	mov	sl, r0
 800ee62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ee66:	2e00      	cmp	r6, #0
 800ee68:	d158      	bne.n	800ef1c <_dtoa_r+0x4e4>
 800ee6a:	4b7e      	ldr	r3, [pc, #504]	; (800f064 <_dtoa_r+0x62c>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	4640      	mov	r0, r8
 800ee70:	4649      	mov	r1, r9
 800ee72:	f7f1 f9e1 	bl	8000238 <__aeabi_dsub>
 800ee76:	4652      	mov	r2, sl
 800ee78:	465b      	mov	r3, fp
 800ee7a:	4680      	mov	r8, r0
 800ee7c:	4689      	mov	r9, r1
 800ee7e:	f7f1 fe23 	bl	8000ac8 <__aeabi_dcmpgt>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	f040 8295 	bne.w	800f3b2 <_dtoa_r+0x97a>
 800ee88:	4652      	mov	r2, sl
 800ee8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ee8e:	4640      	mov	r0, r8
 800ee90:	4649      	mov	r1, r9
 800ee92:	f7f1 fdfb 	bl	8000a8c <__aeabi_dcmplt>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	f040 8289 	bne.w	800f3ae <_dtoa_r+0x976>
 800ee9c:	ec5b ab19 	vmov	sl, fp, d9
 800eea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	f2c0 8148 	blt.w	800f138 <_dtoa_r+0x700>
 800eea8:	9a00      	ldr	r2, [sp, #0]
 800eeaa:	2a0e      	cmp	r2, #14
 800eeac:	f300 8144 	bgt.w	800f138 <_dtoa_r+0x700>
 800eeb0:	4b67      	ldr	r3, [pc, #412]	; (800f050 <_dtoa_r+0x618>)
 800eeb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eeb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eeba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f280 80d5 	bge.w	800f06c <_dtoa_r+0x634>
 800eec2:	9b03      	ldr	r3, [sp, #12]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f300 80d1 	bgt.w	800f06c <_dtoa_r+0x634>
 800eeca:	f040 826f 	bne.w	800f3ac <_dtoa_r+0x974>
 800eece:	4b65      	ldr	r3, [pc, #404]	; (800f064 <_dtoa_r+0x62c>)
 800eed0:	2200      	movs	r2, #0
 800eed2:	4640      	mov	r0, r8
 800eed4:	4649      	mov	r1, r9
 800eed6:	f7f1 fb67 	bl	80005a8 <__aeabi_dmul>
 800eeda:	4652      	mov	r2, sl
 800eedc:	465b      	mov	r3, fp
 800eede:	f7f1 fde9 	bl	8000ab4 <__aeabi_dcmpge>
 800eee2:	9e03      	ldr	r6, [sp, #12]
 800eee4:	4637      	mov	r7, r6
 800eee6:	2800      	cmp	r0, #0
 800eee8:	f040 8245 	bne.w	800f376 <_dtoa_r+0x93e>
 800eeec:	9d01      	ldr	r5, [sp, #4]
 800eeee:	2331      	movs	r3, #49	; 0x31
 800eef0:	f805 3b01 	strb.w	r3, [r5], #1
 800eef4:	9b00      	ldr	r3, [sp, #0]
 800eef6:	3301      	adds	r3, #1
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	e240      	b.n	800f37e <_dtoa_r+0x946>
 800eefc:	07f2      	lsls	r2, r6, #31
 800eefe:	d505      	bpl.n	800ef0c <_dtoa_r+0x4d4>
 800ef00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef04:	f7f1 fb50 	bl	80005a8 <__aeabi_dmul>
 800ef08:	3501      	adds	r5, #1
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	1076      	asrs	r6, r6, #1
 800ef0e:	3708      	adds	r7, #8
 800ef10:	e777      	b.n	800ee02 <_dtoa_r+0x3ca>
 800ef12:	2502      	movs	r5, #2
 800ef14:	e779      	b.n	800ee0a <_dtoa_r+0x3d2>
 800ef16:	9f00      	ldr	r7, [sp, #0]
 800ef18:	9e03      	ldr	r6, [sp, #12]
 800ef1a:	e794      	b.n	800ee46 <_dtoa_r+0x40e>
 800ef1c:	9901      	ldr	r1, [sp, #4]
 800ef1e:	4b4c      	ldr	r3, [pc, #304]	; (800f050 <_dtoa_r+0x618>)
 800ef20:	4431      	add	r1, r6
 800ef22:	910d      	str	r1, [sp, #52]	; 0x34
 800ef24:	9908      	ldr	r1, [sp, #32]
 800ef26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ef2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef2e:	2900      	cmp	r1, #0
 800ef30:	d043      	beq.n	800efba <_dtoa_r+0x582>
 800ef32:	494d      	ldr	r1, [pc, #308]	; (800f068 <_dtoa_r+0x630>)
 800ef34:	2000      	movs	r0, #0
 800ef36:	f7f1 fc61 	bl	80007fc <__aeabi_ddiv>
 800ef3a:	4652      	mov	r2, sl
 800ef3c:	465b      	mov	r3, fp
 800ef3e:	f7f1 f97b 	bl	8000238 <__aeabi_dsub>
 800ef42:	9d01      	ldr	r5, [sp, #4]
 800ef44:	4682      	mov	sl, r0
 800ef46:	468b      	mov	fp, r1
 800ef48:	4649      	mov	r1, r9
 800ef4a:	4640      	mov	r0, r8
 800ef4c:	f7f1 fddc 	bl	8000b08 <__aeabi_d2iz>
 800ef50:	4606      	mov	r6, r0
 800ef52:	f7f1 fabf 	bl	80004d4 <__aeabi_i2d>
 800ef56:	4602      	mov	r2, r0
 800ef58:	460b      	mov	r3, r1
 800ef5a:	4640      	mov	r0, r8
 800ef5c:	4649      	mov	r1, r9
 800ef5e:	f7f1 f96b 	bl	8000238 <__aeabi_dsub>
 800ef62:	3630      	adds	r6, #48	; 0x30
 800ef64:	f805 6b01 	strb.w	r6, [r5], #1
 800ef68:	4652      	mov	r2, sl
 800ef6a:	465b      	mov	r3, fp
 800ef6c:	4680      	mov	r8, r0
 800ef6e:	4689      	mov	r9, r1
 800ef70:	f7f1 fd8c 	bl	8000a8c <__aeabi_dcmplt>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d163      	bne.n	800f040 <_dtoa_r+0x608>
 800ef78:	4642      	mov	r2, r8
 800ef7a:	464b      	mov	r3, r9
 800ef7c:	4936      	ldr	r1, [pc, #216]	; (800f058 <_dtoa_r+0x620>)
 800ef7e:	2000      	movs	r0, #0
 800ef80:	f7f1 f95a 	bl	8000238 <__aeabi_dsub>
 800ef84:	4652      	mov	r2, sl
 800ef86:	465b      	mov	r3, fp
 800ef88:	f7f1 fd80 	bl	8000a8c <__aeabi_dcmplt>
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	f040 80b5 	bne.w	800f0fc <_dtoa_r+0x6c4>
 800ef92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef94:	429d      	cmp	r5, r3
 800ef96:	d081      	beq.n	800ee9c <_dtoa_r+0x464>
 800ef98:	4b30      	ldr	r3, [pc, #192]	; (800f05c <_dtoa_r+0x624>)
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	4650      	mov	r0, sl
 800ef9e:	4659      	mov	r1, fp
 800efa0:	f7f1 fb02 	bl	80005a8 <__aeabi_dmul>
 800efa4:	4b2d      	ldr	r3, [pc, #180]	; (800f05c <_dtoa_r+0x624>)
 800efa6:	4682      	mov	sl, r0
 800efa8:	468b      	mov	fp, r1
 800efaa:	4640      	mov	r0, r8
 800efac:	4649      	mov	r1, r9
 800efae:	2200      	movs	r2, #0
 800efb0:	f7f1 fafa 	bl	80005a8 <__aeabi_dmul>
 800efb4:	4680      	mov	r8, r0
 800efb6:	4689      	mov	r9, r1
 800efb8:	e7c6      	b.n	800ef48 <_dtoa_r+0x510>
 800efba:	4650      	mov	r0, sl
 800efbc:	4659      	mov	r1, fp
 800efbe:	f7f1 faf3 	bl	80005a8 <__aeabi_dmul>
 800efc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efc4:	9d01      	ldr	r5, [sp, #4]
 800efc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800efc8:	4682      	mov	sl, r0
 800efca:	468b      	mov	fp, r1
 800efcc:	4649      	mov	r1, r9
 800efce:	4640      	mov	r0, r8
 800efd0:	f7f1 fd9a 	bl	8000b08 <__aeabi_d2iz>
 800efd4:	4606      	mov	r6, r0
 800efd6:	f7f1 fa7d 	bl	80004d4 <__aeabi_i2d>
 800efda:	3630      	adds	r6, #48	; 0x30
 800efdc:	4602      	mov	r2, r0
 800efde:	460b      	mov	r3, r1
 800efe0:	4640      	mov	r0, r8
 800efe2:	4649      	mov	r1, r9
 800efe4:	f7f1 f928 	bl	8000238 <__aeabi_dsub>
 800efe8:	f805 6b01 	strb.w	r6, [r5], #1
 800efec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efee:	429d      	cmp	r5, r3
 800eff0:	4680      	mov	r8, r0
 800eff2:	4689      	mov	r9, r1
 800eff4:	f04f 0200 	mov.w	r2, #0
 800eff8:	d124      	bne.n	800f044 <_dtoa_r+0x60c>
 800effa:	4b1b      	ldr	r3, [pc, #108]	; (800f068 <_dtoa_r+0x630>)
 800effc:	4650      	mov	r0, sl
 800effe:	4659      	mov	r1, fp
 800f000:	f7f1 f91c 	bl	800023c <__adddf3>
 800f004:	4602      	mov	r2, r0
 800f006:	460b      	mov	r3, r1
 800f008:	4640      	mov	r0, r8
 800f00a:	4649      	mov	r1, r9
 800f00c:	f7f1 fd5c 	bl	8000ac8 <__aeabi_dcmpgt>
 800f010:	2800      	cmp	r0, #0
 800f012:	d173      	bne.n	800f0fc <_dtoa_r+0x6c4>
 800f014:	4652      	mov	r2, sl
 800f016:	465b      	mov	r3, fp
 800f018:	4913      	ldr	r1, [pc, #76]	; (800f068 <_dtoa_r+0x630>)
 800f01a:	2000      	movs	r0, #0
 800f01c:	f7f1 f90c 	bl	8000238 <__aeabi_dsub>
 800f020:	4602      	mov	r2, r0
 800f022:	460b      	mov	r3, r1
 800f024:	4640      	mov	r0, r8
 800f026:	4649      	mov	r1, r9
 800f028:	f7f1 fd30 	bl	8000a8c <__aeabi_dcmplt>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	f43f af35 	beq.w	800ee9c <_dtoa_r+0x464>
 800f032:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f034:	1e6b      	subs	r3, r5, #1
 800f036:	930f      	str	r3, [sp, #60]	; 0x3c
 800f038:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f03c:	2b30      	cmp	r3, #48	; 0x30
 800f03e:	d0f8      	beq.n	800f032 <_dtoa_r+0x5fa>
 800f040:	9700      	str	r7, [sp, #0]
 800f042:	e049      	b.n	800f0d8 <_dtoa_r+0x6a0>
 800f044:	4b05      	ldr	r3, [pc, #20]	; (800f05c <_dtoa_r+0x624>)
 800f046:	f7f1 faaf 	bl	80005a8 <__aeabi_dmul>
 800f04a:	4680      	mov	r8, r0
 800f04c:	4689      	mov	r9, r1
 800f04e:	e7bd      	b.n	800efcc <_dtoa_r+0x594>
 800f050:	08011c10 	.word	0x08011c10
 800f054:	08011be8 	.word	0x08011be8
 800f058:	3ff00000 	.word	0x3ff00000
 800f05c:	40240000 	.word	0x40240000
 800f060:	401c0000 	.word	0x401c0000
 800f064:	40140000 	.word	0x40140000
 800f068:	3fe00000 	.word	0x3fe00000
 800f06c:	9d01      	ldr	r5, [sp, #4]
 800f06e:	4656      	mov	r6, sl
 800f070:	465f      	mov	r7, fp
 800f072:	4642      	mov	r2, r8
 800f074:	464b      	mov	r3, r9
 800f076:	4630      	mov	r0, r6
 800f078:	4639      	mov	r1, r7
 800f07a:	f7f1 fbbf 	bl	80007fc <__aeabi_ddiv>
 800f07e:	f7f1 fd43 	bl	8000b08 <__aeabi_d2iz>
 800f082:	4682      	mov	sl, r0
 800f084:	f7f1 fa26 	bl	80004d4 <__aeabi_i2d>
 800f088:	4642      	mov	r2, r8
 800f08a:	464b      	mov	r3, r9
 800f08c:	f7f1 fa8c 	bl	80005a8 <__aeabi_dmul>
 800f090:	4602      	mov	r2, r0
 800f092:	460b      	mov	r3, r1
 800f094:	4630      	mov	r0, r6
 800f096:	4639      	mov	r1, r7
 800f098:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f09c:	f7f1 f8cc 	bl	8000238 <__aeabi_dsub>
 800f0a0:	f805 6b01 	strb.w	r6, [r5], #1
 800f0a4:	9e01      	ldr	r6, [sp, #4]
 800f0a6:	9f03      	ldr	r7, [sp, #12]
 800f0a8:	1bae      	subs	r6, r5, r6
 800f0aa:	42b7      	cmp	r7, r6
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	d135      	bne.n	800f11e <_dtoa_r+0x6e6>
 800f0b2:	f7f1 f8c3 	bl	800023c <__adddf3>
 800f0b6:	4642      	mov	r2, r8
 800f0b8:	464b      	mov	r3, r9
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	460f      	mov	r7, r1
 800f0be:	f7f1 fd03 	bl	8000ac8 <__aeabi_dcmpgt>
 800f0c2:	b9d0      	cbnz	r0, 800f0fa <_dtoa_r+0x6c2>
 800f0c4:	4642      	mov	r2, r8
 800f0c6:	464b      	mov	r3, r9
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	4639      	mov	r1, r7
 800f0cc:	f7f1 fcd4 	bl	8000a78 <__aeabi_dcmpeq>
 800f0d0:	b110      	cbz	r0, 800f0d8 <_dtoa_r+0x6a0>
 800f0d2:	f01a 0f01 	tst.w	sl, #1
 800f0d6:	d110      	bne.n	800f0fa <_dtoa_r+0x6c2>
 800f0d8:	4620      	mov	r0, r4
 800f0da:	ee18 1a10 	vmov	r1, s16
 800f0de:	f000 fe67 	bl	800fdb0 <_Bfree>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	9800      	ldr	r0, [sp, #0]
 800f0e6:	702b      	strb	r3, [r5, #0]
 800f0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0ea:	3001      	adds	r0, #1
 800f0ec:	6018      	str	r0, [r3, #0]
 800f0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f43f acf1 	beq.w	800ead8 <_dtoa_r+0xa0>
 800f0f6:	601d      	str	r5, [r3, #0]
 800f0f8:	e4ee      	b.n	800ead8 <_dtoa_r+0xa0>
 800f0fa:	9f00      	ldr	r7, [sp, #0]
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	461d      	mov	r5, r3
 800f100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f104:	2a39      	cmp	r2, #57	; 0x39
 800f106:	d106      	bne.n	800f116 <_dtoa_r+0x6de>
 800f108:	9a01      	ldr	r2, [sp, #4]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d1f7      	bne.n	800f0fe <_dtoa_r+0x6c6>
 800f10e:	9901      	ldr	r1, [sp, #4]
 800f110:	2230      	movs	r2, #48	; 0x30
 800f112:	3701      	adds	r7, #1
 800f114:	700a      	strb	r2, [r1, #0]
 800f116:	781a      	ldrb	r2, [r3, #0]
 800f118:	3201      	adds	r2, #1
 800f11a:	701a      	strb	r2, [r3, #0]
 800f11c:	e790      	b.n	800f040 <_dtoa_r+0x608>
 800f11e:	4ba6      	ldr	r3, [pc, #664]	; (800f3b8 <_dtoa_r+0x980>)
 800f120:	2200      	movs	r2, #0
 800f122:	f7f1 fa41 	bl	80005a8 <__aeabi_dmul>
 800f126:	2200      	movs	r2, #0
 800f128:	2300      	movs	r3, #0
 800f12a:	4606      	mov	r6, r0
 800f12c:	460f      	mov	r7, r1
 800f12e:	f7f1 fca3 	bl	8000a78 <__aeabi_dcmpeq>
 800f132:	2800      	cmp	r0, #0
 800f134:	d09d      	beq.n	800f072 <_dtoa_r+0x63a>
 800f136:	e7cf      	b.n	800f0d8 <_dtoa_r+0x6a0>
 800f138:	9a08      	ldr	r2, [sp, #32]
 800f13a:	2a00      	cmp	r2, #0
 800f13c:	f000 80d7 	beq.w	800f2ee <_dtoa_r+0x8b6>
 800f140:	9a06      	ldr	r2, [sp, #24]
 800f142:	2a01      	cmp	r2, #1
 800f144:	f300 80ba 	bgt.w	800f2bc <_dtoa_r+0x884>
 800f148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f14a:	2a00      	cmp	r2, #0
 800f14c:	f000 80b2 	beq.w	800f2b4 <_dtoa_r+0x87c>
 800f150:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f154:	9e07      	ldr	r6, [sp, #28]
 800f156:	9d04      	ldr	r5, [sp, #16]
 800f158:	9a04      	ldr	r2, [sp, #16]
 800f15a:	441a      	add	r2, r3
 800f15c:	9204      	str	r2, [sp, #16]
 800f15e:	9a05      	ldr	r2, [sp, #20]
 800f160:	2101      	movs	r1, #1
 800f162:	441a      	add	r2, r3
 800f164:	4620      	mov	r0, r4
 800f166:	9205      	str	r2, [sp, #20]
 800f168:	f000 ff24 	bl	800ffb4 <__i2b>
 800f16c:	4607      	mov	r7, r0
 800f16e:	2d00      	cmp	r5, #0
 800f170:	dd0c      	ble.n	800f18c <_dtoa_r+0x754>
 800f172:	9b05      	ldr	r3, [sp, #20]
 800f174:	2b00      	cmp	r3, #0
 800f176:	dd09      	ble.n	800f18c <_dtoa_r+0x754>
 800f178:	42ab      	cmp	r3, r5
 800f17a:	9a04      	ldr	r2, [sp, #16]
 800f17c:	bfa8      	it	ge
 800f17e:	462b      	movge	r3, r5
 800f180:	1ad2      	subs	r2, r2, r3
 800f182:	9204      	str	r2, [sp, #16]
 800f184:	9a05      	ldr	r2, [sp, #20]
 800f186:	1aed      	subs	r5, r5, r3
 800f188:	1ad3      	subs	r3, r2, r3
 800f18a:	9305      	str	r3, [sp, #20]
 800f18c:	9b07      	ldr	r3, [sp, #28]
 800f18e:	b31b      	cbz	r3, 800f1d8 <_dtoa_r+0x7a0>
 800f190:	9b08      	ldr	r3, [sp, #32]
 800f192:	2b00      	cmp	r3, #0
 800f194:	f000 80af 	beq.w	800f2f6 <_dtoa_r+0x8be>
 800f198:	2e00      	cmp	r6, #0
 800f19a:	dd13      	ble.n	800f1c4 <_dtoa_r+0x78c>
 800f19c:	4639      	mov	r1, r7
 800f19e:	4632      	mov	r2, r6
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f000 ffc7 	bl	8010134 <__pow5mult>
 800f1a6:	ee18 2a10 	vmov	r2, s16
 800f1aa:	4601      	mov	r1, r0
 800f1ac:	4607      	mov	r7, r0
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f000 ff16 	bl	800ffe0 <__multiply>
 800f1b4:	ee18 1a10 	vmov	r1, s16
 800f1b8:	4680      	mov	r8, r0
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f000 fdf8 	bl	800fdb0 <_Bfree>
 800f1c0:	ee08 8a10 	vmov	s16, r8
 800f1c4:	9b07      	ldr	r3, [sp, #28]
 800f1c6:	1b9a      	subs	r2, r3, r6
 800f1c8:	d006      	beq.n	800f1d8 <_dtoa_r+0x7a0>
 800f1ca:	ee18 1a10 	vmov	r1, s16
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f000 ffb0 	bl	8010134 <__pow5mult>
 800f1d4:	ee08 0a10 	vmov	s16, r0
 800f1d8:	2101      	movs	r1, #1
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f000 feea 	bl	800ffb4 <__i2b>
 800f1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	f340 8088 	ble.w	800f2fa <_dtoa_r+0x8c2>
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	4601      	mov	r1, r0
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f000 ffa0 	bl	8010134 <__pow5mult>
 800f1f4:	9b06      	ldr	r3, [sp, #24]
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	4606      	mov	r6, r0
 800f1fa:	f340 8081 	ble.w	800f300 <_dtoa_r+0x8c8>
 800f1fe:	f04f 0800 	mov.w	r8, #0
 800f202:	6933      	ldr	r3, [r6, #16]
 800f204:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f208:	6918      	ldr	r0, [r3, #16]
 800f20a:	f000 fe83 	bl	800ff14 <__hi0bits>
 800f20e:	f1c0 0020 	rsb	r0, r0, #32
 800f212:	9b05      	ldr	r3, [sp, #20]
 800f214:	4418      	add	r0, r3
 800f216:	f010 001f 	ands.w	r0, r0, #31
 800f21a:	f000 8092 	beq.w	800f342 <_dtoa_r+0x90a>
 800f21e:	f1c0 0320 	rsb	r3, r0, #32
 800f222:	2b04      	cmp	r3, #4
 800f224:	f340 808a 	ble.w	800f33c <_dtoa_r+0x904>
 800f228:	f1c0 001c 	rsb	r0, r0, #28
 800f22c:	9b04      	ldr	r3, [sp, #16]
 800f22e:	4403      	add	r3, r0
 800f230:	9304      	str	r3, [sp, #16]
 800f232:	9b05      	ldr	r3, [sp, #20]
 800f234:	4403      	add	r3, r0
 800f236:	4405      	add	r5, r0
 800f238:	9305      	str	r3, [sp, #20]
 800f23a:	9b04      	ldr	r3, [sp, #16]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	dd07      	ble.n	800f250 <_dtoa_r+0x818>
 800f240:	ee18 1a10 	vmov	r1, s16
 800f244:	461a      	mov	r2, r3
 800f246:	4620      	mov	r0, r4
 800f248:	f000 ffce 	bl	80101e8 <__lshift>
 800f24c:	ee08 0a10 	vmov	s16, r0
 800f250:	9b05      	ldr	r3, [sp, #20]
 800f252:	2b00      	cmp	r3, #0
 800f254:	dd05      	ble.n	800f262 <_dtoa_r+0x82a>
 800f256:	4631      	mov	r1, r6
 800f258:	461a      	mov	r2, r3
 800f25a:	4620      	mov	r0, r4
 800f25c:	f000 ffc4 	bl	80101e8 <__lshift>
 800f260:	4606      	mov	r6, r0
 800f262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f264:	2b00      	cmp	r3, #0
 800f266:	d06e      	beq.n	800f346 <_dtoa_r+0x90e>
 800f268:	ee18 0a10 	vmov	r0, s16
 800f26c:	4631      	mov	r1, r6
 800f26e:	f001 f82b 	bl	80102c8 <__mcmp>
 800f272:	2800      	cmp	r0, #0
 800f274:	da67      	bge.n	800f346 <_dtoa_r+0x90e>
 800f276:	9b00      	ldr	r3, [sp, #0]
 800f278:	3b01      	subs	r3, #1
 800f27a:	ee18 1a10 	vmov	r1, s16
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	220a      	movs	r2, #10
 800f282:	2300      	movs	r3, #0
 800f284:	4620      	mov	r0, r4
 800f286:	f000 fdb5 	bl	800fdf4 <__multadd>
 800f28a:	9b08      	ldr	r3, [sp, #32]
 800f28c:	ee08 0a10 	vmov	s16, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	f000 81b1 	beq.w	800f5f8 <_dtoa_r+0xbc0>
 800f296:	2300      	movs	r3, #0
 800f298:	4639      	mov	r1, r7
 800f29a:	220a      	movs	r2, #10
 800f29c:	4620      	mov	r0, r4
 800f29e:	f000 fda9 	bl	800fdf4 <__multadd>
 800f2a2:	9b02      	ldr	r3, [sp, #8]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	4607      	mov	r7, r0
 800f2a8:	f300 808e 	bgt.w	800f3c8 <_dtoa_r+0x990>
 800f2ac:	9b06      	ldr	r3, [sp, #24]
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	dc51      	bgt.n	800f356 <_dtoa_r+0x91e>
 800f2b2:	e089      	b.n	800f3c8 <_dtoa_r+0x990>
 800f2b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f2ba:	e74b      	b.n	800f154 <_dtoa_r+0x71c>
 800f2bc:	9b03      	ldr	r3, [sp, #12]
 800f2be:	1e5e      	subs	r6, r3, #1
 800f2c0:	9b07      	ldr	r3, [sp, #28]
 800f2c2:	42b3      	cmp	r3, r6
 800f2c4:	bfbf      	itttt	lt
 800f2c6:	9b07      	ldrlt	r3, [sp, #28]
 800f2c8:	9607      	strlt	r6, [sp, #28]
 800f2ca:	1af2      	sublt	r2, r6, r3
 800f2cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f2ce:	bfb6      	itet	lt
 800f2d0:	189b      	addlt	r3, r3, r2
 800f2d2:	1b9e      	subge	r6, r3, r6
 800f2d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f2d6:	9b03      	ldr	r3, [sp, #12]
 800f2d8:	bfb8      	it	lt
 800f2da:	2600      	movlt	r6, #0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	bfb7      	itett	lt
 800f2e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f2e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f2e8:	1a9d      	sublt	r5, r3, r2
 800f2ea:	2300      	movlt	r3, #0
 800f2ec:	e734      	b.n	800f158 <_dtoa_r+0x720>
 800f2ee:	9e07      	ldr	r6, [sp, #28]
 800f2f0:	9d04      	ldr	r5, [sp, #16]
 800f2f2:	9f08      	ldr	r7, [sp, #32]
 800f2f4:	e73b      	b.n	800f16e <_dtoa_r+0x736>
 800f2f6:	9a07      	ldr	r2, [sp, #28]
 800f2f8:	e767      	b.n	800f1ca <_dtoa_r+0x792>
 800f2fa:	9b06      	ldr	r3, [sp, #24]
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	dc18      	bgt.n	800f332 <_dtoa_r+0x8fa>
 800f300:	f1ba 0f00 	cmp.w	sl, #0
 800f304:	d115      	bne.n	800f332 <_dtoa_r+0x8fa>
 800f306:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f30a:	b993      	cbnz	r3, 800f332 <_dtoa_r+0x8fa>
 800f30c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f310:	0d1b      	lsrs	r3, r3, #20
 800f312:	051b      	lsls	r3, r3, #20
 800f314:	b183      	cbz	r3, 800f338 <_dtoa_r+0x900>
 800f316:	9b04      	ldr	r3, [sp, #16]
 800f318:	3301      	adds	r3, #1
 800f31a:	9304      	str	r3, [sp, #16]
 800f31c:	9b05      	ldr	r3, [sp, #20]
 800f31e:	3301      	adds	r3, #1
 800f320:	9305      	str	r3, [sp, #20]
 800f322:	f04f 0801 	mov.w	r8, #1
 800f326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f47f af6a 	bne.w	800f202 <_dtoa_r+0x7ca>
 800f32e:	2001      	movs	r0, #1
 800f330:	e76f      	b.n	800f212 <_dtoa_r+0x7da>
 800f332:	f04f 0800 	mov.w	r8, #0
 800f336:	e7f6      	b.n	800f326 <_dtoa_r+0x8ee>
 800f338:	4698      	mov	r8, r3
 800f33a:	e7f4      	b.n	800f326 <_dtoa_r+0x8ee>
 800f33c:	f43f af7d 	beq.w	800f23a <_dtoa_r+0x802>
 800f340:	4618      	mov	r0, r3
 800f342:	301c      	adds	r0, #28
 800f344:	e772      	b.n	800f22c <_dtoa_r+0x7f4>
 800f346:	9b03      	ldr	r3, [sp, #12]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	dc37      	bgt.n	800f3bc <_dtoa_r+0x984>
 800f34c:	9b06      	ldr	r3, [sp, #24]
 800f34e:	2b02      	cmp	r3, #2
 800f350:	dd34      	ble.n	800f3bc <_dtoa_r+0x984>
 800f352:	9b03      	ldr	r3, [sp, #12]
 800f354:	9302      	str	r3, [sp, #8]
 800f356:	9b02      	ldr	r3, [sp, #8]
 800f358:	b96b      	cbnz	r3, 800f376 <_dtoa_r+0x93e>
 800f35a:	4631      	mov	r1, r6
 800f35c:	2205      	movs	r2, #5
 800f35e:	4620      	mov	r0, r4
 800f360:	f000 fd48 	bl	800fdf4 <__multadd>
 800f364:	4601      	mov	r1, r0
 800f366:	4606      	mov	r6, r0
 800f368:	ee18 0a10 	vmov	r0, s16
 800f36c:	f000 ffac 	bl	80102c8 <__mcmp>
 800f370:	2800      	cmp	r0, #0
 800f372:	f73f adbb 	bgt.w	800eeec <_dtoa_r+0x4b4>
 800f376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f378:	9d01      	ldr	r5, [sp, #4]
 800f37a:	43db      	mvns	r3, r3
 800f37c:	9300      	str	r3, [sp, #0]
 800f37e:	f04f 0800 	mov.w	r8, #0
 800f382:	4631      	mov	r1, r6
 800f384:	4620      	mov	r0, r4
 800f386:	f000 fd13 	bl	800fdb0 <_Bfree>
 800f38a:	2f00      	cmp	r7, #0
 800f38c:	f43f aea4 	beq.w	800f0d8 <_dtoa_r+0x6a0>
 800f390:	f1b8 0f00 	cmp.w	r8, #0
 800f394:	d005      	beq.n	800f3a2 <_dtoa_r+0x96a>
 800f396:	45b8      	cmp	r8, r7
 800f398:	d003      	beq.n	800f3a2 <_dtoa_r+0x96a>
 800f39a:	4641      	mov	r1, r8
 800f39c:	4620      	mov	r0, r4
 800f39e:	f000 fd07 	bl	800fdb0 <_Bfree>
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f000 fd03 	bl	800fdb0 <_Bfree>
 800f3aa:	e695      	b.n	800f0d8 <_dtoa_r+0x6a0>
 800f3ac:	2600      	movs	r6, #0
 800f3ae:	4637      	mov	r7, r6
 800f3b0:	e7e1      	b.n	800f376 <_dtoa_r+0x93e>
 800f3b2:	9700      	str	r7, [sp, #0]
 800f3b4:	4637      	mov	r7, r6
 800f3b6:	e599      	b.n	800eeec <_dtoa_r+0x4b4>
 800f3b8:	40240000 	.word	0x40240000
 800f3bc:	9b08      	ldr	r3, [sp, #32]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f000 80ca 	beq.w	800f558 <_dtoa_r+0xb20>
 800f3c4:	9b03      	ldr	r3, [sp, #12]
 800f3c6:	9302      	str	r3, [sp, #8]
 800f3c8:	2d00      	cmp	r5, #0
 800f3ca:	dd05      	ble.n	800f3d8 <_dtoa_r+0x9a0>
 800f3cc:	4639      	mov	r1, r7
 800f3ce:	462a      	mov	r2, r5
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f000 ff09 	bl	80101e8 <__lshift>
 800f3d6:	4607      	mov	r7, r0
 800f3d8:	f1b8 0f00 	cmp.w	r8, #0
 800f3dc:	d05b      	beq.n	800f496 <_dtoa_r+0xa5e>
 800f3de:	6879      	ldr	r1, [r7, #4]
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f000 fca5 	bl	800fd30 <_Balloc>
 800f3e6:	4605      	mov	r5, r0
 800f3e8:	b928      	cbnz	r0, 800f3f6 <_dtoa_r+0x9be>
 800f3ea:	4b87      	ldr	r3, [pc, #540]	; (800f608 <_dtoa_r+0xbd0>)
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f3f2:	f7ff bb3b 	b.w	800ea6c <_dtoa_r+0x34>
 800f3f6:	693a      	ldr	r2, [r7, #16]
 800f3f8:	3202      	adds	r2, #2
 800f3fa:	0092      	lsls	r2, r2, #2
 800f3fc:	f107 010c 	add.w	r1, r7, #12
 800f400:	300c      	adds	r0, #12
 800f402:	f7fd fd1f 	bl	800ce44 <memcpy>
 800f406:	2201      	movs	r2, #1
 800f408:	4629      	mov	r1, r5
 800f40a:	4620      	mov	r0, r4
 800f40c:	f000 feec 	bl	80101e8 <__lshift>
 800f410:	9b01      	ldr	r3, [sp, #4]
 800f412:	f103 0901 	add.w	r9, r3, #1
 800f416:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f41a:	4413      	add	r3, r2
 800f41c:	9305      	str	r3, [sp, #20]
 800f41e:	f00a 0301 	and.w	r3, sl, #1
 800f422:	46b8      	mov	r8, r7
 800f424:	9304      	str	r3, [sp, #16]
 800f426:	4607      	mov	r7, r0
 800f428:	4631      	mov	r1, r6
 800f42a:	ee18 0a10 	vmov	r0, s16
 800f42e:	f7ff fa75 	bl	800e91c <quorem>
 800f432:	4641      	mov	r1, r8
 800f434:	9002      	str	r0, [sp, #8]
 800f436:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f43a:	ee18 0a10 	vmov	r0, s16
 800f43e:	f000 ff43 	bl	80102c8 <__mcmp>
 800f442:	463a      	mov	r2, r7
 800f444:	9003      	str	r0, [sp, #12]
 800f446:	4631      	mov	r1, r6
 800f448:	4620      	mov	r0, r4
 800f44a:	f000 ff59 	bl	8010300 <__mdiff>
 800f44e:	68c2      	ldr	r2, [r0, #12]
 800f450:	f109 3bff 	add.w	fp, r9, #4294967295
 800f454:	4605      	mov	r5, r0
 800f456:	bb02      	cbnz	r2, 800f49a <_dtoa_r+0xa62>
 800f458:	4601      	mov	r1, r0
 800f45a:	ee18 0a10 	vmov	r0, s16
 800f45e:	f000 ff33 	bl	80102c8 <__mcmp>
 800f462:	4602      	mov	r2, r0
 800f464:	4629      	mov	r1, r5
 800f466:	4620      	mov	r0, r4
 800f468:	9207      	str	r2, [sp, #28]
 800f46a:	f000 fca1 	bl	800fdb0 <_Bfree>
 800f46e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f472:	ea43 0102 	orr.w	r1, r3, r2
 800f476:	9b04      	ldr	r3, [sp, #16]
 800f478:	430b      	orrs	r3, r1
 800f47a:	464d      	mov	r5, r9
 800f47c:	d10f      	bne.n	800f49e <_dtoa_r+0xa66>
 800f47e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f482:	d02a      	beq.n	800f4da <_dtoa_r+0xaa2>
 800f484:	9b03      	ldr	r3, [sp, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	dd02      	ble.n	800f490 <_dtoa_r+0xa58>
 800f48a:	9b02      	ldr	r3, [sp, #8]
 800f48c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f490:	f88b a000 	strb.w	sl, [fp]
 800f494:	e775      	b.n	800f382 <_dtoa_r+0x94a>
 800f496:	4638      	mov	r0, r7
 800f498:	e7ba      	b.n	800f410 <_dtoa_r+0x9d8>
 800f49a:	2201      	movs	r2, #1
 800f49c:	e7e2      	b.n	800f464 <_dtoa_r+0xa2c>
 800f49e:	9b03      	ldr	r3, [sp, #12]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	db04      	blt.n	800f4ae <_dtoa_r+0xa76>
 800f4a4:	9906      	ldr	r1, [sp, #24]
 800f4a6:	430b      	orrs	r3, r1
 800f4a8:	9904      	ldr	r1, [sp, #16]
 800f4aa:	430b      	orrs	r3, r1
 800f4ac:	d122      	bne.n	800f4f4 <_dtoa_r+0xabc>
 800f4ae:	2a00      	cmp	r2, #0
 800f4b0:	ddee      	ble.n	800f490 <_dtoa_r+0xa58>
 800f4b2:	ee18 1a10 	vmov	r1, s16
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f000 fe95 	bl	80101e8 <__lshift>
 800f4be:	4631      	mov	r1, r6
 800f4c0:	ee08 0a10 	vmov	s16, r0
 800f4c4:	f000 ff00 	bl	80102c8 <__mcmp>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	dc03      	bgt.n	800f4d4 <_dtoa_r+0xa9c>
 800f4cc:	d1e0      	bne.n	800f490 <_dtoa_r+0xa58>
 800f4ce:	f01a 0f01 	tst.w	sl, #1
 800f4d2:	d0dd      	beq.n	800f490 <_dtoa_r+0xa58>
 800f4d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f4d8:	d1d7      	bne.n	800f48a <_dtoa_r+0xa52>
 800f4da:	2339      	movs	r3, #57	; 0x39
 800f4dc:	f88b 3000 	strb.w	r3, [fp]
 800f4e0:	462b      	mov	r3, r5
 800f4e2:	461d      	mov	r5, r3
 800f4e4:	3b01      	subs	r3, #1
 800f4e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f4ea:	2a39      	cmp	r2, #57	; 0x39
 800f4ec:	d071      	beq.n	800f5d2 <_dtoa_r+0xb9a>
 800f4ee:	3201      	adds	r2, #1
 800f4f0:	701a      	strb	r2, [r3, #0]
 800f4f2:	e746      	b.n	800f382 <_dtoa_r+0x94a>
 800f4f4:	2a00      	cmp	r2, #0
 800f4f6:	dd07      	ble.n	800f508 <_dtoa_r+0xad0>
 800f4f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f4fc:	d0ed      	beq.n	800f4da <_dtoa_r+0xaa2>
 800f4fe:	f10a 0301 	add.w	r3, sl, #1
 800f502:	f88b 3000 	strb.w	r3, [fp]
 800f506:	e73c      	b.n	800f382 <_dtoa_r+0x94a>
 800f508:	9b05      	ldr	r3, [sp, #20]
 800f50a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f50e:	4599      	cmp	r9, r3
 800f510:	d047      	beq.n	800f5a2 <_dtoa_r+0xb6a>
 800f512:	ee18 1a10 	vmov	r1, s16
 800f516:	2300      	movs	r3, #0
 800f518:	220a      	movs	r2, #10
 800f51a:	4620      	mov	r0, r4
 800f51c:	f000 fc6a 	bl	800fdf4 <__multadd>
 800f520:	45b8      	cmp	r8, r7
 800f522:	ee08 0a10 	vmov	s16, r0
 800f526:	f04f 0300 	mov.w	r3, #0
 800f52a:	f04f 020a 	mov.w	r2, #10
 800f52e:	4641      	mov	r1, r8
 800f530:	4620      	mov	r0, r4
 800f532:	d106      	bne.n	800f542 <_dtoa_r+0xb0a>
 800f534:	f000 fc5e 	bl	800fdf4 <__multadd>
 800f538:	4680      	mov	r8, r0
 800f53a:	4607      	mov	r7, r0
 800f53c:	f109 0901 	add.w	r9, r9, #1
 800f540:	e772      	b.n	800f428 <_dtoa_r+0x9f0>
 800f542:	f000 fc57 	bl	800fdf4 <__multadd>
 800f546:	4639      	mov	r1, r7
 800f548:	4680      	mov	r8, r0
 800f54a:	2300      	movs	r3, #0
 800f54c:	220a      	movs	r2, #10
 800f54e:	4620      	mov	r0, r4
 800f550:	f000 fc50 	bl	800fdf4 <__multadd>
 800f554:	4607      	mov	r7, r0
 800f556:	e7f1      	b.n	800f53c <_dtoa_r+0xb04>
 800f558:	9b03      	ldr	r3, [sp, #12]
 800f55a:	9302      	str	r3, [sp, #8]
 800f55c:	9d01      	ldr	r5, [sp, #4]
 800f55e:	ee18 0a10 	vmov	r0, s16
 800f562:	4631      	mov	r1, r6
 800f564:	f7ff f9da 	bl	800e91c <quorem>
 800f568:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f56c:	9b01      	ldr	r3, [sp, #4]
 800f56e:	f805 ab01 	strb.w	sl, [r5], #1
 800f572:	1aea      	subs	r2, r5, r3
 800f574:	9b02      	ldr	r3, [sp, #8]
 800f576:	4293      	cmp	r3, r2
 800f578:	dd09      	ble.n	800f58e <_dtoa_r+0xb56>
 800f57a:	ee18 1a10 	vmov	r1, s16
 800f57e:	2300      	movs	r3, #0
 800f580:	220a      	movs	r2, #10
 800f582:	4620      	mov	r0, r4
 800f584:	f000 fc36 	bl	800fdf4 <__multadd>
 800f588:	ee08 0a10 	vmov	s16, r0
 800f58c:	e7e7      	b.n	800f55e <_dtoa_r+0xb26>
 800f58e:	9b02      	ldr	r3, [sp, #8]
 800f590:	2b00      	cmp	r3, #0
 800f592:	bfc8      	it	gt
 800f594:	461d      	movgt	r5, r3
 800f596:	9b01      	ldr	r3, [sp, #4]
 800f598:	bfd8      	it	le
 800f59a:	2501      	movle	r5, #1
 800f59c:	441d      	add	r5, r3
 800f59e:	f04f 0800 	mov.w	r8, #0
 800f5a2:	ee18 1a10 	vmov	r1, s16
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f000 fe1d 	bl	80101e8 <__lshift>
 800f5ae:	4631      	mov	r1, r6
 800f5b0:	ee08 0a10 	vmov	s16, r0
 800f5b4:	f000 fe88 	bl	80102c8 <__mcmp>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	dc91      	bgt.n	800f4e0 <_dtoa_r+0xaa8>
 800f5bc:	d102      	bne.n	800f5c4 <_dtoa_r+0xb8c>
 800f5be:	f01a 0f01 	tst.w	sl, #1
 800f5c2:	d18d      	bne.n	800f4e0 <_dtoa_r+0xaa8>
 800f5c4:	462b      	mov	r3, r5
 800f5c6:	461d      	mov	r5, r3
 800f5c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5cc:	2a30      	cmp	r2, #48	; 0x30
 800f5ce:	d0fa      	beq.n	800f5c6 <_dtoa_r+0xb8e>
 800f5d0:	e6d7      	b.n	800f382 <_dtoa_r+0x94a>
 800f5d2:	9a01      	ldr	r2, [sp, #4]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d184      	bne.n	800f4e2 <_dtoa_r+0xaaa>
 800f5d8:	9b00      	ldr	r3, [sp, #0]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	2331      	movs	r3, #49	; 0x31
 800f5e0:	7013      	strb	r3, [r2, #0]
 800f5e2:	e6ce      	b.n	800f382 <_dtoa_r+0x94a>
 800f5e4:	4b09      	ldr	r3, [pc, #36]	; (800f60c <_dtoa_r+0xbd4>)
 800f5e6:	f7ff ba95 	b.w	800eb14 <_dtoa_r+0xdc>
 800f5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	f47f aa6e 	bne.w	800eace <_dtoa_r+0x96>
 800f5f2:	4b07      	ldr	r3, [pc, #28]	; (800f610 <_dtoa_r+0xbd8>)
 800f5f4:	f7ff ba8e 	b.w	800eb14 <_dtoa_r+0xdc>
 800f5f8:	9b02      	ldr	r3, [sp, #8]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	dcae      	bgt.n	800f55c <_dtoa_r+0xb24>
 800f5fe:	9b06      	ldr	r3, [sp, #24]
 800f600:	2b02      	cmp	r3, #2
 800f602:	f73f aea8 	bgt.w	800f356 <_dtoa_r+0x91e>
 800f606:	e7a9      	b.n	800f55c <_dtoa_r+0xb24>
 800f608:	08011b00 	.word	0x08011b00
 800f60c:	08011904 	.word	0x08011904
 800f610:	08011a81 	.word	0x08011a81

0800f614 <rshift>:
 800f614:	6903      	ldr	r3, [r0, #16]
 800f616:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f61a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f61e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f622:	f100 0414 	add.w	r4, r0, #20
 800f626:	dd45      	ble.n	800f6b4 <rshift+0xa0>
 800f628:	f011 011f 	ands.w	r1, r1, #31
 800f62c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f630:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f634:	d10c      	bne.n	800f650 <rshift+0x3c>
 800f636:	f100 0710 	add.w	r7, r0, #16
 800f63a:	4629      	mov	r1, r5
 800f63c:	42b1      	cmp	r1, r6
 800f63e:	d334      	bcc.n	800f6aa <rshift+0x96>
 800f640:	1a9b      	subs	r3, r3, r2
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	1eea      	subs	r2, r5, #3
 800f646:	4296      	cmp	r6, r2
 800f648:	bf38      	it	cc
 800f64a:	2300      	movcc	r3, #0
 800f64c:	4423      	add	r3, r4
 800f64e:	e015      	b.n	800f67c <rshift+0x68>
 800f650:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f654:	f1c1 0820 	rsb	r8, r1, #32
 800f658:	40cf      	lsrs	r7, r1
 800f65a:	f105 0e04 	add.w	lr, r5, #4
 800f65e:	46a1      	mov	r9, r4
 800f660:	4576      	cmp	r6, lr
 800f662:	46f4      	mov	ip, lr
 800f664:	d815      	bhi.n	800f692 <rshift+0x7e>
 800f666:	1a9a      	subs	r2, r3, r2
 800f668:	0092      	lsls	r2, r2, #2
 800f66a:	3a04      	subs	r2, #4
 800f66c:	3501      	adds	r5, #1
 800f66e:	42ae      	cmp	r6, r5
 800f670:	bf38      	it	cc
 800f672:	2200      	movcc	r2, #0
 800f674:	18a3      	adds	r3, r4, r2
 800f676:	50a7      	str	r7, [r4, r2]
 800f678:	b107      	cbz	r7, 800f67c <rshift+0x68>
 800f67a:	3304      	adds	r3, #4
 800f67c:	1b1a      	subs	r2, r3, r4
 800f67e:	42a3      	cmp	r3, r4
 800f680:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f684:	bf08      	it	eq
 800f686:	2300      	moveq	r3, #0
 800f688:	6102      	str	r2, [r0, #16]
 800f68a:	bf08      	it	eq
 800f68c:	6143      	streq	r3, [r0, #20]
 800f68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f692:	f8dc c000 	ldr.w	ip, [ip]
 800f696:	fa0c fc08 	lsl.w	ip, ip, r8
 800f69a:	ea4c 0707 	orr.w	r7, ip, r7
 800f69e:	f849 7b04 	str.w	r7, [r9], #4
 800f6a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f6a6:	40cf      	lsrs	r7, r1
 800f6a8:	e7da      	b.n	800f660 <rshift+0x4c>
 800f6aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800f6ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800f6b2:	e7c3      	b.n	800f63c <rshift+0x28>
 800f6b4:	4623      	mov	r3, r4
 800f6b6:	e7e1      	b.n	800f67c <rshift+0x68>

0800f6b8 <__hexdig_fun>:
 800f6b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f6bc:	2b09      	cmp	r3, #9
 800f6be:	d802      	bhi.n	800f6c6 <__hexdig_fun+0xe>
 800f6c0:	3820      	subs	r0, #32
 800f6c2:	b2c0      	uxtb	r0, r0
 800f6c4:	4770      	bx	lr
 800f6c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f6ca:	2b05      	cmp	r3, #5
 800f6cc:	d801      	bhi.n	800f6d2 <__hexdig_fun+0x1a>
 800f6ce:	3847      	subs	r0, #71	; 0x47
 800f6d0:	e7f7      	b.n	800f6c2 <__hexdig_fun+0xa>
 800f6d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f6d6:	2b05      	cmp	r3, #5
 800f6d8:	d801      	bhi.n	800f6de <__hexdig_fun+0x26>
 800f6da:	3827      	subs	r0, #39	; 0x27
 800f6dc:	e7f1      	b.n	800f6c2 <__hexdig_fun+0xa>
 800f6de:	2000      	movs	r0, #0
 800f6e0:	4770      	bx	lr
	...

0800f6e4 <__gethex>:
 800f6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	ed2d 8b02 	vpush	{d8}
 800f6ec:	b089      	sub	sp, #36	; 0x24
 800f6ee:	ee08 0a10 	vmov	s16, r0
 800f6f2:	9304      	str	r3, [sp, #16]
 800f6f4:	4bb4      	ldr	r3, [pc, #720]	; (800f9c8 <__gethex+0x2e4>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	9301      	str	r3, [sp, #4]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	468b      	mov	fp, r1
 800f6fe:	4690      	mov	r8, r2
 800f700:	f7f0 fd3e 	bl	8000180 <strlen>
 800f704:	9b01      	ldr	r3, [sp, #4]
 800f706:	f8db 2000 	ldr.w	r2, [fp]
 800f70a:	4403      	add	r3, r0
 800f70c:	4682      	mov	sl, r0
 800f70e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f712:	9305      	str	r3, [sp, #20]
 800f714:	1c93      	adds	r3, r2, #2
 800f716:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f71a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f71e:	32fe      	adds	r2, #254	; 0xfe
 800f720:	18d1      	adds	r1, r2, r3
 800f722:	461f      	mov	r7, r3
 800f724:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f728:	9100      	str	r1, [sp, #0]
 800f72a:	2830      	cmp	r0, #48	; 0x30
 800f72c:	d0f8      	beq.n	800f720 <__gethex+0x3c>
 800f72e:	f7ff ffc3 	bl	800f6b8 <__hexdig_fun>
 800f732:	4604      	mov	r4, r0
 800f734:	2800      	cmp	r0, #0
 800f736:	d13a      	bne.n	800f7ae <__gethex+0xca>
 800f738:	9901      	ldr	r1, [sp, #4]
 800f73a:	4652      	mov	r2, sl
 800f73c:	4638      	mov	r0, r7
 800f73e:	f001 fa23 	bl	8010b88 <strncmp>
 800f742:	4605      	mov	r5, r0
 800f744:	2800      	cmp	r0, #0
 800f746:	d168      	bne.n	800f81a <__gethex+0x136>
 800f748:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f74c:	eb07 060a 	add.w	r6, r7, sl
 800f750:	f7ff ffb2 	bl	800f6b8 <__hexdig_fun>
 800f754:	2800      	cmp	r0, #0
 800f756:	d062      	beq.n	800f81e <__gethex+0x13a>
 800f758:	4633      	mov	r3, r6
 800f75a:	7818      	ldrb	r0, [r3, #0]
 800f75c:	2830      	cmp	r0, #48	; 0x30
 800f75e:	461f      	mov	r7, r3
 800f760:	f103 0301 	add.w	r3, r3, #1
 800f764:	d0f9      	beq.n	800f75a <__gethex+0x76>
 800f766:	f7ff ffa7 	bl	800f6b8 <__hexdig_fun>
 800f76a:	2301      	movs	r3, #1
 800f76c:	fab0 f480 	clz	r4, r0
 800f770:	0964      	lsrs	r4, r4, #5
 800f772:	4635      	mov	r5, r6
 800f774:	9300      	str	r3, [sp, #0]
 800f776:	463a      	mov	r2, r7
 800f778:	4616      	mov	r6, r2
 800f77a:	3201      	adds	r2, #1
 800f77c:	7830      	ldrb	r0, [r6, #0]
 800f77e:	f7ff ff9b 	bl	800f6b8 <__hexdig_fun>
 800f782:	2800      	cmp	r0, #0
 800f784:	d1f8      	bne.n	800f778 <__gethex+0x94>
 800f786:	9901      	ldr	r1, [sp, #4]
 800f788:	4652      	mov	r2, sl
 800f78a:	4630      	mov	r0, r6
 800f78c:	f001 f9fc 	bl	8010b88 <strncmp>
 800f790:	b980      	cbnz	r0, 800f7b4 <__gethex+0xd0>
 800f792:	b94d      	cbnz	r5, 800f7a8 <__gethex+0xc4>
 800f794:	eb06 050a 	add.w	r5, r6, sl
 800f798:	462a      	mov	r2, r5
 800f79a:	4616      	mov	r6, r2
 800f79c:	3201      	adds	r2, #1
 800f79e:	7830      	ldrb	r0, [r6, #0]
 800f7a0:	f7ff ff8a 	bl	800f6b8 <__hexdig_fun>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d1f8      	bne.n	800f79a <__gethex+0xb6>
 800f7a8:	1bad      	subs	r5, r5, r6
 800f7aa:	00ad      	lsls	r5, r5, #2
 800f7ac:	e004      	b.n	800f7b8 <__gethex+0xd4>
 800f7ae:	2400      	movs	r4, #0
 800f7b0:	4625      	mov	r5, r4
 800f7b2:	e7e0      	b.n	800f776 <__gethex+0x92>
 800f7b4:	2d00      	cmp	r5, #0
 800f7b6:	d1f7      	bne.n	800f7a8 <__gethex+0xc4>
 800f7b8:	7833      	ldrb	r3, [r6, #0]
 800f7ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f7be:	2b50      	cmp	r3, #80	; 0x50
 800f7c0:	d13b      	bne.n	800f83a <__gethex+0x156>
 800f7c2:	7873      	ldrb	r3, [r6, #1]
 800f7c4:	2b2b      	cmp	r3, #43	; 0x2b
 800f7c6:	d02c      	beq.n	800f822 <__gethex+0x13e>
 800f7c8:	2b2d      	cmp	r3, #45	; 0x2d
 800f7ca:	d02e      	beq.n	800f82a <__gethex+0x146>
 800f7cc:	1c71      	adds	r1, r6, #1
 800f7ce:	f04f 0900 	mov.w	r9, #0
 800f7d2:	7808      	ldrb	r0, [r1, #0]
 800f7d4:	f7ff ff70 	bl	800f6b8 <__hexdig_fun>
 800f7d8:	1e43      	subs	r3, r0, #1
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	2b18      	cmp	r3, #24
 800f7de:	d82c      	bhi.n	800f83a <__gethex+0x156>
 800f7e0:	f1a0 0210 	sub.w	r2, r0, #16
 800f7e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f7e8:	f7ff ff66 	bl	800f6b8 <__hexdig_fun>
 800f7ec:	1e43      	subs	r3, r0, #1
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	2b18      	cmp	r3, #24
 800f7f2:	d91d      	bls.n	800f830 <__gethex+0x14c>
 800f7f4:	f1b9 0f00 	cmp.w	r9, #0
 800f7f8:	d000      	beq.n	800f7fc <__gethex+0x118>
 800f7fa:	4252      	negs	r2, r2
 800f7fc:	4415      	add	r5, r2
 800f7fe:	f8cb 1000 	str.w	r1, [fp]
 800f802:	b1e4      	cbz	r4, 800f83e <__gethex+0x15a>
 800f804:	9b00      	ldr	r3, [sp, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	bf14      	ite	ne
 800f80a:	2700      	movne	r7, #0
 800f80c:	2706      	moveq	r7, #6
 800f80e:	4638      	mov	r0, r7
 800f810:	b009      	add	sp, #36	; 0x24
 800f812:	ecbd 8b02 	vpop	{d8}
 800f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81a:	463e      	mov	r6, r7
 800f81c:	4625      	mov	r5, r4
 800f81e:	2401      	movs	r4, #1
 800f820:	e7ca      	b.n	800f7b8 <__gethex+0xd4>
 800f822:	f04f 0900 	mov.w	r9, #0
 800f826:	1cb1      	adds	r1, r6, #2
 800f828:	e7d3      	b.n	800f7d2 <__gethex+0xee>
 800f82a:	f04f 0901 	mov.w	r9, #1
 800f82e:	e7fa      	b.n	800f826 <__gethex+0x142>
 800f830:	230a      	movs	r3, #10
 800f832:	fb03 0202 	mla	r2, r3, r2, r0
 800f836:	3a10      	subs	r2, #16
 800f838:	e7d4      	b.n	800f7e4 <__gethex+0x100>
 800f83a:	4631      	mov	r1, r6
 800f83c:	e7df      	b.n	800f7fe <__gethex+0x11a>
 800f83e:	1bf3      	subs	r3, r6, r7
 800f840:	3b01      	subs	r3, #1
 800f842:	4621      	mov	r1, r4
 800f844:	2b07      	cmp	r3, #7
 800f846:	dc0b      	bgt.n	800f860 <__gethex+0x17c>
 800f848:	ee18 0a10 	vmov	r0, s16
 800f84c:	f000 fa70 	bl	800fd30 <_Balloc>
 800f850:	4604      	mov	r4, r0
 800f852:	b940      	cbnz	r0, 800f866 <__gethex+0x182>
 800f854:	4b5d      	ldr	r3, [pc, #372]	; (800f9cc <__gethex+0x2e8>)
 800f856:	4602      	mov	r2, r0
 800f858:	21de      	movs	r1, #222	; 0xde
 800f85a:	485d      	ldr	r0, [pc, #372]	; (800f9d0 <__gethex+0x2ec>)
 800f85c:	f001 f9b6 	bl	8010bcc <__assert_func>
 800f860:	3101      	adds	r1, #1
 800f862:	105b      	asrs	r3, r3, #1
 800f864:	e7ee      	b.n	800f844 <__gethex+0x160>
 800f866:	f100 0914 	add.w	r9, r0, #20
 800f86a:	f04f 0b00 	mov.w	fp, #0
 800f86e:	f1ca 0301 	rsb	r3, sl, #1
 800f872:	f8cd 9008 	str.w	r9, [sp, #8]
 800f876:	f8cd b000 	str.w	fp, [sp]
 800f87a:	9306      	str	r3, [sp, #24]
 800f87c:	42b7      	cmp	r7, r6
 800f87e:	d340      	bcc.n	800f902 <__gethex+0x21e>
 800f880:	9802      	ldr	r0, [sp, #8]
 800f882:	9b00      	ldr	r3, [sp, #0]
 800f884:	f840 3b04 	str.w	r3, [r0], #4
 800f888:	eba0 0009 	sub.w	r0, r0, r9
 800f88c:	1080      	asrs	r0, r0, #2
 800f88e:	0146      	lsls	r6, r0, #5
 800f890:	6120      	str	r0, [r4, #16]
 800f892:	4618      	mov	r0, r3
 800f894:	f000 fb3e 	bl	800ff14 <__hi0bits>
 800f898:	1a30      	subs	r0, r6, r0
 800f89a:	f8d8 6000 	ldr.w	r6, [r8]
 800f89e:	42b0      	cmp	r0, r6
 800f8a0:	dd63      	ble.n	800f96a <__gethex+0x286>
 800f8a2:	1b87      	subs	r7, r0, r6
 800f8a4:	4639      	mov	r1, r7
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f000 fee2 	bl	8010670 <__any_on>
 800f8ac:	4682      	mov	sl, r0
 800f8ae:	b1a8      	cbz	r0, 800f8dc <__gethex+0x1f8>
 800f8b0:	1e7b      	subs	r3, r7, #1
 800f8b2:	1159      	asrs	r1, r3, #5
 800f8b4:	f003 021f 	and.w	r2, r3, #31
 800f8b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f8bc:	f04f 0a01 	mov.w	sl, #1
 800f8c0:	fa0a f202 	lsl.w	r2, sl, r2
 800f8c4:	420a      	tst	r2, r1
 800f8c6:	d009      	beq.n	800f8dc <__gethex+0x1f8>
 800f8c8:	4553      	cmp	r3, sl
 800f8ca:	dd05      	ble.n	800f8d8 <__gethex+0x1f4>
 800f8cc:	1eb9      	subs	r1, r7, #2
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 fece 	bl	8010670 <__any_on>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	d145      	bne.n	800f964 <__gethex+0x280>
 800f8d8:	f04f 0a02 	mov.w	sl, #2
 800f8dc:	4639      	mov	r1, r7
 800f8de:	4620      	mov	r0, r4
 800f8e0:	f7ff fe98 	bl	800f614 <rshift>
 800f8e4:	443d      	add	r5, r7
 800f8e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8ea:	42ab      	cmp	r3, r5
 800f8ec:	da4c      	bge.n	800f988 <__gethex+0x2a4>
 800f8ee:	ee18 0a10 	vmov	r0, s16
 800f8f2:	4621      	mov	r1, r4
 800f8f4:	f000 fa5c 	bl	800fdb0 <_Bfree>
 800f8f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	6013      	str	r3, [r2, #0]
 800f8fe:	27a3      	movs	r7, #163	; 0xa3
 800f900:	e785      	b.n	800f80e <__gethex+0x12a>
 800f902:	1e73      	subs	r3, r6, #1
 800f904:	9a05      	ldr	r2, [sp, #20]
 800f906:	9303      	str	r3, [sp, #12]
 800f908:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d019      	beq.n	800f944 <__gethex+0x260>
 800f910:	f1bb 0f20 	cmp.w	fp, #32
 800f914:	d107      	bne.n	800f926 <__gethex+0x242>
 800f916:	9b02      	ldr	r3, [sp, #8]
 800f918:	9a00      	ldr	r2, [sp, #0]
 800f91a:	f843 2b04 	str.w	r2, [r3], #4
 800f91e:	9302      	str	r3, [sp, #8]
 800f920:	2300      	movs	r3, #0
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	469b      	mov	fp, r3
 800f926:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f92a:	f7ff fec5 	bl	800f6b8 <__hexdig_fun>
 800f92e:	9b00      	ldr	r3, [sp, #0]
 800f930:	f000 000f 	and.w	r0, r0, #15
 800f934:	fa00 f00b 	lsl.w	r0, r0, fp
 800f938:	4303      	orrs	r3, r0
 800f93a:	9300      	str	r3, [sp, #0]
 800f93c:	f10b 0b04 	add.w	fp, fp, #4
 800f940:	9b03      	ldr	r3, [sp, #12]
 800f942:	e00d      	b.n	800f960 <__gethex+0x27c>
 800f944:	9b03      	ldr	r3, [sp, #12]
 800f946:	9a06      	ldr	r2, [sp, #24]
 800f948:	4413      	add	r3, r2
 800f94a:	42bb      	cmp	r3, r7
 800f94c:	d3e0      	bcc.n	800f910 <__gethex+0x22c>
 800f94e:	4618      	mov	r0, r3
 800f950:	9901      	ldr	r1, [sp, #4]
 800f952:	9307      	str	r3, [sp, #28]
 800f954:	4652      	mov	r2, sl
 800f956:	f001 f917 	bl	8010b88 <strncmp>
 800f95a:	9b07      	ldr	r3, [sp, #28]
 800f95c:	2800      	cmp	r0, #0
 800f95e:	d1d7      	bne.n	800f910 <__gethex+0x22c>
 800f960:	461e      	mov	r6, r3
 800f962:	e78b      	b.n	800f87c <__gethex+0x198>
 800f964:	f04f 0a03 	mov.w	sl, #3
 800f968:	e7b8      	b.n	800f8dc <__gethex+0x1f8>
 800f96a:	da0a      	bge.n	800f982 <__gethex+0x29e>
 800f96c:	1a37      	subs	r7, r6, r0
 800f96e:	4621      	mov	r1, r4
 800f970:	ee18 0a10 	vmov	r0, s16
 800f974:	463a      	mov	r2, r7
 800f976:	f000 fc37 	bl	80101e8 <__lshift>
 800f97a:	1bed      	subs	r5, r5, r7
 800f97c:	4604      	mov	r4, r0
 800f97e:	f100 0914 	add.w	r9, r0, #20
 800f982:	f04f 0a00 	mov.w	sl, #0
 800f986:	e7ae      	b.n	800f8e6 <__gethex+0x202>
 800f988:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f98c:	42a8      	cmp	r0, r5
 800f98e:	dd72      	ble.n	800fa76 <__gethex+0x392>
 800f990:	1b45      	subs	r5, r0, r5
 800f992:	42ae      	cmp	r6, r5
 800f994:	dc36      	bgt.n	800fa04 <__gethex+0x320>
 800f996:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f99a:	2b02      	cmp	r3, #2
 800f99c:	d02a      	beq.n	800f9f4 <__gethex+0x310>
 800f99e:	2b03      	cmp	r3, #3
 800f9a0:	d02c      	beq.n	800f9fc <__gethex+0x318>
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d11c      	bne.n	800f9e0 <__gethex+0x2fc>
 800f9a6:	42ae      	cmp	r6, r5
 800f9a8:	d11a      	bne.n	800f9e0 <__gethex+0x2fc>
 800f9aa:	2e01      	cmp	r6, #1
 800f9ac:	d112      	bne.n	800f9d4 <__gethex+0x2f0>
 800f9ae:	9a04      	ldr	r2, [sp, #16]
 800f9b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f9b4:	6013      	str	r3, [r2, #0]
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	6123      	str	r3, [r4, #16]
 800f9ba:	f8c9 3000 	str.w	r3, [r9]
 800f9be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9c0:	2762      	movs	r7, #98	; 0x62
 800f9c2:	601c      	str	r4, [r3, #0]
 800f9c4:	e723      	b.n	800f80e <__gethex+0x12a>
 800f9c6:	bf00      	nop
 800f9c8:	08011b78 	.word	0x08011b78
 800f9cc:	08011b00 	.word	0x08011b00
 800f9d0:	08011b11 	.word	0x08011b11
 800f9d4:	1e71      	subs	r1, r6, #1
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f000 fe4a 	bl	8010670 <__any_on>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d1e6      	bne.n	800f9ae <__gethex+0x2ca>
 800f9e0:	ee18 0a10 	vmov	r0, s16
 800f9e4:	4621      	mov	r1, r4
 800f9e6:	f000 f9e3 	bl	800fdb0 <_Bfree>
 800f9ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	6013      	str	r3, [r2, #0]
 800f9f0:	2750      	movs	r7, #80	; 0x50
 800f9f2:	e70c      	b.n	800f80e <__gethex+0x12a>
 800f9f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1f2      	bne.n	800f9e0 <__gethex+0x2fc>
 800f9fa:	e7d8      	b.n	800f9ae <__gethex+0x2ca>
 800f9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1d5      	bne.n	800f9ae <__gethex+0x2ca>
 800fa02:	e7ed      	b.n	800f9e0 <__gethex+0x2fc>
 800fa04:	1e6f      	subs	r7, r5, #1
 800fa06:	f1ba 0f00 	cmp.w	sl, #0
 800fa0a:	d131      	bne.n	800fa70 <__gethex+0x38c>
 800fa0c:	b127      	cbz	r7, 800fa18 <__gethex+0x334>
 800fa0e:	4639      	mov	r1, r7
 800fa10:	4620      	mov	r0, r4
 800fa12:	f000 fe2d 	bl	8010670 <__any_on>
 800fa16:	4682      	mov	sl, r0
 800fa18:	117b      	asrs	r3, r7, #5
 800fa1a:	2101      	movs	r1, #1
 800fa1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fa20:	f007 071f 	and.w	r7, r7, #31
 800fa24:	fa01 f707 	lsl.w	r7, r1, r7
 800fa28:	421f      	tst	r7, r3
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	bf18      	it	ne
 800fa30:	f04a 0a02 	orrne.w	sl, sl, #2
 800fa34:	1b76      	subs	r6, r6, r5
 800fa36:	f7ff fded 	bl	800f614 <rshift>
 800fa3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fa3e:	2702      	movs	r7, #2
 800fa40:	f1ba 0f00 	cmp.w	sl, #0
 800fa44:	d048      	beq.n	800fad8 <__gethex+0x3f4>
 800fa46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fa4a:	2b02      	cmp	r3, #2
 800fa4c:	d015      	beq.n	800fa7a <__gethex+0x396>
 800fa4e:	2b03      	cmp	r3, #3
 800fa50:	d017      	beq.n	800fa82 <__gethex+0x39e>
 800fa52:	2b01      	cmp	r3, #1
 800fa54:	d109      	bne.n	800fa6a <__gethex+0x386>
 800fa56:	f01a 0f02 	tst.w	sl, #2
 800fa5a:	d006      	beq.n	800fa6a <__gethex+0x386>
 800fa5c:	f8d9 0000 	ldr.w	r0, [r9]
 800fa60:	ea4a 0a00 	orr.w	sl, sl, r0
 800fa64:	f01a 0f01 	tst.w	sl, #1
 800fa68:	d10e      	bne.n	800fa88 <__gethex+0x3a4>
 800fa6a:	f047 0710 	orr.w	r7, r7, #16
 800fa6e:	e033      	b.n	800fad8 <__gethex+0x3f4>
 800fa70:	f04f 0a01 	mov.w	sl, #1
 800fa74:	e7d0      	b.n	800fa18 <__gethex+0x334>
 800fa76:	2701      	movs	r7, #1
 800fa78:	e7e2      	b.n	800fa40 <__gethex+0x35c>
 800fa7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa7c:	f1c3 0301 	rsb	r3, r3, #1
 800fa80:	9315      	str	r3, [sp, #84]	; 0x54
 800fa82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d0f0      	beq.n	800fa6a <__gethex+0x386>
 800fa88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fa8c:	f104 0314 	add.w	r3, r4, #20
 800fa90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fa94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fa98:	f04f 0c00 	mov.w	ip, #0
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800faa2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800faa6:	d01c      	beq.n	800fae2 <__gethex+0x3fe>
 800faa8:	3201      	adds	r2, #1
 800faaa:	6002      	str	r2, [r0, #0]
 800faac:	2f02      	cmp	r7, #2
 800faae:	f104 0314 	add.w	r3, r4, #20
 800fab2:	d13f      	bne.n	800fb34 <__gethex+0x450>
 800fab4:	f8d8 2000 	ldr.w	r2, [r8]
 800fab8:	3a01      	subs	r2, #1
 800faba:	42b2      	cmp	r2, r6
 800fabc:	d10a      	bne.n	800fad4 <__gethex+0x3f0>
 800fabe:	1171      	asrs	r1, r6, #5
 800fac0:	2201      	movs	r2, #1
 800fac2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fac6:	f006 061f 	and.w	r6, r6, #31
 800faca:	fa02 f606 	lsl.w	r6, r2, r6
 800face:	421e      	tst	r6, r3
 800fad0:	bf18      	it	ne
 800fad2:	4617      	movne	r7, r2
 800fad4:	f047 0720 	orr.w	r7, r7, #32
 800fad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fada:	601c      	str	r4, [r3, #0]
 800fadc:	9b04      	ldr	r3, [sp, #16]
 800fade:	601d      	str	r5, [r3, #0]
 800fae0:	e695      	b.n	800f80e <__gethex+0x12a>
 800fae2:	4299      	cmp	r1, r3
 800fae4:	f843 cc04 	str.w	ip, [r3, #-4]
 800fae8:	d8d8      	bhi.n	800fa9c <__gethex+0x3b8>
 800faea:	68a3      	ldr	r3, [r4, #8]
 800faec:	459b      	cmp	fp, r3
 800faee:	db19      	blt.n	800fb24 <__gethex+0x440>
 800faf0:	6861      	ldr	r1, [r4, #4]
 800faf2:	ee18 0a10 	vmov	r0, s16
 800faf6:	3101      	adds	r1, #1
 800faf8:	f000 f91a 	bl	800fd30 <_Balloc>
 800fafc:	4681      	mov	r9, r0
 800fafe:	b918      	cbnz	r0, 800fb08 <__gethex+0x424>
 800fb00:	4b1a      	ldr	r3, [pc, #104]	; (800fb6c <__gethex+0x488>)
 800fb02:	4602      	mov	r2, r0
 800fb04:	2184      	movs	r1, #132	; 0x84
 800fb06:	e6a8      	b.n	800f85a <__gethex+0x176>
 800fb08:	6922      	ldr	r2, [r4, #16]
 800fb0a:	3202      	adds	r2, #2
 800fb0c:	f104 010c 	add.w	r1, r4, #12
 800fb10:	0092      	lsls	r2, r2, #2
 800fb12:	300c      	adds	r0, #12
 800fb14:	f7fd f996 	bl	800ce44 <memcpy>
 800fb18:	4621      	mov	r1, r4
 800fb1a:	ee18 0a10 	vmov	r0, s16
 800fb1e:	f000 f947 	bl	800fdb0 <_Bfree>
 800fb22:	464c      	mov	r4, r9
 800fb24:	6923      	ldr	r3, [r4, #16]
 800fb26:	1c5a      	adds	r2, r3, #1
 800fb28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fb2c:	6122      	str	r2, [r4, #16]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	615a      	str	r2, [r3, #20]
 800fb32:	e7bb      	b.n	800faac <__gethex+0x3c8>
 800fb34:	6922      	ldr	r2, [r4, #16]
 800fb36:	455a      	cmp	r2, fp
 800fb38:	dd0b      	ble.n	800fb52 <__gethex+0x46e>
 800fb3a:	2101      	movs	r1, #1
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f7ff fd69 	bl	800f614 <rshift>
 800fb42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb46:	3501      	adds	r5, #1
 800fb48:	42ab      	cmp	r3, r5
 800fb4a:	f6ff aed0 	blt.w	800f8ee <__gethex+0x20a>
 800fb4e:	2701      	movs	r7, #1
 800fb50:	e7c0      	b.n	800fad4 <__gethex+0x3f0>
 800fb52:	f016 061f 	ands.w	r6, r6, #31
 800fb56:	d0fa      	beq.n	800fb4e <__gethex+0x46a>
 800fb58:	4453      	add	r3, sl
 800fb5a:	f1c6 0620 	rsb	r6, r6, #32
 800fb5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fb62:	f000 f9d7 	bl	800ff14 <__hi0bits>
 800fb66:	42b0      	cmp	r0, r6
 800fb68:	dbe7      	blt.n	800fb3a <__gethex+0x456>
 800fb6a:	e7f0      	b.n	800fb4e <__gethex+0x46a>
 800fb6c:	08011b00 	.word	0x08011b00

0800fb70 <L_shift>:
 800fb70:	f1c2 0208 	rsb	r2, r2, #8
 800fb74:	0092      	lsls	r2, r2, #2
 800fb76:	b570      	push	{r4, r5, r6, lr}
 800fb78:	f1c2 0620 	rsb	r6, r2, #32
 800fb7c:	6843      	ldr	r3, [r0, #4]
 800fb7e:	6804      	ldr	r4, [r0, #0]
 800fb80:	fa03 f506 	lsl.w	r5, r3, r6
 800fb84:	432c      	orrs	r4, r5
 800fb86:	40d3      	lsrs	r3, r2
 800fb88:	6004      	str	r4, [r0, #0]
 800fb8a:	f840 3f04 	str.w	r3, [r0, #4]!
 800fb8e:	4288      	cmp	r0, r1
 800fb90:	d3f4      	bcc.n	800fb7c <L_shift+0xc>
 800fb92:	bd70      	pop	{r4, r5, r6, pc}

0800fb94 <__match>:
 800fb94:	b530      	push	{r4, r5, lr}
 800fb96:	6803      	ldr	r3, [r0, #0]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb9e:	b914      	cbnz	r4, 800fba6 <__match+0x12>
 800fba0:	6003      	str	r3, [r0, #0]
 800fba2:	2001      	movs	r0, #1
 800fba4:	bd30      	pop	{r4, r5, pc}
 800fba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fbae:	2d19      	cmp	r5, #25
 800fbb0:	bf98      	it	ls
 800fbb2:	3220      	addls	r2, #32
 800fbb4:	42a2      	cmp	r2, r4
 800fbb6:	d0f0      	beq.n	800fb9a <__match+0x6>
 800fbb8:	2000      	movs	r0, #0
 800fbba:	e7f3      	b.n	800fba4 <__match+0x10>

0800fbbc <__hexnan>:
 800fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc0:	680b      	ldr	r3, [r1, #0]
 800fbc2:	115e      	asrs	r6, r3, #5
 800fbc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fbc8:	f013 031f 	ands.w	r3, r3, #31
 800fbcc:	b087      	sub	sp, #28
 800fbce:	bf18      	it	ne
 800fbd0:	3604      	addne	r6, #4
 800fbd2:	2500      	movs	r5, #0
 800fbd4:	1f37      	subs	r7, r6, #4
 800fbd6:	4690      	mov	r8, r2
 800fbd8:	6802      	ldr	r2, [r0, #0]
 800fbda:	9301      	str	r3, [sp, #4]
 800fbdc:	4682      	mov	sl, r0
 800fbde:	f846 5c04 	str.w	r5, [r6, #-4]
 800fbe2:	46b9      	mov	r9, r7
 800fbe4:	463c      	mov	r4, r7
 800fbe6:	9502      	str	r5, [sp, #8]
 800fbe8:	46ab      	mov	fp, r5
 800fbea:	7851      	ldrb	r1, [r2, #1]
 800fbec:	1c53      	adds	r3, r2, #1
 800fbee:	9303      	str	r3, [sp, #12]
 800fbf0:	b341      	cbz	r1, 800fc44 <__hexnan+0x88>
 800fbf2:	4608      	mov	r0, r1
 800fbf4:	9205      	str	r2, [sp, #20]
 800fbf6:	9104      	str	r1, [sp, #16]
 800fbf8:	f7ff fd5e 	bl	800f6b8 <__hexdig_fun>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d14f      	bne.n	800fca0 <__hexnan+0xe4>
 800fc00:	9904      	ldr	r1, [sp, #16]
 800fc02:	9a05      	ldr	r2, [sp, #20]
 800fc04:	2920      	cmp	r1, #32
 800fc06:	d818      	bhi.n	800fc3a <__hexnan+0x7e>
 800fc08:	9b02      	ldr	r3, [sp, #8]
 800fc0a:	459b      	cmp	fp, r3
 800fc0c:	dd13      	ble.n	800fc36 <__hexnan+0x7a>
 800fc0e:	454c      	cmp	r4, r9
 800fc10:	d206      	bcs.n	800fc20 <__hexnan+0x64>
 800fc12:	2d07      	cmp	r5, #7
 800fc14:	dc04      	bgt.n	800fc20 <__hexnan+0x64>
 800fc16:	462a      	mov	r2, r5
 800fc18:	4649      	mov	r1, r9
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f7ff ffa8 	bl	800fb70 <L_shift>
 800fc20:	4544      	cmp	r4, r8
 800fc22:	d950      	bls.n	800fcc6 <__hexnan+0x10a>
 800fc24:	2300      	movs	r3, #0
 800fc26:	f1a4 0904 	sub.w	r9, r4, #4
 800fc2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc2e:	f8cd b008 	str.w	fp, [sp, #8]
 800fc32:	464c      	mov	r4, r9
 800fc34:	461d      	mov	r5, r3
 800fc36:	9a03      	ldr	r2, [sp, #12]
 800fc38:	e7d7      	b.n	800fbea <__hexnan+0x2e>
 800fc3a:	2929      	cmp	r1, #41	; 0x29
 800fc3c:	d156      	bne.n	800fcec <__hexnan+0x130>
 800fc3e:	3202      	adds	r2, #2
 800fc40:	f8ca 2000 	str.w	r2, [sl]
 800fc44:	f1bb 0f00 	cmp.w	fp, #0
 800fc48:	d050      	beq.n	800fcec <__hexnan+0x130>
 800fc4a:	454c      	cmp	r4, r9
 800fc4c:	d206      	bcs.n	800fc5c <__hexnan+0xa0>
 800fc4e:	2d07      	cmp	r5, #7
 800fc50:	dc04      	bgt.n	800fc5c <__hexnan+0xa0>
 800fc52:	462a      	mov	r2, r5
 800fc54:	4649      	mov	r1, r9
 800fc56:	4620      	mov	r0, r4
 800fc58:	f7ff ff8a 	bl	800fb70 <L_shift>
 800fc5c:	4544      	cmp	r4, r8
 800fc5e:	d934      	bls.n	800fcca <__hexnan+0x10e>
 800fc60:	f1a8 0204 	sub.w	r2, r8, #4
 800fc64:	4623      	mov	r3, r4
 800fc66:	f853 1b04 	ldr.w	r1, [r3], #4
 800fc6a:	f842 1f04 	str.w	r1, [r2, #4]!
 800fc6e:	429f      	cmp	r7, r3
 800fc70:	d2f9      	bcs.n	800fc66 <__hexnan+0xaa>
 800fc72:	1b3b      	subs	r3, r7, r4
 800fc74:	f023 0303 	bic.w	r3, r3, #3
 800fc78:	3304      	adds	r3, #4
 800fc7a:	3401      	adds	r4, #1
 800fc7c:	3e03      	subs	r6, #3
 800fc7e:	42b4      	cmp	r4, r6
 800fc80:	bf88      	it	hi
 800fc82:	2304      	movhi	r3, #4
 800fc84:	4443      	add	r3, r8
 800fc86:	2200      	movs	r2, #0
 800fc88:	f843 2b04 	str.w	r2, [r3], #4
 800fc8c:	429f      	cmp	r7, r3
 800fc8e:	d2fb      	bcs.n	800fc88 <__hexnan+0xcc>
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	b91b      	cbnz	r3, 800fc9c <__hexnan+0xe0>
 800fc94:	4547      	cmp	r7, r8
 800fc96:	d127      	bne.n	800fce8 <__hexnan+0x12c>
 800fc98:	2301      	movs	r3, #1
 800fc9a:	603b      	str	r3, [r7, #0]
 800fc9c:	2005      	movs	r0, #5
 800fc9e:	e026      	b.n	800fcee <__hexnan+0x132>
 800fca0:	3501      	adds	r5, #1
 800fca2:	2d08      	cmp	r5, #8
 800fca4:	f10b 0b01 	add.w	fp, fp, #1
 800fca8:	dd06      	ble.n	800fcb8 <__hexnan+0xfc>
 800fcaa:	4544      	cmp	r4, r8
 800fcac:	d9c3      	bls.n	800fc36 <__hexnan+0x7a>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	f844 3c04 	str.w	r3, [r4, #-4]
 800fcb4:	2501      	movs	r5, #1
 800fcb6:	3c04      	subs	r4, #4
 800fcb8:	6822      	ldr	r2, [r4, #0]
 800fcba:	f000 000f 	and.w	r0, r0, #15
 800fcbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fcc2:	6022      	str	r2, [r4, #0]
 800fcc4:	e7b7      	b.n	800fc36 <__hexnan+0x7a>
 800fcc6:	2508      	movs	r5, #8
 800fcc8:	e7b5      	b.n	800fc36 <__hexnan+0x7a>
 800fcca:	9b01      	ldr	r3, [sp, #4]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d0df      	beq.n	800fc90 <__hexnan+0xd4>
 800fcd0:	f04f 32ff 	mov.w	r2, #4294967295
 800fcd4:	f1c3 0320 	rsb	r3, r3, #32
 800fcd8:	fa22 f303 	lsr.w	r3, r2, r3
 800fcdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fce0:	401a      	ands	r2, r3
 800fce2:	f846 2c04 	str.w	r2, [r6, #-4]
 800fce6:	e7d3      	b.n	800fc90 <__hexnan+0xd4>
 800fce8:	3f04      	subs	r7, #4
 800fcea:	e7d1      	b.n	800fc90 <__hexnan+0xd4>
 800fcec:	2004      	movs	r0, #4
 800fcee:	b007      	add	sp, #28
 800fcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcf4 <_localeconv_r>:
 800fcf4:	4800      	ldr	r0, [pc, #0]	; (800fcf8 <_localeconv_r+0x4>)
 800fcf6:	4770      	bx	lr
 800fcf8:	200002e8 	.word	0x200002e8

0800fcfc <malloc>:
 800fcfc:	4b02      	ldr	r3, [pc, #8]	; (800fd08 <malloc+0xc>)
 800fcfe:	4601      	mov	r1, r0
 800fd00:	6818      	ldr	r0, [r3, #0]
 800fd02:	f000 bd59 	b.w	80107b8 <_malloc_r>
 800fd06:	bf00      	nop
 800fd08:	20000190 	.word	0x20000190

0800fd0c <__ascii_mbtowc>:
 800fd0c:	b082      	sub	sp, #8
 800fd0e:	b901      	cbnz	r1, 800fd12 <__ascii_mbtowc+0x6>
 800fd10:	a901      	add	r1, sp, #4
 800fd12:	b142      	cbz	r2, 800fd26 <__ascii_mbtowc+0x1a>
 800fd14:	b14b      	cbz	r3, 800fd2a <__ascii_mbtowc+0x1e>
 800fd16:	7813      	ldrb	r3, [r2, #0]
 800fd18:	600b      	str	r3, [r1, #0]
 800fd1a:	7812      	ldrb	r2, [r2, #0]
 800fd1c:	1e10      	subs	r0, r2, #0
 800fd1e:	bf18      	it	ne
 800fd20:	2001      	movne	r0, #1
 800fd22:	b002      	add	sp, #8
 800fd24:	4770      	bx	lr
 800fd26:	4610      	mov	r0, r2
 800fd28:	e7fb      	b.n	800fd22 <__ascii_mbtowc+0x16>
 800fd2a:	f06f 0001 	mvn.w	r0, #1
 800fd2e:	e7f8      	b.n	800fd22 <__ascii_mbtowc+0x16>

0800fd30 <_Balloc>:
 800fd30:	b570      	push	{r4, r5, r6, lr}
 800fd32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd34:	4604      	mov	r4, r0
 800fd36:	460d      	mov	r5, r1
 800fd38:	b976      	cbnz	r6, 800fd58 <_Balloc+0x28>
 800fd3a:	2010      	movs	r0, #16
 800fd3c:	f7ff ffde 	bl	800fcfc <malloc>
 800fd40:	4602      	mov	r2, r0
 800fd42:	6260      	str	r0, [r4, #36]	; 0x24
 800fd44:	b920      	cbnz	r0, 800fd50 <_Balloc+0x20>
 800fd46:	4b18      	ldr	r3, [pc, #96]	; (800fda8 <_Balloc+0x78>)
 800fd48:	4818      	ldr	r0, [pc, #96]	; (800fdac <_Balloc+0x7c>)
 800fd4a:	2166      	movs	r1, #102	; 0x66
 800fd4c:	f000 ff3e 	bl	8010bcc <__assert_func>
 800fd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd54:	6006      	str	r6, [r0, #0]
 800fd56:	60c6      	str	r6, [r0, #12]
 800fd58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fd5a:	68f3      	ldr	r3, [r6, #12]
 800fd5c:	b183      	cbz	r3, 800fd80 <_Balloc+0x50>
 800fd5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd66:	b9b8      	cbnz	r0, 800fd98 <_Balloc+0x68>
 800fd68:	2101      	movs	r1, #1
 800fd6a:	fa01 f605 	lsl.w	r6, r1, r5
 800fd6e:	1d72      	adds	r2, r6, #5
 800fd70:	0092      	lsls	r2, r2, #2
 800fd72:	4620      	mov	r0, r4
 800fd74:	f000 fc9d 	bl	80106b2 <_calloc_r>
 800fd78:	b160      	cbz	r0, 800fd94 <_Balloc+0x64>
 800fd7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd7e:	e00e      	b.n	800fd9e <_Balloc+0x6e>
 800fd80:	2221      	movs	r2, #33	; 0x21
 800fd82:	2104      	movs	r1, #4
 800fd84:	4620      	mov	r0, r4
 800fd86:	f000 fc94 	bl	80106b2 <_calloc_r>
 800fd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd8c:	60f0      	str	r0, [r6, #12]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d1e4      	bne.n	800fd5e <_Balloc+0x2e>
 800fd94:	2000      	movs	r0, #0
 800fd96:	bd70      	pop	{r4, r5, r6, pc}
 800fd98:	6802      	ldr	r2, [r0, #0]
 800fd9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fda4:	e7f7      	b.n	800fd96 <_Balloc+0x66>
 800fda6:	bf00      	nop
 800fda8:	08011a8e 	.word	0x08011a8e
 800fdac:	08011b8c 	.word	0x08011b8c

0800fdb0 <_Bfree>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fdb4:	4605      	mov	r5, r0
 800fdb6:	460c      	mov	r4, r1
 800fdb8:	b976      	cbnz	r6, 800fdd8 <_Bfree+0x28>
 800fdba:	2010      	movs	r0, #16
 800fdbc:	f7ff ff9e 	bl	800fcfc <malloc>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	6268      	str	r0, [r5, #36]	; 0x24
 800fdc4:	b920      	cbnz	r0, 800fdd0 <_Bfree+0x20>
 800fdc6:	4b09      	ldr	r3, [pc, #36]	; (800fdec <_Bfree+0x3c>)
 800fdc8:	4809      	ldr	r0, [pc, #36]	; (800fdf0 <_Bfree+0x40>)
 800fdca:	218a      	movs	r1, #138	; 0x8a
 800fdcc:	f000 fefe 	bl	8010bcc <__assert_func>
 800fdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdd4:	6006      	str	r6, [r0, #0]
 800fdd6:	60c6      	str	r6, [r0, #12]
 800fdd8:	b13c      	cbz	r4, 800fdea <_Bfree+0x3a>
 800fdda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fddc:	6862      	ldr	r2, [r4, #4]
 800fdde:	68db      	ldr	r3, [r3, #12]
 800fde0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fde4:	6021      	str	r1, [r4, #0]
 800fde6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdea:	bd70      	pop	{r4, r5, r6, pc}
 800fdec:	08011a8e 	.word	0x08011a8e
 800fdf0:	08011b8c 	.word	0x08011b8c

0800fdf4 <__multadd>:
 800fdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf8:	690d      	ldr	r5, [r1, #16]
 800fdfa:	4607      	mov	r7, r0
 800fdfc:	460c      	mov	r4, r1
 800fdfe:	461e      	mov	r6, r3
 800fe00:	f101 0c14 	add.w	ip, r1, #20
 800fe04:	2000      	movs	r0, #0
 800fe06:	f8dc 3000 	ldr.w	r3, [ip]
 800fe0a:	b299      	uxth	r1, r3
 800fe0c:	fb02 6101 	mla	r1, r2, r1, r6
 800fe10:	0c1e      	lsrs	r6, r3, #16
 800fe12:	0c0b      	lsrs	r3, r1, #16
 800fe14:	fb02 3306 	mla	r3, r2, r6, r3
 800fe18:	b289      	uxth	r1, r1
 800fe1a:	3001      	adds	r0, #1
 800fe1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe20:	4285      	cmp	r5, r0
 800fe22:	f84c 1b04 	str.w	r1, [ip], #4
 800fe26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe2a:	dcec      	bgt.n	800fe06 <__multadd+0x12>
 800fe2c:	b30e      	cbz	r6, 800fe72 <__multadd+0x7e>
 800fe2e:	68a3      	ldr	r3, [r4, #8]
 800fe30:	42ab      	cmp	r3, r5
 800fe32:	dc19      	bgt.n	800fe68 <__multadd+0x74>
 800fe34:	6861      	ldr	r1, [r4, #4]
 800fe36:	4638      	mov	r0, r7
 800fe38:	3101      	adds	r1, #1
 800fe3a:	f7ff ff79 	bl	800fd30 <_Balloc>
 800fe3e:	4680      	mov	r8, r0
 800fe40:	b928      	cbnz	r0, 800fe4e <__multadd+0x5a>
 800fe42:	4602      	mov	r2, r0
 800fe44:	4b0c      	ldr	r3, [pc, #48]	; (800fe78 <__multadd+0x84>)
 800fe46:	480d      	ldr	r0, [pc, #52]	; (800fe7c <__multadd+0x88>)
 800fe48:	21b5      	movs	r1, #181	; 0xb5
 800fe4a:	f000 febf 	bl	8010bcc <__assert_func>
 800fe4e:	6922      	ldr	r2, [r4, #16]
 800fe50:	3202      	adds	r2, #2
 800fe52:	f104 010c 	add.w	r1, r4, #12
 800fe56:	0092      	lsls	r2, r2, #2
 800fe58:	300c      	adds	r0, #12
 800fe5a:	f7fc fff3 	bl	800ce44 <memcpy>
 800fe5e:	4621      	mov	r1, r4
 800fe60:	4638      	mov	r0, r7
 800fe62:	f7ff ffa5 	bl	800fdb0 <_Bfree>
 800fe66:	4644      	mov	r4, r8
 800fe68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe6c:	3501      	adds	r5, #1
 800fe6e:	615e      	str	r6, [r3, #20]
 800fe70:	6125      	str	r5, [r4, #16]
 800fe72:	4620      	mov	r0, r4
 800fe74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe78:	08011b00 	.word	0x08011b00
 800fe7c:	08011b8c 	.word	0x08011b8c

0800fe80 <__s2b>:
 800fe80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe84:	460c      	mov	r4, r1
 800fe86:	4615      	mov	r5, r2
 800fe88:	461f      	mov	r7, r3
 800fe8a:	2209      	movs	r2, #9
 800fe8c:	3308      	adds	r3, #8
 800fe8e:	4606      	mov	r6, r0
 800fe90:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe94:	2100      	movs	r1, #0
 800fe96:	2201      	movs	r2, #1
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	db09      	blt.n	800feb0 <__s2b+0x30>
 800fe9c:	4630      	mov	r0, r6
 800fe9e:	f7ff ff47 	bl	800fd30 <_Balloc>
 800fea2:	b940      	cbnz	r0, 800feb6 <__s2b+0x36>
 800fea4:	4602      	mov	r2, r0
 800fea6:	4b19      	ldr	r3, [pc, #100]	; (800ff0c <__s2b+0x8c>)
 800fea8:	4819      	ldr	r0, [pc, #100]	; (800ff10 <__s2b+0x90>)
 800feaa:	21ce      	movs	r1, #206	; 0xce
 800feac:	f000 fe8e 	bl	8010bcc <__assert_func>
 800feb0:	0052      	lsls	r2, r2, #1
 800feb2:	3101      	adds	r1, #1
 800feb4:	e7f0      	b.n	800fe98 <__s2b+0x18>
 800feb6:	9b08      	ldr	r3, [sp, #32]
 800feb8:	6143      	str	r3, [r0, #20]
 800feba:	2d09      	cmp	r5, #9
 800febc:	f04f 0301 	mov.w	r3, #1
 800fec0:	6103      	str	r3, [r0, #16]
 800fec2:	dd16      	ble.n	800fef2 <__s2b+0x72>
 800fec4:	f104 0909 	add.w	r9, r4, #9
 800fec8:	46c8      	mov	r8, r9
 800feca:	442c      	add	r4, r5
 800fecc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fed0:	4601      	mov	r1, r0
 800fed2:	3b30      	subs	r3, #48	; 0x30
 800fed4:	220a      	movs	r2, #10
 800fed6:	4630      	mov	r0, r6
 800fed8:	f7ff ff8c 	bl	800fdf4 <__multadd>
 800fedc:	45a0      	cmp	r8, r4
 800fede:	d1f5      	bne.n	800fecc <__s2b+0x4c>
 800fee0:	f1a5 0408 	sub.w	r4, r5, #8
 800fee4:	444c      	add	r4, r9
 800fee6:	1b2d      	subs	r5, r5, r4
 800fee8:	1963      	adds	r3, r4, r5
 800feea:	42bb      	cmp	r3, r7
 800feec:	db04      	blt.n	800fef8 <__s2b+0x78>
 800feee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fef2:	340a      	adds	r4, #10
 800fef4:	2509      	movs	r5, #9
 800fef6:	e7f6      	b.n	800fee6 <__s2b+0x66>
 800fef8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fefc:	4601      	mov	r1, r0
 800fefe:	3b30      	subs	r3, #48	; 0x30
 800ff00:	220a      	movs	r2, #10
 800ff02:	4630      	mov	r0, r6
 800ff04:	f7ff ff76 	bl	800fdf4 <__multadd>
 800ff08:	e7ee      	b.n	800fee8 <__s2b+0x68>
 800ff0a:	bf00      	nop
 800ff0c:	08011b00 	.word	0x08011b00
 800ff10:	08011b8c 	.word	0x08011b8c

0800ff14 <__hi0bits>:
 800ff14:	0c03      	lsrs	r3, r0, #16
 800ff16:	041b      	lsls	r3, r3, #16
 800ff18:	b9d3      	cbnz	r3, 800ff50 <__hi0bits+0x3c>
 800ff1a:	0400      	lsls	r0, r0, #16
 800ff1c:	2310      	movs	r3, #16
 800ff1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ff22:	bf04      	itt	eq
 800ff24:	0200      	lsleq	r0, r0, #8
 800ff26:	3308      	addeq	r3, #8
 800ff28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ff2c:	bf04      	itt	eq
 800ff2e:	0100      	lsleq	r0, r0, #4
 800ff30:	3304      	addeq	r3, #4
 800ff32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ff36:	bf04      	itt	eq
 800ff38:	0080      	lsleq	r0, r0, #2
 800ff3a:	3302      	addeq	r3, #2
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	db05      	blt.n	800ff4c <__hi0bits+0x38>
 800ff40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ff44:	f103 0301 	add.w	r3, r3, #1
 800ff48:	bf08      	it	eq
 800ff4a:	2320      	moveq	r3, #32
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	4770      	bx	lr
 800ff50:	2300      	movs	r3, #0
 800ff52:	e7e4      	b.n	800ff1e <__hi0bits+0xa>

0800ff54 <__lo0bits>:
 800ff54:	6803      	ldr	r3, [r0, #0]
 800ff56:	f013 0207 	ands.w	r2, r3, #7
 800ff5a:	4601      	mov	r1, r0
 800ff5c:	d00b      	beq.n	800ff76 <__lo0bits+0x22>
 800ff5e:	07da      	lsls	r2, r3, #31
 800ff60:	d423      	bmi.n	800ffaa <__lo0bits+0x56>
 800ff62:	0798      	lsls	r0, r3, #30
 800ff64:	bf49      	itett	mi
 800ff66:	085b      	lsrmi	r3, r3, #1
 800ff68:	089b      	lsrpl	r3, r3, #2
 800ff6a:	2001      	movmi	r0, #1
 800ff6c:	600b      	strmi	r3, [r1, #0]
 800ff6e:	bf5c      	itt	pl
 800ff70:	600b      	strpl	r3, [r1, #0]
 800ff72:	2002      	movpl	r0, #2
 800ff74:	4770      	bx	lr
 800ff76:	b298      	uxth	r0, r3
 800ff78:	b9a8      	cbnz	r0, 800ffa6 <__lo0bits+0x52>
 800ff7a:	0c1b      	lsrs	r3, r3, #16
 800ff7c:	2010      	movs	r0, #16
 800ff7e:	b2da      	uxtb	r2, r3
 800ff80:	b90a      	cbnz	r2, 800ff86 <__lo0bits+0x32>
 800ff82:	3008      	adds	r0, #8
 800ff84:	0a1b      	lsrs	r3, r3, #8
 800ff86:	071a      	lsls	r2, r3, #28
 800ff88:	bf04      	itt	eq
 800ff8a:	091b      	lsreq	r3, r3, #4
 800ff8c:	3004      	addeq	r0, #4
 800ff8e:	079a      	lsls	r2, r3, #30
 800ff90:	bf04      	itt	eq
 800ff92:	089b      	lsreq	r3, r3, #2
 800ff94:	3002      	addeq	r0, #2
 800ff96:	07da      	lsls	r2, r3, #31
 800ff98:	d403      	bmi.n	800ffa2 <__lo0bits+0x4e>
 800ff9a:	085b      	lsrs	r3, r3, #1
 800ff9c:	f100 0001 	add.w	r0, r0, #1
 800ffa0:	d005      	beq.n	800ffae <__lo0bits+0x5a>
 800ffa2:	600b      	str	r3, [r1, #0]
 800ffa4:	4770      	bx	lr
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	e7e9      	b.n	800ff7e <__lo0bits+0x2a>
 800ffaa:	2000      	movs	r0, #0
 800ffac:	4770      	bx	lr
 800ffae:	2020      	movs	r0, #32
 800ffb0:	4770      	bx	lr
	...

0800ffb4 <__i2b>:
 800ffb4:	b510      	push	{r4, lr}
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	2101      	movs	r1, #1
 800ffba:	f7ff feb9 	bl	800fd30 <_Balloc>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	b928      	cbnz	r0, 800ffce <__i2b+0x1a>
 800ffc2:	4b05      	ldr	r3, [pc, #20]	; (800ffd8 <__i2b+0x24>)
 800ffc4:	4805      	ldr	r0, [pc, #20]	; (800ffdc <__i2b+0x28>)
 800ffc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ffca:	f000 fdff 	bl	8010bcc <__assert_func>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	6144      	str	r4, [r0, #20]
 800ffd2:	6103      	str	r3, [r0, #16]
 800ffd4:	bd10      	pop	{r4, pc}
 800ffd6:	bf00      	nop
 800ffd8:	08011b00 	.word	0x08011b00
 800ffdc:	08011b8c 	.word	0x08011b8c

0800ffe0 <__multiply>:
 800ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe4:	4691      	mov	r9, r2
 800ffe6:	690a      	ldr	r2, [r1, #16]
 800ffe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	bfb8      	it	lt
 800fff0:	460b      	movlt	r3, r1
 800fff2:	460c      	mov	r4, r1
 800fff4:	bfbc      	itt	lt
 800fff6:	464c      	movlt	r4, r9
 800fff8:	4699      	movlt	r9, r3
 800fffa:	6927      	ldr	r7, [r4, #16]
 800fffc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010000:	68a3      	ldr	r3, [r4, #8]
 8010002:	6861      	ldr	r1, [r4, #4]
 8010004:	eb07 060a 	add.w	r6, r7, sl
 8010008:	42b3      	cmp	r3, r6
 801000a:	b085      	sub	sp, #20
 801000c:	bfb8      	it	lt
 801000e:	3101      	addlt	r1, #1
 8010010:	f7ff fe8e 	bl	800fd30 <_Balloc>
 8010014:	b930      	cbnz	r0, 8010024 <__multiply+0x44>
 8010016:	4602      	mov	r2, r0
 8010018:	4b44      	ldr	r3, [pc, #272]	; (801012c <__multiply+0x14c>)
 801001a:	4845      	ldr	r0, [pc, #276]	; (8010130 <__multiply+0x150>)
 801001c:	f240 115d 	movw	r1, #349	; 0x15d
 8010020:	f000 fdd4 	bl	8010bcc <__assert_func>
 8010024:	f100 0514 	add.w	r5, r0, #20
 8010028:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801002c:	462b      	mov	r3, r5
 801002e:	2200      	movs	r2, #0
 8010030:	4543      	cmp	r3, r8
 8010032:	d321      	bcc.n	8010078 <__multiply+0x98>
 8010034:	f104 0314 	add.w	r3, r4, #20
 8010038:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801003c:	f109 0314 	add.w	r3, r9, #20
 8010040:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010044:	9202      	str	r2, [sp, #8]
 8010046:	1b3a      	subs	r2, r7, r4
 8010048:	3a15      	subs	r2, #21
 801004a:	f022 0203 	bic.w	r2, r2, #3
 801004e:	3204      	adds	r2, #4
 8010050:	f104 0115 	add.w	r1, r4, #21
 8010054:	428f      	cmp	r7, r1
 8010056:	bf38      	it	cc
 8010058:	2204      	movcc	r2, #4
 801005a:	9201      	str	r2, [sp, #4]
 801005c:	9a02      	ldr	r2, [sp, #8]
 801005e:	9303      	str	r3, [sp, #12]
 8010060:	429a      	cmp	r2, r3
 8010062:	d80c      	bhi.n	801007e <__multiply+0x9e>
 8010064:	2e00      	cmp	r6, #0
 8010066:	dd03      	ble.n	8010070 <__multiply+0x90>
 8010068:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801006c:	2b00      	cmp	r3, #0
 801006e:	d05a      	beq.n	8010126 <__multiply+0x146>
 8010070:	6106      	str	r6, [r0, #16]
 8010072:	b005      	add	sp, #20
 8010074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010078:	f843 2b04 	str.w	r2, [r3], #4
 801007c:	e7d8      	b.n	8010030 <__multiply+0x50>
 801007e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010082:	f1ba 0f00 	cmp.w	sl, #0
 8010086:	d024      	beq.n	80100d2 <__multiply+0xf2>
 8010088:	f104 0e14 	add.w	lr, r4, #20
 801008c:	46a9      	mov	r9, r5
 801008e:	f04f 0c00 	mov.w	ip, #0
 8010092:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010096:	f8d9 1000 	ldr.w	r1, [r9]
 801009a:	fa1f fb82 	uxth.w	fp, r2
 801009e:	b289      	uxth	r1, r1
 80100a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80100a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80100a8:	f8d9 2000 	ldr.w	r2, [r9]
 80100ac:	4461      	add	r1, ip
 80100ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80100b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80100b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80100ba:	b289      	uxth	r1, r1
 80100bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80100c0:	4577      	cmp	r7, lr
 80100c2:	f849 1b04 	str.w	r1, [r9], #4
 80100c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80100ca:	d8e2      	bhi.n	8010092 <__multiply+0xb2>
 80100cc:	9a01      	ldr	r2, [sp, #4]
 80100ce:	f845 c002 	str.w	ip, [r5, r2]
 80100d2:	9a03      	ldr	r2, [sp, #12]
 80100d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80100d8:	3304      	adds	r3, #4
 80100da:	f1b9 0f00 	cmp.w	r9, #0
 80100de:	d020      	beq.n	8010122 <__multiply+0x142>
 80100e0:	6829      	ldr	r1, [r5, #0]
 80100e2:	f104 0c14 	add.w	ip, r4, #20
 80100e6:	46ae      	mov	lr, r5
 80100e8:	f04f 0a00 	mov.w	sl, #0
 80100ec:	f8bc b000 	ldrh.w	fp, [ip]
 80100f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80100f4:	fb09 220b 	mla	r2, r9, fp, r2
 80100f8:	4492      	add	sl, r2
 80100fa:	b289      	uxth	r1, r1
 80100fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010100:	f84e 1b04 	str.w	r1, [lr], #4
 8010104:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010108:	f8be 1000 	ldrh.w	r1, [lr]
 801010c:	0c12      	lsrs	r2, r2, #16
 801010e:	fb09 1102 	mla	r1, r9, r2, r1
 8010112:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010116:	4567      	cmp	r7, ip
 8010118:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801011c:	d8e6      	bhi.n	80100ec <__multiply+0x10c>
 801011e:	9a01      	ldr	r2, [sp, #4]
 8010120:	50a9      	str	r1, [r5, r2]
 8010122:	3504      	adds	r5, #4
 8010124:	e79a      	b.n	801005c <__multiply+0x7c>
 8010126:	3e01      	subs	r6, #1
 8010128:	e79c      	b.n	8010064 <__multiply+0x84>
 801012a:	bf00      	nop
 801012c:	08011b00 	.word	0x08011b00
 8010130:	08011b8c 	.word	0x08011b8c

08010134 <__pow5mult>:
 8010134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010138:	4615      	mov	r5, r2
 801013a:	f012 0203 	ands.w	r2, r2, #3
 801013e:	4606      	mov	r6, r0
 8010140:	460f      	mov	r7, r1
 8010142:	d007      	beq.n	8010154 <__pow5mult+0x20>
 8010144:	4c25      	ldr	r4, [pc, #148]	; (80101dc <__pow5mult+0xa8>)
 8010146:	3a01      	subs	r2, #1
 8010148:	2300      	movs	r3, #0
 801014a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801014e:	f7ff fe51 	bl	800fdf4 <__multadd>
 8010152:	4607      	mov	r7, r0
 8010154:	10ad      	asrs	r5, r5, #2
 8010156:	d03d      	beq.n	80101d4 <__pow5mult+0xa0>
 8010158:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801015a:	b97c      	cbnz	r4, 801017c <__pow5mult+0x48>
 801015c:	2010      	movs	r0, #16
 801015e:	f7ff fdcd 	bl	800fcfc <malloc>
 8010162:	4602      	mov	r2, r0
 8010164:	6270      	str	r0, [r6, #36]	; 0x24
 8010166:	b928      	cbnz	r0, 8010174 <__pow5mult+0x40>
 8010168:	4b1d      	ldr	r3, [pc, #116]	; (80101e0 <__pow5mult+0xac>)
 801016a:	481e      	ldr	r0, [pc, #120]	; (80101e4 <__pow5mult+0xb0>)
 801016c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010170:	f000 fd2c 	bl	8010bcc <__assert_func>
 8010174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010178:	6004      	str	r4, [r0, #0]
 801017a:	60c4      	str	r4, [r0, #12]
 801017c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010184:	b94c      	cbnz	r4, 801019a <__pow5mult+0x66>
 8010186:	f240 2171 	movw	r1, #625	; 0x271
 801018a:	4630      	mov	r0, r6
 801018c:	f7ff ff12 	bl	800ffb4 <__i2b>
 8010190:	2300      	movs	r3, #0
 8010192:	f8c8 0008 	str.w	r0, [r8, #8]
 8010196:	4604      	mov	r4, r0
 8010198:	6003      	str	r3, [r0, #0]
 801019a:	f04f 0900 	mov.w	r9, #0
 801019e:	07eb      	lsls	r3, r5, #31
 80101a0:	d50a      	bpl.n	80101b8 <__pow5mult+0x84>
 80101a2:	4639      	mov	r1, r7
 80101a4:	4622      	mov	r2, r4
 80101a6:	4630      	mov	r0, r6
 80101a8:	f7ff ff1a 	bl	800ffe0 <__multiply>
 80101ac:	4639      	mov	r1, r7
 80101ae:	4680      	mov	r8, r0
 80101b0:	4630      	mov	r0, r6
 80101b2:	f7ff fdfd 	bl	800fdb0 <_Bfree>
 80101b6:	4647      	mov	r7, r8
 80101b8:	106d      	asrs	r5, r5, #1
 80101ba:	d00b      	beq.n	80101d4 <__pow5mult+0xa0>
 80101bc:	6820      	ldr	r0, [r4, #0]
 80101be:	b938      	cbnz	r0, 80101d0 <__pow5mult+0x9c>
 80101c0:	4622      	mov	r2, r4
 80101c2:	4621      	mov	r1, r4
 80101c4:	4630      	mov	r0, r6
 80101c6:	f7ff ff0b 	bl	800ffe0 <__multiply>
 80101ca:	6020      	str	r0, [r4, #0]
 80101cc:	f8c0 9000 	str.w	r9, [r0]
 80101d0:	4604      	mov	r4, r0
 80101d2:	e7e4      	b.n	801019e <__pow5mult+0x6a>
 80101d4:	4638      	mov	r0, r7
 80101d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101da:	bf00      	nop
 80101dc:	08011cd8 	.word	0x08011cd8
 80101e0:	08011a8e 	.word	0x08011a8e
 80101e4:	08011b8c 	.word	0x08011b8c

080101e8 <__lshift>:
 80101e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101ec:	460c      	mov	r4, r1
 80101ee:	6849      	ldr	r1, [r1, #4]
 80101f0:	6923      	ldr	r3, [r4, #16]
 80101f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80101f6:	68a3      	ldr	r3, [r4, #8]
 80101f8:	4607      	mov	r7, r0
 80101fa:	4691      	mov	r9, r2
 80101fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010200:	f108 0601 	add.w	r6, r8, #1
 8010204:	42b3      	cmp	r3, r6
 8010206:	db0b      	blt.n	8010220 <__lshift+0x38>
 8010208:	4638      	mov	r0, r7
 801020a:	f7ff fd91 	bl	800fd30 <_Balloc>
 801020e:	4605      	mov	r5, r0
 8010210:	b948      	cbnz	r0, 8010226 <__lshift+0x3e>
 8010212:	4602      	mov	r2, r0
 8010214:	4b2a      	ldr	r3, [pc, #168]	; (80102c0 <__lshift+0xd8>)
 8010216:	482b      	ldr	r0, [pc, #172]	; (80102c4 <__lshift+0xdc>)
 8010218:	f240 11d9 	movw	r1, #473	; 0x1d9
 801021c:	f000 fcd6 	bl	8010bcc <__assert_func>
 8010220:	3101      	adds	r1, #1
 8010222:	005b      	lsls	r3, r3, #1
 8010224:	e7ee      	b.n	8010204 <__lshift+0x1c>
 8010226:	2300      	movs	r3, #0
 8010228:	f100 0114 	add.w	r1, r0, #20
 801022c:	f100 0210 	add.w	r2, r0, #16
 8010230:	4618      	mov	r0, r3
 8010232:	4553      	cmp	r3, sl
 8010234:	db37      	blt.n	80102a6 <__lshift+0xbe>
 8010236:	6920      	ldr	r0, [r4, #16]
 8010238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801023c:	f104 0314 	add.w	r3, r4, #20
 8010240:	f019 091f 	ands.w	r9, r9, #31
 8010244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010248:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801024c:	d02f      	beq.n	80102ae <__lshift+0xc6>
 801024e:	f1c9 0e20 	rsb	lr, r9, #32
 8010252:	468a      	mov	sl, r1
 8010254:	f04f 0c00 	mov.w	ip, #0
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	fa02 f209 	lsl.w	r2, r2, r9
 801025e:	ea42 020c 	orr.w	r2, r2, ip
 8010262:	f84a 2b04 	str.w	r2, [sl], #4
 8010266:	f853 2b04 	ldr.w	r2, [r3], #4
 801026a:	4298      	cmp	r0, r3
 801026c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010270:	d8f2      	bhi.n	8010258 <__lshift+0x70>
 8010272:	1b03      	subs	r3, r0, r4
 8010274:	3b15      	subs	r3, #21
 8010276:	f023 0303 	bic.w	r3, r3, #3
 801027a:	3304      	adds	r3, #4
 801027c:	f104 0215 	add.w	r2, r4, #21
 8010280:	4290      	cmp	r0, r2
 8010282:	bf38      	it	cc
 8010284:	2304      	movcc	r3, #4
 8010286:	f841 c003 	str.w	ip, [r1, r3]
 801028a:	f1bc 0f00 	cmp.w	ip, #0
 801028e:	d001      	beq.n	8010294 <__lshift+0xac>
 8010290:	f108 0602 	add.w	r6, r8, #2
 8010294:	3e01      	subs	r6, #1
 8010296:	4638      	mov	r0, r7
 8010298:	612e      	str	r6, [r5, #16]
 801029a:	4621      	mov	r1, r4
 801029c:	f7ff fd88 	bl	800fdb0 <_Bfree>
 80102a0:	4628      	mov	r0, r5
 80102a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80102aa:	3301      	adds	r3, #1
 80102ac:	e7c1      	b.n	8010232 <__lshift+0x4a>
 80102ae:	3904      	subs	r1, #4
 80102b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80102b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80102b8:	4298      	cmp	r0, r3
 80102ba:	d8f9      	bhi.n	80102b0 <__lshift+0xc8>
 80102bc:	e7ea      	b.n	8010294 <__lshift+0xac>
 80102be:	bf00      	nop
 80102c0:	08011b00 	.word	0x08011b00
 80102c4:	08011b8c 	.word	0x08011b8c

080102c8 <__mcmp>:
 80102c8:	b530      	push	{r4, r5, lr}
 80102ca:	6902      	ldr	r2, [r0, #16]
 80102cc:	690c      	ldr	r4, [r1, #16]
 80102ce:	1b12      	subs	r2, r2, r4
 80102d0:	d10e      	bne.n	80102f0 <__mcmp+0x28>
 80102d2:	f100 0314 	add.w	r3, r0, #20
 80102d6:	3114      	adds	r1, #20
 80102d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80102dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80102e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80102e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80102e8:	42a5      	cmp	r5, r4
 80102ea:	d003      	beq.n	80102f4 <__mcmp+0x2c>
 80102ec:	d305      	bcc.n	80102fa <__mcmp+0x32>
 80102ee:	2201      	movs	r2, #1
 80102f0:	4610      	mov	r0, r2
 80102f2:	bd30      	pop	{r4, r5, pc}
 80102f4:	4283      	cmp	r3, r0
 80102f6:	d3f3      	bcc.n	80102e0 <__mcmp+0x18>
 80102f8:	e7fa      	b.n	80102f0 <__mcmp+0x28>
 80102fa:	f04f 32ff 	mov.w	r2, #4294967295
 80102fe:	e7f7      	b.n	80102f0 <__mcmp+0x28>

08010300 <__mdiff>:
 8010300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010304:	460c      	mov	r4, r1
 8010306:	4606      	mov	r6, r0
 8010308:	4611      	mov	r1, r2
 801030a:	4620      	mov	r0, r4
 801030c:	4690      	mov	r8, r2
 801030e:	f7ff ffdb 	bl	80102c8 <__mcmp>
 8010312:	1e05      	subs	r5, r0, #0
 8010314:	d110      	bne.n	8010338 <__mdiff+0x38>
 8010316:	4629      	mov	r1, r5
 8010318:	4630      	mov	r0, r6
 801031a:	f7ff fd09 	bl	800fd30 <_Balloc>
 801031e:	b930      	cbnz	r0, 801032e <__mdiff+0x2e>
 8010320:	4b3a      	ldr	r3, [pc, #232]	; (801040c <__mdiff+0x10c>)
 8010322:	4602      	mov	r2, r0
 8010324:	f240 2132 	movw	r1, #562	; 0x232
 8010328:	4839      	ldr	r0, [pc, #228]	; (8010410 <__mdiff+0x110>)
 801032a:	f000 fc4f 	bl	8010bcc <__assert_func>
 801032e:	2301      	movs	r3, #1
 8010330:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010338:	bfa4      	itt	ge
 801033a:	4643      	movge	r3, r8
 801033c:	46a0      	movge	r8, r4
 801033e:	4630      	mov	r0, r6
 8010340:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010344:	bfa6      	itte	ge
 8010346:	461c      	movge	r4, r3
 8010348:	2500      	movge	r5, #0
 801034a:	2501      	movlt	r5, #1
 801034c:	f7ff fcf0 	bl	800fd30 <_Balloc>
 8010350:	b920      	cbnz	r0, 801035c <__mdiff+0x5c>
 8010352:	4b2e      	ldr	r3, [pc, #184]	; (801040c <__mdiff+0x10c>)
 8010354:	4602      	mov	r2, r0
 8010356:	f44f 7110 	mov.w	r1, #576	; 0x240
 801035a:	e7e5      	b.n	8010328 <__mdiff+0x28>
 801035c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010360:	6926      	ldr	r6, [r4, #16]
 8010362:	60c5      	str	r5, [r0, #12]
 8010364:	f104 0914 	add.w	r9, r4, #20
 8010368:	f108 0514 	add.w	r5, r8, #20
 801036c:	f100 0e14 	add.w	lr, r0, #20
 8010370:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010374:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010378:	f108 0210 	add.w	r2, r8, #16
 801037c:	46f2      	mov	sl, lr
 801037e:	2100      	movs	r1, #0
 8010380:	f859 3b04 	ldr.w	r3, [r9], #4
 8010384:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010388:	fa1f f883 	uxth.w	r8, r3
 801038c:	fa11 f18b 	uxtah	r1, r1, fp
 8010390:	0c1b      	lsrs	r3, r3, #16
 8010392:	eba1 0808 	sub.w	r8, r1, r8
 8010396:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801039a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801039e:	fa1f f888 	uxth.w	r8, r8
 80103a2:	1419      	asrs	r1, r3, #16
 80103a4:	454e      	cmp	r6, r9
 80103a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80103aa:	f84a 3b04 	str.w	r3, [sl], #4
 80103ae:	d8e7      	bhi.n	8010380 <__mdiff+0x80>
 80103b0:	1b33      	subs	r3, r6, r4
 80103b2:	3b15      	subs	r3, #21
 80103b4:	f023 0303 	bic.w	r3, r3, #3
 80103b8:	3304      	adds	r3, #4
 80103ba:	3415      	adds	r4, #21
 80103bc:	42a6      	cmp	r6, r4
 80103be:	bf38      	it	cc
 80103c0:	2304      	movcc	r3, #4
 80103c2:	441d      	add	r5, r3
 80103c4:	4473      	add	r3, lr
 80103c6:	469e      	mov	lr, r3
 80103c8:	462e      	mov	r6, r5
 80103ca:	4566      	cmp	r6, ip
 80103cc:	d30e      	bcc.n	80103ec <__mdiff+0xec>
 80103ce:	f10c 0203 	add.w	r2, ip, #3
 80103d2:	1b52      	subs	r2, r2, r5
 80103d4:	f022 0203 	bic.w	r2, r2, #3
 80103d8:	3d03      	subs	r5, #3
 80103da:	45ac      	cmp	ip, r5
 80103dc:	bf38      	it	cc
 80103de:	2200      	movcc	r2, #0
 80103e0:	441a      	add	r2, r3
 80103e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80103e6:	b17b      	cbz	r3, 8010408 <__mdiff+0x108>
 80103e8:	6107      	str	r7, [r0, #16]
 80103ea:	e7a3      	b.n	8010334 <__mdiff+0x34>
 80103ec:	f856 8b04 	ldr.w	r8, [r6], #4
 80103f0:	fa11 f288 	uxtah	r2, r1, r8
 80103f4:	1414      	asrs	r4, r2, #16
 80103f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80103fa:	b292      	uxth	r2, r2
 80103fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010400:	f84e 2b04 	str.w	r2, [lr], #4
 8010404:	1421      	asrs	r1, r4, #16
 8010406:	e7e0      	b.n	80103ca <__mdiff+0xca>
 8010408:	3f01      	subs	r7, #1
 801040a:	e7ea      	b.n	80103e2 <__mdiff+0xe2>
 801040c:	08011b00 	.word	0x08011b00
 8010410:	08011b8c 	.word	0x08011b8c

08010414 <__ulp>:
 8010414:	b082      	sub	sp, #8
 8010416:	ed8d 0b00 	vstr	d0, [sp]
 801041a:	9b01      	ldr	r3, [sp, #4]
 801041c:	4912      	ldr	r1, [pc, #72]	; (8010468 <__ulp+0x54>)
 801041e:	4019      	ands	r1, r3
 8010420:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010424:	2900      	cmp	r1, #0
 8010426:	dd05      	ble.n	8010434 <__ulp+0x20>
 8010428:	2200      	movs	r2, #0
 801042a:	460b      	mov	r3, r1
 801042c:	ec43 2b10 	vmov	d0, r2, r3
 8010430:	b002      	add	sp, #8
 8010432:	4770      	bx	lr
 8010434:	4249      	negs	r1, r1
 8010436:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801043a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801043e:	f04f 0200 	mov.w	r2, #0
 8010442:	f04f 0300 	mov.w	r3, #0
 8010446:	da04      	bge.n	8010452 <__ulp+0x3e>
 8010448:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801044c:	fa41 f300 	asr.w	r3, r1, r0
 8010450:	e7ec      	b.n	801042c <__ulp+0x18>
 8010452:	f1a0 0114 	sub.w	r1, r0, #20
 8010456:	291e      	cmp	r1, #30
 8010458:	bfda      	itte	le
 801045a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801045e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010462:	2101      	movgt	r1, #1
 8010464:	460a      	mov	r2, r1
 8010466:	e7e1      	b.n	801042c <__ulp+0x18>
 8010468:	7ff00000 	.word	0x7ff00000

0801046c <__b2d>:
 801046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046e:	6905      	ldr	r5, [r0, #16]
 8010470:	f100 0714 	add.w	r7, r0, #20
 8010474:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010478:	1f2e      	subs	r6, r5, #4
 801047a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801047e:	4620      	mov	r0, r4
 8010480:	f7ff fd48 	bl	800ff14 <__hi0bits>
 8010484:	f1c0 0320 	rsb	r3, r0, #32
 8010488:	280a      	cmp	r0, #10
 801048a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010508 <__b2d+0x9c>
 801048e:	600b      	str	r3, [r1, #0]
 8010490:	dc14      	bgt.n	80104bc <__b2d+0x50>
 8010492:	f1c0 0e0b 	rsb	lr, r0, #11
 8010496:	fa24 f10e 	lsr.w	r1, r4, lr
 801049a:	42b7      	cmp	r7, r6
 801049c:	ea41 030c 	orr.w	r3, r1, ip
 80104a0:	bf34      	ite	cc
 80104a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80104a6:	2100      	movcs	r1, #0
 80104a8:	3015      	adds	r0, #21
 80104aa:	fa04 f000 	lsl.w	r0, r4, r0
 80104ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80104b2:	ea40 0201 	orr.w	r2, r0, r1
 80104b6:	ec43 2b10 	vmov	d0, r2, r3
 80104ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104bc:	42b7      	cmp	r7, r6
 80104be:	bf3a      	itte	cc
 80104c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80104c4:	f1a5 0608 	subcc.w	r6, r5, #8
 80104c8:	2100      	movcs	r1, #0
 80104ca:	380b      	subs	r0, #11
 80104cc:	d017      	beq.n	80104fe <__b2d+0x92>
 80104ce:	f1c0 0c20 	rsb	ip, r0, #32
 80104d2:	fa04 f500 	lsl.w	r5, r4, r0
 80104d6:	42be      	cmp	r6, r7
 80104d8:	fa21 f40c 	lsr.w	r4, r1, ip
 80104dc:	ea45 0504 	orr.w	r5, r5, r4
 80104e0:	bf8c      	ite	hi
 80104e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80104e6:	2400      	movls	r4, #0
 80104e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80104ec:	fa01 f000 	lsl.w	r0, r1, r0
 80104f0:	fa24 f40c 	lsr.w	r4, r4, ip
 80104f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80104f8:	ea40 0204 	orr.w	r2, r0, r4
 80104fc:	e7db      	b.n	80104b6 <__b2d+0x4a>
 80104fe:	ea44 030c 	orr.w	r3, r4, ip
 8010502:	460a      	mov	r2, r1
 8010504:	e7d7      	b.n	80104b6 <__b2d+0x4a>
 8010506:	bf00      	nop
 8010508:	3ff00000 	.word	0x3ff00000

0801050c <__d2b>:
 801050c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010510:	4689      	mov	r9, r1
 8010512:	2101      	movs	r1, #1
 8010514:	ec57 6b10 	vmov	r6, r7, d0
 8010518:	4690      	mov	r8, r2
 801051a:	f7ff fc09 	bl	800fd30 <_Balloc>
 801051e:	4604      	mov	r4, r0
 8010520:	b930      	cbnz	r0, 8010530 <__d2b+0x24>
 8010522:	4602      	mov	r2, r0
 8010524:	4b25      	ldr	r3, [pc, #148]	; (80105bc <__d2b+0xb0>)
 8010526:	4826      	ldr	r0, [pc, #152]	; (80105c0 <__d2b+0xb4>)
 8010528:	f240 310a 	movw	r1, #778	; 0x30a
 801052c:	f000 fb4e 	bl	8010bcc <__assert_func>
 8010530:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010534:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010538:	bb35      	cbnz	r5, 8010588 <__d2b+0x7c>
 801053a:	2e00      	cmp	r6, #0
 801053c:	9301      	str	r3, [sp, #4]
 801053e:	d028      	beq.n	8010592 <__d2b+0x86>
 8010540:	4668      	mov	r0, sp
 8010542:	9600      	str	r6, [sp, #0]
 8010544:	f7ff fd06 	bl	800ff54 <__lo0bits>
 8010548:	9900      	ldr	r1, [sp, #0]
 801054a:	b300      	cbz	r0, 801058e <__d2b+0x82>
 801054c:	9a01      	ldr	r2, [sp, #4]
 801054e:	f1c0 0320 	rsb	r3, r0, #32
 8010552:	fa02 f303 	lsl.w	r3, r2, r3
 8010556:	430b      	orrs	r3, r1
 8010558:	40c2      	lsrs	r2, r0
 801055a:	6163      	str	r3, [r4, #20]
 801055c:	9201      	str	r2, [sp, #4]
 801055e:	9b01      	ldr	r3, [sp, #4]
 8010560:	61a3      	str	r3, [r4, #24]
 8010562:	2b00      	cmp	r3, #0
 8010564:	bf14      	ite	ne
 8010566:	2202      	movne	r2, #2
 8010568:	2201      	moveq	r2, #1
 801056a:	6122      	str	r2, [r4, #16]
 801056c:	b1d5      	cbz	r5, 80105a4 <__d2b+0x98>
 801056e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010572:	4405      	add	r5, r0
 8010574:	f8c9 5000 	str.w	r5, [r9]
 8010578:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801057c:	f8c8 0000 	str.w	r0, [r8]
 8010580:	4620      	mov	r0, r4
 8010582:	b003      	add	sp, #12
 8010584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801058c:	e7d5      	b.n	801053a <__d2b+0x2e>
 801058e:	6161      	str	r1, [r4, #20]
 8010590:	e7e5      	b.n	801055e <__d2b+0x52>
 8010592:	a801      	add	r0, sp, #4
 8010594:	f7ff fcde 	bl	800ff54 <__lo0bits>
 8010598:	9b01      	ldr	r3, [sp, #4]
 801059a:	6163      	str	r3, [r4, #20]
 801059c:	2201      	movs	r2, #1
 801059e:	6122      	str	r2, [r4, #16]
 80105a0:	3020      	adds	r0, #32
 80105a2:	e7e3      	b.n	801056c <__d2b+0x60>
 80105a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80105ac:	f8c9 0000 	str.w	r0, [r9]
 80105b0:	6918      	ldr	r0, [r3, #16]
 80105b2:	f7ff fcaf 	bl	800ff14 <__hi0bits>
 80105b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80105ba:	e7df      	b.n	801057c <__d2b+0x70>
 80105bc:	08011b00 	.word	0x08011b00
 80105c0:	08011b8c 	.word	0x08011b8c

080105c4 <__ratio>:
 80105c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c8:	4688      	mov	r8, r1
 80105ca:	4669      	mov	r1, sp
 80105cc:	4681      	mov	r9, r0
 80105ce:	f7ff ff4d 	bl	801046c <__b2d>
 80105d2:	a901      	add	r1, sp, #4
 80105d4:	4640      	mov	r0, r8
 80105d6:	ec55 4b10 	vmov	r4, r5, d0
 80105da:	f7ff ff47 	bl	801046c <__b2d>
 80105de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80105e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80105e6:	eba3 0c02 	sub.w	ip, r3, r2
 80105ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 80105ee:	1a9b      	subs	r3, r3, r2
 80105f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80105f4:	ec51 0b10 	vmov	r0, r1, d0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	bfd6      	itet	le
 80105fc:	460a      	movle	r2, r1
 80105fe:	462a      	movgt	r2, r5
 8010600:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010604:	468b      	mov	fp, r1
 8010606:	462f      	mov	r7, r5
 8010608:	bfd4      	ite	le
 801060a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801060e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010612:	4620      	mov	r0, r4
 8010614:	ee10 2a10 	vmov	r2, s0
 8010618:	465b      	mov	r3, fp
 801061a:	4639      	mov	r1, r7
 801061c:	f7f0 f8ee 	bl	80007fc <__aeabi_ddiv>
 8010620:	ec41 0b10 	vmov	d0, r0, r1
 8010624:	b003      	add	sp, #12
 8010626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801062a <__copybits>:
 801062a:	3901      	subs	r1, #1
 801062c:	b570      	push	{r4, r5, r6, lr}
 801062e:	1149      	asrs	r1, r1, #5
 8010630:	6914      	ldr	r4, [r2, #16]
 8010632:	3101      	adds	r1, #1
 8010634:	f102 0314 	add.w	r3, r2, #20
 8010638:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801063c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010640:	1f05      	subs	r5, r0, #4
 8010642:	42a3      	cmp	r3, r4
 8010644:	d30c      	bcc.n	8010660 <__copybits+0x36>
 8010646:	1aa3      	subs	r3, r4, r2
 8010648:	3b11      	subs	r3, #17
 801064a:	f023 0303 	bic.w	r3, r3, #3
 801064e:	3211      	adds	r2, #17
 8010650:	42a2      	cmp	r2, r4
 8010652:	bf88      	it	hi
 8010654:	2300      	movhi	r3, #0
 8010656:	4418      	add	r0, r3
 8010658:	2300      	movs	r3, #0
 801065a:	4288      	cmp	r0, r1
 801065c:	d305      	bcc.n	801066a <__copybits+0x40>
 801065e:	bd70      	pop	{r4, r5, r6, pc}
 8010660:	f853 6b04 	ldr.w	r6, [r3], #4
 8010664:	f845 6f04 	str.w	r6, [r5, #4]!
 8010668:	e7eb      	b.n	8010642 <__copybits+0x18>
 801066a:	f840 3b04 	str.w	r3, [r0], #4
 801066e:	e7f4      	b.n	801065a <__copybits+0x30>

08010670 <__any_on>:
 8010670:	f100 0214 	add.w	r2, r0, #20
 8010674:	6900      	ldr	r0, [r0, #16]
 8010676:	114b      	asrs	r3, r1, #5
 8010678:	4298      	cmp	r0, r3
 801067a:	b510      	push	{r4, lr}
 801067c:	db11      	blt.n	80106a2 <__any_on+0x32>
 801067e:	dd0a      	ble.n	8010696 <__any_on+0x26>
 8010680:	f011 011f 	ands.w	r1, r1, #31
 8010684:	d007      	beq.n	8010696 <__any_on+0x26>
 8010686:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801068a:	fa24 f001 	lsr.w	r0, r4, r1
 801068e:	fa00 f101 	lsl.w	r1, r0, r1
 8010692:	428c      	cmp	r4, r1
 8010694:	d10b      	bne.n	80106ae <__any_on+0x3e>
 8010696:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801069a:	4293      	cmp	r3, r2
 801069c:	d803      	bhi.n	80106a6 <__any_on+0x36>
 801069e:	2000      	movs	r0, #0
 80106a0:	bd10      	pop	{r4, pc}
 80106a2:	4603      	mov	r3, r0
 80106a4:	e7f7      	b.n	8010696 <__any_on+0x26>
 80106a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80106aa:	2900      	cmp	r1, #0
 80106ac:	d0f5      	beq.n	801069a <__any_on+0x2a>
 80106ae:	2001      	movs	r0, #1
 80106b0:	e7f6      	b.n	80106a0 <__any_on+0x30>

080106b2 <_calloc_r>:
 80106b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106b4:	fba1 2402 	umull	r2, r4, r1, r2
 80106b8:	b94c      	cbnz	r4, 80106ce <_calloc_r+0x1c>
 80106ba:	4611      	mov	r1, r2
 80106bc:	9201      	str	r2, [sp, #4]
 80106be:	f000 f87b 	bl	80107b8 <_malloc_r>
 80106c2:	9a01      	ldr	r2, [sp, #4]
 80106c4:	4605      	mov	r5, r0
 80106c6:	b930      	cbnz	r0, 80106d6 <_calloc_r+0x24>
 80106c8:	4628      	mov	r0, r5
 80106ca:	b003      	add	sp, #12
 80106cc:	bd30      	pop	{r4, r5, pc}
 80106ce:	220c      	movs	r2, #12
 80106d0:	6002      	str	r2, [r0, #0]
 80106d2:	2500      	movs	r5, #0
 80106d4:	e7f8      	b.n	80106c8 <_calloc_r+0x16>
 80106d6:	4621      	mov	r1, r4
 80106d8:	f7fc fbc2 	bl	800ce60 <memset>
 80106dc:	e7f4      	b.n	80106c8 <_calloc_r+0x16>
	...

080106e0 <_free_r>:
 80106e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106e2:	2900      	cmp	r1, #0
 80106e4:	d044      	beq.n	8010770 <_free_r+0x90>
 80106e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106ea:	9001      	str	r0, [sp, #4]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f1a1 0404 	sub.w	r4, r1, #4
 80106f2:	bfb8      	it	lt
 80106f4:	18e4      	addlt	r4, r4, r3
 80106f6:	f000 fab3 	bl	8010c60 <__malloc_lock>
 80106fa:	4a1e      	ldr	r2, [pc, #120]	; (8010774 <_free_r+0x94>)
 80106fc:	9801      	ldr	r0, [sp, #4]
 80106fe:	6813      	ldr	r3, [r2, #0]
 8010700:	b933      	cbnz	r3, 8010710 <_free_r+0x30>
 8010702:	6063      	str	r3, [r4, #4]
 8010704:	6014      	str	r4, [r2, #0]
 8010706:	b003      	add	sp, #12
 8010708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801070c:	f000 baae 	b.w	8010c6c <__malloc_unlock>
 8010710:	42a3      	cmp	r3, r4
 8010712:	d908      	bls.n	8010726 <_free_r+0x46>
 8010714:	6825      	ldr	r5, [r4, #0]
 8010716:	1961      	adds	r1, r4, r5
 8010718:	428b      	cmp	r3, r1
 801071a:	bf01      	itttt	eq
 801071c:	6819      	ldreq	r1, [r3, #0]
 801071e:	685b      	ldreq	r3, [r3, #4]
 8010720:	1949      	addeq	r1, r1, r5
 8010722:	6021      	streq	r1, [r4, #0]
 8010724:	e7ed      	b.n	8010702 <_free_r+0x22>
 8010726:	461a      	mov	r2, r3
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	b10b      	cbz	r3, 8010730 <_free_r+0x50>
 801072c:	42a3      	cmp	r3, r4
 801072e:	d9fa      	bls.n	8010726 <_free_r+0x46>
 8010730:	6811      	ldr	r1, [r2, #0]
 8010732:	1855      	adds	r5, r2, r1
 8010734:	42a5      	cmp	r5, r4
 8010736:	d10b      	bne.n	8010750 <_free_r+0x70>
 8010738:	6824      	ldr	r4, [r4, #0]
 801073a:	4421      	add	r1, r4
 801073c:	1854      	adds	r4, r2, r1
 801073e:	42a3      	cmp	r3, r4
 8010740:	6011      	str	r1, [r2, #0]
 8010742:	d1e0      	bne.n	8010706 <_free_r+0x26>
 8010744:	681c      	ldr	r4, [r3, #0]
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	6053      	str	r3, [r2, #4]
 801074a:	4421      	add	r1, r4
 801074c:	6011      	str	r1, [r2, #0]
 801074e:	e7da      	b.n	8010706 <_free_r+0x26>
 8010750:	d902      	bls.n	8010758 <_free_r+0x78>
 8010752:	230c      	movs	r3, #12
 8010754:	6003      	str	r3, [r0, #0]
 8010756:	e7d6      	b.n	8010706 <_free_r+0x26>
 8010758:	6825      	ldr	r5, [r4, #0]
 801075a:	1961      	adds	r1, r4, r5
 801075c:	428b      	cmp	r3, r1
 801075e:	bf04      	itt	eq
 8010760:	6819      	ldreq	r1, [r3, #0]
 8010762:	685b      	ldreq	r3, [r3, #4]
 8010764:	6063      	str	r3, [r4, #4]
 8010766:	bf04      	itt	eq
 8010768:	1949      	addeq	r1, r1, r5
 801076a:	6021      	streq	r1, [r4, #0]
 801076c:	6054      	str	r4, [r2, #4]
 801076e:	e7ca      	b.n	8010706 <_free_r+0x26>
 8010770:	b003      	add	sp, #12
 8010772:	bd30      	pop	{r4, r5, pc}
 8010774:	2000474c 	.word	0x2000474c

08010778 <sbrk_aligned>:
 8010778:	b570      	push	{r4, r5, r6, lr}
 801077a:	4e0e      	ldr	r6, [pc, #56]	; (80107b4 <sbrk_aligned+0x3c>)
 801077c:	460c      	mov	r4, r1
 801077e:	6831      	ldr	r1, [r6, #0]
 8010780:	4605      	mov	r5, r0
 8010782:	b911      	cbnz	r1, 801078a <sbrk_aligned+0x12>
 8010784:	f000 f9f0 	bl	8010b68 <_sbrk_r>
 8010788:	6030      	str	r0, [r6, #0]
 801078a:	4621      	mov	r1, r4
 801078c:	4628      	mov	r0, r5
 801078e:	f000 f9eb 	bl	8010b68 <_sbrk_r>
 8010792:	1c43      	adds	r3, r0, #1
 8010794:	d00a      	beq.n	80107ac <sbrk_aligned+0x34>
 8010796:	1cc4      	adds	r4, r0, #3
 8010798:	f024 0403 	bic.w	r4, r4, #3
 801079c:	42a0      	cmp	r0, r4
 801079e:	d007      	beq.n	80107b0 <sbrk_aligned+0x38>
 80107a0:	1a21      	subs	r1, r4, r0
 80107a2:	4628      	mov	r0, r5
 80107a4:	f000 f9e0 	bl	8010b68 <_sbrk_r>
 80107a8:	3001      	adds	r0, #1
 80107aa:	d101      	bne.n	80107b0 <sbrk_aligned+0x38>
 80107ac:	f04f 34ff 	mov.w	r4, #4294967295
 80107b0:	4620      	mov	r0, r4
 80107b2:	bd70      	pop	{r4, r5, r6, pc}
 80107b4:	20004750 	.word	0x20004750

080107b8 <_malloc_r>:
 80107b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107bc:	1ccd      	adds	r5, r1, #3
 80107be:	f025 0503 	bic.w	r5, r5, #3
 80107c2:	3508      	adds	r5, #8
 80107c4:	2d0c      	cmp	r5, #12
 80107c6:	bf38      	it	cc
 80107c8:	250c      	movcc	r5, #12
 80107ca:	2d00      	cmp	r5, #0
 80107cc:	4607      	mov	r7, r0
 80107ce:	db01      	blt.n	80107d4 <_malloc_r+0x1c>
 80107d0:	42a9      	cmp	r1, r5
 80107d2:	d905      	bls.n	80107e0 <_malloc_r+0x28>
 80107d4:	230c      	movs	r3, #12
 80107d6:	603b      	str	r3, [r7, #0]
 80107d8:	2600      	movs	r6, #0
 80107da:	4630      	mov	r0, r6
 80107dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e0:	4e2e      	ldr	r6, [pc, #184]	; (801089c <_malloc_r+0xe4>)
 80107e2:	f000 fa3d 	bl	8010c60 <__malloc_lock>
 80107e6:	6833      	ldr	r3, [r6, #0]
 80107e8:	461c      	mov	r4, r3
 80107ea:	bb34      	cbnz	r4, 801083a <_malloc_r+0x82>
 80107ec:	4629      	mov	r1, r5
 80107ee:	4638      	mov	r0, r7
 80107f0:	f7ff ffc2 	bl	8010778 <sbrk_aligned>
 80107f4:	1c43      	adds	r3, r0, #1
 80107f6:	4604      	mov	r4, r0
 80107f8:	d14d      	bne.n	8010896 <_malloc_r+0xde>
 80107fa:	6834      	ldr	r4, [r6, #0]
 80107fc:	4626      	mov	r6, r4
 80107fe:	2e00      	cmp	r6, #0
 8010800:	d140      	bne.n	8010884 <_malloc_r+0xcc>
 8010802:	6823      	ldr	r3, [r4, #0]
 8010804:	4631      	mov	r1, r6
 8010806:	4638      	mov	r0, r7
 8010808:	eb04 0803 	add.w	r8, r4, r3
 801080c:	f000 f9ac 	bl	8010b68 <_sbrk_r>
 8010810:	4580      	cmp	r8, r0
 8010812:	d13a      	bne.n	801088a <_malloc_r+0xd2>
 8010814:	6821      	ldr	r1, [r4, #0]
 8010816:	3503      	adds	r5, #3
 8010818:	1a6d      	subs	r5, r5, r1
 801081a:	f025 0503 	bic.w	r5, r5, #3
 801081e:	3508      	adds	r5, #8
 8010820:	2d0c      	cmp	r5, #12
 8010822:	bf38      	it	cc
 8010824:	250c      	movcc	r5, #12
 8010826:	4629      	mov	r1, r5
 8010828:	4638      	mov	r0, r7
 801082a:	f7ff ffa5 	bl	8010778 <sbrk_aligned>
 801082e:	3001      	adds	r0, #1
 8010830:	d02b      	beq.n	801088a <_malloc_r+0xd2>
 8010832:	6823      	ldr	r3, [r4, #0]
 8010834:	442b      	add	r3, r5
 8010836:	6023      	str	r3, [r4, #0]
 8010838:	e00e      	b.n	8010858 <_malloc_r+0xa0>
 801083a:	6822      	ldr	r2, [r4, #0]
 801083c:	1b52      	subs	r2, r2, r5
 801083e:	d41e      	bmi.n	801087e <_malloc_r+0xc6>
 8010840:	2a0b      	cmp	r2, #11
 8010842:	d916      	bls.n	8010872 <_malloc_r+0xba>
 8010844:	1961      	adds	r1, r4, r5
 8010846:	42a3      	cmp	r3, r4
 8010848:	6025      	str	r5, [r4, #0]
 801084a:	bf18      	it	ne
 801084c:	6059      	strne	r1, [r3, #4]
 801084e:	6863      	ldr	r3, [r4, #4]
 8010850:	bf08      	it	eq
 8010852:	6031      	streq	r1, [r6, #0]
 8010854:	5162      	str	r2, [r4, r5]
 8010856:	604b      	str	r3, [r1, #4]
 8010858:	4638      	mov	r0, r7
 801085a:	f104 060b 	add.w	r6, r4, #11
 801085e:	f000 fa05 	bl	8010c6c <__malloc_unlock>
 8010862:	f026 0607 	bic.w	r6, r6, #7
 8010866:	1d23      	adds	r3, r4, #4
 8010868:	1af2      	subs	r2, r6, r3
 801086a:	d0b6      	beq.n	80107da <_malloc_r+0x22>
 801086c:	1b9b      	subs	r3, r3, r6
 801086e:	50a3      	str	r3, [r4, r2]
 8010870:	e7b3      	b.n	80107da <_malloc_r+0x22>
 8010872:	6862      	ldr	r2, [r4, #4]
 8010874:	42a3      	cmp	r3, r4
 8010876:	bf0c      	ite	eq
 8010878:	6032      	streq	r2, [r6, #0]
 801087a:	605a      	strne	r2, [r3, #4]
 801087c:	e7ec      	b.n	8010858 <_malloc_r+0xa0>
 801087e:	4623      	mov	r3, r4
 8010880:	6864      	ldr	r4, [r4, #4]
 8010882:	e7b2      	b.n	80107ea <_malloc_r+0x32>
 8010884:	4634      	mov	r4, r6
 8010886:	6876      	ldr	r6, [r6, #4]
 8010888:	e7b9      	b.n	80107fe <_malloc_r+0x46>
 801088a:	230c      	movs	r3, #12
 801088c:	603b      	str	r3, [r7, #0]
 801088e:	4638      	mov	r0, r7
 8010890:	f000 f9ec 	bl	8010c6c <__malloc_unlock>
 8010894:	e7a1      	b.n	80107da <_malloc_r+0x22>
 8010896:	6025      	str	r5, [r4, #0]
 8010898:	e7de      	b.n	8010858 <_malloc_r+0xa0>
 801089a:	bf00      	nop
 801089c:	2000474c 	.word	0x2000474c

080108a0 <__ssputs_r>:
 80108a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108a4:	688e      	ldr	r6, [r1, #8]
 80108a6:	429e      	cmp	r6, r3
 80108a8:	4682      	mov	sl, r0
 80108aa:	460c      	mov	r4, r1
 80108ac:	4690      	mov	r8, r2
 80108ae:	461f      	mov	r7, r3
 80108b0:	d838      	bhi.n	8010924 <__ssputs_r+0x84>
 80108b2:	898a      	ldrh	r2, [r1, #12]
 80108b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108b8:	d032      	beq.n	8010920 <__ssputs_r+0x80>
 80108ba:	6825      	ldr	r5, [r4, #0]
 80108bc:	6909      	ldr	r1, [r1, #16]
 80108be:	eba5 0901 	sub.w	r9, r5, r1
 80108c2:	6965      	ldr	r5, [r4, #20]
 80108c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108cc:	3301      	adds	r3, #1
 80108ce:	444b      	add	r3, r9
 80108d0:	106d      	asrs	r5, r5, #1
 80108d2:	429d      	cmp	r5, r3
 80108d4:	bf38      	it	cc
 80108d6:	461d      	movcc	r5, r3
 80108d8:	0553      	lsls	r3, r2, #21
 80108da:	d531      	bpl.n	8010940 <__ssputs_r+0xa0>
 80108dc:	4629      	mov	r1, r5
 80108de:	f7ff ff6b 	bl	80107b8 <_malloc_r>
 80108e2:	4606      	mov	r6, r0
 80108e4:	b950      	cbnz	r0, 80108fc <__ssputs_r+0x5c>
 80108e6:	230c      	movs	r3, #12
 80108e8:	f8ca 3000 	str.w	r3, [sl]
 80108ec:	89a3      	ldrh	r3, [r4, #12]
 80108ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108f2:	81a3      	strh	r3, [r4, #12]
 80108f4:	f04f 30ff 	mov.w	r0, #4294967295
 80108f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108fc:	6921      	ldr	r1, [r4, #16]
 80108fe:	464a      	mov	r2, r9
 8010900:	f7fc faa0 	bl	800ce44 <memcpy>
 8010904:	89a3      	ldrh	r3, [r4, #12]
 8010906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801090a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801090e:	81a3      	strh	r3, [r4, #12]
 8010910:	6126      	str	r6, [r4, #16]
 8010912:	6165      	str	r5, [r4, #20]
 8010914:	444e      	add	r6, r9
 8010916:	eba5 0509 	sub.w	r5, r5, r9
 801091a:	6026      	str	r6, [r4, #0]
 801091c:	60a5      	str	r5, [r4, #8]
 801091e:	463e      	mov	r6, r7
 8010920:	42be      	cmp	r6, r7
 8010922:	d900      	bls.n	8010926 <__ssputs_r+0x86>
 8010924:	463e      	mov	r6, r7
 8010926:	6820      	ldr	r0, [r4, #0]
 8010928:	4632      	mov	r2, r6
 801092a:	4641      	mov	r1, r8
 801092c:	f000 f97e 	bl	8010c2c <memmove>
 8010930:	68a3      	ldr	r3, [r4, #8]
 8010932:	1b9b      	subs	r3, r3, r6
 8010934:	60a3      	str	r3, [r4, #8]
 8010936:	6823      	ldr	r3, [r4, #0]
 8010938:	4433      	add	r3, r6
 801093a:	6023      	str	r3, [r4, #0]
 801093c:	2000      	movs	r0, #0
 801093e:	e7db      	b.n	80108f8 <__ssputs_r+0x58>
 8010940:	462a      	mov	r2, r5
 8010942:	f000 f999 	bl	8010c78 <_realloc_r>
 8010946:	4606      	mov	r6, r0
 8010948:	2800      	cmp	r0, #0
 801094a:	d1e1      	bne.n	8010910 <__ssputs_r+0x70>
 801094c:	6921      	ldr	r1, [r4, #16]
 801094e:	4650      	mov	r0, sl
 8010950:	f7ff fec6 	bl	80106e0 <_free_r>
 8010954:	e7c7      	b.n	80108e6 <__ssputs_r+0x46>
	...

08010958 <_svfiprintf_r>:
 8010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	4698      	mov	r8, r3
 801095e:	898b      	ldrh	r3, [r1, #12]
 8010960:	061b      	lsls	r3, r3, #24
 8010962:	b09d      	sub	sp, #116	; 0x74
 8010964:	4607      	mov	r7, r0
 8010966:	460d      	mov	r5, r1
 8010968:	4614      	mov	r4, r2
 801096a:	d50e      	bpl.n	801098a <_svfiprintf_r+0x32>
 801096c:	690b      	ldr	r3, [r1, #16]
 801096e:	b963      	cbnz	r3, 801098a <_svfiprintf_r+0x32>
 8010970:	2140      	movs	r1, #64	; 0x40
 8010972:	f7ff ff21 	bl	80107b8 <_malloc_r>
 8010976:	6028      	str	r0, [r5, #0]
 8010978:	6128      	str	r0, [r5, #16]
 801097a:	b920      	cbnz	r0, 8010986 <_svfiprintf_r+0x2e>
 801097c:	230c      	movs	r3, #12
 801097e:	603b      	str	r3, [r7, #0]
 8010980:	f04f 30ff 	mov.w	r0, #4294967295
 8010984:	e0d1      	b.n	8010b2a <_svfiprintf_r+0x1d2>
 8010986:	2340      	movs	r3, #64	; 0x40
 8010988:	616b      	str	r3, [r5, #20]
 801098a:	2300      	movs	r3, #0
 801098c:	9309      	str	r3, [sp, #36]	; 0x24
 801098e:	2320      	movs	r3, #32
 8010990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010994:	f8cd 800c 	str.w	r8, [sp, #12]
 8010998:	2330      	movs	r3, #48	; 0x30
 801099a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010b44 <_svfiprintf_r+0x1ec>
 801099e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109a2:	f04f 0901 	mov.w	r9, #1
 80109a6:	4623      	mov	r3, r4
 80109a8:	469a      	mov	sl, r3
 80109aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109ae:	b10a      	cbz	r2, 80109b4 <_svfiprintf_r+0x5c>
 80109b0:	2a25      	cmp	r2, #37	; 0x25
 80109b2:	d1f9      	bne.n	80109a8 <_svfiprintf_r+0x50>
 80109b4:	ebba 0b04 	subs.w	fp, sl, r4
 80109b8:	d00b      	beq.n	80109d2 <_svfiprintf_r+0x7a>
 80109ba:	465b      	mov	r3, fp
 80109bc:	4622      	mov	r2, r4
 80109be:	4629      	mov	r1, r5
 80109c0:	4638      	mov	r0, r7
 80109c2:	f7ff ff6d 	bl	80108a0 <__ssputs_r>
 80109c6:	3001      	adds	r0, #1
 80109c8:	f000 80aa 	beq.w	8010b20 <_svfiprintf_r+0x1c8>
 80109cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109ce:	445a      	add	r2, fp
 80109d0:	9209      	str	r2, [sp, #36]	; 0x24
 80109d2:	f89a 3000 	ldrb.w	r3, [sl]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	f000 80a2 	beq.w	8010b20 <_svfiprintf_r+0x1c8>
 80109dc:	2300      	movs	r3, #0
 80109de:	f04f 32ff 	mov.w	r2, #4294967295
 80109e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109e6:	f10a 0a01 	add.w	sl, sl, #1
 80109ea:	9304      	str	r3, [sp, #16]
 80109ec:	9307      	str	r3, [sp, #28]
 80109ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109f2:	931a      	str	r3, [sp, #104]	; 0x68
 80109f4:	4654      	mov	r4, sl
 80109f6:	2205      	movs	r2, #5
 80109f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109fc:	4851      	ldr	r0, [pc, #324]	; (8010b44 <_svfiprintf_r+0x1ec>)
 80109fe:	f7ef fbc7 	bl	8000190 <memchr>
 8010a02:	9a04      	ldr	r2, [sp, #16]
 8010a04:	b9d8      	cbnz	r0, 8010a3e <_svfiprintf_r+0xe6>
 8010a06:	06d0      	lsls	r0, r2, #27
 8010a08:	bf44      	itt	mi
 8010a0a:	2320      	movmi	r3, #32
 8010a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a10:	0711      	lsls	r1, r2, #28
 8010a12:	bf44      	itt	mi
 8010a14:	232b      	movmi	r3, #43	; 0x2b
 8010a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8010a20:	d015      	beq.n	8010a4e <_svfiprintf_r+0xf6>
 8010a22:	9a07      	ldr	r2, [sp, #28]
 8010a24:	4654      	mov	r4, sl
 8010a26:	2000      	movs	r0, #0
 8010a28:	f04f 0c0a 	mov.w	ip, #10
 8010a2c:	4621      	mov	r1, r4
 8010a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a32:	3b30      	subs	r3, #48	; 0x30
 8010a34:	2b09      	cmp	r3, #9
 8010a36:	d94e      	bls.n	8010ad6 <_svfiprintf_r+0x17e>
 8010a38:	b1b0      	cbz	r0, 8010a68 <_svfiprintf_r+0x110>
 8010a3a:	9207      	str	r2, [sp, #28]
 8010a3c:	e014      	b.n	8010a68 <_svfiprintf_r+0x110>
 8010a3e:	eba0 0308 	sub.w	r3, r0, r8
 8010a42:	fa09 f303 	lsl.w	r3, r9, r3
 8010a46:	4313      	orrs	r3, r2
 8010a48:	9304      	str	r3, [sp, #16]
 8010a4a:	46a2      	mov	sl, r4
 8010a4c:	e7d2      	b.n	80109f4 <_svfiprintf_r+0x9c>
 8010a4e:	9b03      	ldr	r3, [sp, #12]
 8010a50:	1d19      	adds	r1, r3, #4
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	9103      	str	r1, [sp, #12]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	bfbb      	ittet	lt
 8010a5a:	425b      	neglt	r3, r3
 8010a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8010a60:	9307      	strge	r3, [sp, #28]
 8010a62:	9307      	strlt	r3, [sp, #28]
 8010a64:	bfb8      	it	lt
 8010a66:	9204      	strlt	r2, [sp, #16]
 8010a68:	7823      	ldrb	r3, [r4, #0]
 8010a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a6c:	d10c      	bne.n	8010a88 <_svfiprintf_r+0x130>
 8010a6e:	7863      	ldrb	r3, [r4, #1]
 8010a70:	2b2a      	cmp	r3, #42	; 0x2a
 8010a72:	d135      	bne.n	8010ae0 <_svfiprintf_r+0x188>
 8010a74:	9b03      	ldr	r3, [sp, #12]
 8010a76:	1d1a      	adds	r2, r3, #4
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	9203      	str	r2, [sp, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	bfb8      	it	lt
 8010a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a84:	3402      	adds	r4, #2
 8010a86:	9305      	str	r3, [sp, #20]
 8010a88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010b54 <_svfiprintf_r+0x1fc>
 8010a8c:	7821      	ldrb	r1, [r4, #0]
 8010a8e:	2203      	movs	r2, #3
 8010a90:	4650      	mov	r0, sl
 8010a92:	f7ef fb7d 	bl	8000190 <memchr>
 8010a96:	b140      	cbz	r0, 8010aaa <_svfiprintf_r+0x152>
 8010a98:	2340      	movs	r3, #64	; 0x40
 8010a9a:	eba0 000a 	sub.w	r0, r0, sl
 8010a9e:	fa03 f000 	lsl.w	r0, r3, r0
 8010aa2:	9b04      	ldr	r3, [sp, #16]
 8010aa4:	4303      	orrs	r3, r0
 8010aa6:	3401      	adds	r4, #1
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aae:	4826      	ldr	r0, [pc, #152]	; (8010b48 <_svfiprintf_r+0x1f0>)
 8010ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ab4:	2206      	movs	r2, #6
 8010ab6:	f7ef fb6b 	bl	8000190 <memchr>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d038      	beq.n	8010b30 <_svfiprintf_r+0x1d8>
 8010abe:	4b23      	ldr	r3, [pc, #140]	; (8010b4c <_svfiprintf_r+0x1f4>)
 8010ac0:	bb1b      	cbnz	r3, 8010b0a <_svfiprintf_r+0x1b2>
 8010ac2:	9b03      	ldr	r3, [sp, #12]
 8010ac4:	3307      	adds	r3, #7
 8010ac6:	f023 0307 	bic.w	r3, r3, #7
 8010aca:	3308      	adds	r3, #8
 8010acc:	9303      	str	r3, [sp, #12]
 8010ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ad0:	4433      	add	r3, r6
 8010ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ad4:	e767      	b.n	80109a6 <_svfiprintf_r+0x4e>
 8010ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ada:	460c      	mov	r4, r1
 8010adc:	2001      	movs	r0, #1
 8010ade:	e7a5      	b.n	8010a2c <_svfiprintf_r+0xd4>
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	3401      	adds	r4, #1
 8010ae4:	9305      	str	r3, [sp, #20]
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	f04f 0c0a 	mov.w	ip, #10
 8010aec:	4620      	mov	r0, r4
 8010aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010af2:	3a30      	subs	r2, #48	; 0x30
 8010af4:	2a09      	cmp	r2, #9
 8010af6:	d903      	bls.n	8010b00 <_svfiprintf_r+0x1a8>
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d0c5      	beq.n	8010a88 <_svfiprintf_r+0x130>
 8010afc:	9105      	str	r1, [sp, #20]
 8010afe:	e7c3      	b.n	8010a88 <_svfiprintf_r+0x130>
 8010b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b04:	4604      	mov	r4, r0
 8010b06:	2301      	movs	r3, #1
 8010b08:	e7f0      	b.n	8010aec <_svfiprintf_r+0x194>
 8010b0a:	ab03      	add	r3, sp, #12
 8010b0c:	9300      	str	r3, [sp, #0]
 8010b0e:	462a      	mov	r2, r5
 8010b10:	4b0f      	ldr	r3, [pc, #60]	; (8010b50 <_svfiprintf_r+0x1f8>)
 8010b12:	a904      	add	r1, sp, #16
 8010b14:	4638      	mov	r0, r7
 8010b16:	f7fc fa4b 	bl	800cfb0 <_printf_float>
 8010b1a:	1c42      	adds	r2, r0, #1
 8010b1c:	4606      	mov	r6, r0
 8010b1e:	d1d6      	bne.n	8010ace <_svfiprintf_r+0x176>
 8010b20:	89ab      	ldrh	r3, [r5, #12]
 8010b22:	065b      	lsls	r3, r3, #25
 8010b24:	f53f af2c 	bmi.w	8010980 <_svfiprintf_r+0x28>
 8010b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b2a:	b01d      	add	sp, #116	; 0x74
 8010b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b30:	ab03      	add	r3, sp, #12
 8010b32:	9300      	str	r3, [sp, #0]
 8010b34:	462a      	mov	r2, r5
 8010b36:	4b06      	ldr	r3, [pc, #24]	; (8010b50 <_svfiprintf_r+0x1f8>)
 8010b38:	a904      	add	r1, sp, #16
 8010b3a:	4638      	mov	r0, r7
 8010b3c:	f7fc fcdc 	bl	800d4f8 <_printf_i>
 8010b40:	e7eb      	b.n	8010b1a <_svfiprintf_r+0x1c2>
 8010b42:	bf00      	nop
 8010b44:	08011ce4 	.word	0x08011ce4
 8010b48:	08011cee 	.word	0x08011cee
 8010b4c:	0800cfb1 	.word	0x0800cfb1
 8010b50:	080108a1 	.word	0x080108a1
 8010b54:	08011cea 	.word	0x08011cea

08010b58 <nan>:
 8010b58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010b60 <nan+0x8>
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop
 8010b60:	00000000 	.word	0x00000000
 8010b64:	7ff80000 	.word	0x7ff80000

08010b68 <_sbrk_r>:
 8010b68:	b538      	push	{r3, r4, r5, lr}
 8010b6a:	4d06      	ldr	r5, [pc, #24]	; (8010b84 <_sbrk_r+0x1c>)
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	4604      	mov	r4, r0
 8010b70:	4608      	mov	r0, r1
 8010b72:	602b      	str	r3, [r5, #0]
 8010b74:	f7f3 fc80 	bl	8004478 <_sbrk>
 8010b78:	1c43      	adds	r3, r0, #1
 8010b7a:	d102      	bne.n	8010b82 <_sbrk_r+0x1a>
 8010b7c:	682b      	ldr	r3, [r5, #0]
 8010b7e:	b103      	cbz	r3, 8010b82 <_sbrk_r+0x1a>
 8010b80:	6023      	str	r3, [r4, #0]
 8010b82:	bd38      	pop	{r3, r4, r5, pc}
 8010b84:	20004754 	.word	0x20004754

08010b88 <strncmp>:
 8010b88:	b510      	push	{r4, lr}
 8010b8a:	b17a      	cbz	r2, 8010bac <strncmp+0x24>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	3901      	subs	r1, #1
 8010b90:	1884      	adds	r4, r0, r2
 8010b92:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010b9a:	4290      	cmp	r0, r2
 8010b9c:	d101      	bne.n	8010ba2 <strncmp+0x1a>
 8010b9e:	42a3      	cmp	r3, r4
 8010ba0:	d101      	bne.n	8010ba6 <strncmp+0x1e>
 8010ba2:	1a80      	subs	r0, r0, r2
 8010ba4:	bd10      	pop	{r4, pc}
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	d1f3      	bne.n	8010b92 <strncmp+0xa>
 8010baa:	e7fa      	b.n	8010ba2 <strncmp+0x1a>
 8010bac:	4610      	mov	r0, r2
 8010bae:	e7f9      	b.n	8010ba4 <strncmp+0x1c>

08010bb0 <__ascii_wctomb>:
 8010bb0:	b149      	cbz	r1, 8010bc6 <__ascii_wctomb+0x16>
 8010bb2:	2aff      	cmp	r2, #255	; 0xff
 8010bb4:	bf85      	ittet	hi
 8010bb6:	238a      	movhi	r3, #138	; 0x8a
 8010bb8:	6003      	strhi	r3, [r0, #0]
 8010bba:	700a      	strbls	r2, [r1, #0]
 8010bbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8010bc0:	bf98      	it	ls
 8010bc2:	2001      	movls	r0, #1
 8010bc4:	4770      	bx	lr
 8010bc6:	4608      	mov	r0, r1
 8010bc8:	4770      	bx	lr
	...

08010bcc <__assert_func>:
 8010bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010bce:	4614      	mov	r4, r2
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	4b09      	ldr	r3, [pc, #36]	; (8010bf8 <__assert_func+0x2c>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	68d8      	ldr	r0, [r3, #12]
 8010bda:	b14c      	cbz	r4, 8010bf0 <__assert_func+0x24>
 8010bdc:	4b07      	ldr	r3, [pc, #28]	; (8010bfc <__assert_func+0x30>)
 8010bde:	9100      	str	r1, [sp, #0]
 8010be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010be4:	4906      	ldr	r1, [pc, #24]	; (8010c00 <__assert_func+0x34>)
 8010be6:	462b      	mov	r3, r5
 8010be8:	f000 f80e 	bl	8010c08 <fiprintf>
 8010bec:	f000 fa8c 	bl	8011108 <abort>
 8010bf0:	4b04      	ldr	r3, [pc, #16]	; (8010c04 <__assert_func+0x38>)
 8010bf2:	461c      	mov	r4, r3
 8010bf4:	e7f3      	b.n	8010bde <__assert_func+0x12>
 8010bf6:	bf00      	nop
 8010bf8:	20000190 	.word	0x20000190
 8010bfc:	08011cf5 	.word	0x08011cf5
 8010c00:	08011d02 	.word	0x08011d02
 8010c04:	08011d30 	.word	0x08011d30

08010c08 <fiprintf>:
 8010c08:	b40e      	push	{r1, r2, r3}
 8010c0a:	b503      	push	{r0, r1, lr}
 8010c0c:	4601      	mov	r1, r0
 8010c0e:	ab03      	add	r3, sp, #12
 8010c10:	4805      	ldr	r0, [pc, #20]	; (8010c28 <fiprintf+0x20>)
 8010c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c16:	6800      	ldr	r0, [r0, #0]
 8010c18:	9301      	str	r3, [sp, #4]
 8010c1a:	f000 f885 	bl	8010d28 <_vfiprintf_r>
 8010c1e:	b002      	add	sp, #8
 8010c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c24:	b003      	add	sp, #12
 8010c26:	4770      	bx	lr
 8010c28:	20000190 	.word	0x20000190

08010c2c <memmove>:
 8010c2c:	4288      	cmp	r0, r1
 8010c2e:	b510      	push	{r4, lr}
 8010c30:	eb01 0402 	add.w	r4, r1, r2
 8010c34:	d902      	bls.n	8010c3c <memmove+0x10>
 8010c36:	4284      	cmp	r4, r0
 8010c38:	4623      	mov	r3, r4
 8010c3a:	d807      	bhi.n	8010c4c <memmove+0x20>
 8010c3c:	1e43      	subs	r3, r0, #1
 8010c3e:	42a1      	cmp	r1, r4
 8010c40:	d008      	beq.n	8010c54 <memmove+0x28>
 8010c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c4a:	e7f8      	b.n	8010c3e <memmove+0x12>
 8010c4c:	4402      	add	r2, r0
 8010c4e:	4601      	mov	r1, r0
 8010c50:	428a      	cmp	r2, r1
 8010c52:	d100      	bne.n	8010c56 <memmove+0x2a>
 8010c54:	bd10      	pop	{r4, pc}
 8010c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c5e:	e7f7      	b.n	8010c50 <memmove+0x24>

08010c60 <__malloc_lock>:
 8010c60:	4801      	ldr	r0, [pc, #4]	; (8010c68 <__malloc_lock+0x8>)
 8010c62:	f000 bc11 	b.w	8011488 <__retarget_lock_acquire_recursive>
 8010c66:	bf00      	nop
 8010c68:	20004758 	.word	0x20004758

08010c6c <__malloc_unlock>:
 8010c6c:	4801      	ldr	r0, [pc, #4]	; (8010c74 <__malloc_unlock+0x8>)
 8010c6e:	f000 bc0c 	b.w	801148a <__retarget_lock_release_recursive>
 8010c72:	bf00      	nop
 8010c74:	20004758 	.word	0x20004758

08010c78 <_realloc_r>:
 8010c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c7c:	4680      	mov	r8, r0
 8010c7e:	4614      	mov	r4, r2
 8010c80:	460e      	mov	r6, r1
 8010c82:	b921      	cbnz	r1, 8010c8e <_realloc_r+0x16>
 8010c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c88:	4611      	mov	r1, r2
 8010c8a:	f7ff bd95 	b.w	80107b8 <_malloc_r>
 8010c8e:	b92a      	cbnz	r2, 8010c9c <_realloc_r+0x24>
 8010c90:	f7ff fd26 	bl	80106e0 <_free_r>
 8010c94:	4625      	mov	r5, r4
 8010c96:	4628      	mov	r0, r5
 8010c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c9c:	f000 fc5c 	bl	8011558 <_malloc_usable_size_r>
 8010ca0:	4284      	cmp	r4, r0
 8010ca2:	4607      	mov	r7, r0
 8010ca4:	d802      	bhi.n	8010cac <_realloc_r+0x34>
 8010ca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010caa:	d812      	bhi.n	8010cd2 <_realloc_r+0x5a>
 8010cac:	4621      	mov	r1, r4
 8010cae:	4640      	mov	r0, r8
 8010cb0:	f7ff fd82 	bl	80107b8 <_malloc_r>
 8010cb4:	4605      	mov	r5, r0
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d0ed      	beq.n	8010c96 <_realloc_r+0x1e>
 8010cba:	42bc      	cmp	r4, r7
 8010cbc:	4622      	mov	r2, r4
 8010cbe:	4631      	mov	r1, r6
 8010cc0:	bf28      	it	cs
 8010cc2:	463a      	movcs	r2, r7
 8010cc4:	f7fc f8be 	bl	800ce44 <memcpy>
 8010cc8:	4631      	mov	r1, r6
 8010cca:	4640      	mov	r0, r8
 8010ccc:	f7ff fd08 	bl	80106e0 <_free_r>
 8010cd0:	e7e1      	b.n	8010c96 <_realloc_r+0x1e>
 8010cd2:	4635      	mov	r5, r6
 8010cd4:	e7df      	b.n	8010c96 <_realloc_r+0x1e>

08010cd6 <__sfputc_r>:
 8010cd6:	6893      	ldr	r3, [r2, #8]
 8010cd8:	3b01      	subs	r3, #1
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	b410      	push	{r4}
 8010cde:	6093      	str	r3, [r2, #8]
 8010ce0:	da08      	bge.n	8010cf4 <__sfputc_r+0x1e>
 8010ce2:	6994      	ldr	r4, [r2, #24]
 8010ce4:	42a3      	cmp	r3, r4
 8010ce6:	db01      	blt.n	8010cec <__sfputc_r+0x16>
 8010ce8:	290a      	cmp	r1, #10
 8010cea:	d103      	bne.n	8010cf4 <__sfputc_r+0x1e>
 8010cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cf0:	f000 b94a 	b.w	8010f88 <__swbuf_r>
 8010cf4:	6813      	ldr	r3, [r2, #0]
 8010cf6:	1c58      	adds	r0, r3, #1
 8010cf8:	6010      	str	r0, [r2, #0]
 8010cfa:	7019      	strb	r1, [r3, #0]
 8010cfc:	4608      	mov	r0, r1
 8010cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <__sfputs_r>:
 8010d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d06:	4606      	mov	r6, r0
 8010d08:	460f      	mov	r7, r1
 8010d0a:	4614      	mov	r4, r2
 8010d0c:	18d5      	adds	r5, r2, r3
 8010d0e:	42ac      	cmp	r4, r5
 8010d10:	d101      	bne.n	8010d16 <__sfputs_r+0x12>
 8010d12:	2000      	movs	r0, #0
 8010d14:	e007      	b.n	8010d26 <__sfputs_r+0x22>
 8010d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d1a:	463a      	mov	r2, r7
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	f7ff ffda 	bl	8010cd6 <__sfputc_r>
 8010d22:	1c43      	adds	r3, r0, #1
 8010d24:	d1f3      	bne.n	8010d0e <__sfputs_r+0xa>
 8010d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010d28 <_vfiprintf_r>:
 8010d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2c:	460d      	mov	r5, r1
 8010d2e:	b09d      	sub	sp, #116	; 0x74
 8010d30:	4614      	mov	r4, r2
 8010d32:	4698      	mov	r8, r3
 8010d34:	4606      	mov	r6, r0
 8010d36:	b118      	cbz	r0, 8010d40 <_vfiprintf_r+0x18>
 8010d38:	6983      	ldr	r3, [r0, #24]
 8010d3a:	b90b      	cbnz	r3, 8010d40 <_vfiprintf_r+0x18>
 8010d3c:	f000 fb06 	bl	801134c <__sinit>
 8010d40:	4b89      	ldr	r3, [pc, #548]	; (8010f68 <_vfiprintf_r+0x240>)
 8010d42:	429d      	cmp	r5, r3
 8010d44:	d11b      	bne.n	8010d7e <_vfiprintf_r+0x56>
 8010d46:	6875      	ldr	r5, [r6, #4]
 8010d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d4a:	07d9      	lsls	r1, r3, #31
 8010d4c:	d405      	bmi.n	8010d5a <_vfiprintf_r+0x32>
 8010d4e:	89ab      	ldrh	r3, [r5, #12]
 8010d50:	059a      	lsls	r2, r3, #22
 8010d52:	d402      	bmi.n	8010d5a <_vfiprintf_r+0x32>
 8010d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d56:	f000 fb97 	bl	8011488 <__retarget_lock_acquire_recursive>
 8010d5a:	89ab      	ldrh	r3, [r5, #12]
 8010d5c:	071b      	lsls	r3, r3, #28
 8010d5e:	d501      	bpl.n	8010d64 <_vfiprintf_r+0x3c>
 8010d60:	692b      	ldr	r3, [r5, #16]
 8010d62:	b9eb      	cbnz	r3, 8010da0 <_vfiprintf_r+0x78>
 8010d64:	4629      	mov	r1, r5
 8010d66:	4630      	mov	r0, r6
 8010d68:	f000 f960 	bl	801102c <__swsetup_r>
 8010d6c:	b1c0      	cbz	r0, 8010da0 <_vfiprintf_r+0x78>
 8010d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d70:	07dc      	lsls	r4, r3, #31
 8010d72:	d50e      	bpl.n	8010d92 <_vfiprintf_r+0x6a>
 8010d74:	f04f 30ff 	mov.w	r0, #4294967295
 8010d78:	b01d      	add	sp, #116	; 0x74
 8010d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7e:	4b7b      	ldr	r3, [pc, #492]	; (8010f6c <_vfiprintf_r+0x244>)
 8010d80:	429d      	cmp	r5, r3
 8010d82:	d101      	bne.n	8010d88 <_vfiprintf_r+0x60>
 8010d84:	68b5      	ldr	r5, [r6, #8]
 8010d86:	e7df      	b.n	8010d48 <_vfiprintf_r+0x20>
 8010d88:	4b79      	ldr	r3, [pc, #484]	; (8010f70 <_vfiprintf_r+0x248>)
 8010d8a:	429d      	cmp	r5, r3
 8010d8c:	bf08      	it	eq
 8010d8e:	68f5      	ldreq	r5, [r6, #12]
 8010d90:	e7da      	b.n	8010d48 <_vfiprintf_r+0x20>
 8010d92:	89ab      	ldrh	r3, [r5, #12]
 8010d94:	0598      	lsls	r0, r3, #22
 8010d96:	d4ed      	bmi.n	8010d74 <_vfiprintf_r+0x4c>
 8010d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d9a:	f000 fb76 	bl	801148a <__retarget_lock_release_recursive>
 8010d9e:	e7e9      	b.n	8010d74 <_vfiprintf_r+0x4c>
 8010da0:	2300      	movs	r3, #0
 8010da2:	9309      	str	r3, [sp, #36]	; 0x24
 8010da4:	2320      	movs	r3, #32
 8010da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8010dae:	2330      	movs	r3, #48	; 0x30
 8010db0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010f74 <_vfiprintf_r+0x24c>
 8010db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010db8:	f04f 0901 	mov.w	r9, #1
 8010dbc:	4623      	mov	r3, r4
 8010dbe:	469a      	mov	sl, r3
 8010dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dc4:	b10a      	cbz	r2, 8010dca <_vfiprintf_r+0xa2>
 8010dc6:	2a25      	cmp	r2, #37	; 0x25
 8010dc8:	d1f9      	bne.n	8010dbe <_vfiprintf_r+0x96>
 8010dca:	ebba 0b04 	subs.w	fp, sl, r4
 8010dce:	d00b      	beq.n	8010de8 <_vfiprintf_r+0xc0>
 8010dd0:	465b      	mov	r3, fp
 8010dd2:	4622      	mov	r2, r4
 8010dd4:	4629      	mov	r1, r5
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	f7ff ff94 	bl	8010d04 <__sfputs_r>
 8010ddc:	3001      	adds	r0, #1
 8010dde:	f000 80aa 	beq.w	8010f36 <_vfiprintf_r+0x20e>
 8010de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010de4:	445a      	add	r2, fp
 8010de6:	9209      	str	r2, [sp, #36]	; 0x24
 8010de8:	f89a 3000 	ldrb.w	r3, [sl]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f000 80a2 	beq.w	8010f36 <_vfiprintf_r+0x20e>
 8010df2:	2300      	movs	r3, #0
 8010df4:	f04f 32ff 	mov.w	r2, #4294967295
 8010df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dfc:	f10a 0a01 	add.w	sl, sl, #1
 8010e00:	9304      	str	r3, [sp, #16]
 8010e02:	9307      	str	r3, [sp, #28]
 8010e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e08:	931a      	str	r3, [sp, #104]	; 0x68
 8010e0a:	4654      	mov	r4, sl
 8010e0c:	2205      	movs	r2, #5
 8010e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e12:	4858      	ldr	r0, [pc, #352]	; (8010f74 <_vfiprintf_r+0x24c>)
 8010e14:	f7ef f9bc 	bl	8000190 <memchr>
 8010e18:	9a04      	ldr	r2, [sp, #16]
 8010e1a:	b9d8      	cbnz	r0, 8010e54 <_vfiprintf_r+0x12c>
 8010e1c:	06d1      	lsls	r1, r2, #27
 8010e1e:	bf44      	itt	mi
 8010e20:	2320      	movmi	r3, #32
 8010e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e26:	0713      	lsls	r3, r2, #28
 8010e28:	bf44      	itt	mi
 8010e2a:	232b      	movmi	r3, #43	; 0x2b
 8010e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e30:	f89a 3000 	ldrb.w	r3, [sl]
 8010e34:	2b2a      	cmp	r3, #42	; 0x2a
 8010e36:	d015      	beq.n	8010e64 <_vfiprintf_r+0x13c>
 8010e38:	9a07      	ldr	r2, [sp, #28]
 8010e3a:	4654      	mov	r4, sl
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	f04f 0c0a 	mov.w	ip, #10
 8010e42:	4621      	mov	r1, r4
 8010e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e48:	3b30      	subs	r3, #48	; 0x30
 8010e4a:	2b09      	cmp	r3, #9
 8010e4c:	d94e      	bls.n	8010eec <_vfiprintf_r+0x1c4>
 8010e4e:	b1b0      	cbz	r0, 8010e7e <_vfiprintf_r+0x156>
 8010e50:	9207      	str	r2, [sp, #28]
 8010e52:	e014      	b.n	8010e7e <_vfiprintf_r+0x156>
 8010e54:	eba0 0308 	sub.w	r3, r0, r8
 8010e58:	fa09 f303 	lsl.w	r3, r9, r3
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	9304      	str	r3, [sp, #16]
 8010e60:	46a2      	mov	sl, r4
 8010e62:	e7d2      	b.n	8010e0a <_vfiprintf_r+0xe2>
 8010e64:	9b03      	ldr	r3, [sp, #12]
 8010e66:	1d19      	adds	r1, r3, #4
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	9103      	str	r1, [sp, #12]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	bfbb      	ittet	lt
 8010e70:	425b      	neglt	r3, r3
 8010e72:	f042 0202 	orrlt.w	r2, r2, #2
 8010e76:	9307      	strge	r3, [sp, #28]
 8010e78:	9307      	strlt	r3, [sp, #28]
 8010e7a:	bfb8      	it	lt
 8010e7c:	9204      	strlt	r2, [sp, #16]
 8010e7e:	7823      	ldrb	r3, [r4, #0]
 8010e80:	2b2e      	cmp	r3, #46	; 0x2e
 8010e82:	d10c      	bne.n	8010e9e <_vfiprintf_r+0x176>
 8010e84:	7863      	ldrb	r3, [r4, #1]
 8010e86:	2b2a      	cmp	r3, #42	; 0x2a
 8010e88:	d135      	bne.n	8010ef6 <_vfiprintf_r+0x1ce>
 8010e8a:	9b03      	ldr	r3, [sp, #12]
 8010e8c:	1d1a      	adds	r2, r3, #4
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	9203      	str	r2, [sp, #12]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	bfb8      	it	lt
 8010e96:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e9a:	3402      	adds	r4, #2
 8010e9c:	9305      	str	r3, [sp, #20]
 8010e9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010f84 <_vfiprintf_r+0x25c>
 8010ea2:	7821      	ldrb	r1, [r4, #0]
 8010ea4:	2203      	movs	r2, #3
 8010ea6:	4650      	mov	r0, sl
 8010ea8:	f7ef f972 	bl	8000190 <memchr>
 8010eac:	b140      	cbz	r0, 8010ec0 <_vfiprintf_r+0x198>
 8010eae:	2340      	movs	r3, #64	; 0x40
 8010eb0:	eba0 000a 	sub.w	r0, r0, sl
 8010eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8010eb8:	9b04      	ldr	r3, [sp, #16]
 8010eba:	4303      	orrs	r3, r0
 8010ebc:	3401      	adds	r4, #1
 8010ebe:	9304      	str	r3, [sp, #16]
 8010ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ec4:	482c      	ldr	r0, [pc, #176]	; (8010f78 <_vfiprintf_r+0x250>)
 8010ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010eca:	2206      	movs	r2, #6
 8010ecc:	f7ef f960 	bl	8000190 <memchr>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d03f      	beq.n	8010f54 <_vfiprintf_r+0x22c>
 8010ed4:	4b29      	ldr	r3, [pc, #164]	; (8010f7c <_vfiprintf_r+0x254>)
 8010ed6:	bb1b      	cbnz	r3, 8010f20 <_vfiprintf_r+0x1f8>
 8010ed8:	9b03      	ldr	r3, [sp, #12]
 8010eda:	3307      	adds	r3, #7
 8010edc:	f023 0307 	bic.w	r3, r3, #7
 8010ee0:	3308      	adds	r3, #8
 8010ee2:	9303      	str	r3, [sp, #12]
 8010ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ee6:	443b      	add	r3, r7
 8010ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8010eea:	e767      	b.n	8010dbc <_vfiprintf_r+0x94>
 8010eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ef0:	460c      	mov	r4, r1
 8010ef2:	2001      	movs	r0, #1
 8010ef4:	e7a5      	b.n	8010e42 <_vfiprintf_r+0x11a>
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	3401      	adds	r4, #1
 8010efa:	9305      	str	r3, [sp, #20]
 8010efc:	4619      	mov	r1, r3
 8010efe:	f04f 0c0a 	mov.w	ip, #10
 8010f02:	4620      	mov	r0, r4
 8010f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f08:	3a30      	subs	r2, #48	; 0x30
 8010f0a:	2a09      	cmp	r2, #9
 8010f0c:	d903      	bls.n	8010f16 <_vfiprintf_r+0x1ee>
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d0c5      	beq.n	8010e9e <_vfiprintf_r+0x176>
 8010f12:	9105      	str	r1, [sp, #20]
 8010f14:	e7c3      	b.n	8010e9e <_vfiprintf_r+0x176>
 8010f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	e7f0      	b.n	8010f02 <_vfiprintf_r+0x1da>
 8010f20:	ab03      	add	r3, sp, #12
 8010f22:	9300      	str	r3, [sp, #0]
 8010f24:	462a      	mov	r2, r5
 8010f26:	4b16      	ldr	r3, [pc, #88]	; (8010f80 <_vfiprintf_r+0x258>)
 8010f28:	a904      	add	r1, sp, #16
 8010f2a:	4630      	mov	r0, r6
 8010f2c:	f7fc f840 	bl	800cfb0 <_printf_float>
 8010f30:	4607      	mov	r7, r0
 8010f32:	1c78      	adds	r0, r7, #1
 8010f34:	d1d6      	bne.n	8010ee4 <_vfiprintf_r+0x1bc>
 8010f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f38:	07d9      	lsls	r1, r3, #31
 8010f3a:	d405      	bmi.n	8010f48 <_vfiprintf_r+0x220>
 8010f3c:	89ab      	ldrh	r3, [r5, #12]
 8010f3e:	059a      	lsls	r2, r3, #22
 8010f40:	d402      	bmi.n	8010f48 <_vfiprintf_r+0x220>
 8010f42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f44:	f000 faa1 	bl	801148a <__retarget_lock_release_recursive>
 8010f48:	89ab      	ldrh	r3, [r5, #12]
 8010f4a:	065b      	lsls	r3, r3, #25
 8010f4c:	f53f af12 	bmi.w	8010d74 <_vfiprintf_r+0x4c>
 8010f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f52:	e711      	b.n	8010d78 <_vfiprintf_r+0x50>
 8010f54:	ab03      	add	r3, sp, #12
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	462a      	mov	r2, r5
 8010f5a:	4b09      	ldr	r3, [pc, #36]	; (8010f80 <_vfiprintf_r+0x258>)
 8010f5c:	a904      	add	r1, sp, #16
 8010f5e:	4630      	mov	r0, r6
 8010f60:	f7fc faca 	bl	800d4f8 <_printf_i>
 8010f64:	e7e4      	b.n	8010f30 <_vfiprintf_r+0x208>
 8010f66:	bf00      	nop
 8010f68:	08011d54 	.word	0x08011d54
 8010f6c:	08011d74 	.word	0x08011d74
 8010f70:	08011d34 	.word	0x08011d34
 8010f74:	08011ce4 	.word	0x08011ce4
 8010f78:	08011cee 	.word	0x08011cee
 8010f7c:	0800cfb1 	.word	0x0800cfb1
 8010f80:	08010d05 	.word	0x08010d05
 8010f84:	08011cea 	.word	0x08011cea

08010f88 <__swbuf_r>:
 8010f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f8a:	460e      	mov	r6, r1
 8010f8c:	4614      	mov	r4, r2
 8010f8e:	4605      	mov	r5, r0
 8010f90:	b118      	cbz	r0, 8010f9a <__swbuf_r+0x12>
 8010f92:	6983      	ldr	r3, [r0, #24]
 8010f94:	b90b      	cbnz	r3, 8010f9a <__swbuf_r+0x12>
 8010f96:	f000 f9d9 	bl	801134c <__sinit>
 8010f9a:	4b21      	ldr	r3, [pc, #132]	; (8011020 <__swbuf_r+0x98>)
 8010f9c:	429c      	cmp	r4, r3
 8010f9e:	d12b      	bne.n	8010ff8 <__swbuf_r+0x70>
 8010fa0:	686c      	ldr	r4, [r5, #4]
 8010fa2:	69a3      	ldr	r3, [r4, #24]
 8010fa4:	60a3      	str	r3, [r4, #8]
 8010fa6:	89a3      	ldrh	r3, [r4, #12]
 8010fa8:	071a      	lsls	r2, r3, #28
 8010faa:	d52f      	bpl.n	801100c <__swbuf_r+0x84>
 8010fac:	6923      	ldr	r3, [r4, #16]
 8010fae:	b36b      	cbz	r3, 801100c <__swbuf_r+0x84>
 8010fb0:	6923      	ldr	r3, [r4, #16]
 8010fb2:	6820      	ldr	r0, [r4, #0]
 8010fb4:	1ac0      	subs	r0, r0, r3
 8010fb6:	6963      	ldr	r3, [r4, #20]
 8010fb8:	b2f6      	uxtb	r6, r6
 8010fba:	4283      	cmp	r3, r0
 8010fbc:	4637      	mov	r7, r6
 8010fbe:	dc04      	bgt.n	8010fca <__swbuf_r+0x42>
 8010fc0:	4621      	mov	r1, r4
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	f000 f92e 	bl	8011224 <_fflush_r>
 8010fc8:	bb30      	cbnz	r0, 8011018 <__swbuf_r+0x90>
 8010fca:	68a3      	ldr	r3, [r4, #8]
 8010fcc:	3b01      	subs	r3, #1
 8010fce:	60a3      	str	r3, [r4, #8]
 8010fd0:	6823      	ldr	r3, [r4, #0]
 8010fd2:	1c5a      	adds	r2, r3, #1
 8010fd4:	6022      	str	r2, [r4, #0]
 8010fd6:	701e      	strb	r6, [r3, #0]
 8010fd8:	6963      	ldr	r3, [r4, #20]
 8010fda:	3001      	adds	r0, #1
 8010fdc:	4283      	cmp	r3, r0
 8010fde:	d004      	beq.n	8010fea <__swbuf_r+0x62>
 8010fe0:	89a3      	ldrh	r3, [r4, #12]
 8010fe2:	07db      	lsls	r3, r3, #31
 8010fe4:	d506      	bpl.n	8010ff4 <__swbuf_r+0x6c>
 8010fe6:	2e0a      	cmp	r6, #10
 8010fe8:	d104      	bne.n	8010ff4 <__swbuf_r+0x6c>
 8010fea:	4621      	mov	r1, r4
 8010fec:	4628      	mov	r0, r5
 8010fee:	f000 f919 	bl	8011224 <_fflush_r>
 8010ff2:	b988      	cbnz	r0, 8011018 <__swbuf_r+0x90>
 8010ff4:	4638      	mov	r0, r7
 8010ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ff8:	4b0a      	ldr	r3, [pc, #40]	; (8011024 <__swbuf_r+0x9c>)
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	d101      	bne.n	8011002 <__swbuf_r+0x7a>
 8010ffe:	68ac      	ldr	r4, [r5, #8]
 8011000:	e7cf      	b.n	8010fa2 <__swbuf_r+0x1a>
 8011002:	4b09      	ldr	r3, [pc, #36]	; (8011028 <__swbuf_r+0xa0>)
 8011004:	429c      	cmp	r4, r3
 8011006:	bf08      	it	eq
 8011008:	68ec      	ldreq	r4, [r5, #12]
 801100a:	e7ca      	b.n	8010fa2 <__swbuf_r+0x1a>
 801100c:	4621      	mov	r1, r4
 801100e:	4628      	mov	r0, r5
 8011010:	f000 f80c 	bl	801102c <__swsetup_r>
 8011014:	2800      	cmp	r0, #0
 8011016:	d0cb      	beq.n	8010fb0 <__swbuf_r+0x28>
 8011018:	f04f 37ff 	mov.w	r7, #4294967295
 801101c:	e7ea      	b.n	8010ff4 <__swbuf_r+0x6c>
 801101e:	bf00      	nop
 8011020:	08011d54 	.word	0x08011d54
 8011024:	08011d74 	.word	0x08011d74
 8011028:	08011d34 	.word	0x08011d34

0801102c <__swsetup_r>:
 801102c:	4b32      	ldr	r3, [pc, #200]	; (80110f8 <__swsetup_r+0xcc>)
 801102e:	b570      	push	{r4, r5, r6, lr}
 8011030:	681d      	ldr	r5, [r3, #0]
 8011032:	4606      	mov	r6, r0
 8011034:	460c      	mov	r4, r1
 8011036:	b125      	cbz	r5, 8011042 <__swsetup_r+0x16>
 8011038:	69ab      	ldr	r3, [r5, #24]
 801103a:	b913      	cbnz	r3, 8011042 <__swsetup_r+0x16>
 801103c:	4628      	mov	r0, r5
 801103e:	f000 f985 	bl	801134c <__sinit>
 8011042:	4b2e      	ldr	r3, [pc, #184]	; (80110fc <__swsetup_r+0xd0>)
 8011044:	429c      	cmp	r4, r3
 8011046:	d10f      	bne.n	8011068 <__swsetup_r+0x3c>
 8011048:	686c      	ldr	r4, [r5, #4]
 801104a:	89a3      	ldrh	r3, [r4, #12]
 801104c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011050:	0719      	lsls	r1, r3, #28
 8011052:	d42c      	bmi.n	80110ae <__swsetup_r+0x82>
 8011054:	06dd      	lsls	r5, r3, #27
 8011056:	d411      	bmi.n	801107c <__swsetup_r+0x50>
 8011058:	2309      	movs	r3, #9
 801105a:	6033      	str	r3, [r6, #0]
 801105c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011060:	81a3      	strh	r3, [r4, #12]
 8011062:	f04f 30ff 	mov.w	r0, #4294967295
 8011066:	e03e      	b.n	80110e6 <__swsetup_r+0xba>
 8011068:	4b25      	ldr	r3, [pc, #148]	; (8011100 <__swsetup_r+0xd4>)
 801106a:	429c      	cmp	r4, r3
 801106c:	d101      	bne.n	8011072 <__swsetup_r+0x46>
 801106e:	68ac      	ldr	r4, [r5, #8]
 8011070:	e7eb      	b.n	801104a <__swsetup_r+0x1e>
 8011072:	4b24      	ldr	r3, [pc, #144]	; (8011104 <__swsetup_r+0xd8>)
 8011074:	429c      	cmp	r4, r3
 8011076:	bf08      	it	eq
 8011078:	68ec      	ldreq	r4, [r5, #12]
 801107a:	e7e6      	b.n	801104a <__swsetup_r+0x1e>
 801107c:	0758      	lsls	r0, r3, #29
 801107e:	d512      	bpl.n	80110a6 <__swsetup_r+0x7a>
 8011080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011082:	b141      	cbz	r1, 8011096 <__swsetup_r+0x6a>
 8011084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011088:	4299      	cmp	r1, r3
 801108a:	d002      	beq.n	8011092 <__swsetup_r+0x66>
 801108c:	4630      	mov	r0, r6
 801108e:	f7ff fb27 	bl	80106e0 <_free_r>
 8011092:	2300      	movs	r3, #0
 8011094:	6363      	str	r3, [r4, #52]	; 0x34
 8011096:	89a3      	ldrh	r3, [r4, #12]
 8011098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801109c:	81a3      	strh	r3, [r4, #12]
 801109e:	2300      	movs	r3, #0
 80110a0:	6063      	str	r3, [r4, #4]
 80110a2:	6923      	ldr	r3, [r4, #16]
 80110a4:	6023      	str	r3, [r4, #0]
 80110a6:	89a3      	ldrh	r3, [r4, #12]
 80110a8:	f043 0308 	orr.w	r3, r3, #8
 80110ac:	81a3      	strh	r3, [r4, #12]
 80110ae:	6923      	ldr	r3, [r4, #16]
 80110b0:	b94b      	cbnz	r3, 80110c6 <__swsetup_r+0x9a>
 80110b2:	89a3      	ldrh	r3, [r4, #12]
 80110b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110bc:	d003      	beq.n	80110c6 <__swsetup_r+0x9a>
 80110be:	4621      	mov	r1, r4
 80110c0:	4630      	mov	r0, r6
 80110c2:	f000 fa09 	bl	80114d8 <__smakebuf_r>
 80110c6:	89a0      	ldrh	r0, [r4, #12]
 80110c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110cc:	f010 0301 	ands.w	r3, r0, #1
 80110d0:	d00a      	beq.n	80110e8 <__swsetup_r+0xbc>
 80110d2:	2300      	movs	r3, #0
 80110d4:	60a3      	str	r3, [r4, #8]
 80110d6:	6963      	ldr	r3, [r4, #20]
 80110d8:	425b      	negs	r3, r3
 80110da:	61a3      	str	r3, [r4, #24]
 80110dc:	6923      	ldr	r3, [r4, #16]
 80110de:	b943      	cbnz	r3, 80110f2 <__swsetup_r+0xc6>
 80110e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80110e4:	d1ba      	bne.n	801105c <__swsetup_r+0x30>
 80110e6:	bd70      	pop	{r4, r5, r6, pc}
 80110e8:	0781      	lsls	r1, r0, #30
 80110ea:	bf58      	it	pl
 80110ec:	6963      	ldrpl	r3, [r4, #20]
 80110ee:	60a3      	str	r3, [r4, #8]
 80110f0:	e7f4      	b.n	80110dc <__swsetup_r+0xb0>
 80110f2:	2000      	movs	r0, #0
 80110f4:	e7f7      	b.n	80110e6 <__swsetup_r+0xba>
 80110f6:	bf00      	nop
 80110f8:	20000190 	.word	0x20000190
 80110fc:	08011d54 	.word	0x08011d54
 8011100:	08011d74 	.word	0x08011d74
 8011104:	08011d34 	.word	0x08011d34

08011108 <abort>:
 8011108:	b508      	push	{r3, lr}
 801110a:	2006      	movs	r0, #6
 801110c:	f000 fa54 	bl	80115b8 <raise>
 8011110:	2001      	movs	r0, #1
 8011112:	f7f3 f939 	bl	8004388 <_exit>
	...

08011118 <__sflush_r>:
 8011118:	898a      	ldrh	r2, [r1, #12]
 801111a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801111e:	4605      	mov	r5, r0
 8011120:	0710      	lsls	r0, r2, #28
 8011122:	460c      	mov	r4, r1
 8011124:	d458      	bmi.n	80111d8 <__sflush_r+0xc0>
 8011126:	684b      	ldr	r3, [r1, #4]
 8011128:	2b00      	cmp	r3, #0
 801112a:	dc05      	bgt.n	8011138 <__sflush_r+0x20>
 801112c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801112e:	2b00      	cmp	r3, #0
 8011130:	dc02      	bgt.n	8011138 <__sflush_r+0x20>
 8011132:	2000      	movs	r0, #0
 8011134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801113a:	2e00      	cmp	r6, #0
 801113c:	d0f9      	beq.n	8011132 <__sflush_r+0x1a>
 801113e:	2300      	movs	r3, #0
 8011140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011144:	682f      	ldr	r7, [r5, #0]
 8011146:	602b      	str	r3, [r5, #0]
 8011148:	d032      	beq.n	80111b0 <__sflush_r+0x98>
 801114a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801114c:	89a3      	ldrh	r3, [r4, #12]
 801114e:	075a      	lsls	r2, r3, #29
 8011150:	d505      	bpl.n	801115e <__sflush_r+0x46>
 8011152:	6863      	ldr	r3, [r4, #4]
 8011154:	1ac0      	subs	r0, r0, r3
 8011156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011158:	b10b      	cbz	r3, 801115e <__sflush_r+0x46>
 801115a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801115c:	1ac0      	subs	r0, r0, r3
 801115e:	2300      	movs	r3, #0
 8011160:	4602      	mov	r2, r0
 8011162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011164:	6a21      	ldr	r1, [r4, #32]
 8011166:	4628      	mov	r0, r5
 8011168:	47b0      	blx	r6
 801116a:	1c43      	adds	r3, r0, #1
 801116c:	89a3      	ldrh	r3, [r4, #12]
 801116e:	d106      	bne.n	801117e <__sflush_r+0x66>
 8011170:	6829      	ldr	r1, [r5, #0]
 8011172:	291d      	cmp	r1, #29
 8011174:	d82c      	bhi.n	80111d0 <__sflush_r+0xb8>
 8011176:	4a2a      	ldr	r2, [pc, #168]	; (8011220 <__sflush_r+0x108>)
 8011178:	40ca      	lsrs	r2, r1
 801117a:	07d6      	lsls	r6, r2, #31
 801117c:	d528      	bpl.n	80111d0 <__sflush_r+0xb8>
 801117e:	2200      	movs	r2, #0
 8011180:	6062      	str	r2, [r4, #4]
 8011182:	04d9      	lsls	r1, r3, #19
 8011184:	6922      	ldr	r2, [r4, #16]
 8011186:	6022      	str	r2, [r4, #0]
 8011188:	d504      	bpl.n	8011194 <__sflush_r+0x7c>
 801118a:	1c42      	adds	r2, r0, #1
 801118c:	d101      	bne.n	8011192 <__sflush_r+0x7a>
 801118e:	682b      	ldr	r3, [r5, #0]
 8011190:	b903      	cbnz	r3, 8011194 <__sflush_r+0x7c>
 8011192:	6560      	str	r0, [r4, #84]	; 0x54
 8011194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011196:	602f      	str	r7, [r5, #0]
 8011198:	2900      	cmp	r1, #0
 801119a:	d0ca      	beq.n	8011132 <__sflush_r+0x1a>
 801119c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111a0:	4299      	cmp	r1, r3
 80111a2:	d002      	beq.n	80111aa <__sflush_r+0x92>
 80111a4:	4628      	mov	r0, r5
 80111a6:	f7ff fa9b 	bl	80106e0 <_free_r>
 80111aa:	2000      	movs	r0, #0
 80111ac:	6360      	str	r0, [r4, #52]	; 0x34
 80111ae:	e7c1      	b.n	8011134 <__sflush_r+0x1c>
 80111b0:	6a21      	ldr	r1, [r4, #32]
 80111b2:	2301      	movs	r3, #1
 80111b4:	4628      	mov	r0, r5
 80111b6:	47b0      	blx	r6
 80111b8:	1c41      	adds	r1, r0, #1
 80111ba:	d1c7      	bne.n	801114c <__sflush_r+0x34>
 80111bc:	682b      	ldr	r3, [r5, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d0c4      	beq.n	801114c <__sflush_r+0x34>
 80111c2:	2b1d      	cmp	r3, #29
 80111c4:	d001      	beq.n	80111ca <__sflush_r+0xb2>
 80111c6:	2b16      	cmp	r3, #22
 80111c8:	d101      	bne.n	80111ce <__sflush_r+0xb6>
 80111ca:	602f      	str	r7, [r5, #0]
 80111cc:	e7b1      	b.n	8011132 <__sflush_r+0x1a>
 80111ce:	89a3      	ldrh	r3, [r4, #12]
 80111d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111d4:	81a3      	strh	r3, [r4, #12]
 80111d6:	e7ad      	b.n	8011134 <__sflush_r+0x1c>
 80111d8:	690f      	ldr	r7, [r1, #16]
 80111da:	2f00      	cmp	r7, #0
 80111dc:	d0a9      	beq.n	8011132 <__sflush_r+0x1a>
 80111de:	0793      	lsls	r3, r2, #30
 80111e0:	680e      	ldr	r6, [r1, #0]
 80111e2:	bf08      	it	eq
 80111e4:	694b      	ldreq	r3, [r1, #20]
 80111e6:	600f      	str	r7, [r1, #0]
 80111e8:	bf18      	it	ne
 80111ea:	2300      	movne	r3, #0
 80111ec:	eba6 0807 	sub.w	r8, r6, r7
 80111f0:	608b      	str	r3, [r1, #8]
 80111f2:	f1b8 0f00 	cmp.w	r8, #0
 80111f6:	dd9c      	ble.n	8011132 <__sflush_r+0x1a>
 80111f8:	6a21      	ldr	r1, [r4, #32]
 80111fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80111fc:	4643      	mov	r3, r8
 80111fe:	463a      	mov	r2, r7
 8011200:	4628      	mov	r0, r5
 8011202:	47b0      	blx	r6
 8011204:	2800      	cmp	r0, #0
 8011206:	dc06      	bgt.n	8011216 <__sflush_r+0xfe>
 8011208:	89a3      	ldrh	r3, [r4, #12]
 801120a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801120e:	81a3      	strh	r3, [r4, #12]
 8011210:	f04f 30ff 	mov.w	r0, #4294967295
 8011214:	e78e      	b.n	8011134 <__sflush_r+0x1c>
 8011216:	4407      	add	r7, r0
 8011218:	eba8 0800 	sub.w	r8, r8, r0
 801121c:	e7e9      	b.n	80111f2 <__sflush_r+0xda>
 801121e:	bf00      	nop
 8011220:	20400001 	.word	0x20400001

08011224 <_fflush_r>:
 8011224:	b538      	push	{r3, r4, r5, lr}
 8011226:	690b      	ldr	r3, [r1, #16]
 8011228:	4605      	mov	r5, r0
 801122a:	460c      	mov	r4, r1
 801122c:	b913      	cbnz	r3, 8011234 <_fflush_r+0x10>
 801122e:	2500      	movs	r5, #0
 8011230:	4628      	mov	r0, r5
 8011232:	bd38      	pop	{r3, r4, r5, pc}
 8011234:	b118      	cbz	r0, 801123e <_fflush_r+0x1a>
 8011236:	6983      	ldr	r3, [r0, #24]
 8011238:	b90b      	cbnz	r3, 801123e <_fflush_r+0x1a>
 801123a:	f000 f887 	bl	801134c <__sinit>
 801123e:	4b14      	ldr	r3, [pc, #80]	; (8011290 <_fflush_r+0x6c>)
 8011240:	429c      	cmp	r4, r3
 8011242:	d11b      	bne.n	801127c <_fflush_r+0x58>
 8011244:	686c      	ldr	r4, [r5, #4]
 8011246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d0ef      	beq.n	801122e <_fflush_r+0xa>
 801124e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011250:	07d0      	lsls	r0, r2, #31
 8011252:	d404      	bmi.n	801125e <_fflush_r+0x3a>
 8011254:	0599      	lsls	r1, r3, #22
 8011256:	d402      	bmi.n	801125e <_fflush_r+0x3a>
 8011258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801125a:	f000 f915 	bl	8011488 <__retarget_lock_acquire_recursive>
 801125e:	4628      	mov	r0, r5
 8011260:	4621      	mov	r1, r4
 8011262:	f7ff ff59 	bl	8011118 <__sflush_r>
 8011266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011268:	07da      	lsls	r2, r3, #31
 801126a:	4605      	mov	r5, r0
 801126c:	d4e0      	bmi.n	8011230 <_fflush_r+0xc>
 801126e:	89a3      	ldrh	r3, [r4, #12]
 8011270:	059b      	lsls	r3, r3, #22
 8011272:	d4dd      	bmi.n	8011230 <_fflush_r+0xc>
 8011274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011276:	f000 f908 	bl	801148a <__retarget_lock_release_recursive>
 801127a:	e7d9      	b.n	8011230 <_fflush_r+0xc>
 801127c:	4b05      	ldr	r3, [pc, #20]	; (8011294 <_fflush_r+0x70>)
 801127e:	429c      	cmp	r4, r3
 8011280:	d101      	bne.n	8011286 <_fflush_r+0x62>
 8011282:	68ac      	ldr	r4, [r5, #8]
 8011284:	e7df      	b.n	8011246 <_fflush_r+0x22>
 8011286:	4b04      	ldr	r3, [pc, #16]	; (8011298 <_fflush_r+0x74>)
 8011288:	429c      	cmp	r4, r3
 801128a:	bf08      	it	eq
 801128c:	68ec      	ldreq	r4, [r5, #12]
 801128e:	e7da      	b.n	8011246 <_fflush_r+0x22>
 8011290:	08011d54 	.word	0x08011d54
 8011294:	08011d74 	.word	0x08011d74
 8011298:	08011d34 	.word	0x08011d34

0801129c <std>:
 801129c:	2300      	movs	r3, #0
 801129e:	b510      	push	{r4, lr}
 80112a0:	4604      	mov	r4, r0
 80112a2:	e9c0 3300 	strd	r3, r3, [r0]
 80112a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112aa:	6083      	str	r3, [r0, #8]
 80112ac:	8181      	strh	r1, [r0, #12]
 80112ae:	6643      	str	r3, [r0, #100]	; 0x64
 80112b0:	81c2      	strh	r2, [r0, #14]
 80112b2:	6183      	str	r3, [r0, #24]
 80112b4:	4619      	mov	r1, r3
 80112b6:	2208      	movs	r2, #8
 80112b8:	305c      	adds	r0, #92	; 0x5c
 80112ba:	f7fb fdd1 	bl	800ce60 <memset>
 80112be:	4b05      	ldr	r3, [pc, #20]	; (80112d4 <std+0x38>)
 80112c0:	6263      	str	r3, [r4, #36]	; 0x24
 80112c2:	4b05      	ldr	r3, [pc, #20]	; (80112d8 <std+0x3c>)
 80112c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80112c6:	4b05      	ldr	r3, [pc, #20]	; (80112dc <std+0x40>)
 80112c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112ca:	4b05      	ldr	r3, [pc, #20]	; (80112e0 <std+0x44>)
 80112cc:	6224      	str	r4, [r4, #32]
 80112ce:	6323      	str	r3, [r4, #48]	; 0x30
 80112d0:	bd10      	pop	{r4, pc}
 80112d2:	bf00      	nop
 80112d4:	080115f1 	.word	0x080115f1
 80112d8:	08011613 	.word	0x08011613
 80112dc:	0801164b 	.word	0x0801164b
 80112e0:	0801166f 	.word	0x0801166f

080112e4 <_cleanup_r>:
 80112e4:	4901      	ldr	r1, [pc, #4]	; (80112ec <_cleanup_r+0x8>)
 80112e6:	f000 b8af 	b.w	8011448 <_fwalk_reent>
 80112ea:	bf00      	nop
 80112ec:	08011225 	.word	0x08011225

080112f0 <__sfmoreglue>:
 80112f0:	b570      	push	{r4, r5, r6, lr}
 80112f2:	2268      	movs	r2, #104	; 0x68
 80112f4:	1e4d      	subs	r5, r1, #1
 80112f6:	4355      	muls	r5, r2
 80112f8:	460e      	mov	r6, r1
 80112fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80112fe:	f7ff fa5b 	bl	80107b8 <_malloc_r>
 8011302:	4604      	mov	r4, r0
 8011304:	b140      	cbz	r0, 8011318 <__sfmoreglue+0x28>
 8011306:	2100      	movs	r1, #0
 8011308:	e9c0 1600 	strd	r1, r6, [r0]
 801130c:	300c      	adds	r0, #12
 801130e:	60a0      	str	r0, [r4, #8]
 8011310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011314:	f7fb fda4 	bl	800ce60 <memset>
 8011318:	4620      	mov	r0, r4
 801131a:	bd70      	pop	{r4, r5, r6, pc}

0801131c <__sfp_lock_acquire>:
 801131c:	4801      	ldr	r0, [pc, #4]	; (8011324 <__sfp_lock_acquire+0x8>)
 801131e:	f000 b8b3 	b.w	8011488 <__retarget_lock_acquire_recursive>
 8011322:	bf00      	nop
 8011324:	20004759 	.word	0x20004759

08011328 <__sfp_lock_release>:
 8011328:	4801      	ldr	r0, [pc, #4]	; (8011330 <__sfp_lock_release+0x8>)
 801132a:	f000 b8ae 	b.w	801148a <__retarget_lock_release_recursive>
 801132e:	bf00      	nop
 8011330:	20004759 	.word	0x20004759

08011334 <__sinit_lock_acquire>:
 8011334:	4801      	ldr	r0, [pc, #4]	; (801133c <__sinit_lock_acquire+0x8>)
 8011336:	f000 b8a7 	b.w	8011488 <__retarget_lock_acquire_recursive>
 801133a:	bf00      	nop
 801133c:	2000475a 	.word	0x2000475a

08011340 <__sinit_lock_release>:
 8011340:	4801      	ldr	r0, [pc, #4]	; (8011348 <__sinit_lock_release+0x8>)
 8011342:	f000 b8a2 	b.w	801148a <__retarget_lock_release_recursive>
 8011346:	bf00      	nop
 8011348:	2000475a 	.word	0x2000475a

0801134c <__sinit>:
 801134c:	b510      	push	{r4, lr}
 801134e:	4604      	mov	r4, r0
 8011350:	f7ff fff0 	bl	8011334 <__sinit_lock_acquire>
 8011354:	69a3      	ldr	r3, [r4, #24]
 8011356:	b11b      	cbz	r3, 8011360 <__sinit+0x14>
 8011358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801135c:	f7ff bff0 	b.w	8011340 <__sinit_lock_release>
 8011360:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011364:	6523      	str	r3, [r4, #80]	; 0x50
 8011366:	4b13      	ldr	r3, [pc, #76]	; (80113b4 <__sinit+0x68>)
 8011368:	4a13      	ldr	r2, [pc, #76]	; (80113b8 <__sinit+0x6c>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	62a2      	str	r2, [r4, #40]	; 0x28
 801136e:	42a3      	cmp	r3, r4
 8011370:	bf04      	itt	eq
 8011372:	2301      	moveq	r3, #1
 8011374:	61a3      	streq	r3, [r4, #24]
 8011376:	4620      	mov	r0, r4
 8011378:	f000 f820 	bl	80113bc <__sfp>
 801137c:	6060      	str	r0, [r4, #4]
 801137e:	4620      	mov	r0, r4
 8011380:	f000 f81c 	bl	80113bc <__sfp>
 8011384:	60a0      	str	r0, [r4, #8]
 8011386:	4620      	mov	r0, r4
 8011388:	f000 f818 	bl	80113bc <__sfp>
 801138c:	2200      	movs	r2, #0
 801138e:	60e0      	str	r0, [r4, #12]
 8011390:	2104      	movs	r1, #4
 8011392:	6860      	ldr	r0, [r4, #4]
 8011394:	f7ff ff82 	bl	801129c <std>
 8011398:	68a0      	ldr	r0, [r4, #8]
 801139a:	2201      	movs	r2, #1
 801139c:	2109      	movs	r1, #9
 801139e:	f7ff ff7d 	bl	801129c <std>
 80113a2:	68e0      	ldr	r0, [r4, #12]
 80113a4:	2202      	movs	r2, #2
 80113a6:	2112      	movs	r1, #18
 80113a8:	f7ff ff78 	bl	801129c <std>
 80113ac:	2301      	movs	r3, #1
 80113ae:	61a3      	str	r3, [r4, #24]
 80113b0:	e7d2      	b.n	8011358 <__sinit+0xc>
 80113b2:	bf00      	nop
 80113b4:	080118f0 	.word	0x080118f0
 80113b8:	080112e5 	.word	0x080112e5

080113bc <__sfp>:
 80113bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113be:	4607      	mov	r7, r0
 80113c0:	f7ff ffac 	bl	801131c <__sfp_lock_acquire>
 80113c4:	4b1e      	ldr	r3, [pc, #120]	; (8011440 <__sfp+0x84>)
 80113c6:	681e      	ldr	r6, [r3, #0]
 80113c8:	69b3      	ldr	r3, [r6, #24]
 80113ca:	b913      	cbnz	r3, 80113d2 <__sfp+0x16>
 80113cc:	4630      	mov	r0, r6
 80113ce:	f7ff ffbd 	bl	801134c <__sinit>
 80113d2:	3648      	adds	r6, #72	; 0x48
 80113d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80113d8:	3b01      	subs	r3, #1
 80113da:	d503      	bpl.n	80113e4 <__sfp+0x28>
 80113dc:	6833      	ldr	r3, [r6, #0]
 80113de:	b30b      	cbz	r3, 8011424 <__sfp+0x68>
 80113e0:	6836      	ldr	r6, [r6, #0]
 80113e2:	e7f7      	b.n	80113d4 <__sfp+0x18>
 80113e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80113e8:	b9d5      	cbnz	r5, 8011420 <__sfp+0x64>
 80113ea:	4b16      	ldr	r3, [pc, #88]	; (8011444 <__sfp+0x88>)
 80113ec:	60e3      	str	r3, [r4, #12]
 80113ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80113f2:	6665      	str	r5, [r4, #100]	; 0x64
 80113f4:	f000 f847 	bl	8011486 <__retarget_lock_init_recursive>
 80113f8:	f7ff ff96 	bl	8011328 <__sfp_lock_release>
 80113fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011400:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011404:	6025      	str	r5, [r4, #0]
 8011406:	61a5      	str	r5, [r4, #24]
 8011408:	2208      	movs	r2, #8
 801140a:	4629      	mov	r1, r5
 801140c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011410:	f7fb fd26 	bl	800ce60 <memset>
 8011414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801141c:	4620      	mov	r0, r4
 801141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011420:	3468      	adds	r4, #104	; 0x68
 8011422:	e7d9      	b.n	80113d8 <__sfp+0x1c>
 8011424:	2104      	movs	r1, #4
 8011426:	4638      	mov	r0, r7
 8011428:	f7ff ff62 	bl	80112f0 <__sfmoreglue>
 801142c:	4604      	mov	r4, r0
 801142e:	6030      	str	r0, [r6, #0]
 8011430:	2800      	cmp	r0, #0
 8011432:	d1d5      	bne.n	80113e0 <__sfp+0x24>
 8011434:	f7ff ff78 	bl	8011328 <__sfp_lock_release>
 8011438:	230c      	movs	r3, #12
 801143a:	603b      	str	r3, [r7, #0]
 801143c:	e7ee      	b.n	801141c <__sfp+0x60>
 801143e:	bf00      	nop
 8011440:	080118f0 	.word	0x080118f0
 8011444:	ffff0001 	.word	0xffff0001

08011448 <_fwalk_reent>:
 8011448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801144c:	4606      	mov	r6, r0
 801144e:	4688      	mov	r8, r1
 8011450:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011454:	2700      	movs	r7, #0
 8011456:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801145a:	f1b9 0901 	subs.w	r9, r9, #1
 801145e:	d505      	bpl.n	801146c <_fwalk_reent+0x24>
 8011460:	6824      	ldr	r4, [r4, #0]
 8011462:	2c00      	cmp	r4, #0
 8011464:	d1f7      	bne.n	8011456 <_fwalk_reent+0xe>
 8011466:	4638      	mov	r0, r7
 8011468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801146c:	89ab      	ldrh	r3, [r5, #12]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d907      	bls.n	8011482 <_fwalk_reent+0x3a>
 8011472:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011476:	3301      	adds	r3, #1
 8011478:	d003      	beq.n	8011482 <_fwalk_reent+0x3a>
 801147a:	4629      	mov	r1, r5
 801147c:	4630      	mov	r0, r6
 801147e:	47c0      	blx	r8
 8011480:	4307      	orrs	r7, r0
 8011482:	3568      	adds	r5, #104	; 0x68
 8011484:	e7e9      	b.n	801145a <_fwalk_reent+0x12>

08011486 <__retarget_lock_init_recursive>:
 8011486:	4770      	bx	lr

08011488 <__retarget_lock_acquire_recursive>:
 8011488:	4770      	bx	lr

0801148a <__retarget_lock_release_recursive>:
 801148a:	4770      	bx	lr

0801148c <__swhatbuf_r>:
 801148c:	b570      	push	{r4, r5, r6, lr}
 801148e:	460e      	mov	r6, r1
 8011490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011494:	2900      	cmp	r1, #0
 8011496:	b096      	sub	sp, #88	; 0x58
 8011498:	4614      	mov	r4, r2
 801149a:	461d      	mov	r5, r3
 801149c:	da08      	bge.n	80114b0 <__swhatbuf_r+0x24>
 801149e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80114a2:	2200      	movs	r2, #0
 80114a4:	602a      	str	r2, [r5, #0]
 80114a6:	061a      	lsls	r2, r3, #24
 80114a8:	d410      	bmi.n	80114cc <__swhatbuf_r+0x40>
 80114aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114ae:	e00e      	b.n	80114ce <__swhatbuf_r+0x42>
 80114b0:	466a      	mov	r2, sp
 80114b2:	f000 f903 	bl	80116bc <_fstat_r>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	dbf1      	blt.n	801149e <__swhatbuf_r+0x12>
 80114ba:	9a01      	ldr	r2, [sp, #4]
 80114bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80114c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80114c4:	425a      	negs	r2, r3
 80114c6:	415a      	adcs	r2, r3
 80114c8:	602a      	str	r2, [r5, #0]
 80114ca:	e7ee      	b.n	80114aa <__swhatbuf_r+0x1e>
 80114cc:	2340      	movs	r3, #64	; 0x40
 80114ce:	2000      	movs	r0, #0
 80114d0:	6023      	str	r3, [r4, #0]
 80114d2:	b016      	add	sp, #88	; 0x58
 80114d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080114d8 <__smakebuf_r>:
 80114d8:	898b      	ldrh	r3, [r1, #12]
 80114da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114dc:	079d      	lsls	r5, r3, #30
 80114de:	4606      	mov	r6, r0
 80114e0:	460c      	mov	r4, r1
 80114e2:	d507      	bpl.n	80114f4 <__smakebuf_r+0x1c>
 80114e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114e8:	6023      	str	r3, [r4, #0]
 80114ea:	6123      	str	r3, [r4, #16]
 80114ec:	2301      	movs	r3, #1
 80114ee:	6163      	str	r3, [r4, #20]
 80114f0:	b002      	add	sp, #8
 80114f2:	bd70      	pop	{r4, r5, r6, pc}
 80114f4:	ab01      	add	r3, sp, #4
 80114f6:	466a      	mov	r2, sp
 80114f8:	f7ff ffc8 	bl	801148c <__swhatbuf_r>
 80114fc:	9900      	ldr	r1, [sp, #0]
 80114fe:	4605      	mov	r5, r0
 8011500:	4630      	mov	r0, r6
 8011502:	f7ff f959 	bl	80107b8 <_malloc_r>
 8011506:	b948      	cbnz	r0, 801151c <__smakebuf_r+0x44>
 8011508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801150c:	059a      	lsls	r2, r3, #22
 801150e:	d4ef      	bmi.n	80114f0 <__smakebuf_r+0x18>
 8011510:	f023 0303 	bic.w	r3, r3, #3
 8011514:	f043 0302 	orr.w	r3, r3, #2
 8011518:	81a3      	strh	r3, [r4, #12]
 801151a:	e7e3      	b.n	80114e4 <__smakebuf_r+0xc>
 801151c:	4b0d      	ldr	r3, [pc, #52]	; (8011554 <__smakebuf_r+0x7c>)
 801151e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	6020      	str	r0, [r4, #0]
 8011524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011528:	81a3      	strh	r3, [r4, #12]
 801152a:	9b00      	ldr	r3, [sp, #0]
 801152c:	6163      	str	r3, [r4, #20]
 801152e:	9b01      	ldr	r3, [sp, #4]
 8011530:	6120      	str	r0, [r4, #16]
 8011532:	b15b      	cbz	r3, 801154c <__smakebuf_r+0x74>
 8011534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011538:	4630      	mov	r0, r6
 801153a:	f000 f8d1 	bl	80116e0 <_isatty_r>
 801153e:	b128      	cbz	r0, 801154c <__smakebuf_r+0x74>
 8011540:	89a3      	ldrh	r3, [r4, #12]
 8011542:	f023 0303 	bic.w	r3, r3, #3
 8011546:	f043 0301 	orr.w	r3, r3, #1
 801154a:	81a3      	strh	r3, [r4, #12]
 801154c:	89a0      	ldrh	r0, [r4, #12]
 801154e:	4305      	orrs	r5, r0
 8011550:	81a5      	strh	r5, [r4, #12]
 8011552:	e7cd      	b.n	80114f0 <__smakebuf_r+0x18>
 8011554:	080112e5 	.word	0x080112e5

08011558 <_malloc_usable_size_r>:
 8011558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801155c:	1f18      	subs	r0, r3, #4
 801155e:	2b00      	cmp	r3, #0
 8011560:	bfbc      	itt	lt
 8011562:	580b      	ldrlt	r3, [r1, r0]
 8011564:	18c0      	addlt	r0, r0, r3
 8011566:	4770      	bx	lr

08011568 <_raise_r>:
 8011568:	291f      	cmp	r1, #31
 801156a:	b538      	push	{r3, r4, r5, lr}
 801156c:	4604      	mov	r4, r0
 801156e:	460d      	mov	r5, r1
 8011570:	d904      	bls.n	801157c <_raise_r+0x14>
 8011572:	2316      	movs	r3, #22
 8011574:	6003      	str	r3, [r0, #0]
 8011576:	f04f 30ff 	mov.w	r0, #4294967295
 801157a:	bd38      	pop	{r3, r4, r5, pc}
 801157c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801157e:	b112      	cbz	r2, 8011586 <_raise_r+0x1e>
 8011580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011584:	b94b      	cbnz	r3, 801159a <_raise_r+0x32>
 8011586:	4620      	mov	r0, r4
 8011588:	f000 f830 	bl	80115ec <_getpid_r>
 801158c:	462a      	mov	r2, r5
 801158e:	4601      	mov	r1, r0
 8011590:	4620      	mov	r0, r4
 8011592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011596:	f000 b817 	b.w	80115c8 <_kill_r>
 801159a:	2b01      	cmp	r3, #1
 801159c:	d00a      	beq.n	80115b4 <_raise_r+0x4c>
 801159e:	1c59      	adds	r1, r3, #1
 80115a0:	d103      	bne.n	80115aa <_raise_r+0x42>
 80115a2:	2316      	movs	r3, #22
 80115a4:	6003      	str	r3, [r0, #0]
 80115a6:	2001      	movs	r0, #1
 80115a8:	e7e7      	b.n	801157a <_raise_r+0x12>
 80115aa:	2400      	movs	r4, #0
 80115ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80115b0:	4628      	mov	r0, r5
 80115b2:	4798      	blx	r3
 80115b4:	2000      	movs	r0, #0
 80115b6:	e7e0      	b.n	801157a <_raise_r+0x12>

080115b8 <raise>:
 80115b8:	4b02      	ldr	r3, [pc, #8]	; (80115c4 <raise+0xc>)
 80115ba:	4601      	mov	r1, r0
 80115bc:	6818      	ldr	r0, [r3, #0]
 80115be:	f7ff bfd3 	b.w	8011568 <_raise_r>
 80115c2:	bf00      	nop
 80115c4:	20000190 	.word	0x20000190

080115c8 <_kill_r>:
 80115c8:	b538      	push	{r3, r4, r5, lr}
 80115ca:	4d07      	ldr	r5, [pc, #28]	; (80115e8 <_kill_r+0x20>)
 80115cc:	2300      	movs	r3, #0
 80115ce:	4604      	mov	r4, r0
 80115d0:	4608      	mov	r0, r1
 80115d2:	4611      	mov	r1, r2
 80115d4:	602b      	str	r3, [r5, #0]
 80115d6:	f7f2 fec7 	bl	8004368 <_kill>
 80115da:	1c43      	adds	r3, r0, #1
 80115dc:	d102      	bne.n	80115e4 <_kill_r+0x1c>
 80115de:	682b      	ldr	r3, [r5, #0]
 80115e0:	b103      	cbz	r3, 80115e4 <_kill_r+0x1c>
 80115e2:	6023      	str	r3, [r4, #0]
 80115e4:	bd38      	pop	{r3, r4, r5, pc}
 80115e6:	bf00      	nop
 80115e8:	20004754 	.word	0x20004754

080115ec <_getpid_r>:
 80115ec:	f7f2 beb4 	b.w	8004358 <_getpid>

080115f0 <__sread>:
 80115f0:	b510      	push	{r4, lr}
 80115f2:	460c      	mov	r4, r1
 80115f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115f8:	f000 f894 	bl	8011724 <_read_r>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	bfab      	itete	ge
 8011600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011602:	89a3      	ldrhlt	r3, [r4, #12]
 8011604:	181b      	addge	r3, r3, r0
 8011606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801160a:	bfac      	ite	ge
 801160c:	6563      	strge	r3, [r4, #84]	; 0x54
 801160e:	81a3      	strhlt	r3, [r4, #12]
 8011610:	bd10      	pop	{r4, pc}

08011612 <__swrite>:
 8011612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011616:	461f      	mov	r7, r3
 8011618:	898b      	ldrh	r3, [r1, #12]
 801161a:	05db      	lsls	r3, r3, #23
 801161c:	4605      	mov	r5, r0
 801161e:	460c      	mov	r4, r1
 8011620:	4616      	mov	r6, r2
 8011622:	d505      	bpl.n	8011630 <__swrite+0x1e>
 8011624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011628:	2302      	movs	r3, #2
 801162a:	2200      	movs	r2, #0
 801162c:	f000 f868 	bl	8011700 <_lseek_r>
 8011630:	89a3      	ldrh	r3, [r4, #12]
 8011632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801163a:	81a3      	strh	r3, [r4, #12]
 801163c:	4632      	mov	r2, r6
 801163e:	463b      	mov	r3, r7
 8011640:	4628      	mov	r0, r5
 8011642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011646:	f000 b817 	b.w	8011678 <_write_r>

0801164a <__sseek>:
 801164a:	b510      	push	{r4, lr}
 801164c:	460c      	mov	r4, r1
 801164e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011652:	f000 f855 	bl	8011700 <_lseek_r>
 8011656:	1c43      	adds	r3, r0, #1
 8011658:	89a3      	ldrh	r3, [r4, #12]
 801165a:	bf15      	itete	ne
 801165c:	6560      	strne	r0, [r4, #84]	; 0x54
 801165e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011666:	81a3      	strheq	r3, [r4, #12]
 8011668:	bf18      	it	ne
 801166a:	81a3      	strhne	r3, [r4, #12]
 801166c:	bd10      	pop	{r4, pc}

0801166e <__sclose>:
 801166e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011672:	f000 b813 	b.w	801169c <_close_r>
	...

08011678 <_write_r>:
 8011678:	b538      	push	{r3, r4, r5, lr}
 801167a:	4d07      	ldr	r5, [pc, #28]	; (8011698 <_write_r+0x20>)
 801167c:	4604      	mov	r4, r0
 801167e:	4608      	mov	r0, r1
 8011680:	4611      	mov	r1, r2
 8011682:	2200      	movs	r2, #0
 8011684:	602a      	str	r2, [r5, #0]
 8011686:	461a      	mov	r2, r3
 8011688:	f7f2 fea5 	bl	80043d6 <_write>
 801168c:	1c43      	adds	r3, r0, #1
 801168e:	d102      	bne.n	8011696 <_write_r+0x1e>
 8011690:	682b      	ldr	r3, [r5, #0]
 8011692:	b103      	cbz	r3, 8011696 <_write_r+0x1e>
 8011694:	6023      	str	r3, [r4, #0]
 8011696:	bd38      	pop	{r3, r4, r5, pc}
 8011698:	20004754 	.word	0x20004754

0801169c <_close_r>:
 801169c:	b538      	push	{r3, r4, r5, lr}
 801169e:	4d06      	ldr	r5, [pc, #24]	; (80116b8 <_close_r+0x1c>)
 80116a0:	2300      	movs	r3, #0
 80116a2:	4604      	mov	r4, r0
 80116a4:	4608      	mov	r0, r1
 80116a6:	602b      	str	r3, [r5, #0]
 80116a8:	f7f2 feb1 	bl	800440e <_close>
 80116ac:	1c43      	adds	r3, r0, #1
 80116ae:	d102      	bne.n	80116b6 <_close_r+0x1a>
 80116b0:	682b      	ldr	r3, [r5, #0]
 80116b2:	b103      	cbz	r3, 80116b6 <_close_r+0x1a>
 80116b4:	6023      	str	r3, [r4, #0]
 80116b6:	bd38      	pop	{r3, r4, r5, pc}
 80116b8:	20004754 	.word	0x20004754

080116bc <_fstat_r>:
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	4d07      	ldr	r5, [pc, #28]	; (80116dc <_fstat_r+0x20>)
 80116c0:	2300      	movs	r3, #0
 80116c2:	4604      	mov	r4, r0
 80116c4:	4608      	mov	r0, r1
 80116c6:	4611      	mov	r1, r2
 80116c8:	602b      	str	r3, [r5, #0]
 80116ca:	f7f2 feac 	bl	8004426 <_fstat>
 80116ce:	1c43      	adds	r3, r0, #1
 80116d0:	d102      	bne.n	80116d8 <_fstat_r+0x1c>
 80116d2:	682b      	ldr	r3, [r5, #0]
 80116d4:	b103      	cbz	r3, 80116d8 <_fstat_r+0x1c>
 80116d6:	6023      	str	r3, [r4, #0]
 80116d8:	bd38      	pop	{r3, r4, r5, pc}
 80116da:	bf00      	nop
 80116dc:	20004754 	.word	0x20004754

080116e0 <_isatty_r>:
 80116e0:	b538      	push	{r3, r4, r5, lr}
 80116e2:	4d06      	ldr	r5, [pc, #24]	; (80116fc <_isatty_r+0x1c>)
 80116e4:	2300      	movs	r3, #0
 80116e6:	4604      	mov	r4, r0
 80116e8:	4608      	mov	r0, r1
 80116ea:	602b      	str	r3, [r5, #0]
 80116ec:	f7f2 feab 	bl	8004446 <_isatty>
 80116f0:	1c43      	adds	r3, r0, #1
 80116f2:	d102      	bne.n	80116fa <_isatty_r+0x1a>
 80116f4:	682b      	ldr	r3, [r5, #0]
 80116f6:	b103      	cbz	r3, 80116fa <_isatty_r+0x1a>
 80116f8:	6023      	str	r3, [r4, #0]
 80116fa:	bd38      	pop	{r3, r4, r5, pc}
 80116fc:	20004754 	.word	0x20004754

08011700 <_lseek_r>:
 8011700:	b538      	push	{r3, r4, r5, lr}
 8011702:	4d07      	ldr	r5, [pc, #28]	; (8011720 <_lseek_r+0x20>)
 8011704:	4604      	mov	r4, r0
 8011706:	4608      	mov	r0, r1
 8011708:	4611      	mov	r1, r2
 801170a:	2200      	movs	r2, #0
 801170c:	602a      	str	r2, [r5, #0]
 801170e:	461a      	mov	r2, r3
 8011710:	f7f2 fea4 	bl	800445c <_lseek>
 8011714:	1c43      	adds	r3, r0, #1
 8011716:	d102      	bne.n	801171e <_lseek_r+0x1e>
 8011718:	682b      	ldr	r3, [r5, #0]
 801171a:	b103      	cbz	r3, 801171e <_lseek_r+0x1e>
 801171c:	6023      	str	r3, [r4, #0]
 801171e:	bd38      	pop	{r3, r4, r5, pc}
 8011720:	20004754 	.word	0x20004754

08011724 <_read_r>:
 8011724:	b538      	push	{r3, r4, r5, lr}
 8011726:	4d07      	ldr	r5, [pc, #28]	; (8011744 <_read_r+0x20>)
 8011728:	4604      	mov	r4, r0
 801172a:	4608      	mov	r0, r1
 801172c:	4611      	mov	r1, r2
 801172e:	2200      	movs	r2, #0
 8011730:	602a      	str	r2, [r5, #0]
 8011732:	461a      	mov	r2, r3
 8011734:	f7f2 fe32 	bl	800439c <_read>
 8011738:	1c43      	adds	r3, r0, #1
 801173a:	d102      	bne.n	8011742 <_read_r+0x1e>
 801173c:	682b      	ldr	r3, [r5, #0]
 801173e:	b103      	cbz	r3, 8011742 <_read_r+0x1e>
 8011740:	6023      	str	r3, [r4, #0]
 8011742:	bd38      	pop	{r3, r4, r5, pc}
 8011744:	20004754 	.word	0x20004754

08011748 <_init>:
 8011748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801174a:	bf00      	nop
 801174c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801174e:	bc08      	pop	{r3}
 8011750:	469e      	mov	lr, r3
 8011752:	4770      	bx	lr

08011754 <_fini>:
 8011754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011756:	bf00      	nop
 8011758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801175a:	bc08      	pop	{r3}
 801175c:	469e      	mov	lr, r3
 801175e:	4770      	bx	lr
