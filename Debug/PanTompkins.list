
PanTompkins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fc0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08011100  08011100  00021100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080116d4  080116d4  000216d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080116d8  080116d8  000216d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000360  20000004  080116dc  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000041e0  20000364  08011a3c  00030364  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20004544  08011a3c  00034544  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018691  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003e8d  00000000  00000000  00048a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a48  00000000  00000000  0004c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001880  00000000  00000000  0004e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00025544  00000000  00000000  0004fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a3d9  00000000  00000000  000750c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d965d  00000000  00000000  0008f49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00168afa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008198  00000000  00000000  00168b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000364 	.word	0x20000364
 800015c:	00000000 	.word	0x00000000
 8000160:	080110e8 	.word	0x080110e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000368 	.word	0x20000368
 800017c:	080110e8 	.word	0x080110e8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <PT_init>:
	and filter Buffers.

 *******************************************************************************/

void PT_init( void )
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
	/**************************************************
	Initialize Pan_Tompkins structure.
	**************************************************/

	memset(&PT_data, 0, sizeof(PT_data));
 8000caa:	22ea      	movs	r2, #234	; 0xea
 8000cac:	2100      	movs	r1, #0
 8000cae:	487d      	ldr	r0, [pc, #500]	; (8000ea4 <PT_init+0x200>)
 8000cb0:	f00b fd94 	bl	800c7dc <memset>

	PT_dptr->PT_state		= START_UP;
 8000cb4:	4b7b      	ldr	r3, [pc, #492]	; (8000ea4 <PT_init+0x200>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	80da      	strh	r2, [r3, #6]

	PT_dptr->Recent_RR_M = PT_dptr->RR_M =  PT1000MS;
 8000cba:	4b7a      	ldr	r3, [pc, #488]	; (8000ea4 <PT_init+0x200>)
 8000cbc:	22c8      	movs	r2, #200	; 0xc8
 8000cbe:	849a      	strh	r2, [r3, #36]	; 0x24
 8000cc0:	4a78      	ldr	r2, [pc, #480]	; (8000ea4 <PT_init+0x200>)
 8000cc2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000cc6:	8113      	strh	r3, [r2, #8]

	PT_dptr->RR_Low_L		= RR92PERCENT;
 8000cc8:	4b76      	ldr	r3, [pc, #472]	; (8000ea4 <PT_init+0x200>)
 8000cca:	22b8      	movs	r2, #184	; 0xb8
 8000ccc:	84da      	strh	r2, [r3, #38]	; 0x26
	PT_dptr->RR_High_L		= RR116PERCENT;
 8000cce:	4b75      	ldr	r3, [pc, #468]	; (8000ea4 <PT_init+0x200>)
 8000cd0:	22e8      	movs	r2, #232	; 0xe8
 8000cd2:	851a      	strh	r2, [r3, #40]	; 0x28
	PT_dptr->RR_Missed_L	= RR166PERCENT;
 8000cd4:	4b73      	ldr	r3, [pc, #460]	; (8000ea4 <PT_init+0x200>)
 8000cd6:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8000cda:	855a      	strh	r2, [r3, #42]	; 0x2a

	PT_dptr->LP_pointer		= 0;
 8000cdc:	4b71      	ldr	r3, [pc, #452]	; (8000ea4 <PT_init+0x200>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_pointer		= 0;
 8000ce2:	4b70      	ldr	r3, [pc, #448]	; (8000ea4 <PT_init+0x200>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	805a      	strh	r2, [r3, #2]
	PT_dptr->MVA_pointer	= 0;
 8000ce8:	4b6e      	ldr	r3, [pc, #440]	; (8000ea4 <PT_init+0x200>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	809a      	strh	r2, [r3, #4]

	PT_dptr->HR_State = REGULAR_HR;
 8000cee:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <PT_init+0x200>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	859a      	strh	r2, [r3, #44]	; 0x2c
	/**************************************************
	Initialize filter buffers
	**************************************************/
	int8_t idex;

	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	e00d      	b.n	8000d16 <PT_init+0x72>
		PT_dptr->LP_buf[idex]		= 0;							//  LP filter buffer
 8000cfa:	4a6a      	ldr	r2, [pc, #424]	; (8000ea4 <PT_init+0x200>)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	3314      	adds	r3, #20
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < LP_BUFFER_SIZE; idex++)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b0b      	cmp	r3, #11
 8000d1c:	dded      	ble.n	8000cfa <PT_init+0x56>
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	e00d      	b.n	8000d40 <PT_init+0x9c>
		PT_dptr->HP_buf[idex]		= 0;							//  HP filter buffer
 8000d24:	4a5f      	ldr	r2, [pc, #380]	; (8000ea4 <PT_init+0x200>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	3320      	adds	r3, #32
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < HP_BUFFER_SIZE; idex++)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b1f      	cmp	r3, #31
 8000d46:	dded      	ble.n	8000d24 <PT_init+0x80>
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	e00d      	b.n	8000d6a <PT_init+0xc6>
		PT_dptr->DR_buf[idex]		= 0;							//  DR filter buffer
 8000d4e:	4a55      	ldr	r2, [pc, #340]	; (8000ea4 <PT_init+0x200>)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	3340      	adds	r3, #64	; 0x40
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < DR_BUFFER_SIZE; idex++)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	dded      	ble.n	8000d4e <PT_init+0xaa>
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	e00d      	b.n	8000d94 <PT_init+0xf0>
		PT_dptr->MVA_buf[idex]		= 0;							//  MVA filter buffer
 8000d78:	4a4a      	ldr	r2, [pc, #296]	; (8000ea4 <PT_init+0x200>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	3344      	adds	r3, #68	; 0x44
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	80da      	strh	r2, [r3, #6]
	for (idex = 0; idex < MVA_BUFFER_SIZE; idex++)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b1d      	cmp	r3, #29
 8000d9a:	dded      	ble.n	8000d78 <PT_init+0xd4>
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	e01c      	b.n	8000ddc <PT_init+0x138>
		PT_dptr->RR_AVRG1_buf[idex] = 
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000da2:	4940      	ldr	r1, [pc, #256]	; (8000ea4 <PT_init+0x200>)
 8000da4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000da8:	f102 036c 	add.w	r3, r2, #108	; 0x6c
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	440b      	add	r3, r1
 8000db0:	20c8      	movs	r0, #200	; 0xc8
 8000db2:	8058      	strh	r0, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000db4:	4c3b      	ldr	r4, [pc, #236]	; (8000ea4 <PT_init+0x200>)
 8000db6:	f997 0007 	ldrsb.w	r0, [r7, #7]
			PT_dptr->RR_AVRG2_buf[idex] = PT1000MS;					//  Normal	and extreme RR buffers
 8000dba:	f102 036c 	add.w	r3, r2, #108	; 0x6c
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	440b      	add	r3, r1
 8000dc2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		PT_dptr->RR_AVRG1_buf[idex] = 
 8000dc6:	f100 0364 	add.w	r3, r0, #100	; 0x64
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4423      	add	r3, r4
 8000dce:	805a      	strh	r2, [r3, #2]
	for (idex = 0; idex < RR_BUFFER_SIZE; idex++) {
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b07      	cmp	r3, #7
 8000de2:	ddde      	ble.n	8000da2 <PT_init+0xfe>
	}

	/**************************************************
	Initialize all static variables 
	**************************************************/
	Prev_val = Prev_Prev_val = 0;									// Place holders for peak detector in Integrated Sig
 8000de4:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <PT_init+0x204>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	801a      	strh	r2, [r3, #0]
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <PT_init+0x204>)
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <PT_init+0x208>)
 8000df0:	801a      	strh	r2, [r3, #0]
	Prev_valBP = Prev_Prev_valBP = Best_PeakBP = 0;					// Place holders for peak detector in BP signal
 8000df2:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <PT_init+0x20c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	801a      	strh	r2, [r3, #0]
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <PT_init+0x20c>)
 8000dfa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <PT_init+0x210>)
 8000e00:	801a      	strh	r2, [r3, #0]
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <PT_init+0x210>)
 8000e04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <PT_init+0x214>)
 8000e0a:	801a      	strh	r2, [r3, #0]
	Prev_valDR = Prev_Prev_valDR = Best_PeakDR = Old_PeakDR = 0;	// Place holders for peak detector in Derivative signal (Used for T-wave discrimination)
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <PT_init+0x218>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	801a      	strh	r2, [r3, #0]
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <PT_init+0x218>)
 8000e14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <PT_init+0x21c>)
 8000e1a:	801a      	strh	r2, [r3, #0]
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <PT_init+0x21c>)
 8000e1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e22:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <PT_init+0x220>)
 8000e24:	801a      	strh	r2, [r3, #0]
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <PT_init+0x220>)
 8000e28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <PT_init+0x224>)
 8000e2e:	801a      	strh	r2, [r3, #0]
	Count_SinceRR = 0;												// Nr of samples since last qrs peak
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <PT_init+0x228>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	801a      	strh	r2, [r3, #0]
	RR1_p = RR2_p = 0;												// Pointers to RR average 1 and 2 resepectively
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <PT_init+0x22c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	801a      	strh	r2, [r3, #0]
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <PT_init+0x22c>)
 8000e3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <PT_init+0x230>)
 8000e44:	801a      	strh	r2, [r3, #0]
	MV_sum = 0;														// sum for moving average filter
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <PT_init+0x234>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	801a      	strh	r2, [r3, #0]
	RR1_sum = RR2_sum = PT1000MS << 3;								// Sum of RR1 and RR2 buffers
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <PT_init+0x238>)
 8000e4e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000e52:	801a      	strh	r2, [r3, #0]
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <PT_init+0x238>)
 8000e56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <PT_init+0x23c>)
 8000e5c:	801a      	strh	r2, [r3, #0]
	BlankTimeCnt = 0;												// Counter for blank-time.
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <PT_init+0x240>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	801a      	strh	r2, [r3, #0]
	SBcntI = 0;														// For searchback index in Integ Signal
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <PT_init+0x244>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	801a      	strh	r2, [r3, #0]
	SB_peakI = 0;													// For searchback in Integ sig
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <PT_init+0x248>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	801a      	strh	r2, [r3, #0]
	SB_peakBP = SB_peakDR = 0;										// For searchback peak holders in BP and slope signal
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <PT_init+0x24c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	801a      	strh	r2, [r3, #0]
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <PT_init+0x24c>)
 8000e78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <PT_init+0x250>)
 8000e7e:	801a      	strh	r2, [r3, #0]
	st_mx_pk = 0;													// Used in learning phase 1 to estimate thresholds
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <PT_init+0x254>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	801a      	strh	r2, [r3, #0]
	y_h = 0;														// recusrively used in HP filter
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <PT_init+0x258>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	801a      	strh	r2, [r3, #0]

#if (FILTER_FORM == 2)
	LP_y_new = LP_y_old = 0;										// Parameters for DirectForm || LP filter
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <PT_init+0x25c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	801a      	strh	r2, [r3, #0]
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <PT_init+0x25c>)
 8000e94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <PT_init+0x260>)
 8000e9a:	801a      	strh	r2, [r3, #0]
#endif
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000380 	.word	0x20000380
 8000ea8:	20000498 	.word	0x20000498
 8000eac:	20000496 	.word	0x20000496
 8000eb0:	2000046e 	.word	0x2000046e
 8000eb4:	2000046c 	.word	0x2000046c
 8000eb8:	2000046a 	.word	0x2000046a
 8000ebc:	20000476 	.word	0x20000476
 8000ec0:	20000474 	.word	0x20000474
 8000ec4:	20000472 	.word	0x20000472
 8000ec8:	20000470 	.word	0x20000470
 8000ecc:	20000478 	.word	0x20000478
 8000ed0:	2000047c 	.word	0x2000047c
 8000ed4:	2000047a 	.word	0x2000047a
 8000ed8:	2000048e 	.word	0x2000048e
 8000edc:	20000480 	.word	0x20000480
 8000ee0:	2000047e 	.word	0x2000047e
 8000ee4:	20000482 	.word	0x20000482
 8000ee8:	20000484 	.word	0x20000484
 8000eec:	2000049a 	.word	0x2000049a
 8000ef0:	20000488 	.word	0x20000488
 8000ef4:	20000486 	.word	0x20000486
 8000ef8:	20000492 	.word	0x20000492
 8000efc:	2000048a 	.word	0x2000048a
 8000f00:	2000049e 	.word	0x2000049e
 8000f04:	2000049c 	.word	0x2000049c

08000f08 <PT_StateMachine>:
	peak delay to the current sample.

 **********************************************************************************/

int16_t PT_StateMachine(int16_t datum)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
	int16_t BeatDelay = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	81fb      	strh	r3, [r7, #14]

	uint16_t PEAKI ;

	// ------- Preprocessing filtering and Peak detection --------- //
	LPFilter(&datum);										// LowPass filtering
 8000f16:	1dbb      	adds	r3, r7, #6
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fa55 	bl	80013c8 <LPFilter>
	HPFilter();												// HighPass filtering
 8000f1e:	f000 fad9 	bl	80014d4 <HPFilter>

	PeakDtcBP(PT_dptr->HPF_val);							// Store BP signal highest peak
 8000f22:	4b80      	ldr	r3, [pc, #512]	; (8001124 <PT_StateMachine+0x21c>)
 8000f24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fcbf 	bl	80018ac <PeakDtcBP>
	
	DerivFilter();
 8000f2e:	f000 fb61 	bl	80015f4 <DerivFilter>
	PeakDtcDR(PT_dptr->DRF_val);							// Store the highest slope for T wave discrimination
 8000f32:	4b7c      	ldr	r3, [pc, #496]	; (8001124 <PT_StateMachine+0x21c>)
 8000f34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fc79 	bl	8001830 <PeakDtcDR>

	SQRFilter();											//Squaring
 8000f3e:	f000 fb9f 	bl	8001680 <SQRFilter>

	MVAFilter();
 8000f42:	f000 fbd9 	bl	80016f8 <MVAFilter>
	PEAKI = PeakDtcI();
 8000f46:	f000 fc47 	bl	80017d8 <PeakDtcI>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	81bb      	strh	r3, [r7, #12]

	// ---- Integrated Peak detection checks and blankTime ---- //
	if (!PEAKI && BlankTimeCnt)								// No beat, decrement BlankTime
 8000f50:	89bb      	ldrh	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d116      	bne.n	8000f84 <PT_StateMachine+0x7c>
 8000f56:	4b74      	ldr	r3, [pc, #464]	; (8001128 <PT_StateMachine+0x220>)
 8000f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d011      	beq.n	8000f84 <PT_StateMachine+0x7c>
	{
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 8000f60:	4b71      	ldr	r3, [pc, #452]	; (8001128 <PT_StateMachine+0x220>)
 8000f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	4b6e      	ldr	r3, [pc, #440]	; (8001128 <PT_StateMachine+0x220>)
 8000f70:	801a      	strh	r2, [r3, #0]
 8000f72:	4b6d      	ldr	r3, [pc, #436]	; (8001128 <PT_StateMachine+0x220>)
 8000f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d139      	bne.n	8000ff0 <PT_StateMachine+0xe8>
			PEAKI = PEAKI_temp;
 8000f7c:	4b6b      	ldr	r3, [pc, #428]	; (800112c <PT_StateMachine+0x224>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	81bb      	strh	r3, [r7, #12]
		if (--BlankTimeCnt == 0)							// If blanktime over place the oldest peak
 8000f82:	e035      	b.n	8000ff0 <PT_StateMachine+0xe8>
	}
	else if (PEAKI && !BlankTimeCnt)						// If no peak for peak for last 200msec, save the current peak
 8000f84:	89bb      	ldrh	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00d      	beq.n	8000fa6 <PT_StateMachine+0x9e>
 8000f8a:	4b67      	ldr	r3, [pc, #412]	; (8001128 <PT_StateMachine+0x220>)
 8000f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d108      	bne.n	8000fa6 <PT_StateMachine+0x9e>
	{
		BlankTimeCnt = PT200MS;
 8000f94:	4b64      	ldr	r3, [pc, #400]	; (8001128 <PT_StateMachine+0x220>)
 8000f96:	2228      	movs	r2, #40	; 0x28
 8000f98:	801a      	strh	r2, [r3, #0]
		PEAKI_temp   = PEAKI;
 8000f9a:	89ba      	ldrh	r2, [r7, #12]
 8000f9c:	4b63      	ldr	r3, [pc, #396]	; (800112c <PT_StateMachine+0x224>)
 8000f9e:	801a      	strh	r2, [r3, #0]
		PEAKI = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	81bb      	strh	r3, [r7, #12]
 8000fa4:	e024      	b.n	8000ff0 <PT_StateMachine+0xe8>
	}
	else if(PEAKI)											// If a bigger peak comes along, store it
 8000fa6:	89bb      	ldrh	r3, [r7, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d021      	beq.n	8000ff0 <PT_StateMachine+0xe8>
	{
		if (PEAKI > PEAKI_temp)
 8000fac:	89ba      	ldrh	r2, [r7, #12]
 8000fae:	4b5f      	ldr	r3, [pc, #380]	; (800112c <PT_StateMachine+0x224>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d908      	bls.n	8000fc8 <PT_StateMachine+0xc0>
		{
			BlankTimeCnt = PT200MS;
 8000fb6:	4b5c      	ldr	r3, [pc, #368]	; (8001128 <PT_StateMachine+0x220>)
 8000fb8:	2228      	movs	r2, #40	; 0x28
 8000fba:	801a      	strh	r2, [r3, #0]
			PEAKI_temp = PEAKI;
 8000fbc:	89ba      	ldrh	r2, [r7, #12]
 8000fbe:	4b5b      	ldr	r3, [pc, #364]	; (800112c <PT_StateMachine+0x224>)
 8000fc0:	801a      	strh	r2, [r3, #0]
			PEAKI = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	81bb      	strh	r3, [r7, #12]
 8000fc6:	e013      	b.n	8000ff0 <PT_StateMachine+0xe8>
		}
		else if (--BlankTimeCnt == 0)
 8000fc8:	4b57      	ldr	r3, [pc, #348]	; (8001128 <PT_StateMachine+0x220>)
 8000fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	4b54      	ldr	r3, [pc, #336]	; (8001128 <PT_StateMachine+0x220>)
 8000fd8:	801a      	strh	r2, [r3, #0]
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <PT_StateMachine+0x220>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d103      	bne.n	8000fec <PT_StateMachine+0xe4>
			PEAKI = PEAKI_temp;
 8000fe4:	4b51      	ldr	r3, [pc, #324]	; (800112c <PT_StateMachine+0x224>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	81bb      	strh	r3, [r7, #12]
 8000fea:	e001      	b.n	8000ff0 <PT_StateMachine+0xe8>
		else
			PEAKI = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	81bb      	strh	r3, [r7, #12]
	}

	// -- Run Different Phases of the Algo -> Learning Ph1, 2 and decision --//
	++Count_SinceRR;
 8000ff0:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <PT_StateMachine+0x228>)
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	4b4c      	ldr	r3, [pc, #304]	; (8001130 <PT_StateMachine+0x228>)
 8001000:	801a      	strh	r2, [r3, #0]
	if (PT_dptr->PT_state == START_UP || PT_dptr->PT_state == LEARN_PH_1)		
 8001002:	4b48      	ldr	r3, [pc, #288]	; (8001124 <PT_StateMachine+0x21c>)
 8001004:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <PT_StateMachine+0x10e>
 800100c:	4b45      	ldr	r3, [pc, #276]	; (8001124 <PT_StateMachine+0x21c>)
 800100e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d10a      	bne.n	800102c <PT_StateMachine+0x124>
	{ 
		if (PEAKI > 0)
 8001016:	89bb      	ldrh	r3, [r7, #12]
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80c2 	beq.w	80011a2 <PT_StateMachine+0x29a>
			LearningPhase1(&PEAKI, &Best_PeakBP);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4944      	ldr	r1, [pc, #272]	; (8001134 <PT_StateMachine+0x22c>)
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f933 	bl	8001290 <LearningPhase1>
		if (PEAKI > 0)
 800102a:	e0ba      	b.n	80011a2 <PT_StateMachine+0x29a>
	}
	// ---- Once learning Phase 1 done, start storing beats ---- //
	else										
	{
		// ---- Is the peak taller than ThI1 and ThF1? ---- //
		if (PEAKI > PT_dptr->ThI1 && Best_PeakBP > PT_dptr->ThF1)
 800102c:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <PT_StateMachine+0x21c>)
 800102e:	8a9a      	ldrh	r2, [r3, #20]
 8001030:	89bb      	ldrh	r3, [r7, #12]
 8001032:	429a      	cmp	r2, r3
 8001034:	f080 808c 	bcs.w	8001150 <PT_StateMachine+0x248>
 8001038:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <PT_StateMachine+0x21c>)
 800103a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <PT_StateMachine+0x22c>)
 8001040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001044:	429a      	cmp	r2, r3
 8001046:	f280 8083 	bge.w	8001150 <PT_StateMachine+0x248>
		{

			// ---- Initiated phase 2 ---- //
			if (PT_dptr->PT_state == LEARN_PH_2)
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <PT_StateMachine+0x21c>)
 800104c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d11d      	bne.n	8001090 <PT_StateMachine+0x188>
			{
				// ----- Update Integ & BP Th ------ //
				UpdateThI(&PEAKI, 0);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fd78 	bl	8001b50 <UpdateThI>
				UpdateThF(&Best_PeakBP, 0);
 8001060:	2100      	movs	r1, #0
 8001062:	4834      	ldr	r0, [pc, #208]	; (8001134 <PT_StateMachine+0x22c>)
 8001064:	f000 fdc4 	bl	8001bf0 <UpdateThF>

				// --- First RR interval --- //
				BeatDelay = GENERAL_DELAY + PT200MS;
 8001068:	234e      	movs	r3, #78	; 0x4e
 800106a:	81fb      	strh	r3, [r7, #14]
				Count_SinceRR = 0;
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <PT_StateMachine+0x228>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
				Old_PeakDR = Best_PeakDR;
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <PT_StateMachine+0x230>)
 8001074:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <PT_StateMachine+0x234>)
 800107a:	801a      	strh	r2, [r3, #0]
				Best_PeakDR = 0;
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <PT_StateMachine+0x230>)
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
				Best_PeakBP = 0;
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <PT_StateMachine+0x22c>)
 8001084:	2200      	movs	r2, #0
 8001086:	801a      	strh	r2, [r3, #0]

				// --- Now we can compute RR intervals --- //
				PT_dptr->PT_state = DETECTING;
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <PT_StateMachine+0x21c>)
 800108a:	2203      	movs	r2, #3
 800108c:	80da      	strh	r2, [r3, #6]
			if (PT_dptr->PT_state == LEARN_PH_2)
 800108e:	e088      	b.n	80011a2 <PT_StateMachine+0x29a>
			}
			// ------ Learning phases are done! -------- //
			else
			{
			// --- T-Wave Test if RR < 360msec, is current slope lower 0.5prev_slope then noise --- //
				if (Count_SinceRR < PT360MS && (Best_PeakDR < (Old_PeakDR >> 2)))
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <PT_StateMachine+0x228>)
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001096:	2b47      	cmp	r3, #71	; 0x47
 8001098:	dc14      	bgt.n	80010c4 <PT_StateMachine+0x1bc>
 800109a:	4b28      	ldr	r3, [pc, #160]	; (800113c <PT_StateMachine+0x234>)
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a0:	109b      	asrs	r3, r3, #2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <PT_StateMachine+0x230>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dd0a      	ble.n	80010c4 <PT_StateMachine+0x1bc>
				{
					// ----- Update Integ & BP Th ------ //
					UpdateThI(&PEAKI, 1);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fd4b 	bl	8001b50 <UpdateThI>
					UpdateThF(&Best_PeakBP, 1);
 80010ba:	2101      	movs	r1, #1
 80010bc:	481d      	ldr	r0, [pc, #116]	; (8001134 <PT_StateMachine+0x22c>)
 80010be:	f000 fd97 	bl	8001bf0 <UpdateThF>
			if (PT_dptr->PT_state == LEARN_PH_2)
 80010c2:	e06e      	b.n	80011a2 <PT_StateMachine+0x29a>

				}
				else
				{
					// ----- Update Integ & BP Th && RR buffers ------ //
					UpdateThI(&PEAKI, 0);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd40 	bl	8001b50 <UpdateThI>
					UpdateThF(&Best_PeakBP, 0);
 80010d0:	2100      	movs	r1, #0
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <PT_StateMachine+0x22c>)
 80010d4:	f000 fd8c 	bl	8001bf0 <UpdateThF>
					UpdateRR(Count_SinceRR);
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <PT_StateMachine+0x228>)
 80010da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fc22 	bl	8001928 <UpdateRR>

					// --- Reset parameters --- //
					BeatDelay = GENERAL_DELAY + PT200MS;
 80010e4:	234e      	movs	r3, #78	; 0x4e
 80010e6:	81fb      	strh	r3, [r7, #14]
					Count_SinceRR = 0;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <PT_StateMachine+0x228>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
					Old_PeakDR = Best_PeakDR;									// Store the derivative for T-wave test
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <PT_StateMachine+0x230>)
 80010f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <PT_StateMachine+0x234>)
 80010f6:	801a      	strh	r2, [r3, #0]
					Best_PeakDR = Best_PeakBP = 0;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <PT_StateMachine+0x22c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	801a      	strh	r2, [r3, #0]
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <PT_StateMachine+0x22c>)
 8001100:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <PT_StateMachine+0x230>)
 8001106:	801a      	strh	r2, [r3, #0]

					SBcntI = 0;
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <PT_StateMachine+0x238>)
 800110a:	2200      	movs	r2, #0
 800110c:	801a      	strh	r2, [r3, #0]
					SB_peakBP = 0;
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <PT_StateMachine+0x23c>)
 8001110:	2200      	movs	r2, #0
 8001112:	801a      	strh	r2, [r3, #0]
					SB_peakDR = 0;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <PT_StateMachine+0x240>)
 8001116:	2200      	movs	r2, #0
 8001118:	801a      	strh	r2, [r3, #0]
					SB_peakI = 0;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <PT_StateMachine+0x244>)
 800111c:	2200      	movs	r2, #0
 800111e:	801a      	strh	r2, [r3, #0]
			if (PT_dptr->PT_state == LEARN_PH_2)
 8001120:	e03f      	b.n	80011a2 <PT_StateMachine+0x29a>
 8001122:	bf00      	nop
 8001124:	20000380 	.word	0x20000380
 8001128:	20000482 	.word	0x20000482
 800112c:	20000490 	.word	0x20000490
 8001130:	20000478 	.word	0x20000478
 8001134:	2000046e 	.word	0x2000046e
 8001138:	20000474 	.word	0x20000474
 800113c:	20000476 	.word	0x20000476
 8001140:	20000484 	.word	0x20000484
 8001144:	20000486 	.word	0x20000486
 8001148:	20000488 	.word	0x20000488
 800114c:	2000049a 	.word	0x2000049a

				}
			}
		}
		// ------ If the peak is noise ------- //
		else if (PEAKI > 0)
 8001150:	89bb      	ldrh	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d025      	beq.n	80011a2 <PT_StateMachine+0x29a>
		{
			// ----- Update Integ & BP Th ------ //
			UpdateThI(&PEAKI, 1);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2101      	movs	r1, #1
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fcf7 	bl	8001b50 <UpdateThI>
			UpdateThF(&Best_PeakBP, 1);
 8001162:	2101      	movs	r1, #1
 8001164:	4841      	ldr	r0, [pc, #260]	; (800126c <PT_StateMachine+0x364>)
 8001166:	f000 fd43 	bl	8001bf0 <UpdateThF>

			// ----- Store the peak for searchback ------ //
			if (PEAKI > SB_peakI && Count_SinceRR >= PT360MS)
 800116a:	89ba      	ldrh	r2, [r7, #12]
 800116c:	4b40      	ldr	r3, [pc, #256]	; (8001270 <PT_StateMachine+0x368>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d916      	bls.n	80011a2 <PT_StateMachine+0x29a>
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <PT_StateMachine+0x36c>)
 8001176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117a:	2b47      	cmp	r3, #71	; 0x47
 800117c:	dd11      	ble.n	80011a2 <PT_StateMachine+0x29a>
			{
				SB_peakI = PEAKI;											// Store Integ Sig peak 
 800117e:	89ba      	ldrh	r2, [r7, #12]
 8001180:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <PT_StateMachine+0x368>)
 8001182:	801a      	strh	r2, [r3, #0]
				SB_peakBP = Best_PeakBP;									// Store BP Sig peak
 8001184:	4b39      	ldr	r3, [pc, #228]	; (800126c <PT_StateMachine+0x364>)
 8001186:	f9b3 2000 	ldrsh.w	r2, [r3]
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <PT_StateMachine+0x370>)
 800118c:	801a      	strh	r2, [r3, #0]
				SB_peakDR = Best_PeakDR;									// Derivative of SB point
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <PT_StateMachine+0x374>)
 8001190:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001194:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <PT_StateMachine+0x378>)
 8001196:	801a      	strh	r2, [r3, #0]
				SBcntI = Count_SinceRR;										// Store Indice
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <PT_StateMachine+0x36c>)
 800119a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <PT_StateMachine+0x37c>)
 80011a0:	801a      	strh	r2, [r3, #0]
		}

	}

	// -- Do search-back if we have no beats in PT_dptr->RR_Missed_L -- //
	if (Count_SinceRR > PT_dptr->RR_Missed_L && SB_peakI > PT_dptr->ThI2 && PT_dptr->PT_state == DETECTING)
 80011a2:	4b39      	ldr	r3, [pc, #228]	; (8001288 <PT_StateMachine+0x380>)
 80011a4:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 80011a8:	4b32      	ldr	r3, [pc, #200]	; (8001274 <PT_StateMachine+0x36c>)
 80011aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	da4d      	bge.n	800124e <PT_StateMachine+0x346>
 80011b2:	4b35      	ldr	r3, [pc, #212]	; (8001288 <PT_StateMachine+0x380>)
 80011b4:	8b5a      	ldrh	r2, [r3, #26]
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <PT_StateMachine+0x368>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d247      	bcs.n	800124e <PT_StateMachine+0x346>
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <PT_StateMachine+0x380>)
 80011c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d142      	bne.n	800124e <PT_StateMachine+0x346>
	{
		// ---- Checking the BP signal ---- //
		if (SB_peakBP > PT_dptr->ThF2)
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <PT_StateMachine+0x380>)
 80011ca:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <PT_StateMachine+0x370>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	da3a      	bge.n	800124e <PT_StateMachine+0x346>
		{
			// ----- Update Integ & BP Th && RR buffers ------ //
			UpdateThI(&SB_peakI, 0);
 80011d8:	2100      	movs	r1, #0
 80011da:	4825      	ldr	r0, [pc, #148]	; (8001270 <PT_StateMachine+0x368>)
 80011dc:	f000 fcb8 	bl	8001b50 <UpdateThI>
			UpdateThF(&SB_peakBP, 0);
 80011e0:	2100      	movs	r1, #0
 80011e2:	4825      	ldr	r0, [pc, #148]	; (8001278 <PT_StateMachine+0x370>)
 80011e4:	f000 fd04 	bl	8001bf0 <UpdateThF>
			UpdateRR(SBcntI);
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <PT_StateMachine+0x37c>)
 80011ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fb9a 	bl	8001928 <UpdateRR>

			// --- Reset parameters --- //
			BeatDelay = Count_SinceRR = Count_SinceRR - SBcntI;
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <PT_StateMachine+0x36c>)
 80011f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <PT_StateMachine+0x37c>)
 80011fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001202:	b29b      	uxth	r3, r3
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b29b      	uxth	r3, r3
 8001208:	b21a      	sxth	r2, r3
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <PT_StateMachine+0x36c>)
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <PT_StateMachine+0x36c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	81fb      	strh	r3, [r7, #14]
			BeatDelay += (GENERAL_DELAY + PT200MS);
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	334e      	adds	r3, #78	; 0x4e
 8001218:	b29b      	uxth	r3, r3
 800121a:	81fb      	strh	r3, [r7, #14]
			Old_PeakDR = SB_peakDR;		// Store the derivative for T-wave test
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <PT_StateMachine+0x378>)
 800121e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <PT_StateMachine+0x384>)
 8001224:	801a      	strh	r2, [r3, #0]
			Best_PeakDR = Best_PeakBP = 0;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <PT_StateMachine+0x364>)
 8001228:	2200      	movs	r2, #0
 800122a:	801a      	strh	r2, [r3, #0]
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <PT_StateMachine+0x364>)
 800122e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <PT_StateMachine+0x374>)
 8001234:	801a      	strh	r2, [r3, #0]

			SBcntI = 0;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <PT_StateMachine+0x37c>)
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
			SB_peakBP = 0;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <PT_StateMachine+0x370>)
 800123e:	2200      	movs	r2, #0
 8001240:	801a      	strh	r2, [r3, #0]
			SB_peakDR = 0;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <PT_StateMachine+0x378>)
 8001244:	2200      	movs	r2, #0
 8001246:	801a      	strh	r2, [r3, #0]
			SB_peakI = 0;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <PT_StateMachine+0x368>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]
	}

	// ---- Emergency and Faulty Condition Reset ---- //
	// If algorithm doest not find a beat in 4sec, then it resets itself
	// and starts learning phases.
	if (Count_SinceRR > PT4000MS) {
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <PT_StateMachine+0x36c>)
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001258:	dd01      	ble.n	800125e <PT_StateMachine+0x356>
		PT_init();
 800125a:	f7ff fd23 	bl	8000ca4 <PT_init>
	}

	return (BeatDelay);
 800125e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000046e 	.word	0x2000046e
 8001270:	2000049a 	.word	0x2000049a
 8001274:	20000478 	.word	0x20000478
 8001278:	20000486 	.word	0x20000486
 800127c:	20000474 	.word	0x20000474
 8001280:	20000488 	.word	0x20000488
 8001284:	20000484 	.word	0x20000484
 8001288:	20000380 	.word	0x20000380
 800128c:	20000476 	.word	0x20000476

08001290 <LearningPhase1>:
	peaks iteratively in both Integrated Signal and BP signal.

 **********************************************************************************/

void LearningPhase1(uint16_t *pkI, int16_t *pkBP)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	//---- Recursively compute the average and max of peaks ------ //
	if (*pkI > st_mx_pk) st_mx_pk = *pkI;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	881a      	ldrh	r2, [r3, #0]
 800129e:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <LearningPhase1+0x120>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d903      	bls.n	80012ae <LearningPhase1+0x1e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	881a      	ldrh	r2, [r3, #0]
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <LearningPhase1+0x120>)
 80012ac:	801a      	strh	r2, [r3, #0]

	// ---- If the very first time calling this function --- //
	if (PT_dptr->PT_state == START_UP) {
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <LearningPhase1+0x124>)
 80012b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10c      	bne.n	80012d2 <LearningPhase1+0x42>
		PT_dptr->PT_state = LEARN_PH_1;
 80012b8:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <LearningPhase1+0x124>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	80da      	strh	r2, [r3, #6]
		st_mean_pk = *pkI;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	881a      	ldrh	r2, [r3, #0]
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <LearningPhase1+0x128>)
 80012c4:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = *pkBP; 
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012cc:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <LearningPhase1+0x12c>)
 80012ce:	801a      	strh	r2, [r3, #0]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;

	}
}
 80012d0:	e067      	b.n	80013a2 <LearningPhase1+0x112>
	else if(Count_SinceRR < PT2000MS){
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <LearningPhase1+0x130>)
 80012d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80012dc:	da16      	bge.n	800130c <LearningPhase1+0x7c>
		st_mean_pk = (st_mean_pk + *pkI) >> 1;
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <LearningPhase1+0x128>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	105b      	asrs	r3, r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <LearningPhase1+0x128>)
 80012f0:	801a      	strh	r2, [r3, #0]
		st_mean_pkBP = (st_mean_pkBP + *pkBP) >> 1;
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <LearningPhase1+0x12c>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	461a      	mov	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	4413      	add	r3, r2
 8001302:	105b      	asrs	r3, r3, #1
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <LearningPhase1+0x12c>)
 8001308:	801a      	strh	r2, [r3, #0]
}
 800130a:	e04a      	b.n	80013a2 <LearningPhase1+0x112>
		PT_dptr->PT_state = LEARN_PH_2;
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <LearningPhase1+0x124>)
 800130e:	2202      	movs	r2, #2
 8001310:	80da      	strh	r2, [r3, #6]
		PT_dptr->SPKI = (st_mx_pk >> 1);
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <LearningPhase1+0x120>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <LearningPhase1+0x124>)
 8001318:	085b      	lsrs	r3, r3, #1
 800131a:	b29b      	uxth	r3, r3
 800131c:	82d3      	strh	r3, [r2, #22]
		PT_dptr->NPKI = (st_mean_pk >> 3);
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <LearningPhase1+0x128>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <LearningPhase1+0x124>)
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	b29b      	uxth	r3, r3
 8001328:	8313      	strh	r3, [r2, #24]
		PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <LearningPhase1+0x124>)
 800132c:	8b1a      	ldrh	r2, [r3, #24]
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <LearningPhase1+0x124>)
 8001330:	8adb      	ldrh	r3, [r3, #22]
 8001332:	4619      	mov	r1, r3
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <LearningPhase1+0x124>)
 8001336:	8b1b      	ldrh	r3, [r3, #24]
 8001338:	1acb      	subs	r3, r1, r3
 800133a:	109b      	asrs	r3, r3, #2
 800133c:	b29b      	uxth	r3, r3
 800133e:	491d      	ldr	r1, [pc, #116]	; (80013b4 <LearningPhase1+0x124>)
 8001340:	4413      	add	r3, r2
 8001342:	b29b      	uxth	r3, r3
 8001344:	828b      	strh	r3, [r1, #20]
		PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <LearningPhase1+0x124>)
 8001348:	8a9b      	ldrh	r3, [r3, #20]
 800134a:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <LearningPhase1+0x124>)
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	b29b      	uxth	r3, r3
 8001350:	8353      	strh	r3, [r2, #26]
		PT_dptr->SPKF = (Best_PeakBP >> 1);
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <LearningPhase1+0x134>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <LearningPhase1+0x124>)
 800135a:	105b      	asrs	r3, r3, #1
 800135c:	b21b      	sxth	r3, r3
 800135e:	83d3      	strh	r3, [r2, #30]
		PT_dptr->NPKF = (st_mean_pkBP >> 3);
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <LearningPhase1+0x12c>)
 8001362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001366:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <LearningPhase1+0x124>)
 8001368:	10db      	asrs	r3, r3, #3
 800136a:	b21b      	sxth	r3, r3
 800136c:	8413      	strh	r3, [r2, #32]
		PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <LearningPhase1+0x124>)
 8001370:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <LearningPhase1+0x124>)
 8001378:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800137c:	4619      	mov	r1, r3
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <LearningPhase1+0x124>)
 8001380:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001384:	1acb      	subs	r3, r1, r3
 8001386:	109b      	asrs	r3, r3, #2
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <LearningPhase1+0x124>)
 8001390:	b212      	sxth	r2, r2
 8001392:	839a      	strh	r2, [r3, #28]
		PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <LearningPhase1+0x124>)
 8001396:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <LearningPhase1+0x124>)
 800139c:	105b      	asrs	r3, r3, #1
 800139e:	b21b      	sxth	r3, r3
 80013a0:	8453      	strh	r3, [r2, #34]	; 0x22
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000492 	.word	0x20000492
 80013b4:	20000380 	.word	0x20000380
 80013b8:	20000494 	.word	0x20000494
 80013bc:	2000048c 	.word	0x2000048c
 80013c0:	20000478 	.word	0x20000478
 80013c4:	2000046e 	.word	0x2000046e

080013c8 <LPFilter>:
	type employed by setting FILTER_FORM to 1 or 2. Delay of the filter is 5.

 **********************************************************************************/

void LPFilter(int16_t *val)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, w;

	half_pointer = PT_dptr->LP_pointer - (LP_BUFFER_SIZE >> 1);
 80013d0:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <LPFilter+0x100>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	3b06      	subs	r3, #6
 80013da:	b29b      	uxth	r3, r3
 80013dc:	81fb      	strh	r3, [r7, #14]

	if (half_pointer < 0) 
 80013de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da03      	bge.n	80013ee <LPFilter+0x26>
		half_pointer += LP_BUFFER_SIZE;
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	330c      	adds	r3, #12
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	81fb      	strh	r3, [r7, #14]
#if (FILTER_FORM == 1)
		w = *val + (PT_dptr->LP_buf[1] << 1) - PT_dptr->LP_buf[0];
		*val = w - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = w;
#else
		w = (LP_y_old << 1) - LP_y_new + *val - (PT_dptr->LP_buf[half_pointer] << 1) + PT_dptr->LP_buf[PT_dptr->LP_pointer];
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <LPFilter+0x104>)
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <LPFilter+0x108>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	b29b      	uxth	r3, r3
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b29a      	uxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b29a      	uxth	r2, r3
 8001412:	492d      	ldr	r1, [pc, #180]	; (80014c8 <LPFilter+0x100>)
 8001414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001418:	3314      	adds	r3, #20
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001422:	b29b      	uxth	r3, r3
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b29a      	uxth	r2, r3
 800142c:	4926      	ldr	r1, [pc, #152]	; (80014c8 <LPFilter+0x100>)
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <LPFilter+0x100>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	3314      	adds	r3, #20
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b29b      	uxth	r3, r3
 8001444:	81bb      	strh	r3, [r7, #12]
		LP_y_new = LP_y_old;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <LPFilter+0x104>)
 8001448:	f9b3 2000 	ldrsh.w	r2, [r3]
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <LPFilter+0x108>)
 800144e:	801a      	strh	r2, [r3, #0]
		LP_y_old = w;
 8001450:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <LPFilter+0x104>)
 8001452:	89bb      	ldrh	r3, [r7, #12]
 8001454:	8013      	strh	r3, [r2, #0]
		PT_dptr->LP_buf[PT_dptr->LP_pointer] = *val;
 8001456:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <LPFilter+0x100>)
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <LPFilter+0x100>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	4618      	mov	r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001466:	f100 0314 	add.w	r3, r0, #20
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	460a      	mov	r2, r1
 8001470:	80da      	strh	r2, [r3, #6]
#endif
		// --- Avoid signal overflow by gaining down ---- //
		if (w >= 0)
 8001472:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db06      	blt.n	8001488 <LPFilter+0xc0>
			PT_dptr->LPF_val = w >> 5;
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <LPFilter+0x100>)
 800147c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001480:	115b      	asrs	r3, r3, #5
 8001482:	b21b      	sxth	r3, r3
 8001484:	8153      	strh	r3, [r2, #10]
 8001486:	e00a      	b.n	800149e <LPFilter+0xd6>
		else
			PT_dptr->LPF_val = (w >> 5) | 0xF800;
 8001488:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800148c:	115b      	asrs	r3, r3, #5
 800148e:	b21b      	sxth	r3, r3
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LPFilter+0x100>)
 8001492:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 8001496:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 800149a:	b21b      	sxth	r3, r3
 800149c:	8153      	strh	r3, [r2, #10]

		if (++PT_dptr->LP_pointer == LP_BUFFER_SIZE) 
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <LPFilter+0x100>)
 80014a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014a4:	b292      	uxth	r2, r2
 80014a6:	3201      	adds	r2, #1
 80014a8:	b292      	uxth	r2, r2
 80014aa:	b212      	sxth	r2, r2
 80014ac:	801a      	strh	r2, [r3, #0]
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d102      	bne.n	80014bc <LPFilter+0xf4>
			PT_dptr->LP_pointer = 0;
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <LPFilter+0x100>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	801a      	strh	r2, [r3, #0]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20000380 	.word	0x20000380
 80014cc:	2000049e 	.word	0x2000049e
 80014d0:	2000049c 	.word	0x2000049c

080014d4 <HPFilter>:
function implements the filter both in Direct Form I and II. Select the
type employed by setting FILTER_FORM to 1 or 2. Delay 16 samples.

**********************************************************************************/
void HPFilter(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
	// -- To avoid using modulo employ half-pointer -- //
	int16_t half_pointer, h_prev_pointer;
	half_pointer = PT_dptr->HP_pointer - (HP_BUFFER_SIZE >> 1);
 80014da:	4b44      	ldr	r3, [pc, #272]	; (80015ec <HPFilter+0x118>)
 80014dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3b10      	subs	r3, #16
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	80fb      	strh	r3, [r7, #6]

	if (half_pointer < 0)
 80014e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da03      	bge.n	80014f8 <HPFilter+0x24>
		half_pointer += HP_BUFFER_SIZE;
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	3320      	adds	r3, #32
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	80fb      	strh	r3, [r7, #6]
	
	if (!half_pointer)
 80014f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <HPFilter+0x32>
		h_prev_pointer = HP_BUFFER_SIZE - 1;
 8001500:	231f      	movs	r3, #31
 8001502:	80bb      	strh	r3, [r7, #4]
 8001504:	e003      	b.n	800150e <HPFilter+0x3a>
	else
		h_prev_pointer = half_pointer - 1;
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	3b01      	subs	r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	80bb      	strh	r3, [r7, #4]
#if (FILTER_FORM == 1)
	y_h = PT_dptr->LPF_val + PT_dptr->HP_buf[0];
	PT_dptr->LPF_val = ((PT_dptr->HP_buf[PT_dptr->HP_pointer] - y_h) >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = y_h;
#else
	y_h += (PT_dptr->HP_buf[PT_dptr->HP_pointer] >> 5) - (PT_dptr->LPF_val >> 5) + PT_dptr->HP_buf[half_pointer] - PT_dptr->HP_buf[h_prev_pointer];
 800150e:	4a37      	ldr	r2, [pc, #220]	; (80015ec <HPFilter+0x118>)
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HPFilter+0x118>)
 8001512:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001516:	3320      	adds	r3, #32
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001520:	115b      	asrs	r3, r3, #5
 8001522:	b21b      	sxth	r3, r3
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HPFilter+0x118>)
 8001528:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800152c:	115b      	asrs	r3, r3, #5
 800152e:	b21b      	sxth	r3, r3
 8001530:	b29b      	uxth	r3, r3
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	b29a      	uxth	r2, r3
 8001536:	492d      	ldr	r1, [pc, #180]	; (80015ec <HPFilter+0x118>)
 8001538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153c:	3320      	adds	r3, #32
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	440b      	add	r3, r1
 8001542:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4413      	add	r3, r2
 800154a:	b29a      	uxth	r2, r3
 800154c:	4927      	ldr	r1, [pc, #156]	; (80015ec <HPFilter+0x118>)
 800154e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001552:	3320      	adds	r3, #32
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	440b      	add	r3, r1
 8001558:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800155c:	b29b      	uxth	r3, r3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HPFilter+0x11c>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	b29b      	uxth	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HPFilter+0x11c>)
 8001572:	801a      	strh	r2, [r3, #0]
	PT_dptr->HP_buf[PT_dptr->HP_pointer] = PT_dptr->LPF_val;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HPFilter+0x118>)
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HPFilter+0x118>)
 8001578:	491c      	ldr	r1, [pc, #112]	; (80015ec <HPFilter+0x118>)
 800157a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800157e:	4608      	mov	r0, r1
 8001580:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8001584:	f100 0320 	add.w	r3, r0, #32
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	460a      	mov	r2, r1
 800158e:	80da      	strh	r2, [r3, #6]
	
#endif
	// ------- Again slightly gaining down --------- //
	if (y_h >= 0)
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HPFilter+0x11c>)
 8001592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db07      	blt.n	80015aa <HPFilter+0xd6>
		PT_dptr->HPF_val = (y_h >> 1);
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HPFilter+0x11c>)
 800159c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a0:	4a12      	ldr	r2, [pc, #72]	; (80015ec <HPFilter+0x118>)
 80015a2:	105b      	asrs	r3, r3, #1
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	8193      	strh	r3, [r2, #12]
 80015a8:	e00b      	b.n	80015c2 <HPFilter+0xee>
	else
		PT_dptr->HPF_val = (y_h >> 1) | 0xF800;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HPFilter+0x11c>)
 80015ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b0:	105b      	asrs	r3, r3, #1
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HPFilter+0x118>)
 80015b6:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 80015ba:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 80015be:	b21b      	sxth	r3, r3
 80015c0:	8193      	strh	r3, [r2, #12]

	if (++PT_dptr->HP_pointer == HP_BUFFER_SIZE) PT_dptr->HP_pointer = 0;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HPFilter+0x118>)
 80015c4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015c8:	b292      	uxth	r2, r2
 80015ca:	3201      	adds	r2, #1
 80015cc:	b292      	uxth	r2, r2
 80015ce:	b212      	sxth	r2, r2
 80015d0:	805a      	strh	r2, [r3, #2]
 80015d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d102      	bne.n	80015e0 <HPFilter+0x10c>
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <HPFilter+0x118>)
 80015dc:	2200      	movs	r2, #0
 80015de:	805a      	strh	r2, [r3, #2]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	20000380 	.word	0x20000380
 80015f0:	2000048a 	.word	0x2000048a

080015f4 <DerivFilter>:
y[n] = 1/8(2x[n] + x[n - 1] - x[n - 3] - 2x[n - 4]) . Delay 2 samples.

**********************************************************************************/

void DerivFilter(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
	// --- Since it is only a 5 point derivative filter we avoid using pointers and half pointers for further efficieny ---- //
	int16_t w;

	w = PT_dptr->DR_buf[0] - PT_dptr->DR_buf[2];
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <DerivFilter+0x88>)
 80015fc:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <DerivFilter+0x88>)
 8001604:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8001608:	b29b      	uxth	r3, r3
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	b29b      	uxth	r3, r3
 800160e:	80fb      	strh	r3, [r7, #6]
	w += ((PT_dptr->HPF_val - PT_dptr->DR_buf[3]) << 1);
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <DerivFilter+0x88>)
 8001612:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <DerivFilter+0x88>)
 800161a:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 800161e:	b29b      	uxth	r3, r3
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	b29b      	uxth	r3, r3
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	4413      	add	r3, r2
 800162c:	b29b      	uxth	r3, r3
 800162e:	80fb      	strh	r3, [r7, #6]
	w >>= 3;
 8001630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001634:	10db      	asrs	r3, r3, #3
 8001636:	80fb      	strh	r3, [r7, #6]
	PT_dptr->DR_buf[3] = PT_dptr->DR_buf[2];
 8001638:	4a10      	ldr	r2, [pc, #64]	; (800167c <DerivFilter+0x88>)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <DerivFilter+0x88>)
 800163c:	f9b2 208a 	ldrsh.w	r2, [r2, #138]	; 0x8a
 8001640:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	PT_dptr->DR_buf[2] = PT_dptr->DR_buf[1];
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <DerivFilter+0x88>)
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <DerivFilter+0x88>)
 8001648:	f9b2 2088 	ldrsh.w	r2, [r2, #136]	; 0x88
 800164c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	PT_dptr->DR_buf[1] = PT_dptr->DR_buf[0];
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <DerivFilter+0x88>)
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <DerivFilter+0x88>)
 8001654:	f9b2 2086 	ldrsh.w	r2, [r2, #134]	; 0x86
 8001658:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	PT_dptr->DR_buf[0] = PT_dptr->HPF_val;
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <DerivFilter+0x88>)
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <DerivFilter+0x88>)
 8001660:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001664:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	PT_dptr->DRF_val = w;
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <DerivFilter+0x88>)
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	81d3      	strh	r3, [r2, #14]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000380 	.word	0x20000380

08001680 <SQRFilter>:
Description: Squares the signal based on Pan-Tompkins Eq. 10,
y[n] = x[n]^2. No delay.

**********************************************************************************/
void SQRFilter(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
	// ------------ Avoiding Overflow -------------- //
	uint16_t temp;
	if (PT_dptr->DRF_val > SQR_LIM_VAL || PT_dptr->DRF_val < (-SQR_LIM_VAL))
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <SQRFilter+0x74>)
 8001688:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800168c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001690:	dc05      	bgt.n	800169e <SQRFilter+0x1e>
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <SQRFilter+0x74>)
 8001694:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001698:	f513 7f80 	cmn.w	r3, #256	; 0x100
 800169c:	da04      	bge.n	80016a8 <SQRFilter+0x28>
		PT_dptr->SQF_val = UINT16_MAX;
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <SQRFilter+0x74>)
 80016a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a4:	821a      	strh	r2, [r3, #16]
 80016a6:	e015      	b.n	80016d4 <SQRFilter+0x54>
	else
	{
		if (PT_dptr->DRF_val < 0)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <SQRFilter+0x74>)
 80016aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da06      	bge.n	80016c0 <SQRFilter+0x40>
			temp = (uint16_t)(-PT_dptr->DRF_val);
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <SQRFilter+0x74>)
 80016b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	425b      	negs	r3, r3
 80016bc:	80fb      	strh	r3, [r7, #6]
 80016be:	e003      	b.n	80016c8 <SQRFilter+0x48>
		else
			temp = (uint16_t)(PT_dptr->DRF_val);
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <SQRFilter+0x74>)
 80016c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016c6:	80fb      	strh	r3, [r7, #6]
		PT_dptr->SQF_val = temp*temp;
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SQRFilter+0x74>)
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	fb13 f303 	smulbb	r3, r3, r3
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	8213      	strh	r3, [r2, #16]
	}

	if (PT_dptr->SQF_val > SQR_LIM_OUT)
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <SQRFilter+0x74>)
 80016d6:	8a1b      	ldrh	r3, [r3, #16]
 80016d8:	f247 5230 	movw	r2, #30000	; 0x7530
 80016dc:	4293      	cmp	r3, r2
 80016de:	d903      	bls.n	80016e8 <SQRFilter+0x68>
		PT_dptr->SQF_val = SQR_LIM_OUT;
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SQRFilter+0x74>)
 80016e2:	f247 5230 	movw	r2, #30000	; 0x7530
 80016e6:	821a      	strh	r2, [r3, #16]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	20000380 	.word	0x20000380

080016f8 <MVAFilter>:
Description: Computes the rolling moving average of the input signal
based on Eq. 11 of Pan-Tompkins, y[n] = (1/N)[sum(x[1]+...+x[N])]. Delay 15 Samples.

**********************************************************************************/
void MVAFilter(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
	//---- The MV_sum can easily overflow so we limit the bound by uint16 precision ------ //
	if (MV_sum < (UINT16_MAX - PT_dptr->SQF_val))
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <MVAFilter+0xd4>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <MVAFilter+0xd8>)
 8001704:	8a1b      	ldrh	r3, [r3, #16]
 8001706:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800170a:	33ff      	adds	r3, #255	; 0xff
 800170c:	429a      	cmp	r2, r3
 800170e:	da08      	bge.n	8001722 <MVAFilter+0x2a>
		MV_sum += PT_dptr->SQF_val;
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <MVAFilter+0xd8>)
 8001712:	8a1a      	ldrh	r2, [r3, #16]
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <MVAFilter+0xd4>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	4413      	add	r3, r2
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <MVAFilter+0xd4>)
 800171e:	801a      	strh	r2, [r3, #0]
 8001720:	e003      	b.n	800172a <MVAFilter+0x32>
	else
		MV_sum = UINT16_MAX;
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <MVAFilter+0xd4>)
 8001724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001728:	801a      	strh	r2, [r3, #0]

	if (MV_sum > PT_dptr->MVA_buf[PT_dptr->MVA_pointer])
 800172a:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <MVAFilter+0xd8>)
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <MVAFilter+0xd8>)
 800172e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001732:	3344      	adds	r3, #68	; 0x44
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	88da      	ldrh	r2, [r3, #6]
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <MVAFilter+0xd4>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20e      	bcs.n	8001760 <MVAFilter+0x68>
		MV_sum -= PT_dptr->MVA_buf[PT_dptr->MVA_pointer];
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <MVAFilter+0xd4>)
 8001744:	881a      	ldrh	r2, [r3, #0]
 8001746:	4922      	ldr	r1, [pc, #136]	; (80017d0 <MVAFilter+0xd8>)
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <MVAFilter+0xd8>)
 800174a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800174e:	3344      	adds	r3, #68	; 0x44
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	440b      	add	r3, r1
 8001754:	88db      	ldrh	r3, [r3, #6]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MVAFilter+0xd4>)
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	e002      	b.n	8001766 <MVAFilter+0x6e>
	else
		MV_sum = 0;
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MVAFilter+0xd4>)
 8001762:	2200      	movs	r2, #0
 8001764:	801a      	strh	r2, [r3, #0]

	PT_dptr->MVA_buf[PT_dptr->MVA_pointer] = PT_dptr->SQF_val;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MVAFilter+0xd8>)
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <MVAFilter+0xd8>)
 800176a:	4919      	ldr	r1, [pc, #100]	; (80017d0 <MVAFilter+0xd8>)
 800176c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8001770:	4608      	mov	r0, r1
 8001772:	8a19      	ldrh	r1, [r3, #16]
 8001774:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	460a      	mov	r2, r1
 800177e:	80da      	strh	r2, [r3, #6]

	PT_dptr->MVA_val = MV_sum/(uint16_t) MVA_BUFFER_SIZE;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MVAFilter+0xd4>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MVAFilter+0xd8>)
 8001786:	4913      	ldr	r1, [pc, #76]	; (80017d4 <MVAFilter+0xdc>)
 8001788:	fba1 1303 	umull	r1, r3, r1, r3
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	b29b      	uxth	r3, r3
 8001790:	8253      	strh	r3, [r2, #18]

	if (PT_dptr->MVA_val > MVA_LIM_VAL)
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MVAFilter+0xd8>)
 8001794:	8a5b      	ldrh	r3, [r3, #18]
 8001796:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800179a:	d903      	bls.n	80017a4 <MVAFilter+0xac>
		PT_dptr->MVA_val = MVA_LIM_VAL;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MVAFilter+0xd8>)
 800179e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80017a2:	825a      	strh	r2, [r3, #18]

	if (++PT_dptr->MVA_pointer == MVA_BUFFER_SIZE) 
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <MVAFilter+0xd8>)
 80017a6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80017aa:	b292      	uxth	r2, r2
 80017ac:	3201      	adds	r2, #1
 80017ae:	b292      	uxth	r2, r2
 80017b0:	b212      	sxth	r2, r2
 80017b2:	809a      	strh	r2, [r3, #4]
 80017b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017b8:	2b1e      	cmp	r3, #30
 80017ba:	d102      	bne.n	80017c2 <MVAFilter+0xca>
		PT_dptr->MVA_pointer = 0;
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <MVAFilter+0xd8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	809a      	strh	r2, [r3, #4]
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	2000048e 	.word	0x2000048e
 80017d0:	20000380 	.word	0x20000380
 80017d4:	88888889 	.word	0x88888889

080017d8 <PeakDtcI>:
If the signal changes sign the value of the peak is asssumed ot be a peak.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
int16_t PeakDtcI(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
	int16_t p;
	// ---------- Local maxima or not --------- //
	if (PT_dptr->MVA_val <= Prev_val && Prev_val > Prev_Prev_val) {
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <PeakDtcI+0x4c>)
 80017e0:	8a5a      	ldrh	r2, [r3, #18]
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <PeakDtcI+0x50>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d809      	bhi.n	80017fe <PeakDtcI+0x26>
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <PeakDtcI+0x50>)
 80017ec:	881a      	ldrh	r2, [r3, #0]
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <PeakDtcI+0x54>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d903      	bls.n	80017fe <PeakDtcI+0x26>
		p = Prev_val;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <PeakDtcI+0x50>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	e001      	b.n	8001802 <PeakDtcI+0x2a>
	}
	else {
		p = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	80fb      	strh	r3, [r7, #6]
	}
	Prev_Prev_val = Prev_val;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <PeakDtcI+0x50>)
 8001804:	881a      	ldrh	r2, [r3, #0]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <PeakDtcI+0x54>)
 8001808:	801a      	strh	r2, [r3, #0]
	Prev_val = PT_dptr->MVA_val;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <PeakDtcI+0x4c>)
 800180c:	8a5a      	ldrh	r2, [r3, #18]
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <PeakDtcI+0x50>)
 8001810:	801a      	strh	r2, [r3, #0]

	return (p);
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000380 	.word	0x20000380
 8001828:	20000496 	.word	0x20000496
 800182c:	20000498 	.word	0x20000498

08001830 <PeakDtcDR>:
For T-wave discrimination see T-wave identification of the paper.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcDR(int16_t DR_sample)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 800183a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183e:	2b00      	cmp	r3, #0
 8001840:	da03      	bge.n	800184a <PeakDtcDR+0x1a>
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	425b      	negs	r3, r3
 8001846:	b29b      	uxth	r3, r3
 8001848:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valDR && Prev_valDR > Prev_Prev_valDR) {
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <PeakDtcDR+0x70>)
 800184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001850:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001854:	429a      	cmp	r2, r3
 8001856:	dc14      	bgt.n	8001882 <PeakDtcDR+0x52>
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <PeakDtcDR+0x70>)
 800185a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <PeakDtcDR+0x74>)
 8001860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001864:	429a      	cmp	r2, r3
 8001866:	dd0c      	ble.n	8001882 <PeakDtcDR+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valDR > Best_PeakDR) Best_PeakDR = Prev_valDR;
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <PeakDtcDR+0x70>)
 800186a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <PeakDtcDR+0x78>)
 8001870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001874:	429a      	cmp	r2, r3
 8001876:	dd04      	ble.n	8001882 <PeakDtcDR+0x52>
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <PeakDtcDR+0x70>)
 800187a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <PeakDtcDR+0x78>)
 8001880:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valDR = Prev_valDR;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <PeakDtcDR+0x70>)
 8001884:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <PeakDtcDR+0x74>)
 800188a:	801a      	strh	r2, [r3, #0]
	Prev_valDR = DR_sample;
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <PeakDtcDR+0x70>)
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	8013      	strh	r3, [r2, #0]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000470 	.word	0x20000470
 80018a4:	20000472 	.word	0x20000472
 80018a8:	20000474 	.word	0x20000474

080018ac <PeakDtcBP>:
against adaptive thresholds.
if x[n-1] <= x[n] > x[n+1], then x[n] is a peak.

**********************************************************************************/
void PeakDtcBP(int16_t DR_sample)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
	if (DR_sample < 0) DR_sample = -DR_sample;
 80018b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da03      	bge.n	80018c6 <PeakDtcBP+0x1a>
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	425b      	negs	r3, r3
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	80fb      	strh	r3, [r7, #6]
	// ---------- Local maxima or not --------- //
	if (DR_sample <= Prev_valBP && Prev_valBP > Prev_Prev_valBP) {
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <PeakDtcBP+0x70>)
 80018c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dc14      	bgt.n	80018fe <PeakDtcBP+0x52>
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <PeakDtcBP+0x70>)
 80018d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <PeakDtcBP+0x74>)
 80018dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dd0c      	ble.n	80018fe <PeakDtcBP+0x52>
		//-- For T-wave discrimination store the highest slope -- //
		if (Prev_valBP > Best_PeakBP) Best_PeakBP = Prev_valBP;
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <PeakDtcBP+0x70>)
 80018e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <PeakDtcBP+0x78>)
 80018ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dd04      	ble.n	80018fe <PeakDtcBP+0x52>
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <PeakDtcBP+0x70>)
 80018f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <PeakDtcBP+0x78>)
 80018fc:	801a      	strh	r2, [r3, #0]
	}
	Prev_Prev_valBP = Prev_valBP;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <PeakDtcBP+0x70>)
 8001900:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <PeakDtcBP+0x74>)
 8001906:	801a      	strh	r2, [r3, #0]
	Prev_valBP = DR_sample;
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <PeakDtcBP+0x70>)
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	8013      	strh	r3, [r2, #0]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000046a 	.word	0x2000046a
 8001920:	2000046c 	.word	0x2000046c
 8001924:	2000046e 	.word	0x2000046e

08001928 <UpdateRR>:
RR_High_Lim		= 1.16*RR_M = ((116/100) * RR_M) = RR_M + (4/25)*RR_M
RR_Missed_Lim	= 1.66*RR_M = ((166/100) * RR_M) = RR_M + (33/50)*RR_M

**********************************************************************************/
void UpdateRR(int16_t qrs)
{   
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
	// ---------- Update most 8 Recent RR mean Interval------------- //
	RR1_sum += qrs;
 8001932:	4b81      	ldr	r3, [pc, #516]	; (8001b38 <UpdateRR+0x210>)
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	b29a      	uxth	r2, r3
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4413      	add	r3, r2
 800193e:	b29b      	uxth	r3, r3
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b7d      	ldr	r3, [pc, #500]	; (8001b38 <UpdateRR+0x210>)
 8001944:	801a      	strh	r2, [r3, #0]
	RR1_sum -= PT_dptr->RR_AVRG1_buf[RR1_p];
 8001946:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <UpdateRR+0x210>)
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	b29a      	uxth	r2, r3
 800194e:	497b      	ldr	r1, [pc, #492]	; (8001b3c <UpdateRR+0x214>)
 8001950:	4b7b      	ldr	r3, [pc, #492]	; (8001b40 <UpdateRR+0x218>)
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	3364      	adds	r3, #100	; 0x64
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	440b      	add	r3, r1
 800195c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001960:	b29b      	uxth	r3, r3
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21a      	sxth	r2, r3
 8001968:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <UpdateRR+0x210>)
 800196a:	801a      	strh	r2, [r3, #0]

	PT_dptr->RR_AVRG1_buf[RR1_p] = qrs;
 800196c:	4a73      	ldr	r2, [pc, #460]	; (8001b3c <UpdateRR+0x214>)
 800196e:	4b74      	ldr	r3, [pc, #464]	; (8001b40 <UpdateRR+0x218>)
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	3364      	adds	r3, #100	; 0x64
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	805a      	strh	r2, [r3, #2]
	PT_dptr->Recent_RR_M = RR1_sum/RR_BUFFER_SIZE; 
 800197e:	4b6e      	ldr	r3, [pc, #440]	; (8001b38 <UpdateRR+0x210>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	4a6d      	ldr	r2, [pc, #436]	; (8001b3c <UpdateRR+0x214>)
 8001986:	2b00      	cmp	r3, #0
 8001988:	da00      	bge.n	800198c <UpdateRR+0x64>
 800198a:	3307      	adds	r3, #7
 800198c:	10db      	asrs	r3, r3, #3
 800198e:	b21b      	sxth	r3, r3
 8001990:	8113      	strh	r3, [r2, #8]
	if (++RR1_p == RR_BUFFER_SIZE) 
 8001992:	4b6b      	ldr	r3, [pc, #428]	; (8001b40 <UpdateRR+0x218>)
 8001994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001998:	b29b      	uxth	r3, r3
 800199a:	3301      	adds	r3, #1
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21a      	sxth	r2, r3
 80019a0:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <UpdateRR+0x218>)
 80019a2:	801a      	strh	r2, [r3, #0]
 80019a4:	4b66      	ldr	r3, [pc, #408]	; (8001b40 <UpdateRR+0x218>)
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d102      	bne.n	80019b4 <UpdateRR+0x8c>
		RR1_p = 0;
 80019ae:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <UpdateRR+0x218>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	801a      	strh	r2, [r3, #0]



	// ------ Update Selected Beat RR mean if qrs in range --------- //
	if (qrs >= PT_dptr->RR_Low_L && qrs <= PT_dptr->RR_High_L) {
 80019b4:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <UpdateRR+0x214>)
 80019b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80019ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019be:	429a      	cmp	r2, r3
 80019c0:	f2c0 808c 	blt.w	8001adc <UpdateRR+0x1b4>
 80019c4:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <UpdateRR+0x214>)
 80019c6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80019ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	f300 8084 	bgt.w	8001adc <UpdateRR+0x1b4>
		// ------ Update selective RR mean ----- //
		RR2_sum += qrs;
 80019d4:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <UpdateRR+0x21c>)
 80019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	4413      	add	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b57      	ldr	r3, [pc, #348]	; (8001b44 <UpdateRR+0x21c>)
 80019e6:	801a      	strh	r2, [r3, #0]
		RR2_sum -= PT_dptr->RR_AVRG2_buf[RR2_p];
 80019e8:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <UpdateRR+0x21c>)
 80019ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4952      	ldr	r1, [pc, #328]	; (8001b3c <UpdateRR+0x214>)
 80019f2:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <UpdateRR+0x220>)
 80019f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f8:	336c      	adds	r3, #108	; 0x6c
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	440b      	add	r3, r1
 80019fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	4b4e      	ldr	r3, [pc, #312]	; (8001b44 <UpdateRR+0x21c>)
 8001a0c:	801a      	strh	r2, [r3, #0]

		PT_dptr->RR_AVRG2_buf[RR2_p] = qrs;
 8001a0e:	4a4b      	ldr	r2, [pc, #300]	; (8001b3c <UpdateRR+0x214>)
 8001a10:	4b4d      	ldr	r3, [pc, #308]	; (8001b48 <UpdateRR+0x220>)
 8001a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a16:	336c      	adds	r3, #108	; 0x6c
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	88fa      	ldrh	r2, [r7, #6]
 8001a1e:	805a      	strh	r2, [r3, #2]
		PT_dptr->RR_M = RR2_sum / RR_BUFFER_SIZE;
 8001a20:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <UpdateRR+0x21c>)
 8001a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a26:	4a45      	ldr	r2, [pc, #276]	; (8001b3c <UpdateRR+0x214>)
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da00      	bge.n	8001a2e <UpdateRR+0x106>
 8001a2c:	3307      	adds	r3, #7
 8001a2e:	10db      	asrs	r3, r3, #3
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	8493      	strh	r3, [r2, #36]	; 0x24
		if (++RR2_p == RR_BUFFER_SIZE) 
 8001a34:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <UpdateRR+0x220>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <UpdateRR+0x220>)
 8001a44:	801a      	strh	r2, [r3, #0]
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <UpdateRR+0x220>)
 8001a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d102      	bne.n	8001a56 <UpdateRR+0x12e>
			RR2_p = 0;
 8001a50:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <UpdateRR+0x220>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	801a      	strh	r2, [r3, #0]

		// --------- Update Limits ------------ //
		PT_dptr->RR_Low_L = PT_dptr->Recent_RR_M - (PT_dptr->Recent_RR_M << 1) / 25;
 8001a56:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <UpdateRR+0x214>)
 8001a58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <UpdateRR+0x214>)
 8001a60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4939      	ldr	r1, [pc, #228]	; (8001b4c <UpdateRR+0x224>)
 8001a68:	fb81 0103 	smull	r0, r1, r1, r3
 8001a6c:	10c9      	asrs	r1, r1, #3
 8001a6e:	17db      	asrs	r3, r3, #31
 8001a70:	1a5b      	subs	r3, r3, r1
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <UpdateRR+0x214>)
 8001a7a:	b212      	sxth	r2, r2
 8001a7c:	84da      	strh	r2, [r3, #38]	; 0x26
		PT_dptr->RR_High_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M << 2) / 25;
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <UpdateRR+0x214>)
 8001a80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <UpdateRR+0x214>)
 8001a88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	492f      	ldr	r1, [pc, #188]	; (8001b4c <UpdateRR+0x224>)
 8001a90:	fb81 0103 	smull	r0, r1, r1, r3
 8001a94:	10c9      	asrs	r1, r1, #3
 8001a96:	17db      	asrs	r3, r3, #31
 8001a98:	1acb      	subs	r3, r1, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <UpdateRR+0x214>)
 8001aa2:	b212      	sxth	r2, r2
 8001aa4:	851a      	strh	r2, [r3, #40]	; 0x28
		PT_dptr->RR_Missed_L = PT_dptr->RR_M + (PT_dptr->RR_M * 33) / 50;
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <UpdateRR+0x214>)
 8001aa8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <UpdateRR+0x214>)
 8001ab0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	015b      	lsls	r3, r3, #5
 8001aba:	440b      	add	r3, r1
 8001abc:	4923      	ldr	r1, [pc, #140]	; (8001b4c <UpdateRR+0x224>)
 8001abe:	fb81 0103 	smull	r0, r1, r1, r3
 8001ac2:	1109      	asrs	r1, r1, #4
 8001ac4:	17db      	asrs	r3, r3, #31
 8001ac6:	1acb      	subs	r3, r1, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <UpdateRR+0x214>)
 8001ad0:	b212      	sxth	r2, r2
 8001ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->HR_State = REGULAR_HR;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <UpdateRR+0x214>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001ada:	e027      	b.n	8001b2c <UpdateRR+0x204>
	}
	// -------- Irregular heart-rate ---------- //
	else {
		PT_dptr->RR_Missed_L = PT_dptr->Recent_RR_M + (PT_dptr->Recent_RR_M * 33) / 50;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <UpdateRR+0x214>)
 8001ade:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <UpdateRR+0x214>)
 8001ae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aea:	4619      	mov	r1, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	440b      	add	r3, r1
 8001af2:	4916      	ldr	r1, [pc, #88]	; (8001b4c <UpdateRR+0x224>)
 8001af4:	fb81 0103 	smull	r0, r1, r1, r3
 8001af8:	1109      	asrs	r1, r1, #4
 8001afa:	17db      	asrs	r3, r3, #31
 8001afc:	1acb      	subs	r3, r1, r3
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <UpdateRR+0x214>)
 8001b06:	b212      	sxth	r2, r2
 8001b08:	855a      	strh	r2, [r3, #42]	; 0x2a
		PT_dptr->ThI1 >>= 1;
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <UpdateRR+0x214>)
 8001b0c:	8a9b      	ldrh	r3, [r3, #20]
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <UpdateRR+0x214>)
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	8293      	strh	r3, [r2, #20]
		PT_dptr->ThF1 >>= 1;
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <UpdateRR+0x214>)
 8001b18:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <UpdateRR+0x214>)
 8001b1e:	105b      	asrs	r3, r3, #1
 8001b20:	b21b      	sxth	r3, r3
 8001b22:	8393      	strh	r3, [r2, #28]
		PT_dptr->HR_State = IRREGULAR_HR;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <UpdateRR+0x214>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	859a      	strh	r2, [r3, #44]	; 0x2c
	}
	
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	2000047e 	.word	0x2000047e
 8001b3c:	20000380 	.word	0x20000380
 8001b40:	2000047a 	.word	0x2000047a
 8001b44:	20000480 	.word	0x20000480
 8001b48:	2000047c 	.word	0x2000047c
 8001b4c:	51eb851f 	.word	0x51eb851f

08001b50 <UpdateThI>:
Description: This function recursively updates the adaptive noise and signal thresholds in
the Integrated signal. Implements Eq 12-16.

**********************************************************************************/
void UpdateThI( uint16_t *PEAKI, int8_t NOISE_F)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d014      	beq.n	8001b8e <UpdateThI+0x3e>
		PT_dptr->NPKI -= PT_dptr->NPKI >> 3;
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <UpdateThI+0x9c>)
 8001b66:	8b1a      	ldrh	r2, [r3, #24]
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <UpdateThI+0x9c>)
 8001b6a:	8b1b      	ldrh	r3, [r3, #24]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	491e      	ldr	r1, [pc, #120]	; (8001bec <UpdateThI+0x9c>)
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	830b      	strh	r3, [r1, #24]
		PT_dptr->NPKI += *PEAKI >> 3;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <UpdateThI+0x9c>)
 8001b7a:	8b1a      	ldrh	r2, [r3, #24]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4919      	ldr	r1, [pc, #100]	; (8001bec <UpdateThI+0x9c>)
 8001b86:	4413      	add	r3, r2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	830b      	strh	r3, [r1, #24]
 8001b8c:	e013      	b.n	8001bb6 <UpdateThI+0x66>
	}
	else {
		PT_dptr->SPKI -= PT_dptr->SPKI >> 3;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <UpdateThI+0x9c>)
 8001b90:	8ada      	ldrh	r2, [r3, #22]
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <UpdateThI+0x9c>)
 8001b94:	8adb      	ldrh	r3, [r3, #22]
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4914      	ldr	r1, [pc, #80]	; (8001bec <UpdateThI+0x9c>)
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	82cb      	strh	r3, [r1, #22]
		PT_dptr->SPKI += *PEAKI >> 3;
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <UpdateThI+0x9c>)
 8001ba4:	8ada      	ldrh	r2, [r3, #22]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	08db      	lsrs	r3, r3, #3
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	490f      	ldr	r1, [pc, #60]	; (8001bec <UpdateThI+0x9c>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	82cb      	strh	r3, [r1, #22]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThI1 = PT_dptr->NPKI + ((PT_dptr->SPKI - PT_dptr->NPKI) >> 2);
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <UpdateThI+0x9c>)
 8001bb8:	8b1a      	ldrh	r2, [r3, #24]
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <UpdateThI+0x9c>)
 8001bbc:	8adb      	ldrh	r3, [r3, #22]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <UpdateThI+0x9c>)
 8001bc2:	8b1b      	ldrh	r3, [r3, #24]
 8001bc4:	1acb      	subs	r3, r1, r3
 8001bc6:	109b      	asrs	r3, r3, #2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <UpdateThI+0x9c>)
 8001bcc:	4413      	add	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	828b      	strh	r3, [r1, #20]
	PT_dptr->ThI2 = PT_dptr->ThI1 >> 1;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <UpdateThI+0x9c>)
 8001bd4:	8a9b      	ldrh	r3, [r3, #20]
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <UpdateThI+0x9c>)
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	8353      	strh	r3, [r2, #26]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000380 	.word	0x20000380

08001bf0 <UpdateThF>:
Description: This function recursively updates the adaptive noise and signal thresholds in 
the BP signal. Implements Eq 17-21.

**********************************************************************************/
void UpdateThF(int16_t *PEAKF, int8_t NOISE_F)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
	// ------ Update Noise & Signal Estimate ------ //
	if (NOISE_F) {
 8001bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01e      	beq.n	8001c42 <UpdateThF+0x52>
		PT_dptr->NPKF -= PT_dptr->NPKF >> 3;
 8001c04:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <UpdateThF+0xd0>)
 8001c06:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <UpdateThF+0xd0>)
 8001c0e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c12:	10db      	asrs	r3, r3, #3
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <UpdateThF+0xd0>)
 8001c1e:	b212      	sxth	r2, r2
 8001c20:	841a      	strh	r2, [r3, #32]
		PT_dptr->NPKF += *PEAKF >> 3;
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <UpdateThF+0xd0>)
 8001c24:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	10db      	asrs	r3, r3, #3
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <UpdateThF+0xd0>)
 8001c3c:	b212      	sxth	r2, r2
 8001c3e:	841a      	strh	r2, [r3, #32]
 8001c40:	e01d      	b.n	8001c7e <UpdateThF+0x8e>
	}
	else {
		PT_dptr->SPKF -= PT_dptr->SPKF >> 3;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <UpdateThF+0xd0>)
 8001c44:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <UpdateThF+0xd0>)
 8001c4c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c50:	10db      	asrs	r3, r3, #3
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <UpdateThF+0xd0>)
 8001c5c:	b212      	sxth	r2, r2
 8001c5e:	83da      	strh	r2, [r3, #30]
		PT_dptr->SPKF += *PEAKF >> 3;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <UpdateThF+0xd0>)
 8001c62:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	10db      	asrs	r3, r3, #3
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <UpdateThF+0xd0>)
 8001c7a:	b212      	sxth	r2, r2
 8001c7c:	83da      	strh	r2, [r3, #30]
	}

	// --------- Update Thresholds ---------------- //
	PT_dptr->ThF1 = PT_dptr->NPKF + ((PT_dptr->SPKF - PT_dptr->NPKF) >> 2);
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <UpdateThF+0xd0>)
 8001c80:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <UpdateThF+0xd0>)
 8001c88:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <UpdateThF+0xd0>)
 8001c90:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c94:	1acb      	subs	r3, r1, r3
 8001c96:	109b      	asrs	r3, r3, #2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <UpdateThF+0xd0>)
 8001ca0:	b212      	sxth	r2, r2
 8001ca2:	839a      	strh	r2, [r3, #28]
	PT_dptr->ThF2 = PT_dptr->ThF1 >> 1;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <UpdateThF+0xd0>)
 8001ca6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <UpdateThF+0xd0>)
 8001cac:	105b      	asrs	r3, r3, #1
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	8453      	strh	r3, [r2, #34]	; 0x22
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000380 	.word	0x20000380

08001cc4 <PT_get_LPFilter_output>:
}



// ------Returns LP filter value ------ //
int16_t PT_get_LPFilter_output(void) {
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	return (PT_dptr->LPF_val);
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <PT_get_LPFilter_output+0x14>)
 8001cca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	20000380 	.word	0x20000380

08001cdc <PT_get_HPFilter_output>:

// ------Returns HP filter value ------ //
int16_t PT_get_HPFilter_output(void) {
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
	return (PT_dptr->HPF_val);
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <PT_get_HPFilter_output+0x14>)
 8001ce2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	20000380 	.word	0x20000380

08001cf4 <PT_get_DRFilter_output>:

// ------Returns Dr filter value ------ //
int16_t PT_get_DRFilter_output(void) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
	return (PT_dptr->DRF_val);
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <PT_get_DRFilter_output+0x14>)
 8001cfa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000380 	.word	0x20000380

08001d0c <PT_get_MVFilter_output>:

// ------Returns MVA filter value ------ //
uint16_t PT_get_MVFilter_output(void) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	return (PT_dptr->MVA_val);
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <PT_get_MVFilter_output+0x14>)
 8001d12:	8a5b      	ldrh	r3, [r3, #18]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000380 	.word	0x20000380

08001d24 <PT_get_SQRFilter_output>:

// ------Returns SQR filter value ------ //
uint16_t PT_get_SQRFilter_output(void) {
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	return (PT_dptr->SQF_val);
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <PT_get_SQRFilter_output+0x14>)
 8001d2a:	8a1b      	ldrh	r3, [r3, #16]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000380 	.word	0x20000380

08001d3c <PT_get_ThI1_output>:
	return (60 / (PT_dptr->RR_M / Fs));
}


// ------Returns the main threshold integrated signal Th value ------ //
uint16_t PT_get_ThI1_output(void) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
	return (PT_dptr->ThI1);
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <PT_get_ThI1_output+0x14>)
 8001d42:	8a9b      	ldrh	r3, [r3, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000380 	.word	0x20000380

08001d54 <PT_get_ThF1_output>:

// ------Returns the main threshold BP signal Th value ------ //
int16_t PT_get_ThF1_output(void) {
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
	return (PT_dptr->ThF1);
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <PT_get_ThF1_output+0x14>)
 8001d5a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	20000380 	.word	0x20000380

08001d6c <Rafael_init>:
	// qrs tells whether there was a detection or not.
	// regular tells whether the heart pace is regular or not.
	// prevRegular tells whether the heart beat was regular before the newest RR-interval was calculated.
	bool qrs, regular = true, prevRegular;
void Rafael_init()
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0


	// Initializing the RR averages
	for (i = 0; i < 8; i++)
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <Rafael_init+0xac>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e010      	b.n	8001d9a <Rafael_init+0x2e>
    {
        rr1[i] = 0;
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <Rafael_init+0xac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <Rafael_init+0xb0>)
 8001d7e:	2100      	movs	r1, #0
 8001d80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        rr2[i] = 0;
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <Rafael_init+0xac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a25      	ldr	r2, [pc, #148]	; (8001e20 <Rafael_init+0xb4>)
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 8; i++)
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <Rafael_init+0xac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <Rafael_init+0xac>)
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <Rafael_init+0xac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b07      	cmp	r3, #7
 8001da0:	d9ea      	bls.n	8001d78 <Rafael_init+0xc>
    }
	 rrlow = 0;
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <Rafael_init+0xb8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
	 rrhigh = 0;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <Rafael_init+0xbc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
	 rrmiss = 0;
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <Rafael_init+0xc0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
	 regular = true;
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <Rafael_init+0xc4>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
	 sample = 0;
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <Rafael_init+0xc8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
	 lastQRS = 0;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <Rafael_init+0xcc>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
	 lastSlope = 0;
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <Rafael_init+0xd0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
	 currentSlope = 0;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <Rafael_init+0xd4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
	 peak_i = 0;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <Rafael_init+0xd8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	801a      	strh	r2, [r3, #0]
	 peak_f = 0;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <Rafael_init+0xdc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	801a      	strh	r2, [r3, #0]
	 threshold_i1 = 0;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <Rafael_init+0xe0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	801a      	strh	r2, [r3, #0]
	 threshold_i2 = 0;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <Rafael_init+0xe4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	801a      	strh	r2, [r3, #0]
	 threshold_f1 = 0;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <Rafael_init+0xe8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	801a      	strh	r2, [r3, #0]
	 threshold_f2 = 0;
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <Rafael_init+0xec>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	801a      	strh	r2, [r3, #0]
	 spk_i = 0;
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <Rafael_init+0xf0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	801a      	strh	r2, [r3, #0]
	 spk_f = 0;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <Rafael_init+0xf4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	801a      	strh	r2, [r3, #0]
	 npk_i = 0;
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <Rafael_init+0xf8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	801a      	strh	r2, [r3, #0]
	 npk_f = 0;
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <Rafael_init+0xfc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	20002a74 	.word	0x20002a74
 8001e1c:	20002a20 	.word	0x20002a20
 8001e20:	20002a40 	.word	0x20002a40
 8001e24:	20002a68 	.word	0x20002a68
 8001e28:	20002a6c 	.word	0x20002a6c
 8001e2c:	20002a70 	.word	0x20002a70
 8001e30:	20000004 	.word	0x20000004
 8001e34:	20002a7c 	.word	0x20002a7c
 8001e38:	20002a80 	.word	0x20002a80
 8001e3c:	20002a84 	.word	0x20002a84
 8001e40:	20002a88 	.word	0x20002a88
 8001e44:	20002a90 	.word	0x20002a90
 8001e48:	20002a92 	.word	0x20002a92
 8001e4c:	20002a94 	.word	0x20002a94
 8001e50:	20002a96 	.word	0x20002a96
 8001e54:	20002a98 	.word	0x20002a98
 8001e58:	20002a9a 	.word	0x20002a9a
 8001e5c:	20002a9c 	.word	0x20002a9c
 8001e60:	20002a9e 	.word	0x20002a9e
 8001e64:	20002aa0 	.word	0x20002aa0
 8001e68:	20002aa2 	.word	0x20002aa2
 8001e6c:	00000000 	.word	0x00000000

08001e70 <Rafael_PanTompkins>:
    and updates the thresholds and averages until there are no more samples. More details both above and in
    shorter comments below.
*/
//UPDATe: I changed the way that it operates, now works like hooman650's implementation
int16_t Rafael_PanTompkins(dataType input)
{
 8001e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	80fb      	strh	r3, [r7, #6]

		int16_t result = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	81fb      	strh	r3, [r7, #14]
        // Test if the buffers are full.
        // If they are, shift them, discarding the oldest sample and adding the new one at the end.
        // Else, just put the newest sample in the next free position.
        // Update 'current' so that the program knows where's the newest sample.
		if (sample >= BUFFSIZE)
 8001e80:	4b5f      	ldr	r3, [pc, #380]	; (8002000 <Rafael_PanTompkins+0x190>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001e88:	d36b      	bcc.n	8001f62 <Rafael_PanTompkins+0xf2>
		{
			for (i = 0; i < BUFFSIZE - 1; i++)
 8001e8a:	4b5e      	ldr	r3, [pc, #376]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e05c      	b.n	8001f4c <Rafael_PanTompkins+0xdc>
			{
				RF_signal[i] =RF_signal[i+1];
 8001e92:	4b5c      	ldr	r3, [pc, #368]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	4b5a      	ldr	r3, [pc, #360]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	495a      	ldr	r1, [pc, #360]	; (8002008 <Rafael_PanTompkins+0x198>)
 8001e9e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001ea2:	4a59      	ldr	r2, [pc, #356]	; (8002008 <Rafael_PanTompkins+0x198>)
 8001ea4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_dcblock[i] = RF_dcblock[i+1];
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	4b55      	ldr	r3, [pc, #340]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4956      	ldr	r1, [pc, #344]	; (800200c <Rafael_PanTompkins+0x19c>)
 8001eb4:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001eb8:	4a54      	ldr	r2, [pc, #336]	; (800200c <Rafael_PanTompkins+0x19c>)
 8001eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_lowpass[i] = RF_lowpass[i+1];
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4951      	ldr	r1, [pc, #324]	; (8002010 <Rafael_PanTompkins+0x1a0>)
 8001eca:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001ece:	4a50      	ldr	r2, [pc, #320]	; (8002010 <Rafael_PanTompkins+0x1a0>)
 8001ed0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_highpass[i] = RF_highpass[i+1];
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	494d      	ldr	r1, [pc, #308]	; (8002014 <Rafael_PanTompkins+0x1a4>)
 8001ee0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001ee4:	4a4b      	ldr	r2, [pc, #300]	; (8002014 <Rafael_PanTompkins+0x1a4>)
 8001ee6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_derivative[i] = RF_derivative[i+1];
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	4b44      	ldr	r3, [pc, #272]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4948      	ldr	r1, [pc, #288]	; (8002018 <Rafael_PanTompkins+0x1a8>)
 8001ef6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001efa:	4a47      	ldr	r2, [pc, #284]	; (8002018 <Rafael_PanTompkins+0x1a8>)
 8001efc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_squared[i] = RF_squared[i+1];
 8001f00:	4b40      	ldr	r3, [pc, #256]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4944      	ldr	r1, [pc, #272]	; (800201c <Rafael_PanTompkins+0x1ac>)
 8001f0c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001f10:	4a42      	ldr	r2, [pc, #264]	; (800201c <Rafael_PanTompkins+0x1ac>)
 8001f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_integral[i] = RF_integral[i+1];
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	493f      	ldr	r1, [pc, #252]	; (8002020 <Rafael_PanTompkins+0x1b0>)
 8001f22:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001f26:	4a3e      	ldr	r2, [pc, #248]	; (8002020 <Rafael_PanTompkins+0x1b0>)
 8001f28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				RF_outputSignal[i] = RF_outputSignal[i+1];
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	493b      	ldr	r1, [pc, #236]	; (8002024 <Rafael_PanTompkins+0x1b4>)
 8001f38:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001f3c:	4a39      	ldr	r2, [pc, #228]	; (8002024 <Rafael_PanTompkins+0x1b4>)
 8001f3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i = 0; i < BUFFSIZE - 1; i++)
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <Rafael_PanTompkins+0x194>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f240 2256 	movw	r2, #598	; 0x256
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d99c      	bls.n	8001e92 <Rafael_PanTompkins+0x22>
			}
			current = BUFFSIZE - 1;
 8001f58:	4b33      	ldr	r3, [pc, #204]	; (8002028 <Rafael_PanTompkins+0x1b8>)
 8001f5a:	f240 2257 	movw	r2, #599	; 0x257
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e004      	b.n	8001f6c <Rafael_PanTompkins+0xfc>
		}
		else
		{
			current = sample;
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <Rafael_PanTompkins+0x190>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <Rafael_PanTompkins+0x1b8>)
 8001f6a:	601a      	str	r2, [r3, #0]
		}
		RF_signal[current] = input;
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <Rafael_PanTompkins+0x1b8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4925      	ldr	r1, [pc, #148]	; (8002008 <Rafael_PanTompkins+0x198>)
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		// If no sample was read, stop processing!
		//if (signal[current] == NOSAMPLE)
		//	break;
		sample++; // Update sample counter
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <Rafael_PanTompkins+0x190>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	4a20      	ldr	r2, [pc, #128]	; (8002000 <Rafael_PanTompkins+0x190>)
 8001f80:	6013      	str	r3, [r2, #0]

		// DC Block filter
		// This was not proposed on the original paper.
		// It is not necessary and can be removed if your sensor or database has no DC noise.
		if (current >= 1)
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <Rafael_PanTompkins+0x1b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	dd50      	ble.n	800202c <Rafael_PanTompkins+0x1bc>
			RF_dcblock[current] = RF_signal[current] - RF_signal[current-1] + 0.995*RF_dcblock[current-1];
 8001f8a:	4b27      	ldr	r3, [pc, #156]	; (8002028 <Rafael_PanTompkins+0x1b8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <Rafael_PanTompkins+0x198>)
 8001f90:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f94:	4619      	mov	r1, r3
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <Rafael_PanTompkins+0x1b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <Rafael_PanTompkins+0x198>)
 8001f9e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fa2:	1acb      	subs	r3, r1, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fa95 	bl	80004d4 <__aeabi_i2d>
 8001faa:	4604      	mov	r4, r0
 8001fac:	460d      	mov	r5, r1
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <Rafael_PanTompkins+0x1b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	4a15      	ldr	r2, [pc, #84]	; (800200c <Rafael_PanTompkins+0x19c>)
 8001fb6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fa8a 	bl	80004d4 <__aeabi_i2d>
 8001fc0:	a30d      	add	r3, pc, #52	; (adr r3, 8001ff8 <Rafael_PanTompkins+0x188>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe faef 	bl	80005a8 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	f7fe f933 	bl	800023c <__adddf3>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4913      	ldr	r1, [pc, #76]	; (8002028 <Rafael_PanTompkins+0x1b8>)
 8001fdc:	680c      	ldr	r4, [r1, #0]
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fd91 	bl	8000b08 <__aeabi_d2iz>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <Rafael_PanTompkins+0x19c>)
 8001fec:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001ff0:	e022      	b.n	8002038 <Rafael_PanTompkins+0x1c8>
 8001ff2:	bf00      	nop
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	3d70a3d7 	.word	0x3d70a3d7
 8001ffc:	3fefd70a 	.word	0x3fefd70a
 8002000:	20002a7c 	.word	0x20002a7c
 8002004:	20002a74 	.word	0x20002a74
 8002008:	200004a0 	.word	0x200004a0
 800200c:	20000950 	.word	0x20000950
 8002010:	20000e00 	.word	0x20000e00
 8002014:	200012b0 	.word	0x200012b0
 8002018:	20001760 	.word	0x20001760
 800201c:	20001c10 	.word	0x20001c10
 8002020:	200020c0 	.word	0x200020c0
 8002024:	20002570 	.word	0x20002570
 8002028:	20002a8c 	.word	0x20002a8c
		else
			RF_dcblock[current] = 0;
 800202c:	4b8a      	ldr	r3, [pc, #552]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a8a      	ldr	r2, [pc, #552]	; (800225c <Rafael_PanTompkins+0x3ec>)
 8002032:	2100      	movs	r1, #0
 8002034:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// Low Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 2y(nT - T) - y(nT - 2T) + x(nT) - 2x(nT - 6T) + x(nT - 12T)
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_lowpass[current] = RF_dcblock[current];
 8002038:	4b87      	ldr	r3, [pc, #540]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b86      	ldr	r3, [pc, #536]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4986      	ldr	r1, [pc, #536]	; (800225c <Rafael_PanTompkins+0x3ec>)
 8002042:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002046:	4a86      	ldr	r2, [pc, #536]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 8002048:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 800204c:	4b82      	ldr	r3, [pc, #520]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	dd16      	ble.n	8002082 <Rafael_PanTompkins+0x212>
			RF_lowpass[current] += 2*RF_lowpass[current-1];
 8002054:	4b80      	ldr	r3, [pc, #512]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a81      	ldr	r2, [pc, #516]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 800205a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b7d      	ldr	r3, [pc, #500]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	497e      	ldr	r1, [pc, #504]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 8002068:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800206c:	b29b      	uxth	r3, r3
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	b29b      	uxth	r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b78      	ldr	r3, [pc, #480]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b211      	sxth	r1, r2
 800207c:	4a78      	ldr	r2, [pc, #480]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 800207e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 2)
 8002082:	4b75      	ldr	r3, [pc, #468]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	dd14      	ble.n	80020b4 <Rafael_PanTompkins+0x244>
			RF_lowpass[current] -= RF_lowpass[current-2];
 800208a:	4b73      	ldr	r3, [pc, #460]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a74      	ldr	r2, [pc, #464]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 8002090:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b70      	ldr	r3, [pc, #448]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3b02      	subs	r3, #2
 800209c:	4970      	ldr	r1, [pc, #448]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 800209e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b6b      	ldr	r3, [pc, #428]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b211      	sxth	r1, r2
 80020ae:	4a6c      	ldr	r2, [pc, #432]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 80020b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 6)
 80020b4:	4b68      	ldr	r3, [pc, #416]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	dd16      	ble.n	80020ea <Rafael_PanTompkins+0x27a>
			RF_lowpass[current] -= 2*RF_dcblock[current-6];
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a67      	ldr	r2, [pc, #412]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 80020c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b63      	ldr	r3, [pc, #396]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3b06      	subs	r3, #6
 80020ce:	4963      	ldr	r1, [pc, #396]	; (800225c <Rafael_PanTompkins+0x3ec>)
 80020d0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	b29b      	uxth	r3, r3
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	b29a      	uxth	r2, r3
 80020de:	4b5e      	ldr	r3, [pc, #376]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	b211      	sxth	r1, r2
 80020e4:	4a5e      	ldr	r2, [pc, #376]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 80020e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 12)
 80020ea:	4b5b      	ldr	r3, [pc, #364]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b0b      	cmp	r3, #11
 80020f0:	dd14      	ble.n	800211c <Rafael_PanTompkins+0x2ac>
			RF_lowpass[current] += RF_dcblock[current-12];
 80020f2:	4b59      	ldr	r3, [pc, #356]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a5a      	ldr	r2, [pc, #360]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 80020f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b56      	ldr	r3, [pc, #344]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3b0c      	subs	r3, #12
 8002104:	4955      	ldr	r1, [pc, #340]	; (800225c <Rafael_PanTompkins+0x3ec>)
 8002106:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	b29a      	uxth	r2, r3
 8002110:	4b51      	ldr	r3, [pc, #324]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b211      	sxth	r1, r2
 8002116:	4a52      	ldr	r2, [pc, #328]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 8002118:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// High Pass filter
		// Implemented as proposed by the original paper.
		// y(nT) = 32x(nT - 16T) - [y(nT - T) + x(nT) - x(nT - 32T)]
		// Can be removed if your signal was previously filtered, or replaced by a different filter.
		RF_highpass[current] = -RF_lowpass[current];
 800211c:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a4f      	ldr	r2, [pc, #316]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 8002122:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002126:	b29b      	uxth	r3, r3
 8002128:	425b      	negs	r3, r3
 800212a:	b29a      	uxth	r2, r3
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b211      	sxth	r1, r2
 8002132:	4a4c      	ldr	r2, [pc, #304]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 8002134:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 1)
 8002138:	4b47      	ldr	r3, [pc, #284]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	dd14      	ble.n	800216a <Rafael_PanTompkins+0x2fa>
			RF_highpass[current] -= RF_highpass[current-1];
 8002140:	4b45      	ldr	r3, [pc, #276]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a47      	ldr	r2, [pc, #284]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 8002146:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b42      	ldr	r3, [pc, #264]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3b01      	subs	r3, #1
 8002152:	4944      	ldr	r1, [pc, #272]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 8002154:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002158:	b29b      	uxth	r3, r3
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b3e      	ldr	r3, [pc, #248]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b211      	sxth	r1, r2
 8002164:	4a3f      	ldr	r2, [pc, #252]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 8002166:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 16)
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	dd16      	ble.n	80021a0 <Rafael_PanTompkins+0x330>
			RF_highpass[current] += 32*RF_lowpass[current-16];
 8002172:	4b39      	ldr	r3, [pc, #228]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a3b      	ldr	r2, [pc, #236]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 8002178:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800217c:	b29a      	uxth	r2, r3
 800217e:	4b36      	ldr	r3, [pc, #216]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3b10      	subs	r3, #16
 8002184:	4936      	ldr	r1, [pc, #216]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 8002186:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800218a:	b29b      	uxth	r3, r3
 800218c:	015b      	lsls	r3, r3, #5
 800218e:	b29b      	uxth	r3, r3
 8002190:	4413      	add	r3, r2
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b30      	ldr	r3, [pc, #192]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b211      	sxth	r1, r2
 800219a:	4a32      	ldr	r2, [pc, #200]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 800219c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current >= 32)
 80021a0:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b1f      	cmp	r3, #31
 80021a6:	dd14      	ble.n	80021d2 <Rafael_PanTompkins+0x362>
			RF_highpass[current] += RF_lowpass[current-32];
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2d      	ldr	r2, [pc, #180]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 80021ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3b20      	subs	r3, #32
 80021ba:	4929      	ldr	r1, [pc, #164]	; (8002260 <Rafael_PanTompkins+0x3f0>)
 80021bc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b211      	sxth	r1, r2
 80021cc:	4a25      	ldr	r2, [pc, #148]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 80021ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Derivative filter
		// This is an alternative implementation, the central difference method.
		// f'(a) = [f(a+h) - f(a-h)]/2h
		// The original formula used by Pan-Tompkins was:
		// y(nT) = (1/8T)[-x(nT - 2T) - 2x(nT - T) + 2x(nT + T) + x(nT + 2T)]
		RF_derivative[current] = RF_highpass[current];
 80021d2:	4b21      	ldr	r3, [pc, #132]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4922      	ldr	r1, [pc, #136]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 80021dc:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <Rafael_PanTompkins+0x3f8>)
 80021e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (current > 0)
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	dd14      	ble.n	8002218 <Rafael_PanTompkins+0x3a8>
			RF_derivative[current] -= RF_highpass[current-1];
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <Rafael_PanTompkins+0x3f8>)
 80021f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3b01      	subs	r3, #1
 8002200:	4918      	ldr	r1, [pc, #96]	; (8002264 <Rafael_PanTompkins+0x3f4>)
 8002202:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002206:	b29b      	uxth	r3, r3
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b211      	sxth	r1, r2
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <Rafael_PanTompkins+0x3f8>)
 8002214:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// This just squares the derivative, to get rid of negative values and emphasize high frequencies.
		// y(nT) = [x(nT)]^2.
		RF_squared[current] = RF_derivative[current]*RF_derivative[current];
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <Rafael_PanTompkins+0x3f8>)
 800221e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	490f      	ldr	r1, [pc, #60]	; (8002268 <Rafael_PanTompkins+0x3f8>)
 800222a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800222e:	b29b      	uxth	r3, r3
 8002230:	fb12 f303 	smulbb	r3, r2, r3
 8002234:	b29a      	uxth	r2, r3
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b211      	sxth	r1, r2
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <Rafael_PanTompkins+0x3fc>)
 800223e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Moving-Window Integration
		// Implemented as proposed by the original paper.
		// y(nT) = (1/N)[x(nT - (N - 1)T) + x(nT - (N - 2)T) + ... x(nT)]
		// WINDOWSIZE, in samples, must be defined so that the window is ~150ms.

		RF_integral[current] = 0;
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <Rafael_PanTompkins+0x3e8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <Rafael_PanTompkins+0x400>)
 8002248:	2100      	movs	r1, #0
 800224a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <Rafael_PanTompkins+0x404>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e035      	b.n	80022c2 <Rafael_PanTompkins+0x452>
 8002256:	bf00      	nop
 8002258:	20002a8c 	.word	0x20002a8c
 800225c:	20000950 	.word	0x20000950
 8002260:	20000e00 	.word	0x20000e00
 8002264:	200012b0 	.word	0x200012b0
 8002268:	20001760 	.word	0x20001760
 800226c:	20001c10 	.word	0x20001c10
 8002270:	200020c0 	.word	0x200020c0
 8002274:	20002a74 	.word	0x20002a74
		{
			if (current >= (dataType)i)
 8002278:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <Rafael_PanTompkins+0x584>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b21b      	sxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	4b5d      	ldr	r3, [pc, #372]	; (80023f8 <Rafael_PanTompkins+0x588>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	dc21      	bgt.n	80022cc <Rafael_PanTompkins+0x45c>
				RF_integral[current] += RF_squared[current - i];
 8002288:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <Rafael_PanTompkins+0x588>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a5b      	ldr	r2, [pc, #364]	; (80023fc <Rafael_PanTompkins+0x58c>)
 800228e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002292:	b29a      	uxth	r2, r3
 8002294:	4b58      	ldr	r3, [pc, #352]	; (80023f8 <Rafael_PanTompkins+0x588>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <Rafael_PanTompkins+0x584>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	1acb      	subs	r3, r1, r3
 80022a0:	4957      	ldr	r1, [pc, #348]	; (8002400 <Rafael_PanTompkins+0x590>)
 80022a2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	4b52      	ldr	r3, [pc, #328]	; (80023f8 <Rafael_PanTompkins+0x588>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b211      	sxth	r1, r2
 80022b2:	4a52      	ldr	r2, [pc, #328]	; (80023fc <Rafael_PanTompkins+0x58c>)
 80022b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < WINDOWSIZE; i++)
 80022b8:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <Rafael_PanTompkins+0x584>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	4a4d      	ldr	r2, [pc, #308]	; (80023f4 <Rafael_PanTompkins+0x584>)
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <Rafael_PanTompkins+0x584>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b13      	cmp	r3, #19
 80022c8:	d9d6      	bls.n	8002278 <Rafael_PanTompkins+0x408>
 80022ca:	e000      	b.n	80022ce <Rafael_PanTompkins+0x45e>
			else
				break;
 80022cc:	bf00      	nop
		}
		RF_integral[current] /= (dataType)i;
 80022ce:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <Rafael_PanTompkins+0x588>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a4a      	ldr	r2, [pc, #296]	; (80023fc <Rafael_PanTompkins+0x58c>)
 80022d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <Rafael_PanTompkins+0x584>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b21b      	sxth	r3, r3
 80022e0:	fb92 f2f3 	sdiv	r2, r2, r3
 80022e4:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <Rafael_PanTompkins+0x588>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b211      	sxth	r1, r2
 80022ea:	4a44      	ldr	r2, [pc, #272]	; (80023fc <Rafael_PanTompkins+0x58c>)
 80022ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		qrs = false;
 80022f0:	4b44      	ldr	r3, [pc, #272]	; (8002404 <Rafael_PanTompkins+0x594>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]

		// If the current signal is above one of the thresholds (integral or filtered signal), it's a peak candidate.
        if (RF_integral[current] >= threshold_i1 || RF_highpass[current] >= threshold_f1)
 80022f6:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <Rafael_PanTompkins+0x588>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a40      	ldr	r2, [pc, #256]	; (80023fc <Rafael_PanTompkins+0x58c>)
 80022fc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002300:	4b41      	ldr	r3, [pc, #260]	; (8002408 <Rafael_PanTompkins+0x598>)
 8002302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002306:	429a      	cmp	r2, r3
 8002308:	da09      	bge.n	800231e <Rafael_PanTompkins+0x4ae>
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <Rafael_PanTompkins+0x588>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a3f      	ldr	r2, [pc, #252]	; (800240c <Rafael_PanTompkins+0x59c>)
 8002310:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002314:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <Rafael_PanTompkins+0x5a0>)
 8002316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231a:	429a      	cmp	r2, r3
 800231c:	db0d      	blt.n	800233a <Rafael_PanTompkins+0x4ca>
        {
            peak_i = RF_integral[current];
 800231e:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <Rafael_PanTompkins+0x588>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a36      	ldr	r2, [pc, #216]	; (80023fc <Rafael_PanTompkins+0x58c>)
 8002324:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002328:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <Rafael_PanTompkins+0x5a4>)
 800232a:	801a      	strh	r2, [r3, #0]
            peak_f = RF_highpass[current];
 800232c:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <Rafael_PanTompkins+0x588>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a36      	ldr	r2, [pc, #216]	; (800240c <Rafael_PanTompkins+0x59c>)
 8002332:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <Rafael_PanTompkins+0x5a8>)
 8002338:	801a      	strh	r2, [r3, #0]
        }

		// If both the integral and the signal are above their thresholds, they're probably signal peaks.
		if ((RF_integral[current] >= threshold_i1) && (RF_highpass[current] >= threshold_f1))
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <Rafael_PanTompkins+0x588>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2f      	ldr	r2, [pc, #188]	; (80023fc <Rafael_PanTompkins+0x58c>)
 8002340:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002344:	4b30      	ldr	r3, [pc, #192]	; (8002408 <Rafael_PanTompkins+0x598>)
 8002346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234a:	429a      	cmp	r2, r3
 800234c:	f2c0 837b 	blt.w	8002a46 <Rafael_PanTompkins+0xbd6>
 8002350:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <Rafael_PanTompkins+0x588>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a2d      	ldr	r2, [pc, #180]	; (800240c <Rafael_PanTompkins+0x59c>)
 8002356:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <Rafael_PanTompkins+0x5a0>)
 800235c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002360:	429a      	cmp	r2, r3
 8002362:	f2c0 8370 	blt.w	8002a46 <Rafael_PanTompkins+0xbd6>
		{
			// There's a 200ms latency. If the new peak respects this condition, we can keep testing.
			if (sample > lastQRS + FS/5)
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <Rafael_PanTompkins+0x5ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <Rafael_PanTompkins+0x5b0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	f080 827e 	bcs.w	8002874 <Rafael_PanTompkins+0xa04>
			{
			    // If it respects the 200ms latency, but it doesn't respect the 360ms latency, we check the slope.
				if (sample <= lastQRS + (long unsigned int)(0.36*FS))
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <Rafael_PanTompkins+0x5ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f103 0281 	add.w	r2, r3, #129	; 0x81
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <Rafael_PanTompkins+0x5b0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	f0c0 812b 	bcc.w	80025e0 <Rafael_PanTompkins+0x770>
				{
				    // The squared slope is "M" shaped. So we have to check nearby samples to make sure we're really looking
				    // at its peak value, rather than a low one.
				    currentSlope = 0;
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <Rafael_PanTompkins+0x5b4>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <Rafael_PanTompkins+0x588>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3b0a      	subs	r3, #10
 8002396:	461a      	mov	r2, r3
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <Rafael_PanTompkins+0x5b8>)
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e016      	b.n	80023cc <Rafael_PanTompkins+0x55c>
                        if (RF_squared[j] > currentSlope)
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <Rafael_PanTompkins+0x5b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <Rafael_PanTompkins+0x590>)
 80023a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <Rafael_PanTompkins+0x5b4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d907      	bls.n	80023c2 <Rafael_PanTompkins+0x552>
                            currentSlope = RF_squared[j];
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <Rafael_PanTompkins+0x5b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <Rafael_PanTompkins+0x590>)
 80023b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <Rafael_PanTompkins+0x5b4>)
 80023c0:	601a      	str	r2, [r3, #0]
				    for (j = current - 10; j <= current; j++)
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <Rafael_PanTompkins+0x5b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3301      	adds	r3, #1
 80023c8:	4a17      	ldr	r2, [pc, #92]	; (8002428 <Rafael_PanTompkins+0x5b8>)
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <Rafael_PanTompkins+0x5b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <Rafael_PanTompkins+0x588>)
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d9e2      	bls.n	800239e <Rafael_PanTompkins+0x52e>

				    if (currentSlope <= (dataType)(lastSlope/2))
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <Rafael_PanTompkins+0x5bc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	b21b      	sxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <Rafael_PanTompkins+0x5b4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d322      	bcc.n	8002430 <Rafael_PanTompkins+0x5c0>
                    {
                        qrs = false;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <Rafael_PanTompkins+0x594>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e329      	b.n	8002a46 <Rafael_PanTompkins+0xbd6>
 80023f2:	bf00      	nop
 80023f4:	20002a74 	.word	0x20002a74
 80023f8:	20002a8c 	.word	0x20002a8c
 80023fc:	200020c0 	.word	0x200020c0
 8002400:	20001c10 	.word	0x20001c10
 8002404:	20002aa4 	.word	0x20002aa4
 8002408:	20002a94 	.word	0x20002a94
 800240c:	200012b0 	.word	0x200012b0
 8002410:	20002a98 	.word	0x20002a98
 8002414:	20002a90 	.word	0x20002a90
 8002418:	20002a92 	.word	0x20002a92
 800241c:	20002a80 	.word	0x20002a80
 8002420:	20002a7c 	.word	0x20002a7c
 8002424:	20002a88 	.word	0x20002a88
 8002428:	20002a78 	.word	0x20002a78
 800242c:	20002a84 	.word	0x20002a84
                    }

                    else
                    {
                        spk_i = 0.125*peak_i + 0.875*spk_i;
 8002430:	4b70      	ldr	r3, [pc, #448]	; (80025f4 <Rafael_PanTompkins+0x784>)
 8002432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f84c 	bl	80004d4 <__aeabi_i2d>
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002444:	f7fe f8b0 	bl	80005a8 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4614      	mov	r4, r2
 800244e:	461d      	mov	r5, r3
 8002450:	4b69      	ldr	r3, [pc, #420]	; (80025f8 <Rafael_PanTompkins+0x788>)
 8002452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f83c 	bl	80004d4 <__aeabi_i2d>
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	4b66      	ldr	r3, [pc, #408]	; (80025fc <Rafael_PanTompkins+0x78c>)
 8002462:	f7fe f8a1 	bl	80005a8 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fd fee5 	bl	800023c <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fb45 	bl	8000b08 <__aeabi_d2iz>
 800247e:	4603      	mov	r3, r0
 8002480:	b21a      	sxth	r2, r3
 8002482:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <Rafael_PanTompkins+0x788>)
 8002484:	801a      	strh	r2, [r3, #0]
                        threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002486:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <Rafael_PanTompkins+0x790>)
 8002488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f821 	bl	80004d4 <__aeabi_i2d>
 8002492:	4604      	mov	r4, r0
 8002494:	460d      	mov	r5, r1
 8002496:	4b58      	ldr	r3, [pc, #352]	; (80025f8 <Rafael_PanTompkins+0x788>)
 8002498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800249c:	461a      	mov	r2, r3
 800249e:	4b58      	ldr	r3, [pc, #352]	; (8002600 <Rafael_PanTompkins+0x790>)
 80024a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe f814 	bl	80004d4 <__aeabi_i2d>
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	4b54      	ldr	r3, [pc, #336]	; (8002604 <Rafael_PanTompkins+0x794>)
 80024b2:	f7fe f879 	bl	80005a8 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f7fd febd 	bl	800023c <__adddf3>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7fe fb1d 	bl	8000b08 <__aeabi_d2iz>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	4b4d      	ldr	r3, [pc, #308]	; (8002608 <Rafael_PanTompkins+0x798>)
 80024d4:	801a      	strh	r2, [r3, #0]
                        threshold_i2 = 0.5*threshold_i1;
 80024d6:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <Rafael_PanTompkins+0x798>)
 80024d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd fff9 	bl	80004d4 <__aeabi_i2d>
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	4b49      	ldr	r3, [pc, #292]	; (800260c <Rafael_PanTompkins+0x79c>)
 80024e8:	f7fe f85e 	bl	80005a8 <__aeabi_dmul>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fb08 	bl	8000b08 <__aeabi_d2iz>
 80024f8:	4603      	mov	r3, r0
 80024fa:	b21a      	sxth	r2, r3
 80024fc:	4b44      	ldr	r3, [pc, #272]	; (8002610 <Rafael_PanTompkins+0x7a0>)
 80024fe:	801a      	strh	r2, [r3, #0]

                        spk_f = 0.125*peak_f + 0.875*spk_f;
 8002500:	4b44      	ldr	r3, [pc, #272]	; (8002614 <Rafael_PanTompkins+0x7a4>)
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ffe4 	bl	80004d4 <__aeabi_i2d>
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002514:	f7fe f848 	bl	80005a8 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4614      	mov	r4, r2
 800251e:	461d      	mov	r5, r3
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <Rafael_PanTompkins+0x7a8>)
 8002522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fd ffd4 	bl	80004d4 <__aeabi_i2d>
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	4b32      	ldr	r3, [pc, #200]	; (80025fc <Rafael_PanTompkins+0x78c>)
 8002532:	f7fe f839 	bl	80005a8 <__aeabi_dmul>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4620      	mov	r0, r4
 800253c:	4629      	mov	r1, r5
 800253e:	f7fd fe7d 	bl	800023c <__adddf3>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7fe fadd 	bl	8000b08 <__aeabi_d2iz>
 800254e:	4603      	mov	r3, r0
 8002550:	b21a      	sxth	r2, r3
 8002552:	4b31      	ldr	r3, [pc, #196]	; (8002618 <Rafael_PanTompkins+0x7a8>)
 8002554:	801a      	strh	r2, [r3, #0]
                        threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <Rafael_PanTompkins+0x7ac>)
 8002558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ffb9 	bl	80004d4 <__aeabi_i2d>
 8002562:	4604      	mov	r4, r0
 8002564:	460d      	mov	r5, r1
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <Rafael_PanTompkins+0x7a8>)
 8002568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800256c:	461a      	mov	r2, r3
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <Rafael_PanTompkins+0x7ac>)
 8002570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ffac 	bl	80004d4 <__aeabi_i2d>
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <Rafael_PanTompkins+0x794>)
 8002582:	f7fe f811 	bl	80005a8 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4620      	mov	r0, r4
 800258c:	4629      	mov	r1, r5
 800258e:	f7fd fe55 	bl	800023c <__adddf3>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe fab5 	bl	8000b08 <__aeabi_d2iz>
 800259e:	4603      	mov	r3, r0
 80025a0:	b21a      	sxth	r2, r3
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <Rafael_PanTompkins+0x7b0>)
 80025a4:	801a      	strh	r2, [r3, #0]
                        threshold_f2 = 0.5*threshold_f1;
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <Rafael_PanTompkins+0x7b0>)
 80025a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ff91 	bl	80004d4 <__aeabi_i2d>
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <Rafael_PanTompkins+0x79c>)
 80025b8:	f7fd fff6 	bl	80005a8 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe faa0 	bl	8000b08 <__aeabi_d2iz>
 80025c8:	4603      	mov	r3, r0
 80025ca:	b21a      	sxth	r2, r3
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <Rafael_PanTompkins+0x7b4>)
 80025ce:	801a      	strh	r2, [r3, #0]

                        lastSlope = currentSlope;
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <Rafael_PanTompkins+0x7b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <Rafael_PanTompkins+0x7bc>)
 80025d6:	6013      	str	r3, [r2, #0]
                        qrs = true;
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <Rafael_PanTompkins+0x7c0>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e232      	b.n	8002a46 <Rafael_PanTompkins+0xbd6>
                    }
				}
				// If it was above both thresholds and respects both latency periods, it certainly is a R peak.
				else
				{
				    currentSlope = 0;
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <Rafael_PanTompkins+0x7b8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <Rafael_PanTompkins+0x7c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3b0a      	subs	r3, #10
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <Rafael_PanTompkins+0x7c8>)
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e03a      	b.n	800266a <Rafael_PanTompkins+0x7fa>
 80025f4:	20002a90 	.word	0x20002a90
 80025f8:	20002a9c 	.word	0x20002a9c
 80025fc:	3fec0000 	.word	0x3fec0000
 8002600:	20002aa0 	.word	0x20002aa0
 8002604:	3fd00000 	.word	0x3fd00000
 8002608:	20002a94 	.word	0x20002a94
 800260c:	3fe00000 	.word	0x3fe00000
 8002610:	20002a96 	.word	0x20002a96
 8002614:	20002a92 	.word	0x20002a92
 8002618:	20002a9e 	.word	0x20002a9e
 800261c:	20002aa2 	.word	0x20002aa2
 8002620:	20002a98 	.word	0x20002a98
 8002624:	20002a9a 	.word	0x20002a9a
 8002628:	20002a88 	.word	0x20002a88
 800262c:	20002a84 	.word	0x20002a84
 8002630:	20002aa4 	.word	0x20002aa4
 8002634:	20002a8c 	.word	0x20002a8c
 8002638:	20002a78 	.word	0x20002a78
                        if (RF_squared[j] > currentSlope)
 800263c:	4b7a      	ldr	r3, [pc, #488]	; (8002828 <Rafael_PanTompkins+0x9b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a7a      	ldr	r2, [pc, #488]	; (800282c <Rafael_PanTompkins+0x9bc>)
 8002642:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002646:	461a      	mov	r2, r3
 8002648:	4b79      	ldr	r3, [pc, #484]	; (8002830 <Rafael_PanTompkins+0x9c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d907      	bls.n	8002660 <Rafael_PanTompkins+0x7f0>
                            currentSlope = RF_squared[j];
 8002650:	4b75      	ldr	r3, [pc, #468]	; (8002828 <Rafael_PanTompkins+0x9b8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a75      	ldr	r2, [pc, #468]	; (800282c <Rafael_PanTompkins+0x9bc>)
 8002656:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800265a:	461a      	mov	r2, r3
 800265c:	4b74      	ldr	r3, [pc, #464]	; (8002830 <Rafael_PanTompkins+0x9c0>)
 800265e:	601a      	str	r2, [r3, #0]
                    for (j = current - 10; j <= current; j++)
 8002660:	4b71      	ldr	r3, [pc, #452]	; (8002828 <Rafael_PanTompkins+0x9b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	4a70      	ldr	r2, [pc, #448]	; (8002828 <Rafael_PanTompkins+0x9b8>)
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b6f      	ldr	r3, [pc, #444]	; (8002828 <Rafael_PanTompkins+0x9b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a71      	ldr	r2, [pc, #452]	; (8002834 <Rafael_PanTompkins+0x9c4>)
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4293      	cmp	r3, r2
 8002674:	d9e2      	bls.n	800263c <Rafael_PanTompkins+0x7cc>

                    spk_i = 0.125*peak_i + 0.875*spk_i;
 8002676:	4b70      	ldr	r3, [pc, #448]	; (8002838 <Rafael_PanTompkins+0x9c8>)
 8002678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff29 	bl	80004d4 <__aeabi_i2d>
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800268a:	f7fd ff8d 	bl	80005a8 <__aeabi_dmul>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4614      	mov	r4, r2
 8002694:	461d      	mov	r5, r3
 8002696:	4b69      	ldr	r3, [pc, #420]	; (800283c <Rafael_PanTompkins+0x9cc>)
 8002698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd ff19 	bl	80004d4 <__aeabi_i2d>
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	4b66      	ldr	r3, [pc, #408]	; (8002840 <Rafael_PanTompkins+0x9d0>)
 80026a8:	f7fd ff7e 	bl	80005a8 <__aeabi_dmul>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4620      	mov	r0, r4
 80026b2:	4629      	mov	r1, r5
 80026b4:	f7fd fdc2 	bl	800023c <__adddf3>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	f7fe fa22 	bl	8000b08 <__aeabi_d2iz>
 80026c4:	4603      	mov	r3, r0
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	4b5c      	ldr	r3, [pc, #368]	; (800283c <Rafael_PanTompkins+0x9cc>)
 80026ca:	801a      	strh	r2, [r3, #0]
                    threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80026cc:	4b5d      	ldr	r3, [pc, #372]	; (8002844 <Rafael_PanTompkins+0x9d4>)
 80026ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd fefe 	bl	80004d4 <__aeabi_i2d>
 80026d8:	4604      	mov	r4, r0
 80026da:	460d      	mov	r5, r1
 80026dc:	4b57      	ldr	r3, [pc, #348]	; (800283c <Rafael_PanTompkins+0x9cc>)
 80026de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b57      	ldr	r3, [pc, #348]	; (8002844 <Rafael_PanTompkins+0x9d4>)
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd fef1 	bl	80004d4 <__aeabi_i2d>
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	4b54      	ldr	r3, [pc, #336]	; (8002848 <Rafael_PanTompkins+0x9d8>)
 80026f8:	f7fd ff56 	bl	80005a8 <__aeabi_dmul>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4620      	mov	r0, r4
 8002702:	4629      	mov	r1, r5
 8002704:	f7fd fd9a 	bl	800023c <__adddf3>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe f9fa 	bl	8000b08 <__aeabi_d2iz>
 8002714:	4603      	mov	r3, r0
 8002716:	b21a      	sxth	r2, r3
 8002718:	4b4c      	ldr	r3, [pc, #304]	; (800284c <Rafael_PanTompkins+0x9dc>)
 800271a:	801a      	strh	r2, [r3, #0]
                    threshold_i2 = 0.5*threshold_i1;
 800271c:	4b4b      	ldr	r3, [pc, #300]	; (800284c <Rafael_PanTompkins+0x9dc>)
 800271e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd fed6 	bl	80004d4 <__aeabi_i2d>
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	4b48      	ldr	r3, [pc, #288]	; (8002850 <Rafael_PanTompkins+0x9e0>)
 800272e:	f7fd ff3b 	bl	80005a8 <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f7fe f9e5 	bl	8000b08 <__aeabi_d2iz>
 800273e:	4603      	mov	r3, r0
 8002740:	b21a      	sxth	r2, r3
 8002742:	4b44      	ldr	r3, [pc, #272]	; (8002854 <Rafael_PanTompkins+0x9e4>)
 8002744:	801a      	strh	r2, [r3, #0]

                    spk_f = 0.125*peak_f + 0.875*spk_f;
 8002746:	4b44      	ldr	r3, [pc, #272]	; (8002858 <Rafael_PanTompkins+0x9e8>)
 8002748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fec1 	bl	80004d4 <__aeabi_i2d>
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800275a:	f7fd ff25 	bl	80005a8 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4614      	mov	r4, r2
 8002764:	461d      	mov	r5, r3
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <Rafael_PanTompkins+0x9ec>)
 8002768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd feb1 	bl	80004d4 <__aeabi_i2d>
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	4b32      	ldr	r3, [pc, #200]	; (8002840 <Rafael_PanTompkins+0x9d0>)
 8002778:	f7fd ff16 	bl	80005a8 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4620      	mov	r0, r4
 8002782:	4629      	mov	r1, r5
 8002784:	f7fd fd5a 	bl	800023c <__adddf3>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	f7fe f9ba 	bl	8000b08 <__aeabi_d2iz>
 8002794:	4603      	mov	r3, r0
 8002796:	b21a      	sxth	r2, r3
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <Rafael_PanTompkins+0x9ec>)
 800279a:	801a      	strh	r2, [r3, #0]
                    threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 800279c:	4b30      	ldr	r3, [pc, #192]	; (8002860 <Rafael_PanTompkins+0x9f0>)
 800279e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd fe96 	bl	80004d4 <__aeabi_i2d>
 80027a8:	4604      	mov	r4, r0
 80027aa:	460d      	mov	r5, r1
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <Rafael_PanTompkins+0x9ec>)
 80027ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <Rafael_PanTompkins+0x9f0>)
 80027b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fe89 	bl	80004d4 <__aeabi_i2d>
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <Rafael_PanTompkins+0x9d8>)
 80027c8:	f7fd feee 	bl	80005a8 <__aeabi_dmul>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4620      	mov	r0, r4
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7fd fd32 	bl	800023c <__adddf3>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe f992 	bl	8000b08 <__aeabi_d2iz>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <Rafael_PanTompkins+0x9f4>)
 80027ea:	801a      	strh	r2, [r3, #0]
                    threshold_f2 = 0.5*threshold_f1;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <Rafael_PanTompkins+0x9f4>)
 80027ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fe6e 	bl	80004d4 <__aeabi_i2d>
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <Rafael_PanTompkins+0x9e0>)
 80027fe:	f7fd fed3 	bl	80005a8 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f7fe f97d 	bl	8000b08 <__aeabi_d2iz>
 800280e:	4603      	mov	r3, r0
 8002810:	b21a      	sxth	r2, r3
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <Rafael_PanTompkins+0x9f8>)
 8002814:	801a      	strh	r2, [r3, #0]

                    lastSlope = currentSlope;
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <Rafael_PanTompkins+0x9c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <Rafael_PanTompkins+0x9fc>)
 800281c:	6013      	str	r3, [r2, #0]
                    qrs = true;
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <Rafael_PanTompkins+0xa00>)
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e10f      	b.n	8002a46 <Rafael_PanTompkins+0xbd6>
 8002826:	bf00      	nop
 8002828:	20002a78 	.word	0x20002a78
 800282c:	20001c10 	.word	0x20001c10
 8002830:	20002a88 	.word	0x20002a88
 8002834:	20002a8c 	.word	0x20002a8c
 8002838:	20002a90 	.word	0x20002a90
 800283c:	20002a9c 	.word	0x20002a9c
 8002840:	3fec0000 	.word	0x3fec0000
 8002844:	20002aa0 	.word	0x20002aa0
 8002848:	3fd00000 	.word	0x3fd00000
 800284c:	20002a94 	.word	0x20002a94
 8002850:	3fe00000 	.word	0x3fe00000
 8002854:	20002a96 	.word	0x20002a96
 8002858:	20002a92 	.word	0x20002a92
 800285c:	20002a9e 	.word	0x20002a9e
 8002860:	20002aa2 	.word	0x20002aa2
 8002864:	20002a98 	.word	0x20002a98
 8002868:	20002a9a 	.word	0x20002a9a
 800286c:	20002a84 	.word	0x20002a84
 8002870:	20002aa4 	.word	0x20002aa4
				}
			}
			// If the new peak doesn't respect the 200ms latency, it's noise. Update thresholds and move on to the next sample.
			else
            {
                peak_i = RF_integral[current];
 8002874:	4ba7      	ldr	r3, [pc, #668]	; (8002b14 <Rafael_PanTompkins+0xca4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4aa7      	ldr	r2, [pc, #668]	; (8002b18 <Rafael_PanTompkins+0xca8>)
 800287a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800287e:	4ba7      	ldr	r3, [pc, #668]	; (8002b1c <Rafael_PanTompkins+0xcac>)
 8002880:	801a      	strh	r2, [r3, #0]
				npk_i = 0.125*peak_i + 0.875*npk_i;
 8002882:	4ba6      	ldr	r3, [pc, #664]	; (8002b1c <Rafael_PanTompkins+0xcac>)
 8002884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe23 	bl	80004d4 <__aeabi_i2d>
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002896:	f7fd fe87 	bl	80005a8 <__aeabi_dmul>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4614      	mov	r4, r2
 80028a0:	461d      	mov	r5, r3
 80028a2:	4b9f      	ldr	r3, [pc, #636]	; (8002b20 <Rafael_PanTompkins+0xcb0>)
 80028a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe13 	bl	80004d4 <__aeabi_i2d>
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	4b9c      	ldr	r3, [pc, #624]	; (8002b24 <Rafael_PanTompkins+0xcb4>)
 80028b4:	f7fd fe78 	bl	80005a8 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4620      	mov	r0, r4
 80028be:	4629      	mov	r1, r5
 80028c0:	f7fd fcbc 	bl	800023c <__adddf3>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7fe f91c 	bl	8000b08 <__aeabi_d2iz>
 80028d0:	4603      	mov	r3, r0
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	4b92      	ldr	r3, [pc, #584]	; (8002b20 <Rafael_PanTompkins+0xcb0>)
 80028d6:	801a      	strh	r2, [r3, #0]
				threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80028d8:	4b91      	ldr	r3, [pc, #580]	; (8002b20 <Rafael_PanTompkins+0xcb0>)
 80028da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fdf8 	bl	80004d4 <__aeabi_i2d>
 80028e4:	4604      	mov	r4, r0
 80028e6:	460d      	mov	r5, r1
 80028e8:	4b8f      	ldr	r3, [pc, #572]	; (8002b28 <Rafael_PanTompkins+0xcb8>)
 80028ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b8b      	ldr	r3, [pc, #556]	; (8002b20 <Rafael_PanTompkins+0xcb0>)
 80028f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fdeb 	bl	80004d4 <__aeabi_i2d>
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4b8a      	ldr	r3, [pc, #552]	; (8002b2c <Rafael_PanTompkins+0xcbc>)
 8002904:	f7fd fe50 	bl	80005a8 <__aeabi_dmul>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4620      	mov	r0, r4
 800290e:	4629      	mov	r1, r5
 8002910:	f7fd fc94 	bl	800023c <__adddf3>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f7fe f8f4 	bl	8000b08 <__aeabi_d2iz>
 8002920:	4603      	mov	r3, r0
 8002922:	b21a      	sxth	r2, r3
 8002924:	4b82      	ldr	r3, [pc, #520]	; (8002b30 <Rafael_PanTompkins+0xcc0>)
 8002926:	801a      	strh	r2, [r3, #0]
				threshold_i2 = 0.5*threshold_i1;
 8002928:	4b81      	ldr	r3, [pc, #516]	; (8002b30 <Rafael_PanTompkins+0xcc0>)
 800292a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fdd0 	bl	80004d4 <__aeabi_i2d>
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	4b7e      	ldr	r3, [pc, #504]	; (8002b34 <Rafael_PanTompkins+0xcc4>)
 800293a:	f7fd fe35 	bl	80005a8 <__aeabi_dmul>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f7fe f8df 	bl	8000b08 <__aeabi_d2iz>
 800294a:	4603      	mov	r3, r0
 800294c:	b21a      	sxth	r2, r3
 800294e:	4b7a      	ldr	r3, [pc, #488]	; (8002b38 <Rafael_PanTompkins+0xcc8>)
 8002950:	801a      	strh	r2, [r3, #0]
				peak_f = RF_highpass[current];
 8002952:	4b70      	ldr	r3, [pc, #448]	; (8002b14 <Rafael_PanTompkins+0xca4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a79      	ldr	r2, [pc, #484]	; (8002b3c <Rafael_PanTompkins+0xccc>)
 8002958:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800295c:	4b78      	ldr	r3, [pc, #480]	; (8002b40 <Rafael_PanTompkins+0xcd0>)
 800295e:	801a      	strh	r2, [r3, #0]
				npk_f = 0.125*peak_f + 0.875*npk_f;
 8002960:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <Rafael_PanTompkins+0xcd0>)
 8002962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fdb4 	bl	80004d4 <__aeabi_i2d>
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002974:	f7fd fe18 	bl	80005a8 <__aeabi_dmul>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
 8002980:	4b70      	ldr	r3, [pc, #448]	; (8002b44 <Rafael_PanTompkins+0xcd4>)
 8002982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fda4 	bl	80004d4 <__aeabi_i2d>
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <Rafael_PanTompkins+0xcb4>)
 8002992:	f7fd fe09 	bl	80005a8 <__aeabi_dmul>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4620      	mov	r0, r4
 800299c:	4629      	mov	r1, r5
 800299e:	f7fd fc4d 	bl	800023c <__adddf3>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f7fe f8ad 	bl	8000b08 <__aeabi_d2iz>
 80029ae:	4603      	mov	r3, r0
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <Rafael_PanTompkins+0xcd4>)
 80029b4:	801a      	strh	r2, [r3, #0]
				threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <Rafael_PanTompkins+0xcd4>)
 80029b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fd89 	bl	80004d4 <__aeabi_i2d>
 80029c2:	4604      	mov	r4, r0
 80029c4:	460d      	mov	r5, r1
 80029c6:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <Rafael_PanTompkins+0xcd8>)
 80029c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b5d      	ldr	r3, [pc, #372]	; (8002b44 <Rafael_PanTompkins+0xcd4>)
 80029d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fd7c 	bl	80004d4 <__aeabi_i2d>
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	4b52      	ldr	r3, [pc, #328]	; (8002b2c <Rafael_PanTompkins+0xcbc>)
 80029e2:	f7fd fde1 	bl	80005a8 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4620      	mov	r0, r4
 80029ec:	4629      	mov	r1, r5
 80029ee:	f7fd fc25 	bl	800023c <__adddf3>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7fe f885 	bl	8000b08 <__aeabi_d2iz>
 80029fe:	4603      	mov	r3, r0
 8002a00:	b21a      	sxth	r2, r3
 8002a02:	4b52      	ldr	r3, [pc, #328]	; (8002b4c <Rafael_PanTompkins+0xcdc>)
 8002a04:	801a      	strh	r2, [r3, #0]
                threshold_f2 = 0.5*threshold_f1;
 8002a06:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <Rafael_PanTompkins+0xcdc>)
 8002a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fd61 	bl	80004d4 <__aeabi_i2d>
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <Rafael_PanTompkins+0xcc4>)
 8002a18:	f7fd fdc6 	bl	80005a8 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe f870 	bl	8000b08 <__aeabi_d2iz>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <Rafael_PanTompkins+0xce0>)
 8002a2e:	801a      	strh	r2, [r3, #0]
                qrs = false;
 8002a30:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <Rafael_PanTompkins+0xce4>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
                RF_outputSignal[current] = qrs;
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <Rafael_PanTompkins+0xce4>)
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <Rafael_PanTompkins+0xca4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b211      	sxth	r1, r2
 8002a40:	4a45      	ldr	r2, [pc, #276]	; (8002b58 <Rafael_PanTompkins+0xce8>)
 8002a42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

		}

		// If a R-peak was detected, the RR-averages must be updated.
		if (qrs)
 8002a46:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <Rafael_PanTompkins+0xce4>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8137 	beq.w	8002cbe <Rafael_PanTompkins+0xe4e>
		{
			// Add the newest RR-interval to the buffer and get the new average.
			rravg1 = 0;
 8002a50:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <Rafael_PanTompkins+0xcec>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 7; i++)
 8002a56:	4b42      	ldr	r3, [pc, #264]	; (8002b60 <Rafael_PanTompkins+0xcf0>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e019      	b.n	8002a92 <Rafael_PanTompkins+0xc22>
			{
				rr1[i] = rr1[i+1];
 8002a5e:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <Rafael_PanTompkins+0xcf0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <Rafael_PanTompkins+0xcf0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	493e      	ldr	r1, [pc, #248]	; (8002b64 <Rafael_PanTompkins+0xcf4>)
 8002a6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a6e:	493d      	ldr	r1, [pc, #244]	; (8002b64 <Rafael_PanTompkins+0xcf4>)
 8002a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				rravg1 += rr1[i];
 8002a74:	4b3a      	ldr	r3, [pc, #232]	; (8002b60 <Rafael_PanTompkins+0xcf0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3a      	ldr	r2, [pc, #232]	; (8002b64 <Rafael_PanTompkins+0xcf4>)
 8002a7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <Rafael_PanTompkins+0xcec>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a35      	ldr	r2, [pc, #212]	; (8002b5c <Rafael_PanTompkins+0xcec>)
 8002a86:	6013      	str	r3, [r2, #0]
			for (i = 0; i < 7; i++)
 8002a88:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <Rafael_PanTompkins+0xcf0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	4a34      	ldr	r2, [pc, #208]	; (8002b60 <Rafael_PanTompkins+0xcf0>)
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <Rafael_PanTompkins+0xcf0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d9e1      	bls.n	8002a5e <Rafael_PanTompkins+0xbee>
			}
			rr1[7] = sample - lastQRS;
 8002a9a:	4b33      	ldr	r3, [pc, #204]	; (8002b68 <Rafael_PanTompkins+0xcf8>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <Rafael_PanTompkins+0xcfc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <Rafael_PanTompkins+0xcf4>)
 8002aa8:	61da      	str	r2, [r3, #28]
			lastQRS = sample;
 8002aaa:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <Rafael_PanTompkins+0xcf8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2f      	ldr	r2, [pc, #188]	; (8002b6c <Rafael_PanTompkins+0xcfc>)
 8002ab0:	6013      	str	r3, [r2, #0]
			rravg1 += rr1[7];
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <Rafael_PanTompkins+0xcf4>)
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <Rafael_PanTompkins+0xcec>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <Rafael_PanTompkins+0xcec>)
 8002abe:	6013      	str	r3, [r2, #0]
			rravg1 *= 0.125;
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <Rafael_PanTompkins+0xcec>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd05 	bl	80004d4 <__aeabi_i2d>
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002ad2:	f7fd fd69 	bl	80005a8 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	f7fe f813 	bl	8000b08 <__aeabi_d2iz>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <Rafael_PanTompkins+0xcec>)
 8002ae6:	6013      	str	r3, [r2, #0]

			// If the newly-discovered RR-average is normal, add it to the "normal" buffer and get the new "normal" average.
			// Update the "normal" beat parameters.
			if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <Rafael_PanTompkins+0xcf4>)
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <Rafael_PanTompkins+0xd00>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	f2c0 80b9 	blt.w	8002c68 <Rafael_PanTompkins+0xdf8>
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <Rafael_PanTompkins+0xcf4>)
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <Rafael_PanTompkins+0xd04>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	f300 80b2 	bgt.w	8002c68 <Rafael_PanTompkins+0xdf8>
			{
				rravg2 = 0;
 8002b04:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <Rafael_PanTompkins+0xd08>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
				for (i = 0; i < 7; i++)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <Rafael_PanTompkins+0xcf0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e04e      	b.n	8002bb0 <Rafael_PanTompkins+0xd40>
 8002b12:	bf00      	nop
 8002b14:	20002a8c 	.word	0x20002a8c
 8002b18:	200020c0 	.word	0x200020c0
 8002b1c:	20002a90 	.word	0x20002a90
 8002b20:	20002aa0 	.word	0x20002aa0
 8002b24:	3fec0000 	.word	0x3fec0000
 8002b28:	20002a9c 	.word	0x20002a9c
 8002b2c:	3fd00000 	.word	0x3fd00000
 8002b30:	20002a94 	.word	0x20002a94
 8002b34:	3fe00000 	.word	0x3fe00000
 8002b38:	20002a96 	.word	0x20002a96
 8002b3c:	200012b0 	.word	0x200012b0
 8002b40:	20002a92 	.word	0x20002a92
 8002b44:	20002aa2 	.word	0x20002aa2
 8002b48:	20002a9e 	.word	0x20002a9e
 8002b4c:	20002a98 	.word	0x20002a98
 8002b50:	20002a9a 	.word	0x20002a9a
 8002b54:	20002aa4 	.word	0x20002aa4
 8002b58:	20002570 	.word	0x20002570
 8002b5c:	20002a60 	.word	0x20002a60
 8002b60:	20002a74 	.word	0x20002a74
 8002b64:	20002a20 	.word	0x20002a20
 8002b68:	20002a7c 	.word	0x20002a7c
 8002b6c:	20002a80 	.word	0x20002a80
 8002b70:	20002a68 	.word	0x20002a68
 8002b74:	20002a6c 	.word	0x20002a6c
 8002b78:	20002a64 	.word	0x20002a64
				{
					rr2[i] = rr2[i+1];
 8002b7c:	4ba2      	ldr	r3, [pc, #648]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	4ba1      	ldr	r3, [pc, #644]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	49a1      	ldr	r1, [pc, #644]	; (8002e0c <Rafael_PanTompkins+0xf9c>)
 8002b88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b8c:	499f      	ldr	r1, [pc, #636]	; (8002e0c <Rafael_PanTompkins+0xf9c>)
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					rravg2 += rr2[i];
 8002b92:	4b9d      	ldr	r3, [pc, #628]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a9d      	ldr	r2, [pc, #628]	; (8002e0c <Rafael_PanTompkins+0xf9c>)
 8002b98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b9c:	4b9c      	ldr	r3, [pc, #624]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a9b      	ldr	r2, [pc, #620]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002ba4:	6013      	str	r3, [r2, #0]
				for (i = 0; i < 7; i++)
 8002ba6:	4b98      	ldr	r3, [pc, #608]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	4a96      	ldr	r2, [pc, #600]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b95      	ldr	r3, [pc, #596]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d9e1      	bls.n	8002b7c <Rafael_PanTompkins+0xd0c>
				}
				rr2[7] = rr1[7];
 8002bb8:	4b96      	ldr	r3, [pc, #600]	; (8002e14 <Rafael_PanTompkins+0xfa4>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a93      	ldr	r2, [pc, #588]	; (8002e0c <Rafael_PanTompkins+0xf9c>)
 8002bbe:	61d3      	str	r3, [r2, #28]
				rravg2 += rr2[7];
 8002bc0:	4b92      	ldr	r3, [pc, #584]	; (8002e0c <Rafael_PanTompkins+0xf9c>)
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	4a91      	ldr	r2, [pc, #580]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002bcc:	6013      	str	r3, [r2, #0]
				rravg2 *= 0.125;
 8002bce:	4b90      	ldr	r3, [pc, #576]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fc7e 	bl	80004d4 <__aeabi_i2d>
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002be0:	f7fd fce2 	bl	80005a8 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7fd ff8c 	bl	8000b08 <__aeabi_d2iz>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4a87      	ldr	r2, [pc, #540]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002bf4:	6013      	str	r3, [r2, #0]
				rrlow = 0.92*rravg2;
 8002bf6:	4b86      	ldr	r3, [pc, #536]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fc6a 	bl	80004d4 <__aeabi_i2d>
 8002c00:	a379      	add	r3, pc, #484	; (adr r3, 8002de8 <Rafael_PanTompkins+0xf78>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	f7fd fccf 	bl	80005a8 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f7fd ff79 	bl	8000b08 <__aeabi_d2iz>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4a7f      	ldr	r2, [pc, #508]	; (8002e18 <Rafael_PanTompkins+0xfa8>)
 8002c1a:	6013      	str	r3, [r2, #0]
				rrhigh = 1.16*rravg2;
 8002c1c:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fd fc57 	bl	80004d4 <__aeabi_i2d>
 8002c26:	a372      	add	r3, pc, #456	; (adr r3, 8002df0 <Rafael_PanTompkins+0xf80>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f7fd fcbc 	bl	80005a8 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	f7fd ff66 	bl	8000b08 <__aeabi_d2iz>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4a77      	ldr	r2, [pc, #476]	; (8002e1c <Rafael_PanTompkins+0xfac>)
 8002c40:	6013      	str	r3, [r2, #0]
				rrmiss = 1.66*rravg2;
 8002c42:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc44 	bl	80004d4 <__aeabi_i2d>
 8002c4c:	a36a      	add	r3, pc, #424	; (adr r3, 8002df8 <Rafael_PanTompkins+0xf88>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd fca9 	bl	80005a8 <__aeabi_dmul>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f7fd ff53 	bl	8000b08 <__aeabi_d2iz>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <Rafael_PanTompkins+0xfb0>)
 8002c66:	6013      	str	r3, [r2, #0]
			}

			prevRegular = regular;
 8002c68:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <Rafael_PanTompkins+0xfb4>)
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	4b6e      	ldr	r3, [pc, #440]	; (8002e28 <Rafael_PanTompkins+0xfb8>)
 8002c6e:	701a      	strb	r2, [r3, #0]
			if (rravg1 == rravg2)
 8002c70:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <Rafael_PanTompkins+0xfbc>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <Rafael_PanTompkins+0xfa0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d104      	bne.n	8002c86 <Rafael_PanTompkins+0xe16>
			{
				regular = true;
 8002c7c:	4b69      	ldr	r3, [pc, #420]	; (8002e24 <Rafael_PanTompkins+0xfb4>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	f000 bc5d 	b.w	8003540 <Rafael_PanTompkins+0x16d0>
			}
			// If the beat had been normal but turned odd, change the thresholds.
			else
			{
				regular = false;
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <Rafael_PanTompkins+0xfb4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
				if (prevRegular)
 8002c8c:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <Rafael_PanTompkins+0xfb8>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8455 	beq.w	8003540 <Rafael_PanTompkins+0x16d0>
				{
					threshold_i1 /= 2;
 8002c96:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <Rafael_PanTompkins+0xfc0>)
 8002c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9c:	0fda      	lsrs	r2, r3, #31
 8002c9e:	4413      	add	r3, r2
 8002ca0:	105b      	asrs	r3, r3, #1
 8002ca2:	b21a      	sxth	r2, r3
 8002ca4:	4b62      	ldr	r3, [pc, #392]	; (8002e30 <Rafael_PanTompkins+0xfc0>)
 8002ca6:	801a      	strh	r2, [r3, #0]
					threshold_f1 /= 2;
 8002ca8:	4b62      	ldr	r3, [pc, #392]	; (8002e34 <Rafael_PanTompkins+0xfc4>)
 8002caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cae:	0fda      	lsrs	r2, r3, #31
 8002cb0:	4413      	add	r3, r2
 8002cb2:	105b      	asrs	r3, r3, #1
 8002cb4:	b21a      	sxth	r2, r3
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <Rafael_PanTompkins+0xfc4>)
 8002cb8:	801a      	strh	r2, [r3, #0]
 8002cba:	f000 bc41 	b.w	8003540 <Rafael_PanTompkins+0x16d0>
		// If no R-peak was detected, it's important to check how long it's been since the last detection.
		else
		{
		    // If no R-peak was detected for too long, use the lighter thresholds and do a back search.
			// However, the back search must respect the 200ms limit and the 360ms one (check the slope).
			if ((sample - lastQRS > (long unsigned int)rrmiss) && (sample > lastQRS + FS/5))
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <Rafael_PanTompkins+0xfc8>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <Rafael_PanTompkins+0xfcc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	4a55      	ldr	r2, [pc, #340]	; (8002e20 <Rafael_PanTompkins+0xfb0>)
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	f240 833f 	bls.w	8003350 <Rafael_PanTompkins+0x14e0>
 8002cd2:	4b5a      	ldr	r3, [pc, #360]	; (8002e3c <Rafael_PanTompkins+0xfcc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002cda:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <Rafael_PanTompkins+0xfc8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	f080 8336 	bcs.w	8003350 <Rafael_PanTompkins+0x14e0>
			{
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 8002ce4:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <Rafael_PanTompkins+0xfcc>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <Rafael_PanTompkins+0xfc8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	4a54      	ldr	r2, [pc, #336]	; (8002e40 <Rafael_PanTompkins+0xfd0>)
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3348      	adds	r3, #72	; 0x48
 8002cf6:	4a44      	ldr	r2, [pc, #272]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e2e0      	b.n	80032be <Rafael_PanTompkins+0x144e>
				{
					if ( (RF_integral[i] > threshold_i2) && (RF_highpass[i] > threshold_f2))
 8002cfc:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a50      	ldr	r2, [pc, #320]	; (8002e44 <Rafael_PanTompkins+0xfd4>)
 8002d02:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002d06:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <Rafael_PanTompkins+0xfd8>)
 8002d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	f340 82d1 	ble.w	80032b4 <Rafael_PanTompkins+0x1444>
 8002d12:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a4d      	ldr	r2, [pc, #308]	; (8002e4c <Rafael_PanTompkins+0xfdc>)
 8002d18:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002d1c:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <Rafael_PanTompkins+0xfe0>)
 8002d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	f340 82c6 	ble.w	80032b4 <Rafael_PanTompkins+0x1444>
					{
					    currentSlope = 0;
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <Rafael_PanTompkins+0xfe4>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3b0a      	subs	r3, #10
 8002d34:	4a48      	ldr	r2, [pc, #288]	; (8002e58 <Rafael_PanTompkins+0xfe8>)
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e016      	b.n	8002d68 <Rafael_PanTompkins+0xef8>
                            if (RF_squared[j] > currentSlope)
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <Rafael_PanTompkins+0xfe8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a47      	ldr	r2, [pc, #284]	; (8002e5c <Rafael_PanTompkins+0xfec>)
 8002d40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <Rafael_PanTompkins+0xfe4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d907      	bls.n	8002d5e <Rafael_PanTompkins+0xeee>
                                currentSlope = RF_squared[j];
 8002d4e:	4b42      	ldr	r3, [pc, #264]	; (8002e58 <Rafael_PanTompkins+0xfe8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a42      	ldr	r2, [pc, #264]	; (8002e5c <Rafael_PanTompkins+0xfec>)
 8002d54:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b3e      	ldr	r3, [pc, #248]	; (8002e54 <Rafael_PanTompkins+0xfe4>)
 8002d5c:	601a      	str	r2, [r3, #0]
                        for (j = i - 10; j <= i; j++)
 8002d5e:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <Rafael_PanTompkins+0xfe8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a3c      	ldr	r2, [pc, #240]	; (8002e58 <Rafael_PanTompkins+0xfe8>)
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <Rafael_PanTompkins+0xfe8>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d9e2      	bls.n	8002d3a <Rafael_PanTompkins+0xeca>

                        if ((currentSlope < (dataType)(lastSlope/2)) && (i + sample) < lastQRS + 0.36*lastQRS)
 8002d74:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <Rafael_PanTompkins+0xff0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	b21b      	sxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <Rafael_PanTompkins+0xfe4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d970      	bls.n	8002e68 <Rafael_PanTompkins+0xff8>
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <Rafael_PanTompkins+0xf98>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <Rafael_PanTompkins+0xfc8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fb8f 	bl	80004b4 <__aeabi_ui2d>
 8002d96:	4604      	mov	r4, r0
 8002d98:	460d      	mov	r5, r1
 8002d9a:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <Rafael_PanTompkins+0xfcc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fb88 	bl	80004b4 <__aeabi_ui2d>
 8002da4:	4680      	mov	r8, r0
 8002da6:	4689      	mov	r9, r1
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <Rafael_PanTompkins+0xfcc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd fb81 	bl	80004b4 <__aeabi_ui2d>
 8002db2:	a313      	add	r3, pc, #76	; (adr r3, 8002e00 <Rafael_PanTompkins+0xf90>)
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f7fd fbf6 	bl	80005a8 <__aeabi_dmul>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4640      	mov	r0, r8
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	f7fd fa3a 	bl	800023c <__adddf3>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4620      	mov	r0, r4
 8002dce:	4629      	mov	r1, r5
 8002dd0:	f7fd fe5c 	bl	8000a8c <__aeabi_dcmplt>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d046      	beq.n	8002e68 <Rafael_PanTompkins+0xff8>
                        {
                            qrs = false;
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <Rafael_PanTompkins+0xff4>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e268      	b.n	80032b4 <Rafael_PanTompkins+0x1444>
 8002de2:	bf00      	nop
 8002de4:	f3af 8000 	nop.w
 8002de8:	d70a3d71 	.word	0xd70a3d71
 8002dec:	3fed70a3 	.word	0x3fed70a3
 8002df0:	28f5c28f 	.word	0x28f5c28f
 8002df4:	3ff28f5c 	.word	0x3ff28f5c
 8002df8:	28f5c28f 	.word	0x28f5c28f
 8002dfc:	3ffa8f5c 	.word	0x3ffa8f5c
 8002e00:	70a3d70a 	.word	0x70a3d70a
 8002e04:	3fd70a3d 	.word	0x3fd70a3d
 8002e08:	20002a74 	.word	0x20002a74
 8002e0c:	20002a40 	.word	0x20002a40
 8002e10:	20002a64 	.word	0x20002a64
 8002e14:	20002a20 	.word	0x20002a20
 8002e18:	20002a68 	.word	0x20002a68
 8002e1c:	20002a6c 	.word	0x20002a6c
 8002e20:	20002a70 	.word	0x20002a70
 8002e24:	20000004 	.word	0x20000004
 8002e28:	20002aa5 	.word	0x20002aa5
 8002e2c:	20002a60 	.word	0x20002a60
 8002e30:	20002a94 	.word	0x20002a94
 8002e34:	20002a98 	.word	0x20002a98
 8002e38:	20002a7c 	.word	0x20002a7c
 8002e3c:	20002a80 	.word	0x20002a80
 8002e40:	20002a8c 	.word	0x20002a8c
 8002e44:	200020c0 	.word	0x200020c0
 8002e48:	20002a96 	.word	0x20002a96
 8002e4c:	200012b0 	.word	0x200012b0
 8002e50:	20002a9a 	.word	0x20002a9a
 8002e54:	20002a88 	.word	0x20002a88
 8002e58:	20002a78 	.word	0x20002a78
 8002e5c:	20001c10 	.word	0x20001c10
 8002e60:	20002a84 	.word	0x20002a84
 8002e64:	20002aa4 	.word	0x20002aa4
                        }
                        else
                        {
                            peak_i = RF_integral[i];
 8002e68:	4ba7      	ldr	r3, [pc, #668]	; (8003108 <Rafael_PanTompkins+0x1298>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4aa7      	ldr	r2, [pc, #668]	; (800310c <Rafael_PanTompkins+0x129c>)
 8002e6e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002e72:	4ba7      	ldr	r3, [pc, #668]	; (8003110 <Rafael_PanTompkins+0x12a0>)
 8002e74:	801a      	strh	r2, [r3, #0]
                            peak_f = RF_highpass[i];
 8002e76:	4ba4      	ldr	r3, [pc, #656]	; (8003108 <Rafael_PanTompkins+0x1298>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4aa6      	ldr	r2, [pc, #664]	; (8003114 <Rafael_PanTompkins+0x12a4>)
 8002e7c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002e80:	4ba5      	ldr	r3, [pc, #660]	; (8003118 <Rafael_PanTompkins+0x12a8>)
 8002e82:	801a      	strh	r2, [r3, #0]
                            spk_i = 0.25*peak_i+ 0.75*spk_i;
 8002e84:	4ba2      	ldr	r3, [pc, #648]	; (8003110 <Rafael_PanTompkins+0x12a0>)
 8002e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fb22 	bl	80004d4 <__aeabi_i2d>
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	4ba1      	ldr	r3, [pc, #644]	; (800311c <Rafael_PanTompkins+0x12ac>)
 8002e96:	f7fd fb87 	bl	80005a8 <__aeabi_dmul>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4614      	mov	r4, r2
 8002ea0:	461d      	mov	r5, r3
 8002ea2:	4b9f      	ldr	r3, [pc, #636]	; (8003120 <Rafael_PanTompkins+0x12b0>)
 8002ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb13 	bl	80004d4 <__aeabi_i2d>
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	4b9c      	ldr	r3, [pc, #624]	; (8003124 <Rafael_PanTompkins+0x12b4>)
 8002eb4:	f7fd fb78 	bl	80005a8 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f7fd f9bc 	bl	800023c <__adddf3>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7fd fe1c 	bl	8000b08 <__aeabi_d2iz>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	b21a      	sxth	r2, r3
 8002ed4:	4b92      	ldr	r3, [pc, #584]	; (8003120 <Rafael_PanTompkins+0x12b0>)
 8002ed6:	801a      	strh	r2, [r3, #0]
                            spk_f = 0.25*peak_f + 0.75*spk_f;
 8002ed8:	4b8f      	ldr	r3, [pc, #572]	; (8003118 <Rafael_PanTompkins+0x12a8>)
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd faf8 	bl	80004d4 <__aeabi_i2d>
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	4b8c      	ldr	r3, [pc, #560]	; (800311c <Rafael_PanTompkins+0x12ac>)
 8002eea:	f7fd fb5d 	bl	80005a8 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4614      	mov	r4, r2
 8002ef4:	461d      	mov	r5, r3
 8002ef6:	4b8c      	ldr	r3, [pc, #560]	; (8003128 <Rafael_PanTompkins+0x12b8>)
 8002ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fae9 	bl	80004d4 <__aeabi_i2d>
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	4b87      	ldr	r3, [pc, #540]	; (8003124 <Rafael_PanTompkins+0x12b4>)
 8002f08:	f7fd fb4e 	bl	80005a8 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4620      	mov	r0, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	f7fd f992 	bl	800023c <__adddf3>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7fd fdf2 	bl	8000b08 <__aeabi_d2iz>
 8002f24:	4603      	mov	r3, r0
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	4b7f      	ldr	r3, [pc, #508]	; (8003128 <Rafael_PanTompkins+0x12b8>)
 8002f2a:	801a      	strh	r2, [r3, #0]
                            threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 8002f2c:	4b7f      	ldr	r3, [pc, #508]	; (800312c <Rafael_PanTompkins+0x12bc>)
 8002f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd face 	bl	80004d4 <__aeabi_i2d>
 8002f38:	4604      	mov	r4, r0
 8002f3a:	460d      	mov	r5, r1
 8002f3c:	4b78      	ldr	r3, [pc, #480]	; (8003120 <Rafael_PanTompkins+0x12b0>)
 8002f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b79      	ldr	r3, [pc, #484]	; (800312c <Rafael_PanTompkins+0x12bc>)
 8002f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fac1 	bl	80004d4 <__aeabi_i2d>
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	4b71      	ldr	r3, [pc, #452]	; (800311c <Rafael_PanTompkins+0x12ac>)
 8002f58:	f7fd fb26 	bl	80005a8 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd f96a 	bl	800023c <__adddf3>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fdca 	bl	8000b08 <__aeabi_d2iz>
 8002f74:	4603      	mov	r3, r0
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <Rafael_PanTompkins+0x12c0>)
 8002f7a:	801a      	strh	r2, [r3, #0]
                            threshold_i2 = 0.5*threshold_i1;
 8002f7c:	4b6c      	ldr	r3, [pc, #432]	; (8003130 <Rafael_PanTompkins+0x12c0>)
 8002f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd faa6 	bl	80004d4 <__aeabi_i2d>
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	4b69      	ldr	r3, [pc, #420]	; (8003134 <Rafael_PanTompkins+0x12c4>)
 8002f8e:	f7fd fb0b 	bl	80005a8 <__aeabi_dmul>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fd fdb5 	bl	8000b08 <__aeabi_d2iz>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	4b65      	ldr	r3, [pc, #404]	; (8003138 <Rafael_PanTompkins+0x12c8>)
 8002fa4:	801a      	strh	r2, [r3, #0]
                            lastSlope = currentSlope;
 8002fa6:	4b65      	ldr	r3, [pc, #404]	; (800313c <Rafael_PanTompkins+0x12cc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a65      	ldr	r2, [pc, #404]	; (8003140 <Rafael_PanTompkins+0x12d0>)
 8002fac:	6013      	str	r3, [r2, #0]
                            threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 8002fae:	4b65      	ldr	r3, [pc, #404]	; (8003144 <Rafael_PanTompkins+0x12d4>)
 8002fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fa8d 	bl	80004d4 <__aeabi_i2d>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <Rafael_PanTompkins+0x12b8>)
 8002fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <Rafael_PanTompkins+0x12d4>)
 8002fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd fa80 	bl	80004d4 <__aeabi_i2d>
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4b50      	ldr	r3, [pc, #320]	; (800311c <Rafael_PanTompkins+0x12ac>)
 8002fda:	f7fd fae5 	bl	80005a8 <__aeabi_dmul>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	f7fd f929 	bl	800023c <__adddf3>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fd89 	bl	8000b08 <__aeabi_d2iz>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b21a      	sxth	r2, r3
 8002ffa:	4b53      	ldr	r3, [pc, #332]	; (8003148 <Rafael_PanTompkins+0x12d8>)
 8002ffc:	801a      	strh	r2, [r3, #0]
                            threshold_f2 = 0.5*threshold_f1;
 8002ffe:	4b52      	ldr	r3, [pc, #328]	; (8003148 <Rafael_PanTompkins+0x12d8>)
 8003000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fa65 	bl	80004d4 <__aeabi_i2d>
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	4b49      	ldr	r3, [pc, #292]	; (8003134 <Rafael_PanTompkins+0x12c4>)
 8003010:	f7fd faca 	bl	80005a8 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f7fd fd74 	bl	8000b08 <__aeabi_d2iz>
 8003020:	4603      	mov	r3, r0
 8003022:	b21a      	sxth	r2, r3
 8003024:	4b49      	ldr	r3, [pc, #292]	; (800314c <Rafael_PanTompkins+0x12dc>)
 8003026:	801a      	strh	r2, [r3, #0]
                            // If a signal peak was detected on the back search, the RR attributes must be updated.
                            // This is the same thing done when a peak is detected on the first try.
                            //RR Average 1
                            rravg1 = 0;
 8003028:	4b49      	ldr	r3, [pc, #292]	; (8003150 <Rafael_PanTompkins+0x12e0>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
                            for (j = 0; j < 7; j++)
 800302e:	4b49      	ldr	r3, [pc, #292]	; (8003154 <Rafael_PanTompkins+0x12e4>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e019      	b.n	800306a <Rafael_PanTompkins+0x11fa>
                            {
                                rr1[j] = rr1[j+1];
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <Rafael_PanTompkins+0x12e4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	4b45      	ldr	r3, [pc, #276]	; (8003154 <Rafael_PanTompkins+0x12e4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4945      	ldr	r1, [pc, #276]	; (8003158 <Rafael_PanTompkins+0x12e8>)
 8003042:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003046:	4944      	ldr	r1, [pc, #272]	; (8003158 <Rafael_PanTompkins+0x12e8>)
 8003048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                rravg1 += rr1[j];
 800304c:	4b41      	ldr	r3, [pc, #260]	; (8003154 <Rafael_PanTompkins+0x12e4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a41      	ldr	r2, [pc, #260]	; (8003158 <Rafael_PanTompkins+0x12e8>)
 8003052:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <Rafael_PanTompkins+0x12e0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4413      	add	r3, r2
 800305c:	4a3c      	ldr	r2, [pc, #240]	; (8003150 <Rafael_PanTompkins+0x12e0>)
 800305e:	6013      	str	r3, [r2, #0]
                            for (j = 0; j < 7; j++)
 8003060:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <Rafael_PanTompkins+0x12e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a3b      	ldr	r2, [pc, #236]	; (8003154 <Rafael_PanTompkins+0x12e4>)
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <Rafael_PanTompkins+0x12e4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b06      	cmp	r3, #6
 8003070:	d9e1      	bls.n	8003036 <Rafael_PanTompkins+0x11c6>
                            }
                            rr1[7] = sample - (current - i) - lastQRS;
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <Rafael_PanTompkins+0x1298>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a39      	ldr	r2, [pc, #228]	; (800315c <Rafael_PanTompkins+0x12ec>)
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	1a9a      	subs	r2, r3, r2
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <Rafael_PanTompkins+0x12f0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	441a      	add	r2, r3
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <Rafael_PanTompkins+0x12f4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	461a      	mov	r2, r3
 800308a:	4b33      	ldr	r3, [pc, #204]	; (8003158 <Rafael_PanTompkins+0x12e8>)
 800308c:	61da      	str	r2, [r3, #28]
                            qrs = true;
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <Rafael_PanTompkins+0x12f8>)
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
                            lastQRS = sample - (current - i);
 8003094:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <Rafael_PanTompkins+0x1298>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a30      	ldr	r2, [pc, #192]	; (800315c <Rafael_PanTompkins+0x12ec>)
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	1a9a      	subs	r2, r3, r2
 800309e:	4b30      	ldr	r3, [pc, #192]	; (8003160 <Rafael_PanTompkins+0x12f0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4a2f      	ldr	r2, [pc, #188]	; (8003164 <Rafael_PanTompkins+0x12f4>)
 80030a6:	6013      	str	r3, [r2, #0]
                            rravg1 += rr1[7];
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <Rafael_PanTompkins+0x12e8>)
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	4b28      	ldr	r3, [pc, #160]	; (8003150 <Rafael_PanTompkins+0x12e0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	4a27      	ldr	r2, [pc, #156]	; (8003150 <Rafael_PanTompkins+0x12e0>)
 80030b4:	6013      	str	r3, [r2, #0]
                            rravg1 *= 0.125;
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <Rafael_PanTompkins+0x12e0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa0a 	bl	80004d4 <__aeabi_i2d>
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80030c8:	f7fd fa6e 	bl	80005a8 <__aeabi_dmul>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	f7fd fd18 	bl	8000b08 <__aeabi_d2iz>
 80030d8:	4603      	mov	r3, r0
 80030da:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <Rafael_PanTompkins+0x12e0>)
 80030dc:	6013      	str	r3, [r2, #0]

                            //RR Average 2
                            if ( (rr1[7] >= rrlow) && (rr1[7] <= rrhigh) )
 80030de:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <Rafael_PanTompkins+0x12e8>)
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <Rafael_PanTompkins+0x12fc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	f2c0 80bc 	blt.w	8003264 <Rafael_PanTompkins+0x13f4>
 80030ec:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <Rafael_PanTompkins+0x12e8>)
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <Rafael_PanTompkins+0x1300>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	f300 80b5 	bgt.w	8003264 <Rafael_PanTompkins+0x13f4>
                            {
                                rravg2 = 0;
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <Rafael_PanTompkins+0x1304>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
                                for (i = 0; i < 7; i++)
 8003100:	4b01      	ldr	r3, [pc, #4]	; (8003108 <Rafael_PanTompkins+0x1298>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e051      	b.n	80031ac <Rafael_PanTompkins+0x133c>
 8003108:	20002a74 	.word	0x20002a74
 800310c:	200020c0 	.word	0x200020c0
 8003110:	20002a90 	.word	0x20002a90
 8003114:	200012b0 	.word	0x200012b0
 8003118:	20002a92 	.word	0x20002a92
 800311c:	3fd00000 	.word	0x3fd00000
 8003120:	20002a9c 	.word	0x20002a9c
 8003124:	3fe80000 	.word	0x3fe80000
 8003128:	20002a9e 	.word	0x20002a9e
 800312c:	20002aa0 	.word	0x20002aa0
 8003130:	20002a94 	.word	0x20002a94
 8003134:	3fe00000 	.word	0x3fe00000
 8003138:	20002a96 	.word	0x20002a96
 800313c:	20002a88 	.word	0x20002a88
 8003140:	20002a84 	.word	0x20002a84
 8003144:	20002aa2 	.word	0x20002aa2
 8003148:	20002a98 	.word	0x20002a98
 800314c:	20002a9a 	.word	0x20002a9a
 8003150:	20002a60 	.word	0x20002a60
 8003154:	20002a78 	.word	0x20002a78
 8003158:	20002a20 	.word	0x20002a20
 800315c:	20002a8c 	.word	0x20002a8c
 8003160:	20002a7c 	.word	0x20002a7c
 8003164:	20002a80 	.word	0x20002a80
 8003168:	20002aa4 	.word	0x20002aa4
 800316c:	20002a68 	.word	0x20002a68
 8003170:	20002a6c 	.word	0x20002a6c
 8003174:	20002a64 	.word	0x20002a64
                                {
                                    rr2[i] = rr2[i+1];
 8003178:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <Rafael_PanTompkins+0x1478>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	4b5a      	ldr	r3, [pc, #360]	; (80032e8 <Rafael_PanTompkins+0x1478>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	495a      	ldr	r1, [pc, #360]	; (80032ec <Rafael_PanTompkins+0x147c>)
 8003184:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003188:	4958      	ldr	r1, [pc, #352]	; (80032ec <Rafael_PanTompkins+0x147c>)
 800318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                    rravg2 += rr2[i];
 800318e:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <Rafael_PanTompkins+0x1478>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a56      	ldr	r2, [pc, #344]	; (80032ec <Rafael_PanTompkins+0x147c>)
 8003194:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4413      	add	r3, r2
 800319e:	4a54      	ldr	r2, [pc, #336]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 80031a0:	6013      	str	r3, [r2, #0]
                                for (i = 0; i < 7; i++)
 80031a2:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <Rafael_PanTompkins+0x1478>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3301      	adds	r3, #1
 80031a8:	4a4f      	ldr	r2, [pc, #316]	; (80032e8 <Rafael_PanTompkins+0x1478>)
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <Rafael_PanTompkins+0x1478>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b06      	cmp	r3, #6
 80031b2:	d9e1      	bls.n	8003178 <Rafael_PanTompkins+0x1308>
                                }
                                rr2[7] = rr1[7];
 80031b4:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <Rafael_PanTompkins+0x1484>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4a4c      	ldr	r2, [pc, #304]	; (80032ec <Rafael_PanTompkins+0x147c>)
 80031ba:	61d3      	str	r3, [r2, #28]
                                rravg2 += rr2[7];
 80031bc:	4b4b      	ldr	r3, [pc, #300]	; (80032ec <Rafael_PanTompkins+0x147c>)
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	4b4b      	ldr	r3, [pc, #300]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	4a4a      	ldr	r2, [pc, #296]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 80031c8:	6013      	str	r3, [r2, #0]
                                rravg2 *= 0.125;
 80031ca:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f980 	bl	80004d4 <__aeabi_i2d>
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80031dc:	f7fd f9e4 	bl	80005a8 <__aeabi_dmul>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fc8e 	bl	8000b08 <__aeabi_d2iz>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 80031f0:	6013      	str	r3, [r2, #0]
                                rrlow = 0.92*rravg2;
 80031f2:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f96c 	bl	80004d4 <__aeabi_i2d>
 80031fc:	a334      	add	r3, pc, #208	; (adr r3, 80032d0 <Rafael_PanTompkins+0x1460>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f7fd f9d1 	bl	80005a8 <__aeabi_dmul>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4610      	mov	r0, r2
 800320c:	4619      	mov	r1, r3
 800320e:	f7fd fc7b 	bl	8000b08 <__aeabi_d2iz>
 8003212:	4603      	mov	r3, r0
 8003214:	4a38      	ldr	r2, [pc, #224]	; (80032f8 <Rafael_PanTompkins+0x1488>)
 8003216:	6013      	str	r3, [r2, #0]
                                rrhigh = 1.16*rravg2;
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd f959 	bl	80004d4 <__aeabi_i2d>
 8003222:	a32d      	add	r3, pc, #180	; (adr r3, 80032d8 <Rafael_PanTompkins+0x1468>)
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fd f9be 	bl	80005a8 <__aeabi_dmul>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f7fd fc68 	bl	8000b08 <__aeabi_d2iz>
 8003238:	4603      	mov	r3, r0
 800323a:	4a30      	ldr	r2, [pc, #192]	; (80032fc <Rafael_PanTompkins+0x148c>)
 800323c:	6013      	str	r3, [r2, #0]
                                rrmiss = 1.66*rravg2;
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f946 	bl	80004d4 <__aeabi_i2d>
 8003248:	a325      	add	r3, pc, #148	; (adr r3, 80032e0 <Rafael_PanTompkins+0x1470>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f7fd f9ab 	bl	80005a8 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	f7fd fc55 	bl	8000b08 <__aeabi_d2iz>
 800325e:	4603      	mov	r3, r0
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <Rafael_PanTompkins+0x1490>)
 8003262:	6013      	str	r3, [r2, #0]
                            }

                            prevRegular = regular;
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <Rafael_PanTompkins+0x1494>)
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <Rafael_PanTompkins+0x1498>)
 800326a:	701a      	strb	r2, [r3, #0]
                            if (rravg1 == rravg2)
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <Rafael_PanTompkins+0x149c>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <Rafael_PanTompkins+0x1480>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d103      	bne.n	8003280 <Rafael_PanTompkins+0x1410>
                            {
                                regular = true;
 8003278:	4b22      	ldr	r3, [pc, #136]	; (8003304 <Rafael_PanTompkins+0x1494>)
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
                                    threshold_i1 /= 2;
                                    threshold_f1 /= 2;
                                }
                            }

                            break;
 800327e:	e04d      	b.n	800331c <Rafael_PanTompkins+0x14ac>
                                regular = false;
 8003280:	4b20      	ldr	r3, [pc, #128]	; (8003304 <Rafael_PanTompkins+0x1494>)
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
                                if (prevRegular)
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <Rafael_PanTompkins+0x1498>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d046      	beq.n	800331c <Rafael_PanTompkins+0x14ac>
                                    threshold_i1 /= 2;
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <Rafael_PanTompkins+0x14a0>)
 8003290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003294:	0fda      	lsrs	r2, r3, #31
 8003296:	4413      	add	r3, r2
 8003298:	105b      	asrs	r3, r3, #1
 800329a:	b21a      	sxth	r2, r3
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <Rafael_PanTompkins+0x14a0>)
 800329e:	801a      	strh	r2, [r3, #0]
                                    threshold_f1 /= 2;
 80032a0:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <Rafael_PanTompkins+0x14a4>)
 80032a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a6:	0fda      	lsrs	r2, r3, #31
 80032a8:	4413      	add	r3, r2
 80032aa:	105b      	asrs	r3, r3, #1
 80032ac:	b21a      	sxth	r2, r3
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <Rafael_PanTompkins+0x14a4>)
 80032b0:	801a      	strh	r2, [r3, #0]
                            break;
 80032b2:	e033      	b.n	800331c <Rafael_PanTompkins+0x14ac>
				for (i = current - (sample - lastQRS) + FS/5; i < (long unsigned int)current; i++)
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <Rafael_PanTompkins+0x1478>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <Rafael_PanTompkins+0x1478>)
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <Rafael_PanTompkins+0x1478>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <Rafael_PanTompkins+0x14a8>)
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f4ff ad18 	bcc.w	8002cfc <Rafael_PanTompkins+0xe8c>
 80032cc:	e027      	b.n	800331e <Rafael_PanTompkins+0x14ae>
 80032ce:	bf00      	nop
 80032d0:	d70a3d71 	.word	0xd70a3d71
 80032d4:	3fed70a3 	.word	0x3fed70a3
 80032d8:	28f5c28f 	.word	0x28f5c28f
 80032dc:	3ff28f5c 	.word	0x3ff28f5c
 80032e0:	28f5c28f 	.word	0x28f5c28f
 80032e4:	3ffa8f5c 	.word	0x3ffa8f5c
 80032e8:	20002a74 	.word	0x20002a74
 80032ec:	20002a40 	.word	0x20002a40
 80032f0:	20002a64 	.word	0x20002a64
 80032f4:	20002a20 	.word	0x20002a20
 80032f8:	20002a68 	.word	0x20002a68
 80032fc:	20002a6c 	.word	0x20002a6c
 8003300:	20002a70 	.word	0x20002a70
 8003304:	20000004 	.word	0x20000004
 8003308:	20002aa5 	.word	0x20002aa5
 800330c:	20002a60 	.word	0x20002a60
 8003310:	20002a94 	.word	0x20002a94
 8003314:	20002a98 	.word	0x20002a98
 8003318:	20002a8c 	.word	0x20002a8c
                            break;
 800331c:	bf00      	nop
                        }
                    }
				}

				if (qrs)
 800331e:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <Rafael_PanTompkins+0x16e0>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d014      	beq.n	8003350 <Rafael_PanTompkins+0x14e0>
                {
					RF_outputSignal[current] = false;
 8003326:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <Rafael_PanTompkins+0x16e4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8b      	ldr	r2, [pc, #556]	; (8003558 <Rafael_PanTompkins+0x16e8>)
 800332c:	2100      	movs	r1, #0
 800332e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					RF_outputSignal[i] = true;
 8003332:	4b8a      	ldr	r3, [pc, #552]	; (800355c <Rafael_PanTompkins+0x16ec>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a88      	ldr	r2, [pc, #544]	; (8003558 <Rafael_PanTompkins+0x16e8>)
 8003338:	2101      	movs	r1, #1
 800333a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    result = (current - i);
 800333e:	4b85      	ldr	r3, [pc, #532]	; (8003554 <Rafael_PanTompkins+0x16e4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b85      	ldr	r3, [pc, #532]	; (800355c <Rafael_PanTompkins+0x16ec>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	b29b      	uxth	r3, r3
 800334e:	81fb      	strh	r3, [r7, #14]
                }
			}

			// Definitely no signal peak was detected.
			if (!qrs)
 8003350:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <Rafael_PanTompkins+0x16e0>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 80f3 	bne.w	8003540 <Rafael_PanTompkins+0x16d0>
			{
				// If some kind of peak had been detected, then it's certainly a noise peak. Thresholds must be updated accordinly.
				if ((RF_integral[current] >= threshold_i1) || (RF_highpass[current] >= threshold_f1))
 800335a:	4b7e      	ldr	r3, [pc, #504]	; (8003554 <Rafael_PanTompkins+0x16e4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a80      	ldr	r2, [pc, #512]	; (8003560 <Rafael_PanTompkins+0x16f0>)
 8003360:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003364:	4b7f      	ldr	r3, [pc, #508]	; (8003564 <Rafael_PanTompkins+0x16f4>)
 8003366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336a:	429a      	cmp	r2, r3
 800336c:	da0a      	bge.n	8003384 <Rafael_PanTompkins+0x1514>
 800336e:	4b79      	ldr	r3, [pc, #484]	; (8003554 <Rafael_PanTompkins+0x16e4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a7d      	ldr	r2, [pc, #500]	; (8003568 <Rafael_PanTompkins+0x16f8>)
 8003374:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003378:	4b7c      	ldr	r3, [pc, #496]	; (800356c <Rafael_PanTompkins+0x16fc>)
 800337a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337e:	429a      	cmp	r2, r3
 8003380:	f2c0 80de 	blt.w	8003540 <Rafael_PanTompkins+0x16d0>
				{
					peak_i = RF_integral[current];
 8003384:	4b73      	ldr	r3, [pc, #460]	; (8003554 <Rafael_PanTompkins+0x16e4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a75      	ldr	r2, [pc, #468]	; (8003560 <Rafael_PanTompkins+0x16f0>)
 800338a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800338e:	4b78      	ldr	r3, [pc, #480]	; (8003570 <Rafael_PanTompkins+0x1700>)
 8003390:	801a      	strh	r2, [r3, #0]
					npk_i = 0.125*peak_i + 0.875*npk_i;
 8003392:	4b77      	ldr	r3, [pc, #476]	; (8003570 <Rafael_PanTompkins+0x1700>)
 8003394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd f89b 	bl	80004d4 <__aeabi_i2d>
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80033a6:	f7fd f8ff 	bl	80005a8 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4614      	mov	r4, r2
 80033b0:	461d      	mov	r5, r3
 80033b2:	4b70      	ldr	r3, [pc, #448]	; (8003574 <Rafael_PanTompkins+0x1704>)
 80033b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd f88b 	bl	80004d4 <__aeabi_i2d>
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	4b6d      	ldr	r3, [pc, #436]	; (8003578 <Rafael_PanTompkins+0x1708>)
 80033c4:	f7fd f8f0 	bl	80005a8 <__aeabi_dmul>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4620      	mov	r0, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	f7fc ff34 	bl	800023c <__adddf3>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f7fd fb94 	bl	8000b08 <__aeabi_d2iz>
 80033e0:	4603      	mov	r3, r0
 80033e2:	b21a      	sxth	r2, r3
 80033e4:	4b63      	ldr	r3, [pc, #396]	; (8003574 <Rafael_PanTompkins+0x1704>)
 80033e6:	801a      	strh	r2, [r3, #0]
					threshold_i1 = npk_i + 0.25*(spk_i - npk_i);
 80033e8:	4b62      	ldr	r3, [pc, #392]	; (8003574 <Rafael_PanTompkins+0x1704>)
 80033ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f870 	bl	80004d4 <__aeabi_i2d>
 80033f4:	4604      	mov	r4, r0
 80033f6:	460d      	mov	r5, r1
 80033f8:	4b60      	ldr	r3, [pc, #384]	; (800357c <Rafael_PanTompkins+0x170c>)
 80033fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033fe:	461a      	mov	r2, r3
 8003400:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <Rafael_PanTompkins+0x1704>)
 8003402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd f863 	bl	80004d4 <__aeabi_i2d>
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	4b5b      	ldr	r3, [pc, #364]	; (8003580 <Rafael_PanTompkins+0x1710>)
 8003414:	f7fd f8c8 	bl	80005a8 <__aeabi_dmul>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4620      	mov	r0, r4
 800341e:	4629      	mov	r1, r5
 8003420:	f7fc ff0c 	bl	800023c <__adddf3>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f7fd fb6c 	bl	8000b08 <__aeabi_d2iz>
 8003430:	4603      	mov	r3, r0
 8003432:	b21a      	sxth	r2, r3
 8003434:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <Rafael_PanTompkins+0x16f4>)
 8003436:	801a      	strh	r2, [r3, #0]
					threshold_i2 = 0.5*threshold_i1;
 8003438:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <Rafael_PanTompkins+0x16f4>)
 800343a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f848 	bl	80004d4 <__aeabi_i2d>
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <Rafael_PanTompkins+0x1714>)
 800344a:	f7fd f8ad 	bl	80005a8 <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7fd fb57 	bl	8000b08 <__aeabi_d2iz>
 800345a:	4603      	mov	r3, r0
 800345c:	b21a      	sxth	r2, r3
 800345e:	4b4a      	ldr	r3, [pc, #296]	; (8003588 <Rafael_PanTompkins+0x1718>)
 8003460:	801a      	strh	r2, [r3, #0]
					peak_f = RF_highpass[current];
 8003462:	4b3c      	ldr	r3, [pc, #240]	; (8003554 <Rafael_PanTompkins+0x16e4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a40      	ldr	r2, [pc, #256]	; (8003568 <Rafael_PanTompkins+0x16f8>)
 8003468:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800346c:	4b47      	ldr	r3, [pc, #284]	; (800358c <Rafael_PanTompkins+0x171c>)
 800346e:	801a      	strh	r2, [r3, #0]
					npk_f = 0.125*peak_f + 0.875*npk_f;
 8003470:	4b46      	ldr	r3, [pc, #280]	; (800358c <Rafael_PanTompkins+0x171c>)
 8003472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f82c 	bl	80004d4 <__aeabi_i2d>
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003484:	f7fd f890 	bl	80005a8 <__aeabi_dmul>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4614      	mov	r4, r2
 800348e:	461d      	mov	r5, r3
 8003490:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <Rafael_PanTompkins+0x1720>)
 8003492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f81c 	bl	80004d4 <__aeabi_i2d>
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	4b35      	ldr	r3, [pc, #212]	; (8003578 <Rafael_PanTompkins+0x1708>)
 80034a2:	f7fd f881 	bl	80005a8 <__aeabi_dmul>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4620      	mov	r0, r4
 80034ac:	4629      	mov	r1, r5
 80034ae:	f7fc fec5 	bl	800023c <__adddf3>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	f7fd fb25 	bl	8000b08 <__aeabi_d2iz>
 80034be:	4603      	mov	r3, r0
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	4b33      	ldr	r3, [pc, #204]	; (8003590 <Rafael_PanTompkins+0x1720>)
 80034c4:	801a      	strh	r2, [r3, #0]
					threshold_f1 = npk_f + 0.25*(spk_f - npk_f);
 80034c6:	4b32      	ldr	r3, [pc, #200]	; (8003590 <Rafael_PanTompkins+0x1720>)
 80034c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f801 	bl	80004d4 <__aeabi_i2d>
 80034d2:	4604      	mov	r4, r0
 80034d4:	460d      	mov	r5, r1
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <Rafael_PanTompkins+0x1724>)
 80034d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034dc:	461a      	mov	r2, r3
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <Rafael_PanTompkins+0x1720>)
 80034e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fc fff4 	bl	80004d4 <__aeabi_i2d>
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	4b23      	ldr	r3, [pc, #140]	; (8003580 <Rafael_PanTompkins+0x1710>)
 80034f2:	f7fd f859 	bl	80005a8 <__aeabi_dmul>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4620      	mov	r0, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	f7fc fe9d 	bl	800023c <__adddf3>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f7fd fafd 	bl	8000b08 <__aeabi_d2iz>
 800350e:	4603      	mov	r3, r0
 8003510:	b21a      	sxth	r2, r3
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <Rafael_PanTompkins+0x16fc>)
 8003514:	801a      	strh	r2, [r3, #0]
					threshold_f2 = 0.5*threshold_f1;
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <Rafael_PanTompkins+0x16fc>)
 8003518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fc ffd9 	bl	80004d4 <__aeabi_i2d>
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <Rafael_PanTompkins+0x1714>)
 8003528:	f7fd f83e 	bl	80005a8 <__aeabi_dmul>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f7fd fae8 	bl	8000b08 <__aeabi_d2iz>
 8003538:	4603      	mov	r3, r0
 800353a:	b21a      	sxth	r2, r3
 800353c:	4b16      	ldr	r3, [pc, #88]	; (8003598 <Rafael_PanTompkins+0x1728>)
 800353e:	801a      	strh	r2, [r3, #0]
		// However, it updates a few samples back from the buffer. The reason is that if we update the detection
		// for the current sample, we might miss a peak that could've been found later by backsearching using
		// lighter thresholds. The final waveform output does match the original signal, though.

		//UPDATE: If peak was detected returns sample delay, else returns 0
		return result;
 8003540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800354e:	bf00      	nop
 8003550:	20002aa4 	.word	0x20002aa4
 8003554:	20002a8c 	.word	0x20002a8c
 8003558:	20002570 	.word	0x20002570
 800355c:	20002a74 	.word	0x20002a74
 8003560:	200020c0 	.word	0x200020c0
 8003564:	20002a94 	.word	0x20002a94
 8003568:	200012b0 	.word	0x200012b0
 800356c:	20002a98 	.word	0x20002a98
 8003570:	20002a90 	.word	0x20002a90
 8003574:	20002aa0 	.word	0x20002aa0
 8003578:	3fec0000 	.word	0x3fec0000
 800357c:	20002a9c 	.word	0x20002a9c
 8003580:	3fd00000 	.word	0x3fd00000
 8003584:	3fe00000 	.word	0x3fe00000
 8003588:	20002a96 	.word	0x20002a96
 800358c:	20002a92 	.word	0x20002a92
 8003590:	20002aa2 	.word	0x20002aa2
 8003594:	20002a9e 	.word	0x20002a9e
 8003598:	20002a9a 	.word	0x20002a9a

0800359c <Rafael_get_LPFilter_output>:


int16_t Rafael_get_LPFilter_output()
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
	return RF_lowpass[BUFFSIZE];
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <Rafael_get_LPFilter_output+0x14>)
 80035a2:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	20000e00 	.word	0x20000e00

080035b4 <Rafael_get_HPFilter_output>:
int16_t Rafael_get_HPFilter_output()
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
	return RF_highpass[BUFFSIZE];
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <Rafael_get_HPFilter_output+0x14>)
 80035ba:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	200012b0 	.word	0x200012b0

080035cc <Rafael_get_DRFilter_output>:
int16_t Rafael_get_DRFilter_output()
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
	return RF_derivative[BUFFSIZE];
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <Rafael_get_DRFilter_output+0x14>)
 80035d2:	f9b3 34b0 	ldrsh.w	r3, [r3, #1200]	; 0x4b0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	20001760 	.word	0x20001760

080035e4 <Rafael_get_SQRFilter_output>:
int16_t Rafael_get_SQRFilter_output()
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
	return RF_squared[current];
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <Rafael_get_SQRFilter_output+0x18>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <Rafael_get_SQRFilter_output+0x1c>)
 80035ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	20002a8c 	.word	0x20002a8c
 8003600:	20001c10 	.word	0x20001c10

08003604 <Rafael_get_MVFilter_output>:
int16_t Rafael_get_MVFilter_output()
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
	return RF_integral[current];
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <Rafael_get_MVFilter_output+0x18>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a04      	ldr	r2, [pc, #16]	; (8003620 <Rafael_get_MVFilter_output+0x1c>)
 800360e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20002a8c 	.word	0x20002a8c
 8003620:	200020c0 	.word	0x200020c0

08003624 <Rafael_get_ThI1_output>:
int16_t Rafael_get_ThI1_output()
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
	return threshold_i1;
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <Rafael_get_ThI1_output+0x14>)
 800362a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	20002a94 	.word	0x20002a94

0800363c <Rafael_get_ThF1_output>:
int16_t Rafael_get_ThF1_output()
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
	return threshold_f1;
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <Rafael_get_ThF1_output+0x14>)
 8003642:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20002a98 	.word	0x20002a98

08003654 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800365c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003660:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4313      	orrs	r3, r2
 800366a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003670:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4013      	ands	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003678:	68fb      	ldr	r3, [r7, #12]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <findStrEnd>:

struct State applicationState;

char str[60];
uint16_t findStrEnd ()
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
	uint16_t end = 10;
 800368e:	230a      	movs	r3, #10
 8003690:	80fb      	strh	r3, [r7, #6]
	while (str[end]!='\0')
 8003692:	e005      	b.n	80036a0 <findStrEnd+0x18>
	{
		end++;
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	3301      	adds	r3, #1
 8003698:	80fb      	strh	r3, [r7, #6]
		if (end == 60)
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2b3c      	cmp	r3, #60	; 0x3c
 800369e:	d005      	beq.n	80036ac <findStrEnd+0x24>
	while (str[end]!='\0')
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	4a06      	ldr	r2, [pc, #24]	; (80036bc <findStrEnd+0x34>)
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f4      	bne.n	8003694 <findStrEnd+0xc>
 80036aa:	e000      	b.n	80036ae <findStrEnd+0x26>
		{
			break;
 80036ac:	bf00      	nop
		}
	}
	return end;
 80036ae:	88fb      	ldrh	r3, [r7, #6]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	20002b00 	.word	0x20002b00

080036c0 <parseLine>:
void parseLine (uint8_t* Buf, uint32_t Len)
{//Function parse one line from serial port
 80036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c2:	b08f      	sub	sp, #60	; 0x3c
 80036c4:	af06      	add	r7, sp, #24
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	//In line can be command or data
	if (Len>6)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b06      	cmp	r3, #6
 80036ce:	d95b      	bls.n	8003788 <parseLine+0xc8>
	{//command mast be longer than 6 bytes
		if (Buf[0]==0x2B && Buf[1]==0x2B && Buf[2]==0x2B)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b2b      	cmp	r3, #43	; 0x2b
 80036d6:	d157      	bne.n	8003788 <parseLine+0xc8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3301      	adds	r3, #1
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b2b      	cmp	r3, #43	; 0x2b
 80036e0:	d152      	bne.n	8003788 <parseLine+0xc8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3302      	adds	r3, #2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b2b      	cmp	r3, #43	; 0x2b
 80036ea:	d14d      	bne.n	8003788 <parseLine+0xc8>
		{//three ++ indicate command
			switch (Buf[3])
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3303      	adds	r3, #3
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b41      	cmp	r3, #65	; 0x41
 80036f4:	d002      	beq.n	80036fc <parseLine+0x3c>
 80036f6:	2b42      	cmp	r3, #66	; 0x42
 80036f8:	d005      	beq.n	8003706 <parseLine+0x46>
 80036fa:	e033      	b.n	8003764 <parseLine+0xa4>
			{
			case changeDataFormat:
				applicationState.dataType = Buf[4];
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	791a      	ldrb	r2, [r3, #4]
 8003700:	4b85      	ldr	r3, [pc, #532]	; (8003918 <parseLine+0x258>)
 8003702:	701a      	strb	r2, [r3, #0]
				break;
 8003704:	e03f      	b.n	8003786 <parseLine+0xc6>
			case changeSelectedAlgorithm:
				applicationState.selectedImplementation = Buf[4];
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	791a      	ldrb	r2, [r3, #4]
 800370a:	4b83      	ldr	r3, [pc, #524]	; (8003918 <parseLine+0x258>)
 800370c:	705a      	strb	r2, [r3, #1]
				if (applicationState.selectedImplementation == hoomam650)
 800370e:	4b82      	ldr	r3, [pc, #520]	; (8003918 <parseLine+0x258>)
 8003710:	785b      	ldrb	r3, [r3, #1]
 8003712:	2b31      	cmp	r3, #49	; 0x31
 8003714:	d110      	bne.n	8003738 <parseLine+0x78>
				{
					PT_init();
 8003716:	f7fd fac5 	bl	8000ca4 <PT_init>
					sprintf(str,"OK, done.   \r\n");
 800371a:	4980      	ldr	r1, [pc, #512]	; (800391c <parseLine+0x25c>)
 800371c:	4880      	ldr	r0, [pc, #512]	; (8003920 <parseLine+0x260>)
 800371e:	f009 fee5 	bl	800d4ec <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003722:	bf00      	nop
 8003724:	f7ff ffb0 	bl	8003688 <findStrEnd>
 8003728:	4603      	mov	r3, r0
 800372a:	4619      	mov	r1, r3
 800372c:	487c      	ldr	r0, [pc, #496]	; (8003920 <parseLine+0x260>)
 800372e:	f008 fb83 	bl	800be38 <CDC_Transmit_FS>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f5      	bne.n	8003724 <parseLine+0x64>
				}
				if (applicationState.selectedImplementation == rafalmmoreira)
 8003738:	4b77      	ldr	r3, [pc, #476]	; (8003918 <parseLine+0x258>)
 800373a:	785b      	ldrb	r3, [r3, #1]
 800373c:	2b32      	cmp	r3, #50	; 0x32
 800373e:	d121      	bne.n	8003784 <parseLine+0xc4>
				{
					Rafael_init();
 8003740:	f7fe fb14 	bl	8001d6c <Rafael_init>
					sprintf(str,"OK, done.   \r\n");
 8003744:	4975      	ldr	r1, [pc, #468]	; (800391c <parseLine+0x25c>)
 8003746:	4876      	ldr	r0, [pc, #472]	; (8003920 <parseLine+0x260>)
 8003748:	f009 fed0 	bl	800d4ec <siprintf>
					while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 800374c:	bf00      	nop
 800374e:	f7ff ff9b 	bl	8003688 <findStrEnd>
 8003752:	4603      	mov	r3, r0
 8003754:	4619      	mov	r1, r3
 8003756:	4872      	ldr	r0, [pc, #456]	; (8003920 <parseLine+0x260>)
 8003758:	f008 fb6e 	bl	800be38 <CDC_Transmit_FS>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f5      	bne.n	800374e <parseLine+0x8e>
				}

				break;
 8003762:	e00f      	b.n	8003784 <parseLine+0xc4>
			default:
				sprintf(str,"error...\r\n");
 8003764:	496f      	ldr	r1, [pc, #444]	; (8003924 <parseLine+0x264>)
 8003766:	486e      	ldr	r0, [pc, #440]	; (8003920 <parseLine+0x260>)
 8003768:	f009 fec0 	bl	800d4ec <siprintf>
				while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 800376c:	bf00      	nop
 800376e:	f7ff ff8b 	bl	8003688 <findStrEnd>
 8003772:	4603      	mov	r3, r0
 8003774:	4619      	mov	r1, r3
 8003776:	486a      	ldr	r0, [pc, #424]	; (8003920 <parseLine+0x260>)
 8003778:	f008 fb5e 	bl	800be38 <CDC_Transmit_FS>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f5      	bne.n	800376e <parseLine+0xae>
				break;
 8003782:	e000      	b.n	8003786 <parseLine+0xc6>
				break;
 8003784:	bf00      	nop
			}
			return;
 8003786:	e0c3      	b.n	8003910 <parseLine+0x250>
		}
	}

	int16_t dataSample;
	switch (applicationState.dataType)
 8003788:	4b63      	ldr	r3, [pc, #396]	; (8003918 <parseLine+0x258>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b31      	cmp	r3, #49	; 0x31
 800378e:	d00c      	beq.n	80037aa <parseLine+0xea>
 8003790:	2b32      	cmp	r3, #50	; 0x32
 8003792:	d110      	bne.n	80037b6 <parseLine+0xf6>
	{//decode data
	case int16asBytes:
		dataSample = (Buf[0]<<8)|Buf[1];
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	b21a      	sxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3301      	adds	r3, #1
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b21b      	sxth	r3, r3
 80037a4:	4313      	orrs	r3, r2
 80037a6:	83fb      	strh	r3, [r7, #30]

		break;
 80037a8:	e015      	b.n	80037d6 <parseLine+0x116>
	case intasString:
		dataSample = atoi (Buf);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f008 ffe8 	bl	800c780 <atoi>
 80037b0:	4603      	mov	r3, r0
 80037b2:	83fb      	strh	r3, [r7, #30]

		break;
 80037b4:	e00f      	b.n	80037d6 <parseLine+0x116>
	default:
		sprintf(str,"error...\r\n");
 80037b6:	495b      	ldr	r1, [pc, #364]	; (8003924 <parseLine+0x264>)
 80037b8:	4859      	ldr	r0, [pc, #356]	; (8003920 <parseLine+0x260>)
 80037ba:	f009 fe97 	bl	800d4ec <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 80037be:	bf00      	nop
 80037c0:	f7ff ff62 	bl	8003688 <findStrEnd>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4619      	mov	r1, r3
 80037c8:	4855      	ldr	r0, [pc, #340]	; (8003920 <parseLine+0x260>)
 80037ca:	f008 fb35 	bl	800be38 <CDC_Transmit_FS>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f5      	bne.n	80037c0 <parseLine+0x100>
		return;
 80037d4:	e09c      	b.n	8003910 <parseLine+0x250>
	int16_t s4;
	int16_t s5;
	int16_t ThI1;
	int16_t ThF1;

	switch (applicationState.selectedImplementation)
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <parseLine+0x258>)
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	2b31      	cmp	r3, #49	; 0x31
 80037dc:	d002      	beq.n	80037e4 <parseLine+0x124>
 80037de:	2b32      	cmp	r3, #50	; 0x32
 80037e0:	d04b      	beq.n	800387a <parseLine+0x1ba>
		ThF1 = Rafael_get_ThF1_output();
		sprintf(str,"%d,%d,%d,%d,%d,%d,%d,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
		break;
	default:
		return;
 80037e2:	e095      	b.n	8003910 <parseLine+0x250>
		delay = PT_StateMachine (dataSample);
 80037e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd fb8d 	bl	8000f08 <PT_StateMachine>
 80037ee:	4603      	mov	r3, r0
 80037f0:	83bb      	strh	r3, [r7, #28]
		s1 = PT_get_LPFilter_output();
 80037f2:	f7fe fa67 	bl	8001cc4 <PT_get_LPFilter_output>
 80037f6:	4603      	mov	r3, r0
 80037f8:	837b      	strh	r3, [r7, #26]
		s2 = PT_get_HPFilter_output();
 80037fa:	f7fe fa6f 	bl	8001cdc <PT_get_HPFilter_output>
 80037fe:	4603      	mov	r3, r0
 8003800:	833b      	strh	r3, [r7, #24]
		s3 = PT_get_DRFilter_output();
 8003802:	f7fe fa77 	bl	8001cf4 <PT_get_DRFilter_output>
 8003806:	4603      	mov	r3, r0
 8003808:	82fb      	strh	r3, [r7, #22]
		s4 = PT_get_SQRFilter_output();
 800380a:	f7fe fa8b 	bl	8001d24 <PT_get_SQRFilter_output>
 800380e:	4603      	mov	r3, r0
 8003810:	82bb      	strh	r3, [r7, #20]
		s5 = PT_get_MVFilter_output();
 8003812:	f7fe fa7b 	bl	8001d0c <PT_get_MVFilter_output>
 8003816:	4603      	mov	r3, r0
 8003818:	827b      	strh	r3, [r7, #18]
		ThI1 = PT_get_ThI1_output();
 800381a:	f7fe fa8f 	bl	8001d3c <PT_get_ThI1_output>
 800381e:	4603      	mov	r3, r0
 8003820:	823b      	strh	r3, [r7, #16]
		ThF1 = PT_get_ThF1_output();
 8003822:	f7fe fa97 	bl	8001d54 <PT_get_ThF1_output>
 8003826:	4603      	mov	r3, r0
 8003828:	81fb      	strh	r3, [r7, #14]
		sprintf(str,"%d,%d,%d,%d,%d,%d,%d,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 800382a:	f9b7 601c 	ldrsh.w	r6, [r7, #28]
 800382e:	f9b7 c01a 	ldrsh.w	ip, [r7, #26]
 8003832:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003836:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800383a:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800383e:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8003842:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 8003846:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 800384a:	9505      	str	r5, [sp, #20]
 800384c:	9404      	str	r4, [sp, #16]
 800384e:	9003      	str	r0, [sp, #12]
 8003850:	9102      	str	r1, [sp, #8]
 8003852:	9201      	str	r2, [sp, #4]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	4663      	mov	r3, ip
 8003858:	4632      	mov	r2, r6
 800385a:	4933      	ldr	r1, [pc, #204]	; (8003928 <parseLine+0x268>)
 800385c:	4830      	ldr	r0, [pc, #192]	; (8003920 <parseLine+0x260>)
 800385e:	f009 fe45 	bl	800d4ec <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 8003862:	bf00      	nop
 8003864:	f7ff ff10 	bl	8003688 <findStrEnd>
 8003868:	4603      	mov	r3, r0
 800386a:	4619      	mov	r1, r3
 800386c:	482c      	ldr	r0, [pc, #176]	; (8003920 <parseLine+0x260>)
 800386e:	f008 fae3 	bl	800be38 <CDC_Transmit_FS>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f5      	bne.n	8003864 <parseLine+0x1a4>
		break;
 8003878:	e04a      	b.n	8003910 <parseLine+0x250>
		delay = Rafael_PanTompkins(dataSample);
 800387a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe faf6 	bl	8001e70 <Rafael_PanTompkins>
 8003884:	4603      	mov	r3, r0
 8003886:	83bb      	strh	r3, [r7, #28]
		s1 = Rafael_get_LPFilter_output();
 8003888:	f7ff fe88 	bl	800359c <Rafael_get_LPFilter_output>
 800388c:	4603      	mov	r3, r0
 800388e:	837b      	strh	r3, [r7, #26]
		s2 = Rafael_get_HPFilter_output();
 8003890:	f7ff fe90 	bl	80035b4 <Rafael_get_HPFilter_output>
 8003894:	4603      	mov	r3, r0
 8003896:	833b      	strh	r3, [r7, #24]
		s3 = Rafael_get_DRFilter_output();
 8003898:	f7ff fe98 	bl	80035cc <Rafael_get_DRFilter_output>
 800389c:	4603      	mov	r3, r0
 800389e:	82fb      	strh	r3, [r7, #22]
		s4 = Rafael_get_SQRFilter_output();
 80038a0:	f7ff fea0 	bl	80035e4 <Rafael_get_SQRFilter_output>
 80038a4:	4603      	mov	r3, r0
 80038a6:	82bb      	strh	r3, [r7, #20]
		s5 = Rafael_get_MVFilter_output();
 80038a8:	f7ff feac 	bl	8003604 <Rafael_get_MVFilter_output>
 80038ac:	4603      	mov	r3, r0
 80038ae:	827b      	strh	r3, [r7, #18]
		ThI1 = Rafael_get_ThI1_output();
 80038b0:	f7ff feb8 	bl	8003624 <Rafael_get_ThI1_output>
 80038b4:	4603      	mov	r3, r0
 80038b6:	823b      	strh	r3, [r7, #16]
		ThF1 = Rafael_get_ThF1_output();
 80038b8:	f7ff fec0 	bl	800363c <Rafael_get_ThF1_output>
 80038bc:	4603      	mov	r3, r0
 80038be:	81fb      	strh	r3, [r7, #14]
		sprintf(str,"%d,%d,%d,%d,%d,%d,%d,%d\r\n", delay, s1, s2, s3, s4, s5, ThI1, ThF1);
 80038c0:	f9b7 601c 	ldrsh.w	r6, [r7, #28]
 80038c4:	f9b7 c01a 	ldrsh.w	ip, [r7, #26]
 80038c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80038cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80038d0:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80038d4:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 80038d8:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 80038dc:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 80038e0:	9505      	str	r5, [sp, #20]
 80038e2:	9404      	str	r4, [sp, #16]
 80038e4:	9003      	str	r0, [sp, #12]
 80038e6:	9102      	str	r1, [sp, #8]
 80038e8:	9201      	str	r2, [sp, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	4663      	mov	r3, ip
 80038ee:	4632      	mov	r2, r6
 80038f0:	490d      	ldr	r1, [pc, #52]	; (8003928 <parseLine+0x268>)
 80038f2:	480b      	ldr	r0, [pc, #44]	; (8003920 <parseLine+0x260>)
 80038f4:	f009 fdfa 	bl	800d4ec <siprintf>
		while (CDC_Transmit_FS(str, findStrEnd())!= USBD_OK){};
 80038f8:	bf00      	nop
 80038fa:	f7ff fec5 	bl	8003688 <findStrEnd>
 80038fe:	4603      	mov	r3, r0
 8003900:	4619      	mov	r1, r3
 8003902:	4807      	ldr	r0, [pc, #28]	; (8003920 <parseLine+0x260>)
 8003904:	f008 fa98 	bl	800be38 <CDC_Transmit_FS>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f5      	bne.n	80038fa <parseLine+0x23a>
		break;
 800390e:	bf00      	nop
		break;
	}
}
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003916:	bf00      	nop
 8003918:	20002afc 	.word	0x20002afc
 800391c:	08011100 	.word	0x08011100
 8003920:	20002b00 	.word	0x20002b00
 8003924:	08011110 	.word	0x08011110
 8003928:	0801111c 	.word	0x0801111c

0800392c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003932:	f000 fb2d 	bl	8003f90 <HAL_Init>

  /* USER CODE BEGIN Init */
  applicationState.dataType = int16asBytes;
 8003936:	4b24      	ldr	r3, [pc, #144]	; (80039c8 <main+0x9c>)
 8003938:	2232      	movs	r2, #50	; 0x32
 800393a:	701a      	strb	r2, [r3, #0]
  applicationState.selectedImplementation = hoomam650;
 800393c:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <main+0x9c>)
 800393e:	2231      	movs	r2, #49	; 0x31
 8003940:	705a      	strb	r2, [r3, #1]
  PT_init();
 8003942:	f7fd f9af 	bl	8000ca4 <PT_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003946:	f000 f845 	bl	80039d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800394a:	f000 f8af 	bl	8003aac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800394e:	f000 f90b 	bl	8003b68 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8003952:	f008 f9ab 	bl	800bcac <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003956:	f000 f8c7 	bl	8003ae8 <MX_I2C1_Init>
  extern uint32_t byteInBuffer;
  extern uint8_t* bufferPointer;
  while (1)
  {
    /* USER CODE END WHILE */
	  if (byteInBuffer>0)
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <main+0xa0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d02e      	beq.n	80039c0 <main+0x94>
	  {
		  uint32_t index = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
		  uint32_t count = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
		  uint32_t i = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
		  do
		  {
			  i++;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3301      	adds	r3, #1
 8003972:	607b      	str	r3, [r7, #4]
			  count++;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3301      	adds	r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
			  if (*(bufferPointer+i)=='\n')
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <main+0xa4>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b0a      	cmp	r3, #10
 8003986:	d113      	bne.n	80039b0 <main+0x84>
			  {
				 count++;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	3301      	adds	r3, #1
 800398c:	60bb      	str	r3, [r7, #8]
				 parseLine (bufferPointer +index, count);
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <main+0xa4>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fe91 	bl	80036c0 <parseLine>
				 index += count;
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4413      	add	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
				 i++;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3301      	adds	r3, #1
 80039aa:	607b      	str	r3, [r7, #4]
				 count = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]
			  }
		  }while (i<byteInBuffer);
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <main+0xa0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d3d9      	bcc.n	800396e <main+0x42>
		  byteInBuffer = 0;
 80039ba:	4b04      	ldr	r3, [pc, #16]	; (80039cc <main+0xa0>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(5);
 80039c0:	2005      	movs	r0, #5
 80039c2:	f000 fb6b 	bl	800409c <HAL_Delay>
	  if (byteInBuffer>0)
 80039c6:	e7c8      	b.n	800395a <main+0x2e>
 80039c8:	20002afc 	.word	0x20002afc
 80039cc:	20003e18 	.word	0x20003e18
 80039d0:	20000124 	.word	0x20000124

080039d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b09a      	sub	sp, #104	; 0x68
 80039d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039da:	f107 0320 	add.w	r3, r7, #32
 80039de:	2248      	movs	r2, #72	; 0x48
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f008 fefa 	bl	800c7dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	611a      	str	r2, [r3, #16]
 80039f6:	615a      	str	r2, [r3, #20]
 80039f8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <SystemClock_Config+0xd4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a02:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <SystemClock_Config+0xd4>)
 8003a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <SystemClock_Config+0xd4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8003a16:	2326      	movs	r3, #38	; 0x26
 8003a18:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003a24:	2301      	movs	r3, #1
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a28:	2340      	movs	r3, #64	; 0x40
 8003a2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003a30:	2360      	movs	r3, #96	; 0x60
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a34:	2302      	movs	r3, #2
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8003a40:	2320      	movs	r3, #32
 8003a42:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a4a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a4e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a54:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a56:	f107 0320 	add.w	r3, r7, #32
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 ffc6 	bl	80069ec <HAL_RCC_OscConfig>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a66:	f000 f889 	bl	8003b7c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003a6a:	236f      	movs	r3, #111	; 0x6f
 8003a6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	2103      	movs	r1, #3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f003 fb22 	bl	80070d4 <HAL_RCC_ClockConfig>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003a96:	f000 f871 	bl	8003b7c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003a9a:	f004 f8b3 	bl	8007c04 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003a9e:	bf00      	nop
 8003aa0:	3768      	adds	r7, #104	; 0x68
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	58000400 	.word	0x58000400

08003aac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b094      	sub	sp, #80	; 0x50
 8003ab0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	2250      	movs	r2, #80	; 0x50
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f008 fe8f 	bl	800c7dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8003abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ac2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003ac8:	2310      	movs	r3, #16
 8003aca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003acc:	463b      	mov	r3, r7
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 ff22 	bl	8007918 <HAL_RCCEx_PeriphCLKConfig>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8003ada:	f000 f84f 	bl	8003b7c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003ade:	bf00      	nop
 8003ae0:	3750      	adds	r7, #80	; 0x50
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003aee:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <MX_I2C1_Init+0x78>)
 8003af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8003af2:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003af4:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <MX_I2C1_Init+0x7c>)
 8003af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003af8:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b22:	480e      	ldr	r0, [pc, #56]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003b24:	f000 fd5e 	bl	80045e4 <HAL_I2C_Init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b2e:	f000 f825 	bl	8003b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b32:	2100      	movs	r1, #0
 8003b34:	4809      	ldr	r0, [pc, #36]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003b36:	f000 fde4 	bl	8004702 <HAL_I2CEx_ConfigAnalogFilter>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003b40:	f000 f81c 	bl	8003b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b44:	2100      	movs	r1, #0
 8003b46:	4805      	ldr	r0, [pc, #20]	; (8003b5c <MX_I2C1_Init+0x74>)
 8003b48:	f000 fe26 	bl	8004798 <HAL_I2CEx_ConfigDigitalFilter>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003b52:	f000 f813 	bl	8003b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20002aa8 	.word	0x20002aa8
 8003b60:	40005400 	.word	0x40005400
 8003b64:	10707dbc 	.word	0x10707dbc

08003b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7ff fd71 	bl	8003654 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7ff fd6e 	bl	8003654 <LL_AHB2_GRP1_EnableClock>

}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b80:	b672      	cpsid	i
}
 8003b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <Error_Handler+0x8>

08003b86 <LL_AHB2_GRP1_EnableClock>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b09c      	sub	sp, #112	; 0x70
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c10:	f107 030c 	add.w	r3, r7, #12
 8003c14:	2250      	movs	r2, #80	; 0x50
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f008 fddf 	bl	800c7dc <memset>
  if(hi2c->Instance==I2C1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <HAL_I2C_MspInit+0x88>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d126      	bne.n	8003c76 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c28:	2304      	movs	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c2c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	4618      	mov	r0, r3
 8003c38:	f003 fe6e 	bl	8007918 <HAL_RCCEx_PeriphCLKConfig>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c42:	f7ff ff9b 	bl	8003b7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c46:	2002      	movs	r0, #2
 8003c48:	f7ff ff9d 	bl	8003b86 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c50:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c52:	2312      	movs	r3, #18
 8003c54:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c5e:	2304      	movs	r3, #4
 8003c60:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c66:	4619      	mov	r1, r3
 8003c68:	4806      	ldr	r0, [pc, #24]	; (8003c84 <HAL_I2C_MspInit+0x8c>)
 8003c6a:	f000 fb4b 	bl	8004304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003c72:	f7ff ffa1 	bl	8003bb8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c76:	bf00      	nop
 8003c78:	3770      	adds	r7, #112	; 0x70
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40005400 	.word	0x40005400
 8003c84:	48000400 	.word	0x48000400

08003c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c8c:	e7fe      	b.n	8003c8c <NMI_Handler+0x4>

08003c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c92:	e7fe      	b.n	8003c92 <HardFault_Handler+0x4>

08003c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c98:	e7fe      	b.n	8003c98 <MemManage_Handler+0x4>

08003c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c9e:	e7fe      	b.n	8003c9e <BusFault_Handler+0x4>

08003ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ca4:	e7fe      	b.n	8003ca4 <UsageFault_Handler+0x4>

08003ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd4:	f000 f9b6 	bl	8004044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003ce0:	4802      	ldr	r0, [pc, #8]	; (8003cec <USB_LP_IRQHandler+0x10>)
 8003ce2:	f000 feb2 	bl	8004a4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	2000401c 	.word	0x2000401c

08003cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
	return 1;
 8003cf4:	2301      	movs	r3, #1
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <_kill>:

int _kill(int pid, int sig)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d0a:	f008 fd3d 	bl	800c788 <__errno>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2216      	movs	r2, #22
 8003d12:	601a      	str	r2, [r3, #0]
	return -1;
 8003d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <_exit>:

void _exit (int status)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ffe7 	bl	8003d00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d32:	e7fe      	b.n	8003d32 <_exit+0x12>

08003d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e00a      	b.n	8003d5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d46:	f3af 8000 	nop.w
 8003d4a:	4601      	mov	r1, r0
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	60ba      	str	r2, [r7, #8]
 8003d52:	b2ca      	uxtb	r2, r1
 8003d54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	dbf0      	blt.n	8003d46 <_read+0x12>
	}

return len;
 8003d64:	687b      	ldr	r3, [r7, #4]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e009      	b.n	8003d94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	60ba      	str	r2, [r7, #8]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	3301      	adds	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	dbf1      	blt.n	8003d80 <_write+0x12>
	}
	return len;
 8003d9c:	687b      	ldr	r3, [r7, #4]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <_close>:

int _close(int file)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
	return -1;
 8003dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dce:	605a      	str	r2, [r3, #4]
	return 0;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <_isatty>:

int _isatty(int file)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
	return 1;
 8003de6:	2301      	movs	r3, #1
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
	return 0;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e18:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <_sbrk+0x5c>)
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <_sbrk+0x60>)
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e24:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <_sbrk+0x64>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <_sbrk+0x64>)
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <_sbrk+0x68>)
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <_sbrk+0x64>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d207      	bcs.n	8003e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e40:	f008 fca2 	bl	800c788 <__errno>
 8003e44:	4603      	mov	r3, r0
 8003e46:	220c      	movs	r2, #12
 8003e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	e009      	b.n	8003e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <_sbrk+0x64>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <_sbrk+0x64>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4a05      	ldr	r2, [pc, #20]	; (8003e74 <_sbrk+0x64>)
 8003e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e62:	68fb      	ldr	r3, [r7, #12]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20030000 	.word	0x20030000
 8003e70:	00000400 	.word	0x00000400
 8003e74:	20002b3c 	.word	0x20002b3c
 8003e78:	20004548 	.word	0x20004548

08003e7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <SystemInit+0x98>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <SystemInit+0x98>)
 8003e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003ea8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb4:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <SystemInit+0x9c>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec6:	f023 0305 	bic.w	r3, r3, #5
 8003eca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee6:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <SystemInit+0xa0>)
 8003ee8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eee:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <SystemInit+0xa0>)
 8003ef0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	2200      	movs	r2, #0
 8003f08:	619a      	str	r2, [r3, #24]
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	e000ed00 	.word	0xe000ed00
 8003f18:	faf6fefb 	.word	0xfaf6fefb
 8003f1c:	22041000 	.word	0x22041000

08003f20 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003f20:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f22:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f24:	3304      	adds	r3, #4

08003f26 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f26:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f28:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003f2a:	d3f9      	bcc.n	8003f20 <CopyDataInit>
  bx lr
 8003f2c:	4770      	bx	lr

08003f2e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003f2e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003f30:	3004      	adds	r0, #4

08003f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003f32:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003f34:	d3fb      	bcc.n	8003f2e <FillZerobss>
  bx lr
 8003f36:	4770      	bx	lr

08003f38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f38:	480c      	ldr	r0, [pc, #48]	; (8003f6c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003f3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f3c:	f7ff ff9e 	bl	8003e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003f40:	480b      	ldr	r0, [pc, #44]	; (8003f70 <LoopForever+0x8>)
 8003f42:	490c      	ldr	r1, [pc, #48]	; (8003f74 <LoopForever+0xc>)
 8003f44:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <LoopForever+0x10>)
 8003f46:	2300      	movs	r3, #0
 8003f48:	f7ff ffed 	bl	8003f26 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003f4c:	480b      	ldr	r0, [pc, #44]	; (8003f7c <LoopForever+0x14>)
 8003f4e:	490c      	ldr	r1, [pc, #48]	; (8003f80 <LoopForever+0x18>)
 8003f50:	2300      	movs	r3, #0
 8003f52:	f7ff ffee 	bl	8003f32 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003f56:	480b      	ldr	r0, [pc, #44]	; (8003f84 <LoopForever+0x1c>)
 8003f58:	490b      	ldr	r1, [pc, #44]	; (8003f88 <LoopForever+0x20>)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f7ff ffe9 	bl	8003f32 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003f60:	f008 fc18 	bl	800c794 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003f64:	f7ff fce2 	bl	800392c <main>

08003f68 <LoopForever>:

LoopForever:
  b LoopForever
 8003f68:	e7fe      	b.n	8003f68 <LoopForever>
 8003f6a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003f6c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003f70:	20000004 	.word	0x20000004
 8003f74:	20000364 	.word	0x20000364
 8003f78:	080116dc 	.word	0x080116dc
  INIT_BSS _sbss, _ebss
 8003f7c:	20000364 	.word	0x20000364
 8003f80:	20004544 	.word	0x20004544
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003f84:	20030000 	.word	0x20030000
 8003f88:	20030000 	.word	0x20030000

08003f8c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f8c:	e7fe      	b.n	8003f8c <ADC1_IRQHandler>
	...

08003f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <HAL_Init+0x3c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <HAL_Init+0x3c>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa6:	2003      	movs	r0, #3
 8003fa8:	f000 f96c 	bl	8004284 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fac:	200f      	movs	r0, #15
 8003fae:	f000 f80f 	bl	8003fd0 <HAL_InitTick>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	71fb      	strb	r3, [r7, #7]
 8003fbc:	e001      	b.n	8003fc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fbe:	f7ff fe14 	bl	8003bea <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	58004000 	.word	0x58004000

08003fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <HAL_InitTick+0x6c>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d024      	beq.n	800402e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fe4:	f003 fa24 	bl	8007430 <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_InitTick+0x6c>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f974 	bl	80042ea <HAL_SYSTICK_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10f      	bne.n	8004028 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	d809      	bhi.n	8004022 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800400e:	2200      	movs	r2, #0
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	f04f 30ff 	mov.w	r0, #4294967295
 8004016:	f000 f940 	bl	800429a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <HAL_InitTick+0x70>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e007      	b.n	8004032 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	e004      	b.n	8004032 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e001      	b.n	8004032 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000010 	.word	0x20000010
 8004040:	2000000c 	.word	0x2000000c

08004044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_IncTick+0x20>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_IncTick+0x24>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4413      	add	r3, r2
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <HAL_IncTick+0x24>)
 8004056:	6013      	str	r3, [r2, #0]
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000010 	.word	0x20000010
 8004068:	20002b40 	.word	0x20002b40

0800406c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return uwTick;
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <HAL_GetTick+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20002b40 	.word	0x20002b40

08004084 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <HAL_GetTickPrio+0x14>)
 800408a:	681b      	ldr	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2000000c 	.word	0x2000000c

0800409c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80040a4:	f7ff ffe2 	bl	800406c <HAL_GetTick>
 80040a8:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d005      	beq.n	80040c2 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_Delay+0x44>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80040c2:	bf00      	nop
 80040c4:	f7ff ffd2 	bl	800406c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d8f7      	bhi.n	80040c4 <HAL_Delay+0x28>
    {
    }
  }
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000010 	.word	0x20000010

080040e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <__NVIC_SetPriorityGrouping+0x44>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004100:	4013      	ands	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800410c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004116:	4a04      	ldr	r2, [pc, #16]	; (8004128 <__NVIC_SetPriorityGrouping+0x44>)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	60d3      	str	r3, [r2, #12]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <__NVIC_GetPriorityGrouping+0x18>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	f003 0307 	and.w	r3, r3, #7
}
 800413a:	4618      	mov	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004156:	2b00      	cmp	r3, #0
 8004158:	db0b      	blt.n	8004172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	f003 021f 	and.w	r2, r3, #31
 8004160:	4907      	ldr	r1, [pc, #28]	; (8004180 <__NVIC_EnableIRQ+0x38>)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2001      	movs	r0, #1
 800416a:	fa00 f202 	lsl.w	r2, r0, r2
 800416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	e000e100 	.word	0xe000e100

08004184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	6039      	str	r1, [r7, #0]
 800418e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	db0a      	blt.n	80041ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	490c      	ldr	r1, [pc, #48]	; (80041d0 <__NVIC_SetPriority+0x4c>)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	0112      	lsls	r2, r2, #4
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	440b      	add	r3, r1
 80041a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041ac:	e00a      	b.n	80041c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	4908      	ldr	r1, [pc, #32]	; (80041d4 <__NVIC_SetPriority+0x50>)
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	3b04      	subs	r3, #4
 80041bc:	0112      	lsls	r2, r2, #4
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	440b      	add	r3, r1
 80041c2:	761a      	strb	r2, [r3, #24]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000e100 	.word	0xe000e100
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f1c3 0307 	rsb	r3, r3, #7
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	bf28      	it	cs
 80041f6:	2304      	movcs	r3, #4
 80041f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3304      	adds	r3, #4
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d902      	bls.n	8004208 <NVIC_EncodePriority+0x30>
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	3b03      	subs	r3, #3
 8004206:	e000      	b.n	800420a <NVIC_EncodePriority+0x32>
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800420c:	f04f 32ff 	mov.w	r2, #4294967295
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43da      	mvns	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	401a      	ands	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004220:	f04f 31ff 	mov.w	r1, #4294967295
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	43d9      	mvns	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004230:	4313      	orrs	r3, r2
         );
}
 8004232:	4618      	mov	r0, r3
 8004234:	3724      	adds	r7, #36	; 0x24
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3b01      	subs	r3, #1
 800424c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004250:	d301      	bcc.n	8004256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004252:	2301      	movs	r3, #1
 8004254:	e00f      	b.n	8004276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004256:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <SysTick_Config+0x40>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3b01      	subs	r3, #1
 800425c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800425e:	210f      	movs	r1, #15
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	f7ff ff8e 	bl	8004184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <SysTick_Config+0x40>)
 800426a:	2200      	movs	r2, #0
 800426c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <SysTick_Config+0x40>)
 8004270:	2207      	movs	r2, #7
 8004272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	e000e010 	.word	0xe000e010

08004284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ff29 	bl	80040e4 <__NVIC_SetPriorityGrouping>
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	4603      	mov	r3, r0
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042a8:	f7ff ff40 	bl	800412c <__NVIC_GetPriorityGrouping>
 80042ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	6978      	ldr	r0, [r7, #20]
 80042b4:	f7ff ff90 	bl	80041d8 <NVIC_EncodePriority>
 80042b8:	4602      	mov	r2, r0
 80042ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff5f 	bl	8004184 <__NVIC_SetPriority>
}
 80042c6:	bf00      	nop
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	4603      	mov	r3, r0
 80042d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff33 	bl	8004148 <__NVIC_EnableIRQ>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ffa4 	bl	8004240 <SysTick_Config>
 80042f8:	4603      	mov	r3, r0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004312:	e14c      	b.n	80045ae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	2101      	movs	r1, #1
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	4013      	ands	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 813e 	beq.w	80045a8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d005      	beq.n	8004344 <HAL_GPIO_Init+0x40>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d130      	bne.n	80043a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	2203      	movs	r2, #3
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4013      	ands	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800437a:	2201      	movs	r2, #1
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f003 0201 	and.w	r2, r3, #1
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d017      	beq.n	80043e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	2203      	movs	r2, #3
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d123      	bne.n	8004436 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3208      	adds	r2, #8
 80043f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	220f      	movs	r2, #15
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	08da      	lsrs	r2, r3, #3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3208      	adds	r2, #8
 8004430:	6939      	ldr	r1, [r7, #16]
 8004432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	2203      	movs	r2, #3
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4013      	ands	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0203 	and.w	r2, r3, #3
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8098 	beq.w	80045a8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004478:	4a54      	ldr	r2, [pc, #336]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	3302      	adds	r3, #2
 8004480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	220f      	movs	r2, #15
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044a2:	d019      	beq.n	80044d8 <HAL_GPIO_Init+0x1d4>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a4a      	ldr	r2, [pc, #296]	; (80045d0 <HAL_GPIO_Init+0x2cc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <HAL_GPIO_Init+0x1d0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a49      	ldr	r2, [pc, #292]	; (80045d4 <HAL_GPIO_Init+0x2d0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00d      	beq.n	80044d0 <HAL_GPIO_Init+0x1cc>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a48      	ldr	r2, [pc, #288]	; (80045d8 <HAL_GPIO_Init+0x2d4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d007      	beq.n	80044cc <HAL_GPIO_Init+0x1c8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a47      	ldr	r2, [pc, #284]	; (80045dc <HAL_GPIO_Init+0x2d8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_GPIO_Init+0x1c4>
 80044c4:	2304      	movs	r3, #4
 80044c6:	e008      	b.n	80044da <HAL_GPIO_Init+0x1d6>
 80044c8:	2307      	movs	r3, #7
 80044ca:	e006      	b.n	80044da <HAL_GPIO_Init+0x1d6>
 80044cc:	2303      	movs	r3, #3
 80044ce:	e004      	b.n	80044da <HAL_GPIO_Init+0x1d6>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e002      	b.n	80044da <HAL_GPIO_Init+0x1d6>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_GPIO_Init+0x1d6>
 80044d8:	2300      	movs	r3, #0
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	f002 0203 	and.w	r2, r2, #3
 80044e0:	0092      	lsls	r2, r2, #2
 80044e2:	4093      	lsls	r3, r2
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044ea:	4938      	ldr	r1, [pc, #224]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	3302      	adds	r3, #2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044f8:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <HAL_GPIO_Init+0x2dc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	43db      	mvns	r3, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4013      	ands	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800451c:	4a30      	ldr	r2, [pc, #192]	; (80045e0 <HAL_GPIO_Init+0x2dc>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004522:	4b2f      	ldr	r3, [pc, #188]	; (80045e0 <HAL_GPIO_Init+0x2dc>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	43db      	mvns	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004546:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <HAL_GPIO_Init+0x2dc>)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800454c:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_GPIO_Init+0x2dc>)
 800454e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004572:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <HAL_GPIO_Init+0x2dc>)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800457a:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <HAL_GPIO_Init+0x2dc>)
 800457c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	43db      	mvns	r3, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045a0:	4a0f      	ldr	r2, [pc, #60]	; (80045e0 <HAL_GPIO_Init+0x2dc>)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f47f aeab 	bne.w	8004314 <HAL_GPIO_Init+0x10>
  }
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40010000 	.word	0x40010000
 80045d0:	48000400 	.word	0x48000400
 80045d4:	48000800 	.word	0x48000800
 80045d8:	48000c00 	.word	0x48000c00
 80045dc:	48001000 	.word	0x48001000
 80045e0:	58000800 	.word	0x58000800

080045e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e081      	b.n	80046fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff faf4 	bl	8003bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004634:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004644:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	e006      	b.n	800466c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800466a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d104      	bne.n	800467e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800467c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800468c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004690:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69d9      	ldr	r1, [r3, #28]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1a      	ldr	r2, [r3, #32]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b20      	cmp	r3, #32
 8004716:	d138      	bne.n	800478a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004722:	2302      	movs	r3, #2
 8004724:	e032      	b.n	800478c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2224      	movs	r2, #36	; 0x24
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004754:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6819      	ldr	r1, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e000      	b.n	800478c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800478a:	2302      	movs	r3, #2
  }
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d139      	bne.n	8004822 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e033      	b.n	8004824 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	; 0x24
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004832:	b08b      	sub	sp, #44	; 0x2c
 8004834:	af06      	add	r7, sp, #24
 8004836:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0dd      	b.n	80049fe <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f007 fc68 	bl	800c12c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2203      	movs	r2, #3
 8004860:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f003 faf6 	bl	8007e60 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e04d      	b.n	8004916 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	440b      	add	r3, r1
 800488a:	3305      	adds	r3, #5
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	440b      	add	r3, r1
 80048a0:	3304      	adds	r3, #4
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	b298      	uxth	r0, r3
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	440b      	add	r3, r1
 80048b8:	333a      	adds	r3, #58	; 0x3a
 80048ba:	4602      	mov	r2, r0
 80048bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	440b      	add	r3, r1
 80048ce:	3307      	adds	r3, #7
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048d4:	7bfa      	ldrb	r2, [r7, #15]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	440b      	add	r3, r1
 80048e2:	333c      	adds	r3, #60	; 0x3c
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	440b      	add	r3, r1
 80048f6:	3340      	adds	r3, #64	; 0x40
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048fc:	7bfa      	ldrb	r2, [r7, #15]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	440b      	add	r3, r1
 800490a:	3344      	adds	r3, #68	; 0x44
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	3301      	adds	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
 8004916:	7bfa      	ldrb	r2, [r7, #15]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d3ac      	bcc.n	800487a <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	e044      	b.n	80049b0 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	440b      	add	r3, r1
 8004934:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800493c:	7bfa      	ldrb	r2, [r7, #15]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	440b      	add	r3, r1
 800494a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004952:	7bfa      	ldrb	r2, [r7, #15]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	440b      	add	r3, r1
 8004960:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004968:	7bfa      	ldrb	r2, [r7, #15]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	440b      	add	r3, r1
 8004976:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	440b      	add	r3, r1
 800498c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004994:	7bfa      	ldrb	r2, [r7, #15]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	440b      	add	r3, r1
 80049a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	3301      	adds	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	7bfa      	ldrb	r2, [r7, #15]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3b5      	bcc.n	8004926 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	687e      	ldr	r6, [r7, #4]
 80049c2:	466d      	mov	r5, sp
 80049c4:	f106 0410 	add.w	r4, r6, #16
 80049c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80049d4:	1d33      	adds	r3, r6, #4
 80049d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d8:	6838      	ldr	r0, [r7, #0]
 80049da:	f003 fa5c 	bl	8007e96 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d102      	bne.n	80049fc <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f001 fc42 	bl	8006280 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_PCD_Start+0x16>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e012      	b.n	8004a42 <HAL_PCD_Start+0x3c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f003 fa02 	bl	8007e32 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f005 fc40 	bl	800a2b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f005 fc45 	bl	800a2e6 <USB_ReadInterrupts>
 8004a5c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb30 	bl	80050ce <PCD_EP_ISR_Handler>

    return;
 8004a6e:	e110      	b.n	8004c92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d013      	beq.n	8004aa2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f007 fbfd 	bl	800c292 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004a98:	2100      	movs	r1, #0
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8fc 	bl	8004c98 <HAL_PCD_SetAddress>

    return;
 8004aa0:	e0f7      	b.n	8004c92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004abe:	b292      	uxth	r2, r2
 8004ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ac4:	e0e5      	b.n	8004c92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ae8:	e0d3      	b.n	8004c92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d034      	beq.n	8004b5e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0204 	bic.w	r2, r2, #4
 8004b06:	b292      	uxth	r2, r2
 8004b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0208 	bic.w	r2, r2, #8
 8004b1e:	b292      	uxth	r2, r2
 8004b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d107      	bne.n	8004b3e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b36:	2100      	movs	r1, #0
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f007 fda1 	bl	800c680 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f007 fbe0 	bl	800c304 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b56:	b292      	uxth	r2, r2
 8004b58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b5c:	e099      	b.n	8004c92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d027      	beq.n	8004bb8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0208 	orr.w	r2, r2, #8
 8004b7a:	b292      	uxth	r2, r2
 8004b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b92:	b292      	uxth	r2, r2
 8004b94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0204 	orr.w	r2, r2, #4
 8004baa:	b292      	uxth	r2, r2
 8004bac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f007 fb8d 	bl	800c2d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004bb6:	e06c      	b.n	8004c92 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d040      	beq.n	8004c44 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d12b      	bne.n	8004c3c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0204 	orr.w	r2, r2, #4
 8004bf6:	b292      	uxth	r2, r2
 8004bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0208 	orr.w	r2, r2, #8
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c32:	2101      	movs	r1, #1
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f007 fd23 	bl	800c680 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004c3a:	e02a      	b.n	8004c92 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f007 fb47 	bl	800c2d0 <HAL_PCD_SuspendCallback>
    return;
 8004c42:	e026      	b.n	8004c92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00f      	beq.n	8004c6e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c60:	b292      	uxth	r2, r2
 8004c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f007 fb05 	bl	800c276 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c6c:	e011      	b.n	8004c92 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004c90:	bf00      	nop
  }
}
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_PCD_SetAddress+0x1a>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e013      	b.n	8004cda <HAL_PCD_SetAddress+0x42>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f005 fae0 	bl	800a290 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	4608      	mov	r0, r1
 8004cec:	4611      	mov	r1, r2
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	70fb      	strb	r3, [r7, #3]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	803b      	strh	r3, [r7, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	da0f      	bge.n	8004d28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	705a      	strb	r2, [r3, #1]
 8004d26:	e00f      	b.n	8004d48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	f003 0207 	and.w	r2, r3, #7
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3304      	adds	r3, #4
 8004d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d54:	883a      	ldrh	r2, [r7, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	78ba      	ldrb	r2, [r7, #2]
 8004d5e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d72:	78bb      	ldrb	r3, [r7, #2]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d102      	bne.n	8004d7e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_PCD_EP_Open+0xaa>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e00e      	b.n	8004daa <HAL_PCD_EP_Open+0xc8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f003 f89c 	bl	8007ed8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8004da8:	7afb      	ldrb	r3, [r7, #11]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da0f      	bge.n	8004de6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	3304      	adds	r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	705a      	strb	r2, [r3, #1]
 8004de4:	e00f      	b.n	8004e06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	f003 0207 	and.w	r2, r3, #7
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_PCD_EP_Close+0x6e>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e00e      	b.n	8004e3e <HAL_PCD_EP_Close+0x8c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f003 fc0c 	bl	800864c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b086      	sub	sp, #24
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	460b      	mov	r3, r1
 8004e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e56:	7afb      	ldrb	r3, [r7, #11]
 8004e58:	f003 0207 	and.w	r2, r3, #7
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2200      	movs	r2, #0
 8004e86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e88:	7afb      	ldrb	r3, [r7, #11]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e94:	7afb      	ldrb	r3, [r7, #11]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 fdbe 	bl	8008a26 <USB_EPStartXfer>
 8004eaa:	e005      	b.n	8004eb8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f003 fdb7 	bl	8008a26 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	f003 0207 	and.w	r2, r3, #7
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	440b      	add	r3, r1
 8004ee0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004ee4:	681b      	ldr	r3, [r3, #0]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	460b      	mov	r3, r1
 8004f00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4413      	add	r3, r2
 8004f16:	3304      	adds	r3, #4
 8004f18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2200      	movs	r2, #0
 8004f38:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f40:	7afb      	ldrb	r3, [r7, #11]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f4c:	7afb      	ldrb	r3, [r7, #11]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f003 fd62 	bl	8008a26 <USB_EPStartXfer>
 8004f62:	e005      	b.n	8004f70 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f003 fd5b 	bl	8008a26 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	f003 0207 	and.w	r2, r3, #7
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d901      	bls.n	8004f98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e040      	b.n	800501a <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	da0f      	bge.n	8004fc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	705a      	strb	r2, [r3, #1]
 8004fbe:	e00d      	b.n	8004fdc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_PCD_EP_SetStall+0x82>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e00e      	b.n	800501a <HAL_PCD_EP_SetStall+0xa0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68f9      	ldr	r1, [r7, #12]
 800500a:	4618      	mov	r0, r3
 800500c:	f005 f841 	bl	800a092 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d901      	bls.n	8005040 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e042      	b.n	80050c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005044:	2b00      	cmp	r3, #0
 8005046:	da0f      	bge.n	8005068 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4413      	add	r3, r2
 800505c:	3304      	adds	r3, #4
 800505e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	705a      	strb	r2, [r3, #1]
 8005066:	e00f      	b.n	8005088 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 0207 	and.w	r2, r3, #7
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	3304      	adds	r3, #4
 8005080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	b2da      	uxtb	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_PCD_EP_ClrStall+0x86>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e00e      	b.n	80050c6 <HAL_PCD_EP_ClrStall+0xa4>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68f9      	ldr	r1, [r7, #12]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f005 f83c 	bl	800a134 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b096      	sub	sp, #88	; 0x58
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80050d6:	e3a9      	b.n	800582c <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80050e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80050f2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f040 8169 	bne.w	80053ce <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80050fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d150      	bne.n	80051aa <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005118:	81fb      	strh	r3, [r7, #14]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	89fb      	ldrh	r3, [r7, #14]
 8005120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005128:	b29b      	uxth	r3, r3
 800512a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	332c      	adds	r3, #44	; 0x2c
 8005130:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513a:	b29b      	uxth	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	4413      	add	r3, r2
 800514c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005158:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800515a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	441a      	add	r2, r3
 8005164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005166:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005168:	2100      	movs	r1, #0
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f007 f869 	bl	800c242 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8357 	beq.w	800582c <PCD_EP_ISR_Handler+0x75e>
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 8352 	bne.w	800582c <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005194:	b2da      	uxtb	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	b292      	uxth	r2, r2
 800519c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80051a8:	e340      	b.n	800582c <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80051b0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80051bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80051c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d032      	beq.n	800522e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	4413      	add	r3, r2
 80051e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80051fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80051fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005200:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005202:	b29b      	uxth	r3, r3
 8005204:	f005 f8c1 	bl	800a38a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29a      	uxth	r2, r3
 8005210:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005214:	4013      	ands	r3, r2
 8005216:	823b      	strh	r3, [r7, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	8a3a      	ldrh	r2, [r7, #16]
 800521e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005222:	b292      	uxth	r2, r2
 8005224:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f006 ffde 	bl	800c1e8 <HAL_PCD_SetupStageCallback>
 800522c:	e2fe      	b.n	800582c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800522e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005232:	2b00      	cmp	r3, #0
 8005234:	f280 82fa 	bge.w	800582c <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29a      	uxth	r2, r3
 8005240:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005244:	4013      	ands	r3, r2
 8005246:	83fb      	strh	r3, [r7, #30]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	8bfa      	ldrh	r2, [r7, #30]
 800524e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005252:	b292      	uxth	r2, r2
 8005254:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525e:	b29b      	uxth	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6812      	ldr	r2, [r2, #0]
 800526e:	4413      	add	r3, r2
 8005270:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800527a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d019      	beq.n	80052ba <PCD_EP_ISR_Handler+0x1ec>
 8005286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d015      	beq.n	80052ba <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005294:	6959      	ldr	r1, [r3, #20]
 8005296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005298:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800529a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f005 f873 	bl	800a38a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80052a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	441a      	add	r2, r3
 80052ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80052b2:	2100      	movs	r1, #0
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f006 ffa9 	bl	800c20c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80052c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80052c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 82ad 	bne.w	800582c <PCD_EP_ISR_Handler+0x75e>
 80052d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80052d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80052da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052de:	f000 82a5 	beq.w	800582c <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	4413      	add	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b3e      	cmp	r3, #62	; 0x3e
 8005308:	d918      	bls.n	800533c <PCD_EP_ISR_Handler+0x26e>
 800530a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
 8005312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <PCD_EP_ISR_Handler+0x256>
 800531e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005320:	3b01      	subs	r3, #1
 8005322:	647b      	str	r3, [r7, #68]	; 0x44
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	b29b      	uxth	r3, r3
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	b29b      	uxth	r3, r3
 800532c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005334:	b29a      	uxth	r2, r3
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	e029      	b.n	8005390 <PCD_EP_ISR_Handler+0x2c2>
 800533c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d112      	bne.n	800536a <PCD_EP_ISR_Handler+0x29c>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800534e:	b29a      	uxth	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005362:	b29a      	uxth	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	e012      	b.n	8005390 <PCD_EP_ISR_Handler+0x2c2>
 800536a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	647b      	str	r3, [r7, #68]	; 0x44
 8005372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <PCD_EP_ISR_Handler+0x2b6>
 800537e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005380:	3301      	adds	r3, #1
 8005382:	647b      	str	r3, [r7, #68]	; 0x44
 8005384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005386:	b29b      	uxth	r3, r3
 8005388:	029b      	lsls	r3, r3, #10
 800538a:	b29a      	uxth	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	827b      	strh	r3, [r7, #18]
 80053a2:	8a7b      	ldrh	r3, [r7, #18]
 80053a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053a8:	827b      	strh	r3, [r7, #18]
 80053aa:	8a7b      	ldrh	r3, [r7, #18]
 80053ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053b0:	827b      	strh	r3, [r7, #18]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	8a7b      	ldrh	r3, [r7, #18]
 80053b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]
 80053cc:	e22e      	b.n	800582c <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053e2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f280 80f7 	bge.w	80055da <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005402:	4013      	ands	r3, r2
 8005404:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800541a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800541e:	b292      	uxth	r2, r2
 8005420:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005422:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4413      	add	r3, r2
 8005436:	3304      	adds	r3, #4
 8005438:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800543a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543c:	7b1b      	ldrb	r3, [r3, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d123      	bne.n	800548a <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	4413      	add	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	4413      	add	r3, r2
 800545c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005466:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800546a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 808e 	beq.w	8005590 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547a:	6959      	ldr	r1, [r3, #20]
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	88da      	ldrh	r2, [r3, #6]
 8005480:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005484:	f004 ff81 	bl	800a38a <USB_ReadPMA>
 8005488:	e082      	b.n	8005590 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800548a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548c:	78db      	ldrb	r3, [r3, #3]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d10a      	bne.n	80054a8 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005492:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005496:	461a      	mov	r2, r3
 8005498:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f9d4 	bl	8005848 <HAL_PCD_EP_DB_Receive>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80054a6:	e073      	b.n	8005590 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d022      	beq.n	800554c <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550e:	b29b      	uxth	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	4413      	add	r3, r2
 8005520:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800552e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005532:	2b00      	cmp	r3, #0
 8005534:	d02c      	beq.n	8005590 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	6959      	ldr	r1, [r3, #20]
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	891a      	ldrh	r2, [r3, #8]
 8005542:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005546:	f004 ff20 	bl	800a38a <USB_ReadPMA>
 800554a:	e021      	b.n	8005590 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005554:	b29b      	uxth	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	4413      	add	r3, r2
 8005566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005570:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005574:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005582:	6959      	ldr	r1, [r3, #20]
 8005584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005586:	895a      	ldrh	r2, [r3, #10]
 8005588:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800558c:	f004 fefd 	bl	800a38a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005598:	441a      	add	r2, r3
 800559a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800559e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a0:	695a      	ldr	r2, [r3, #20]
 80055a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055a6:	441a      	add	r2, r3
 80055a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <PCD_EP_ISR_Handler+0x4f2>
 80055b4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80055b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d206      	bcs.n	80055ce <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f006 fe20 	bl	800c20c <HAL_PCD_DataOutStageCallback>
 80055cc:	e005      	b.n	80055da <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80055d4:	4618      	mov	r0, r3
 80055d6:	f003 fa26 	bl	8008a26 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80055da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8122 	beq.w	800582c <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80055e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4413      	add	r3, r2
 80055fa:	3304      	adds	r3, #4
 80055fc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005618:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	441a      	add	r2, r3
 800562a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800562e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800563a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563c:	78db      	ldrb	r3, [r3, #3]
 800563e:	2b01      	cmp	r3, #1
 8005640:	f040 80a2 	bne.w	8005788 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8005644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005646:	2200      	movs	r2, #0
 8005648:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800564a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564c:	7b1b      	ldrb	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8093 	beq.w	800577a <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005654:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d046      	beq.n	80056ee <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d126      	bne.n	80056b6 <PCD_EP_ISR_Handler+0x5e8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005676:	b29b      	uxth	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	4413      	add	r3, r2
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	00da      	lsls	r2, r3, #3
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	4413      	add	r3, r2
 800568a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800569a:	b29a      	uxth	r2, r3
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	801a      	strh	r2, [r3, #0]
 80056b4:	e061      	b.n	800577a <PCD_EP_ISR_Handler+0x6ac>
 80056b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d15d      	bne.n	800577a <PCD_EP_ISR_Handler+0x6ac>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d2:	4413      	add	r3, r2
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	00da      	lsls	r2, r3, #3
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	4413      	add	r3, r2
 80056e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	2200      	movs	r2, #0
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	e045      	b.n	800577a <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d126      	bne.n	800574a <PCD_EP_ISR_Handler+0x67c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570a:	b29b      	uxth	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	4413      	add	r3, r2
 8005712:	637b      	str	r3, [r7, #52]	; 0x34
 8005714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	00da      	lsls	r2, r3, #3
 800571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571c:	4413      	add	r3, r2
 800571e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005722:	633b      	str	r3, [r7, #48]	; 0x30
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800572e:	b29a      	uxth	r2, r3
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	801a      	strh	r2, [r3, #0]
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005742:	b29a      	uxth	r2, r3
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	e017      	b.n	800577a <PCD_EP_ISR_Handler+0x6ac>
 800574a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d113      	bne.n	800577a <PCD_EP_ISR_Handler+0x6ac>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575a:	b29b      	uxth	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005760:	4413      	add	r3, r2
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	00da      	lsls	r2, r3, #3
 800576a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576c:	4413      	add	r3, r2
 800576e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005772:	63bb      	str	r3, [r7, #56]	; 0x38
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	2200      	movs	r2, #0
 8005778:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800577a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f006 fd5e 	bl	800c242 <HAL_PCD_DataInStageCallback>
 8005786:	e051      	b.n	800582c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005788:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d144      	bne.n	800581e <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579c:	b29b      	uxth	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4413      	add	r3, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d907      	bls.n	80057d8 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80057c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057d0:	1ad2      	subs	r2, r2, r3
 80057d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d4:	619a      	str	r2, [r3, #24]
 80057d6:	e002      	b.n	80057de <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80057d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057da:	2200      	movs	r2, #0
 80057dc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80057de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f006 fd28 	bl	800c242 <HAL_PCD_DataInStageCallback>
 80057f2:	e01b      	b.n	800582c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80057f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f6:	695a      	ldr	r2, [r3, #20]
 80057f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057fc:	441a      	add	r2, r3
 80057fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005800:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005804:	69da      	ldr	r2, [r3, #28]
 8005806:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800580a:	441a      	add	r2, r3
 800580c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005816:	4618      	mov	r0, r3
 8005818:	f003 f905 	bl	8008a26 <USB_EPStartXfer>
 800581c:	e006      	b.n	800582c <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800581e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005822:	461a      	mov	r2, r3
 8005824:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f917 	bl	8005a5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005834:	b29b      	uxth	r3, r3
 8005836:	b21b      	sxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	f6ff ac4d 	blt.w	80050d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3758      	adds	r7, #88	; 0x58
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d07c      	beq.n	800595a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005868:	b29b      	uxth	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	4413      	add	r3, r2
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	4413      	add	r3, r2
 800587a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005884:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	8b7b      	ldrh	r3, [r7, #26]
 800588c:	429a      	cmp	r2, r3
 800588e:	d306      	bcc.n	800589e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	8b7b      	ldrh	r3, [r7, #26]
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	619a      	str	r2, [r3, #24]
 800589c:	e002      	b.n	80058a4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d123      	bne.n	80058f4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	833b      	strh	r3, [r7, #24]
 80058c8:	8b3b      	ldrh	r3, [r7, #24]
 80058ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058ce:	833b      	strh	r3, [r7, #24]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	441a      	add	r2, r3
 80058de:	8b3b      	ldrh	r3, [r7, #24]
 80058e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01f      	beq.n	800593e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005918:	82fb      	strh	r3, [r7, #22]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	441a      	add	r2, r3
 8005928:	8afb      	ldrh	r3, [r7, #22]
 800592a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005936:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800593a:	b29b      	uxth	r3, r3
 800593c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800593e:	8b7b      	ldrh	r3, [r7, #26]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8085 	beq.w	8005a50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6959      	ldr	r1, [r3, #20]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	891a      	ldrh	r2, [r3, #8]
 8005952:	8b7b      	ldrh	r3, [r7, #26]
 8005954:	f004 fd19 	bl	800a38a <USB_ReadPMA>
 8005958:	e07a      	b.n	8005a50 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005962:	b29b      	uxth	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	4413      	add	r3, r2
 8005974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	8b7b      	ldrh	r3, [r7, #26]
 8005986:	429a      	cmp	r2, r3
 8005988:	d306      	bcc.n	8005998 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	8b7b      	ldrh	r3, [r7, #26]
 8005990:	1ad2      	subs	r2, r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	619a      	str	r2, [r3, #24]
 8005996:	e002      	b.n	800599e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d123      	bne.n	80059ee <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c0:	83fb      	strh	r3, [r7, #30]
 80059c2:	8bfb      	ldrh	r3, [r7, #30]
 80059c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059c8:	83fb      	strh	r3, [r7, #30]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	8bfb      	ldrh	r3, [r7, #30]
 80059da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d11f      	bne.n	8005a38 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	83bb      	strh	r3, [r7, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	441a      	add	r2, r3
 8005a22:	8bbb      	ldrh	r3, [r7, #28]
 8005a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a38:	8b7b      	ldrh	r3, [r7, #26]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6959      	ldr	r1, [r3, #20]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	895a      	ldrh	r2, [r3, #10]
 8005a4a:	8b7b      	ldrh	r3, [r7, #26]
 8005a4c:	f004 fc9d 	bl	800a38a <USB_ReadPMA>
    }
  }

  return count;
 8005a50:	8b7b      	ldrh	r3, [r7, #26]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3720      	adds	r7, #32
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b0a2      	sub	sp, #136	; 0x88
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	4613      	mov	r3, r2
 8005a66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 81c5 	beq.w	8005dfe <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d907      	bls.n	8005ab8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ab0:	1ad2      	subs	r2, r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	619a      	str	r2, [r3, #24]
 8005ab6:	e002      	b.n	8005abe <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f040 80b9 	bne.w	8005c3a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d126      	bne.n	8005b1e <HAL_PCD_EP_DB_Transmit+0xc4>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	4413      	add	r3, r2
 8005ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	00da      	lsls	r2, r3, #3
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	4413      	add	r3, r2
 8005af2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	e01a      	b.n	8005b54 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d116      	bne.n	8005b54 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	4413      	add	r3, r2
 8005b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	00da      	lsls	r2, r3, #3
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	4413      	add	r3, r2
 8005b48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	2200      	movs	r2, #0
 8005b52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	623b      	str	r3, [r7, #32]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d126      	bne.n	8005bb0 <HAL_PCD_EP_DB_Transmit+0x156>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	4413      	add	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	00da      	lsls	r2, r3, #3
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	e017      	b.n	8005be0 <HAL_PCD_EP_DB_Transmit+0x186>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d113      	bne.n	8005be0 <HAL_PCD_EP_DB_Transmit+0x186>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	623b      	str	r3, [r7, #32]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	00da      	lsls	r2, r3, #3
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	4619      	mov	r1, r3
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f006 fb2b 	bl	800c242 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 82d2 	beq.w	800619c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	827b      	strh	r3, [r7, #18]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	441a      	add	r2, r3
 8005c22:	8a7b      	ldrh	r3, [r7, #18]
 8005c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8013      	strh	r3, [r2, #0]
 8005c38:	e2b0      	b.n	800619c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d021      	beq.n	8005c88 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	f040 8284 	bne.w	800619c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	695a      	ldr	r2, [r3, #20]
 8005c98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c9c:	441a      	add	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	69da      	ldr	r2, [r3, #28]
 8005ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005caa:	441a      	add	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6a1a      	ldr	r2, [r3, #32]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d309      	bcc.n	8005cd0 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	1ad2      	subs	r2, r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	621a      	str	r2, [r3, #32]
 8005cce:	e015      	b.n	8005cfc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d107      	bne.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005cd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cdc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005ce6:	e009      	b.n	8005cfc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d155      	bne.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x356>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	4413      	add	r3, r2
 8005d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	00da      	lsls	r2, r3, #3
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	4413      	add	r3, r2
 8005d26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d30:	d916      	bls.n	8005d60 <HAL_PCD_EP_DB_Transmit+0x306>
 8005d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d102      	bne.n	8005d48 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8005d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d44:	3b01      	subs	r3, #1
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	029b      	lsls	r3, r3, #10
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e043      	b.n	8005de8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d112      	bne.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x332>
 8005d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	e02d      	b.n	8005de8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_PCD_EP_DB_Transmit+0x348>
 8005d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9e:	3301      	adds	r3, #1
 8005da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	029b      	lsls	r3, r3, #10
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e01b      	b.n	8005de8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d117      	bne.n	8005de8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dcc:	4413      	add	r3, r2
 8005dce:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	00da      	lsls	r2, r3, #3
 8005dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd8:	4413      	add	r3, r2
 8005dda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6959      	ldr	r1, [r3, #20]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	891a      	ldrh	r2, [r3, #8]
 8005df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f004 fa85 	bl	800a306 <USB_WritePMA>
 8005dfc:	e1ce      	b.n	800619c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4413      	add	r3, r2
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	4413      	add	r3, r2
 8005e18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d307      	bcc.n	8005e42 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e3a:	1ad2      	subs	r2, r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	619a      	str	r2, [r3, #24]
 8005e40:	e002      	b.n	8005e48 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2200      	movs	r2, #0
 8005e46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 80c4 	bne.w	8005fda <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d126      	bne.n	8005ea8 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e6e:	4413      	add	r3, r2
 8005e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	00da      	lsls	r2, r3, #3
 8005e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e80:	667b      	str	r3, [r7, #100]	; 0x64
 8005e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	e01a      	b.n	8005ede <HAL_PCD_EP_DB_Transmit+0x484>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d116      	bne.n	8005ede <HAL_PCD_EP_DB_Transmit+0x484>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	673b      	str	r3, [r7, #112]	; 0x70
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ec4:	4413      	add	r3, r2
 8005ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	00da      	lsls	r2, r3, #3
 8005ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	2200      	movs	r2, #0
 8005edc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d12f      	bne.n	8005f4c <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f04:	4413      	add	r3, r2
 8005f06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	00da      	lsls	r2, r3, #3
 8005f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f14:	4413      	add	r3, r2
 8005f16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	e017      	b.n	8005f7c <HAL_PCD_EP_DB_Transmit+0x522>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d113      	bne.n	8005f7c <HAL_PCD_EP_DB_Transmit+0x522>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f62:	4413      	add	r3, r2
 8005f64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	00da      	lsls	r2, r3, #3
 8005f6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f6e:	4413      	add	r3, r2
 8005f70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f78:	2200      	movs	r2, #0
 8005f7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	4619      	mov	r1, r3
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f006 f95d 	bl	800c242 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 8104 	bne.w	800619c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]
 8005fd8:	e0e0      	b.n	800619c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d121      	bne.n	8006028 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	441a      	add	r2, r3
 8006010:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800602e:	2b01      	cmp	r3, #1
 8006030:	f040 80b4 	bne.w	800619c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	695a      	ldr	r2, [r3, #20]
 8006038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800603c:	441a      	add	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800604a:	441a      	add	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6a1a      	ldr	r2, [r3, #32]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	429a      	cmp	r2, r3
 800605a:	d309      	bcc.n	8006070 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	1ad2      	subs	r2, r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	621a      	str	r2, [r3, #32]
 800606e:	e015      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006078:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800607c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006086:	e009      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2200      	movs	r2, #0
 8006092:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	663b      	str	r3, [r7, #96]	; 0x60
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d155      	bne.n	8006156 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060be:	4413      	add	r3, r2
 80060c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	00da      	lsls	r2, r3, #3
 80060c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060d0:	657b      	str	r3, [r7, #84]	; 0x54
 80060d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d4:	2b3e      	cmp	r3, #62	; 0x3e
 80060d6:	d916      	bls.n	8006106 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80060d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	677b      	str	r3, [r7, #116]	; 0x74
 80060de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e0:	f003 031f 	and.w	r3, r3, #31
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d102      	bne.n	80060ee <HAL_PCD_EP_DB_Transmit+0x694>
 80060e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ea:	3b01      	subs	r3, #1
 80060ec:	677b      	str	r3, [r7, #116]	; 0x74
 80060ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	029b      	lsls	r3, r3, #10
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fe:	b29a      	uxth	r2, r3
 8006100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	e040      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006108:	2b00      	cmp	r3, #0
 800610a:	d112      	bne.n	8006132 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800610c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006116:	b29a      	uxth	r2, r3
 8006118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612a:	b29a      	uxth	r2, r3
 800612c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	e02a      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	677b      	str	r3, [r7, #116]	; 0x74
 8006138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8006142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006144:	3301      	adds	r3, #1
 8006146:	677b      	str	r3, [r7, #116]	; 0x74
 8006148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800614a:	b29b      	uxth	r3, r3
 800614c:	029b      	lsls	r3, r3, #10
 800614e:	b29a      	uxth	r2, r3
 8006150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e018      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d114      	bne.n	8006188 <HAL_PCD_EP_DB_Transmit+0x72e>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006166:	b29b      	uxth	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800616c:	4413      	add	r3, r2
 800616e:	663b      	str	r3, [r7, #96]	; 0x60
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	00da      	lsls	r2, r3, #3
 8006176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006178:	4413      	add	r3, r2
 800617a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800617e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006182:	b29a      	uxth	r2, r3
 8006184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006186:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6959      	ldr	r1, [r3, #20]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	895a      	ldrh	r2, [r3, #10]
 8006194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006196:	b29b      	uxth	r3, r3
 8006198:	f004 f8b5 	bl	800a306 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b6:	823b      	strh	r3, [r7, #16]
 80061b8:	8a3b      	ldrh	r3, [r7, #16]
 80061ba:	f083 0310 	eor.w	r3, r3, #16
 80061be:	823b      	strh	r3, [r7, #16]
 80061c0:	8a3b      	ldrh	r3, [r7, #16]
 80061c2:	f083 0320 	eor.w	r3, r3, #32
 80061c6:	823b      	strh	r3, [r7, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	8a3b      	ldrh	r3, [r7, #16]
 80061d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3788      	adds	r7, #136	; 0x88
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b087      	sub	sp, #28
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	607b      	str	r3, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	817b      	strh	r3, [r7, #10]
 8006204:	4613      	mov	r3, r2
 8006206:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006208:	897b      	ldrh	r3, [r7, #10]
 800620a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00c      	beq.n	800622e <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006214:	897b      	ldrh	r3, [r7, #10]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	3304      	adds	r3, #4
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e00a      	b.n	8006244 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800622e:	897a      	ldrh	r2, [r7, #10]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	3304      	adds	r3, #4
 8006242:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006244:	893b      	ldrh	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d107      	bne.n	800625a <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2200      	movs	r2, #0
 800624e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	b29a      	uxth	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	80da      	strh	r2, [r3, #6]
 8006258:	e00b      	b.n	8006272 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2201      	movs	r2, #1
 800625e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	b29a      	uxth	r2, r3
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	b29a      	uxth	r2, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f043 0301 	orr.w	r3, r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f043 0302 	orr.w	r3, r3, #2
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062d8:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a04      	ldr	r2, [pc, #16]	; (80062f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e2:	6013      	str	r3, [r2, #0]
}
 80062e4:	bf00      	nop
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	58000400 	.word	0x58000400

080062f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <HAL_PWREx_GetVoltageRange+0x18>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006300:	4618      	mov	r0, r3
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	58000400 	.word	0x58000400

08006310 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4a04      	ldr	r2, [pc, #16]	; (800632c <HAL_PWREx_EnableVddUSB+0x1c>)
 800631a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800631e:	6053      	str	r3, [r2, #4]
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	58000400 	.word	0x58000400

08006330 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800633e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006342:	d101      	bne.n	8006348 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006344:	2301      	movs	r3, #1
 8006346:	e000      	b.n	800634a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006366:	6013      	str	r3, [r2, #0]
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8006372:	b480      	push	{r7}
 8006374:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006384:	6013      	str	r3, [r2, #0]
}
 8006386:	bf00      	nop
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063a2:	d101      	bne.n	80063a8 <LL_RCC_HSE_IsReady+0x18>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <LL_RCC_HSE_IsReady+0x1a>
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80063b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c6:	6013      	str	r3, [r2, #0]
}
 80063c8:	bf00      	nop
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80063d2:	b480      	push	{r7}
 80063d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80063d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e4:	6013      	str	r3, [r2, #0]
}
 80063e6:	bf00      	nop
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80063f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006402:	d101      	bne.n	8006408 <LL_RCC_HSI_IsReady+0x18>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <LL_RCC_HSI_IsReady+0x1a>
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800641c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	061b      	lsls	r3, r3, #24
 800642a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800642e:	4313      	orrs	r3, r2
 8006430:	604b      	str	r3, [r1, #4]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800643e:	b480      	push	{r7}
 8006440:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800644a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006456:	bf00      	nop
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006468:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800646c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006478:	bf00      	nop
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006482:	b480      	push	{r7}
 8006484:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b02      	cmp	r3, #2
 8006494:	d101      	bne.n	800649a <LL_RCC_HSI48_IsReady+0x18>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <LL_RCC_HSI48_IsReady+0x1a>
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80064a6:	b480      	push	{r7}
 80064a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80064be:	bf00      	nop
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d8:	f023 0301 	bic.w	r3, r3, #1
 80064dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80064e0:	bf00      	nop
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80064ea:	b480      	push	{r7}
 80064ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80064ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064fa:	f043 0304 	orr.w	r3, r3, #4
 80064fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006502:	bf00      	nop
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800651c:	f023 0304 	bic.w	r3, r3, #4
 8006520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800652e:	b480      	push	{r7}
 8006530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b02      	cmp	r3, #2
 8006540:	d101      	bne.n	8006546 <LL_RCC_LSE_IsReady+0x18>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <LL_RCC_LSE_IsReady+0x1a>
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006552:	b480      	push	{r7}
 8006554:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800655e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800656a:	bf00      	nop
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800658c:	bf00      	nop
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006596:	b480      	push	{r7}
 8006598:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800659a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d101      	bne.n	80065ae <LL_RCC_LSI1_IsReady+0x18>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <LL_RCC_LSI1_IsReady+0x1a>
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80065ba:	b480      	push	{r7}
 80065bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80065be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ca:	f043 0304 	orr.w	r3, r3, #4
 80065ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80065d2:	bf00      	nop
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80065e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ec:	f023 0304 	bic.w	r3, r3, #4
 80065f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80065f4:	bf00      	nop
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80065fe:	b480      	push	{r7}
 8006600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b08      	cmp	r3, #8
 8006610:	d101      	bne.n	8006616 <LL_RCC_LSI2_IsReady+0x18>
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <LL_RCC_LSI2_IsReady+0x1a>
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800662a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800662e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006632:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	6013      	str	r3, [r2, #0]
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800666e:	b480      	push	{r7}
 8006670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	6013      	str	r3, [r2, #0]
}
 8006682:	bf00      	nop
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b02      	cmp	r3, #2
 800669c:	d101      	bne.n	80066a2 <LL_RCC_MSI_IsReady+0x16>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <LL_RCC_MSI_IsReady+0x18>
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80066b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	600b      	str	r3, [r1, #0]
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80066dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066e6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2bb0      	cmp	r3, #176	; 0xb0
 80066ec:	d901      	bls.n	80066f2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80066ee:	23b0      	movs	r3, #176	; 0xb0
 80066f0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80066f2:	687b      	ldr	r3, [r7, #4]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800671a:	4313      	orrs	r3, r2
 800671c:	604b      	str	r3, [r1, #4]
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f023 0203 	bic.w	r2, r3, #3
 800673c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4313      	orrs	r3, r2
 8006744:	608b      	str	r3, [r1, #8]
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006752:	b480      	push	{r7}
 8006754:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 030c 	and.w	r3, r3, #12
}
 8006760:	4618      	mov	r0, r3
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800677c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4313      	orrs	r3, r2
 8006784:	608b      	str	r3, [r1, #8]
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800679a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800679e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80067a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80067c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80067ce:	f023 020f 	bic.w	r2, r3, #15
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80067f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4313      	orrs	r3, r2
 8006806:	608b      	str	r3, [r1, #8]
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800681c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4313      	orrs	r3, r2
 800682e:	608b      	str	r3, [r1, #8]
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800684a:	4618      	mov	r0, r3
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800685c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006866:	4618      	mov	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800687e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006882:	6013      	str	r3, [r2, #0]
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800688e:	b480      	push	{r7}
 8006890:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800689c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068a0:	6013      	str	r3, [r2, #0]
}
 80068a2:	bf00      	nop
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80068b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068be:	d101      	bne.n	80068c4 <LL_RCC_PLL_IsReady+0x18>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <LL_RCC_PLL_IsReady+0x1a>
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80068d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	0a1b      	lsrs	r3, r3, #8
 80068dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80068ea:	b480      	push	{r7}
 80068ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80068ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006902:	b480      	push	{r7}
 8006904:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006910:	4618      	mov	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800691a:	b480      	push	{r7}
 800691c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800691e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0303 	and.w	r3, r3, #3
}
 8006928:	4618      	mov	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006932:	b480      	push	{r7}
 8006934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006944:	d101      	bne.n	800694a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006956:	b480      	push	{r7}
 8006958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800695a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800695e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800696a:	d101      	bne.n	8006970 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006984:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800698c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006990:	d101      	bne.n	8006996 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80069a2:	b480      	push	{r7}
 80069a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80069a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069b4:	d101      	bne.n	80069ba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80069c6:	b480      	push	{r7}
 80069c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80069ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069d8:	d101      	bne.n	80069de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
	...

080069ec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069ec:	b590      	push	{r4, r7, lr}
 80069ee:	b08d      	sub	sp, #52	; 0x34
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e363      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 808d 	beq.w	8006b26 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a0c:	f7ff fea1 	bl	8006752 <LL_RCC_GetSysClkSource>
 8006a10:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a12:	f7ff ff82 	bl	800691a <LL_RCC_PLL_GetMainSource>
 8006a16:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_RCC_OscConfig+0x3e>
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	2b0c      	cmp	r3, #12
 8006a22:	d147      	bne.n	8006ab4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d144      	bne.n	8006ab4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e347      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a3a:	f7ff fe4c 	bl	80066d6 <LL_RCC_MSI_GetRange>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	429c      	cmp	r4, r3
 8006a42:	d914      	bls.n	8006a6e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fd05 	bl	8007458 <RCC_SetFlashLatencyFromMSIRange>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e336      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff fe26 	bl	80066ae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fe4a 	bl	8006700 <LL_RCC_MSI_SetCalibTrimming>
 8006a6c:	e013      	b.n	8006a96 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fe1b 	bl	80066ae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff fe3f 	bl	8006700 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fce6 	bl	8007458 <RCC_SetFlashLatencyFromMSIRange>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e317      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006a96:	f000 fccb 	bl	8007430 <HAL_RCC_GetHCLKFreq>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4aa4      	ldr	r2, [pc, #656]	; (8006d30 <HAL_RCC_OscConfig+0x344>)
 8006a9e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006aa0:	4ba4      	ldr	r3, [pc, #656]	; (8006d34 <HAL_RCC_OscConfig+0x348>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fd fa93 	bl	8003fd0 <HAL_InitTick>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d039      	beq.n	8006b24 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e308      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01e      	beq.n	8006afa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006abc:	f7ff fdc8 	bl	8006650 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ac0:	f7fd fad4 	bl	800406c <HAL_GetTick>
 8006ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ac8:	f7fd fad0 	bl	800406c <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e2f5      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ada:	f7ff fdd7 	bl	800668c <LL_RCC_MSI_IsReady>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f1      	beq.n	8006ac8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fde0 	bl	80066ae <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fe04 	bl	8006700 <LL_RCC_MSI_SetCalibTrimming>
 8006af8:	e015      	b.n	8006b26 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006afa:	f7ff fdb8 	bl	800666e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006afe:	f7fd fab5 	bl	800406c <HAL_GetTick>
 8006b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b06:	f7fd fab1 	bl	800406c <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e2d6      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006b18:	f7ff fdb8 	bl	800668c <LL_RCC_MSI_IsReady>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f1      	bne.n	8006b06 <HAL_RCC_OscConfig+0x11a>
 8006b22:	e000      	b.n	8006b26 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006b24:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d047      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b32:	f7ff fe0e 	bl	8006752 <LL_RCC_GetSysClkSource>
 8006b36:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b38:	f7ff feef 	bl	800691a <LL_RCC_PLL_GetMainSource>
 8006b3c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d005      	beq.n	8006b50 <HAL_RCC_OscConfig+0x164>
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	2b0c      	cmp	r3, #12
 8006b48:	d108      	bne.n	8006b5c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d105      	bne.n	8006b5c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d134      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e2b4      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b64:	d102      	bne.n	8006b6c <HAL_RCC_OscConfig+0x180>
 8006b66:	f7ff fbf5 	bl	8006354 <LL_RCC_HSE_Enable>
 8006b6a:	e001      	b.n	8006b70 <HAL_RCC_OscConfig+0x184>
 8006b6c:	f7ff fc01 	bl	8006372 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d012      	beq.n	8006b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b78:	f7fd fa78 	bl	800406c <HAL_GetTick>
 8006b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b80:	f7fd fa74 	bl	800406c <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	; 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e299      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006b92:	f7ff fbfd 	bl	8006390 <LL_RCC_HSE_IsReady>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0f1      	beq.n	8006b80 <HAL_RCC_OscConfig+0x194>
 8006b9c:	e011      	b.n	8006bc2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fd fa65 	bl	800406c <HAL_GetTick>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ba6:	f7fd fa61 	bl	800406c <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b64      	cmp	r3, #100	; 0x64
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e286      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006bb8:	f7ff fbea 	bl	8006390 <LL_RCC_HSE_IsReady>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f1      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d04c      	beq.n	8006c68 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bce:	f7ff fdc0 	bl	8006752 <LL_RCC_GetSysClkSource>
 8006bd2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bd4:	f7ff fea1 	bl	800691a <LL_RCC_PLL_GetMainSource>
 8006bd8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d005      	beq.n	8006bec <HAL_RCC_OscConfig+0x200>
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	2b0c      	cmp	r3, #12
 8006be4:	d10e      	bne.n	8006c04 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d10b      	bne.n	8006c04 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e266      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fc09 	bl	8006414 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006c02:	e031      	b.n	8006c68 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d019      	beq.n	8006c40 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c0c:	f7ff fbd2 	bl	80063b4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c10:	f7fd fa2c 	bl	800406c <HAL_GetTick>
 8006c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c18:	f7fd fa28 	bl	800406c <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e24d      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006c2a:	f7ff fbe1 	bl	80063f0 <LL_RCC_HSI_IsReady>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f1      	beq.n	8006c18 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fbeb 	bl	8006414 <LL_RCC_HSI_SetCalibTrimming>
 8006c3e:	e013      	b.n	8006c68 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c40:	f7ff fbc7 	bl	80063d2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c44:	f7fd fa12 	bl	800406c <HAL_GetTick>
 8006c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c4c:	f7fd fa0e 	bl	800406c <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e233      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006c5e:	f7ff fbc7 	bl	80063f0 <LL_RCC_HSI_IsReady>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1f1      	bne.n	8006c4c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d106      	bne.n	8006c82 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 80a3 	beq.w	8006dc8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d076      	beq.n	8006d78 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d046      	beq.n	8006d24 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006c96:	f7ff fc7e 	bl	8006596 <LL_RCC_LSI1_IsReady>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d113      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006ca0:	f7ff fc57 	bl	8006552 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ca4:	f7fd f9e2 	bl	800406c <HAL_GetTick>
 8006ca8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006cac:	f7fd f9de 	bl	800406c <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e203      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006cbe:	f7ff fc6a 	bl	8006596 <LL_RCC_LSI1_IsReady>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f1      	beq.n	8006cac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006cc8:	f7ff fc77 	bl	80065ba <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ccc:	f7fd f9ce 	bl	800406c <HAL_GetTick>
 8006cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006cd4:	f7fd f9ca 	bl	800406c <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e1ef      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006ce6:	f7ff fc8a 	bl	80065fe <LL_RCC_LSI2_IsReady>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0f1      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fc94 	bl	8006622 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006cfa:	f7ff fc3b 	bl	8006574 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfe:	f7fd f9b5 	bl	800406c <HAL_GetTick>
 8006d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006d06:	f7fd f9b1 	bl	800406c <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e1d6      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006d18:	f7ff fc3d 	bl	8006596 <LL_RCC_LSI1_IsReady>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f1      	bne.n	8006d06 <HAL_RCC_OscConfig+0x31a>
 8006d22:	e051      	b.n	8006dc8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006d24:	f7ff fc15 	bl	8006552 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fd f9a0 	bl	800406c <HAL_GetTick>
 8006d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006d2e:	e00c      	b.n	8006d4a <HAL_RCC_OscConfig+0x35e>
 8006d30:	20000008 	.word	0x20000008
 8006d34:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006d38:	f7fd f998 	bl	800406c <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e1bd      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006d4a:	f7ff fc24 	bl	8006596 <LL_RCC_LSI1_IsReady>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0f1      	beq.n	8006d38 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006d54:	f7ff fc42 	bl	80065dc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006d58:	e008      	b.n	8006d6c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006d5a:	f7fd f987 	bl	800406c <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e1ac      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006d6c:	f7ff fc47 	bl	80065fe <LL_RCC_LSI2_IsReady>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f1      	bne.n	8006d5a <HAL_RCC_OscConfig+0x36e>
 8006d76:	e027      	b.n	8006dc8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006d78:	f7ff fc30 	bl	80065dc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7c:	f7fd f976 	bl	800406c <HAL_GetTick>
 8006d80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006d82:	e008      	b.n	8006d96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006d84:	f7fd f972 	bl	800406c <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e197      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006d96:	f7ff fc32 	bl	80065fe <LL_RCC_LSI2_IsReady>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f1      	bne.n	8006d84 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006da0:	f7ff fbe8 	bl	8006574 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da4:	f7fd f962 	bl	800406c <HAL_GetTick>
 8006da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006dac:	f7fd f95e 	bl	800406c <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e183      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006dbe:	f7ff fbea 	bl	8006596 <LL_RCC_LSI1_IsReady>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f1      	bne.n	8006dac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d05b      	beq.n	8006e8c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dd4:	4ba7      	ldr	r3, [pc, #668]	; (8007074 <HAL_RCC_OscConfig+0x688>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d114      	bne.n	8006e0a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006de0:	f7ff fa78 	bl	80062d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006de4:	f7fd f942 	bl	800406c <HAL_GetTick>
 8006de8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dec:	f7fd f93e 	bl	800406c <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e163      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dfe:	4b9d      	ldr	r3, [pc, #628]	; (8007074 <HAL_RCC_OscConfig+0x688>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d102      	bne.n	8006e18 <HAL_RCC_OscConfig+0x42c>
 8006e12:	f7ff fb48 	bl	80064a6 <LL_RCC_LSE_Enable>
 8006e16:	e00c      	b.n	8006e32 <HAL_RCC_OscConfig+0x446>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b05      	cmp	r3, #5
 8006e1e:	d104      	bne.n	8006e2a <HAL_RCC_OscConfig+0x43e>
 8006e20:	f7ff fb63 	bl	80064ea <LL_RCC_LSE_EnableBypass>
 8006e24:	f7ff fb3f 	bl	80064a6 <LL_RCC_LSE_Enable>
 8006e28:	e003      	b.n	8006e32 <HAL_RCC_OscConfig+0x446>
 8006e2a:	f7ff fb4d 	bl	80064c8 <LL_RCC_LSE_Disable>
 8006e2e:	f7ff fb6d 	bl	800650c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d014      	beq.n	8006e64 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3a:	f7fd f917 	bl	800406c <HAL_GetTick>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006e40:	e00a      	b.n	8006e58 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e42:	f7fd f913 	bl	800406c <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e136      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006e58:	f7ff fb69 	bl	800652e <LL_RCC_LSE_IsReady>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0ef      	beq.n	8006e42 <HAL_RCC_OscConfig+0x456>
 8006e62:	e013      	b.n	8006e8c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e64:	f7fd f902 	bl	800406c <HAL_GetTick>
 8006e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006e6a:	e00a      	b.n	8006e82 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6c:	f7fd f8fe 	bl	800406c <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e121      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006e82:	f7ff fb54 	bl	800652e <LL_RCC_LSE_IsReady>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1ef      	bne.n	8006e6c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d02c      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d014      	beq.n	8006eca <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ea0:	f7ff facd 	bl	800643e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea4:	f7fd f8e2 	bl	800406c <HAL_GetTick>
 8006ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eac:	f7fd f8de 	bl	800406c <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e103      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006ebe:	f7ff fae0 	bl	8006482 <LL_RCC_HSI48_IsReady>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f1      	beq.n	8006eac <HAL_RCC_OscConfig+0x4c0>
 8006ec8:	e013      	b.n	8006ef2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006eca:	f7ff fac9 	bl	8006460 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ece:	f7fd f8cd 	bl	800406c <HAL_GetTick>
 8006ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ed6:	f7fd f8c9 	bl	800406c <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e0ee      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006ee8:	f7ff facb 	bl	8006482 <LL_RCC_HSI48_IsReady>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f1      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 80e4 	beq.w	80070c4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006efc:	f7ff fc29 	bl	8006752 <LL_RCC_GetSysClkSource>
 8006f00:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	f040 80b4 	bne.w	800707c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0203 	and.w	r2, r3, #3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d123      	bne.n	8006f6a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d11c      	bne.n	8006f6a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d114      	bne.n	8006f6a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d10d      	bne.n	8006f6a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d106      	bne.n	8006f6a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d05d      	beq.n	8007026 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b0c      	cmp	r3, #12
 8006f6e:	d058      	beq.n	8007022 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e0a1      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006f82:	f7ff fc84 	bl	800688e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f86:	f7fd f871 	bl	800406c <HAL_GetTick>
 8006f8a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f8e:	f7fd f86d 	bl	800406c <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e092      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1ef      	bne.n	8006f8e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	4b30      	ldr	r3, [pc, #192]	; (8007078 <HAL_RCC_OscConfig+0x68c>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fc0:	4311      	orrs	r1, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fc6:	0212      	lsls	r2, r2, #8
 8006fc8:	4311      	orrs	r1, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006fce:	4311      	orrs	r1, r2
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006fd4:	4311      	orrs	r1, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006fe4:	f7ff fc44 	bl	8006870 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ff8:	f7fd f838 	bl	800406c <HAL_GetTick>
 8006ffc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007000:	f7fd f834 	bl	800406c <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e059      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0ef      	beq.n	8007000 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007020:	e050      	b.n	80070c4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e04f      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d147      	bne.n	80070c4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007034:	f7ff fc1c 	bl	8006870 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007046:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007048:	f7fd f810 	bl	800406c <HAL_GetTick>
 800704c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007050:	f7fd f80c 	bl	800406c <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e031      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0ef      	beq.n	8007050 <HAL_RCC_OscConfig+0x664>
 8007070:	e028      	b.n	80070c4 <HAL_RCC_OscConfig+0x6d8>
 8007072:	bf00      	nop
 8007074:	58000400 	.word	0x58000400
 8007078:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2b0c      	cmp	r3, #12
 8007080:	d01e      	beq.n	80070c0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007082:	f7ff fc04 	bl	800688e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007086:	f7fc fff1 	bl	800406c <HAL_GetTick>
 800708a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800708c:	e008      	b.n	80070a0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800708e:	f7fc ffed 	bl	800406c <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e012      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1ef      	bne.n	800708e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80070ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <HAL_RCC_OscConfig+0x6e4>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	60cb      	str	r3, [r1, #12]
 80070be:	e001      	b.n	80070c4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e000      	b.n	80070c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3734      	adds	r7, #52	; 0x34
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd90      	pop	{r4, r7, pc}
 80070ce:	bf00      	nop
 80070d0:	eefefffc 	.word	0xeefefffc

080070d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e12d      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070e8:	4b98      	ldr	r3, [pc, #608]	; (800734c <HAL_RCC_ClockConfig+0x278>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d91b      	bls.n	800712e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f6:	4b95      	ldr	r3, [pc, #596]	; (800734c <HAL_RCC_ClockConfig+0x278>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f023 0207 	bic.w	r2, r3, #7
 80070fe:	4993      	ldr	r1, [pc, #588]	; (800734c <HAL_RCC_ClockConfig+0x278>)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	4313      	orrs	r3, r2
 8007104:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007106:	f7fc ffb1 	bl	800406c <HAL_GetTick>
 800710a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800710c:	e008      	b.n	8007120 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800710e:	f7fc ffad 	bl	800406c <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e111      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007120:	4b8a      	ldr	r3, [pc, #552]	; (800734c <HAL_RCC_ClockConfig+0x278>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d1ef      	bne.n	800710e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d016      	beq.n	8007168 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fb13 	bl	800676a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007144:	f7fc ff92 	bl	800406c <HAL_GetTick>
 8007148:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800714a:	e008      	b.n	800715e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800714c:	f7fc ff8e 	bl	800406c <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e0f2      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800715e:	f7ff fbe8 	bl	8006932 <LL_RCC_IsActiveFlag_HPRE>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d0f1      	beq.n	800714c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d016      	beq.n	80071a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff fb0a 	bl	8006792 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800717e:	f7fc ff75 	bl	800406c <HAL_GetTick>
 8007182:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007184:	e008      	b.n	8007198 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007186:	f7fc ff71 	bl	800406c <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d901      	bls.n	8007198 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e0d5      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007198:	f7ff fbdd 	bl	8006956 <LL_RCC_IsActiveFlag_C2HPRE>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0f1      	beq.n	8007186 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d016      	beq.n	80071dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7ff fb03 	bl	80067be <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80071b8:	f7fc ff58 	bl	800406c <HAL_GetTick>
 80071bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80071c0:	f7fc ff54 	bl	800406c <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e0b8      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80071d2:	f7ff fbd3 	bl	800697c <LL_RCC_IsActiveFlag_SHDHPRE>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f1      	beq.n	80071c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d016      	beq.n	8007216 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fafd 	bl	80067ec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80071f2:	f7fc ff3b 	bl	800406c <HAL_GetTick>
 80071f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80071f8:	e008      	b.n	800720c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80071fa:	f7fc ff37 	bl	800406c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e09b      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800720c:	f7ff fbc9 	bl	80069a2 <LL_RCC_IsActiveFlag_PPRE1>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f1      	beq.n	80071fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b00      	cmp	r3, #0
 8007220:	d017      	beq.n	8007252 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff faf3 	bl	8006814 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800722e:	f7fc ff1d 	bl	800406c <HAL_GetTick>
 8007232:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007234:	e008      	b.n	8007248 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007236:	f7fc ff19 	bl	800406c <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d901      	bls.n	8007248 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e07d      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007248:	f7ff fbbd 	bl	80069c6 <LL_RCC_IsActiveFlag_PPRE2>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0f1      	beq.n	8007236 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d043      	beq.n	80072e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d106      	bne.n	8007274 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007266:	f7ff f893 	bl	8006390 <LL_RCC_HSE_IsReady>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d11e      	bne.n	80072ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e067      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2b03      	cmp	r3, #3
 800727a:	d106      	bne.n	800728a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800727c:	f7ff fb16 	bl	80068ac <LL_RCC_PLL_IsReady>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d113      	bne.n	80072ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e05c      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007292:	f7ff f9fb 	bl	800668c <LL_RCC_MSI_IsReady>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d108      	bne.n	80072ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e051      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80072a0:	f7ff f8a6 	bl	80063f0 <LL_RCC_HSI_IsReady>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e04a      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fa39 	bl	800672a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072b8:	f7fc fed8 	bl	800406c <HAL_GetTick>
 80072bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072be:	e00a      	b.n	80072d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c0:	f7fc fed4 	bl	800406c <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e036      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072d6:	f7ff fa3c 	bl	8006752 <LL_RCC_GetSysClkSource>
 80072da:	4602      	mov	r2, r0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d1ec      	bne.n	80072c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072e6:	4b19      	ldr	r3, [pc, #100]	; (800734c <HAL_RCC_ClockConfig+0x278>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d21b      	bcs.n	800732c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <HAL_RCC_ClockConfig+0x278>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f023 0207 	bic.w	r2, r3, #7
 80072fc:	4913      	ldr	r1, [pc, #76]	; (800734c <HAL_RCC_ClockConfig+0x278>)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	4313      	orrs	r3, r2
 8007302:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007304:	f7fc feb2 	bl	800406c <HAL_GetTick>
 8007308:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800730a:	e008      	b.n	800731e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800730c:	f7fc feae 	bl	800406c <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e012      	b.n	8007344 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800731e:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_RCC_ClockConfig+0x278>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d1ef      	bne.n	800730c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800732c:	f000 f880 	bl	8007430 <HAL_RCC_GetHCLKFreq>
 8007330:	4603      	mov	r3, r0
 8007332:	4a07      	ldr	r2, [pc, #28]	; (8007350 <HAL_RCC_ClockConfig+0x27c>)
 8007334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007336:	f7fc fea5 	bl	8004084 <HAL_GetTickPrio>
 800733a:	4603      	mov	r3, r0
 800733c:	4618      	mov	r0, r3
 800733e:	f7fc fe47 	bl	8003fd0 <HAL_InitTick>
 8007342:	4603      	mov	r3, r0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	58004000 	.word	0x58004000
 8007350:	20000008 	.word	0x20000008

08007354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800735a:	f7ff f9fa 	bl	8006752 <LL_RCC_GetSysClkSource>
 800735e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10a      	bne.n	800737c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007366:	f7ff f9b6 	bl	80066d6 <LL_RCC_MSI_GetRange>
 800736a:	4603      	mov	r3, r0
 800736c:	091b      	lsrs	r3, r3, #4
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	4a2b      	ldr	r2, [pc, #172]	; (8007420 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	e04b      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b04      	cmp	r3, #4
 8007380:	d102      	bne.n	8007388 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007382:	4b28      	ldr	r3, [pc, #160]	; (8007424 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e045      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b08      	cmp	r3, #8
 800738c:	d10a      	bne.n	80073a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800738e:	f7fe ffcf 	bl	8006330 <LL_RCC_HSE_IsEnabledDiv2>
 8007392:	4603      	mov	r3, r0
 8007394:	2b01      	cmp	r3, #1
 8007396:	d102      	bne.n	800739e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007398:	4b23      	ldr	r3, [pc, #140]	; (8007428 <HAL_RCC_GetSysClockFreq+0xd4>)
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	e03a      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800739e:	4b23      	ldr	r3, [pc, #140]	; (800742c <HAL_RCC_GetSysClockFreq+0xd8>)
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e037      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80073a4:	f7ff fab9 	bl	800691a <LL_RCC_PLL_GetMainSource>
 80073a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d003      	beq.n	80073b8 <HAL_RCC_GetSysClockFreq+0x64>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d003      	beq.n	80073be <HAL_RCC_GetSysClockFreq+0x6a>
 80073b6:	e00d      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80073b8:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <HAL_RCC_GetSysClockFreq+0xd0>)
 80073ba:	60bb      	str	r3, [r7, #8]
        break;
 80073bc:	e015      	b.n	80073ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80073be:	f7fe ffb7 	bl	8006330 <LL_RCC_HSE_IsEnabledDiv2>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d102      	bne.n	80073ce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80073c8:	4b17      	ldr	r3, [pc, #92]	; (8007428 <HAL_RCC_GetSysClockFreq+0xd4>)
 80073ca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80073cc:	e00d      	b.n	80073ea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80073ce:	4b17      	ldr	r3, [pc, #92]	; (800742c <HAL_RCC_GetSysClockFreq+0xd8>)
 80073d0:	60bb      	str	r3, [r7, #8]
        break;
 80073d2:	e00a      	b.n	80073ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80073d4:	f7ff f97f 	bl	80066d6 <LL_RCC_MSI_GetRange>
 80073d8:	4603      	mov	r3, r0
 80073da:	091b      	lsrs	r3, r3, #4
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	4a0f      	ldr	r2, [pc, #60]	; (8007420 <HAL_RCC_GetSysClockFreq+0xcc>)
 80073e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e6:	60bb      	str	r3, [r7, #8]
        break;
 80073e8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80073ea:	f7ff fa71 	bl	80068d0 <LL_RCC_PLL_GetN>
 80073ee:	4602      	mov	r2, r0
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	fb03 f402 	mul.w	r4, r3, r2
 80073f6:	f7ff fa84 	bl	8006902 <LL_RCC_PLL_GetDivider>
 80073fa:	4603      	mov	r3, r0
 80073fc:	091b      	lsrs	r3, r3, #4
 80073fe:	3301      	adds	r3, #1
 8007400:	fbb4 f4f3 	udiv	r4, r4, r3
 8007404:	f7ff fa71 	bl	80068ea <LL_RCC_PLL_GetR>
 8007408:	4603      	mov	r3, r0
 800740a:	0f5b      	lsrs	r3, r3, #29
 800740c:	3301      	adds	r3, #1
 800740e:	fbb4 f3f3 	udiv	r3, r4, r3
 8007412:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007414:	68fb      	ldr	r3, [r7, #12]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	bd90      	pop	{r4, r7, pc}
 800741e:	bf00      	nop
 8007420:	080111ec 	.word	0x080111ec
 8007424:	00f42400 	.word	0x00f42400
 8007428:	003d0900 	.word	0x003d0900
 800742c:	007a1200 	.word	0x007a1200

08007430 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007430:	b598      	push	{r3, r4, r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007434:	f7ff ff8e 	bl	8007354 <HAL_RCC_GetSysClockFreq>
 8007438:	4604      	mov	r4, r0
 800743a:	f7ff f9ff 	bl	800683c <LL_RCC_GetAHBPrescaler>
 800743e:	4603      	mov	r3, r0
 8007440:	091b      	lsrs	r3, r3, #4
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	4a03      	ldr	r2, [pc, #12]	; (8007454 <HAL_RCC_GetHCLKFreq+0x24>)
 8007448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007450:	4618      	mov	r0, r3
 8007452:	bd98      	pop	{r3, r4, r7, pc}
 8007454:	080111ac 	.word	0x080111ac

08007458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2bb0      	cmp	r3, #176	; 0xb0
 8007464:	d903      	bls.n	800746e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007466:	4b15      	ldr	r3, [pc, #84]	; (80074bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e007      	b.n	800747e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	091b      	lsrs	r3, r3, #4
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	4a11      	ldr	r2, [pc, #68]	; (80074bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800747e:	f7ff f9e9 	bl	8006854 <LL_RCC_GetAHB4Prescaler>
 8007482:	4603      	mov	r3, r0
 8007484:	091b      	lsrs	r3, r3, #4
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	4a0d      	ldr	r2, [pc, #52]	; (80074c0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800748c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	fbb2 f3f3 	udiv	r3, r2, r3
 8007496:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a0a      	ldr	r2, [pc, #40]	; (80074c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800749c:	fba2 2303 	umull	r2, r3, r2, r3
 80074a0:	0c9c      	lsrs	r4, r3, #18
 80074a2:	f7fe ff27 	bl	80062f4 <HAL_PWREx_GetVoltageRange>
 80074a6:	4603      	mov	r3, r0
 80074a8:	4619      	mov	r1, r3
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 f80c 	bl	80074c8 <RCC_SetFlashLatency>
 80074b0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd90      	pop	{r4, r7, pc}
 80074ba:	bf00      	nop
 80074bc:	080111ec 	.word	0x080111ec
 80074c0:	080111ac 	.word	0x080111ac
 80074c4:	431bde83 	.word	0x431bde83

080074c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b093      	sub	sp, #76	; 0x4c
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80074d2:	4b37      	ldr	r3, [pc, #220]	; (80075b0 <RCC_SetFlashLatency+0xe8>)
 80074d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80074d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80074da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80074de:	4a35      	ldr	r2, [pc, #212]	; (80075b4 <RCC_SetFlashLatency+0xec>)
 80074e0:	f107 031c 	add.w	r3, r7, #28
 80074e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80074e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80074ea:	4b33      	ldr	r3, [pc, #204]	; (80075b8 <RCC_SetFlashLatency+0xf0>)
 80074ec:	f107 040c 	add.w	r4, r7, #12
 80074f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80074f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80074f6:	2300      	movs	r3, #0
 80074f8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007500:	d11a      	bne.n	8007538 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007502:	2300      	movs	r3, #0
 8007504:	643b      	str	r3, [r7, #64]	; 0x40
 8007506:	e013      	b.n	8007530 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	3348      	adds	r3, #72	; 0x48
 800750e:	443b      	add	r3, r7
 8007510:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d807      	bhi.n	800752a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800751a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	3348      	adds	r3, #72	; 0x48
 8007520:	443b      	add	r3, r7
 8007522:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007526:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007528:	e020      	b.n	800756c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800752a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752c:	3301      	adds	r3, #1
 800752e:	643b      	str	r3, [r7, #64]	; 0x40
 8007530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007532:	2b03      	cmp	r3, #3
 8007534:	d9e8      	bls.n	8007508 <RCC_SetFlashLatency+0x40>
 8007536:	e019      	b.n	800756c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007538:	2300      	movs	r3, #0
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800753c:	e013      	b.n	8007566 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	3348      	adds	r3, #72	; 0x48
 8007544:	443b      	add	r3, r7
 8007546:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	d807      	bhi.n	8007560 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	3348      	adds	r3, #72	; 0x48
 8007556:	443b      	add	r3, r7
 8007558:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800755c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800755e:	e005      	b.n	800756c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007562:	3301      	adds	r3, #1
 8007564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007568:	2b02      	cmp	r3, #2
 800756a:	d9e8      	bls.n	800753e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800756c:	4b13      	ldr	r3, [pc, #76]	; (80075bc <RCC_SetFlashLatency+0xf4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f023 0207 	bic.w	r2, r3, #7
 8007574:	4911      	ldr	r1, [pc, #68]	; (80075bc <RCC_SetFlashLatency+0xf4>)
 8007576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007578:	4313      	orrs	r3, r2
 800757a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800757c:	f7fc fd76 	bl	800406c <HAL_GetTick>
 8007580:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007582:	e008      	b.n	8007596 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007584:	f7fc fd72 	bl	800406c <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d901      	bls.n	8007596 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e007      	b.n	80075a6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <RCC_SetFlashLatency+0xf4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d1ef      	bne.n	8007584 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	374c      	adds	r7, #76	; 0x4c
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd90      	pop	{r4, r7, pc}
 80075ae:	bf00      	nop
 80075b0:	08011138 	.word	0x08011138
 80075b4:	08011148 	.word	0x08011148
 80075b8:	08011154 	.word	0x08011154
 80075bc:	58004000 	.word	0x58004000

080075c0 <LL_RCC_LSE_IsEnabled>:
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80075c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <LL_RCC_LSE_IsEnabled+0x18>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <LL_RCC_LSE_IsEnabled+0x1a>
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <LL_RCC_LSE_IsReady>:
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80075e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d101      	bne.n	80075fc <LL_RCC_LSE_IsReady+0x18>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <LL_RCC_LSE_IsReady+0x1a>
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <LL_RCC_MSI_EnablePLLMode>:
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800760c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007616:	f043 0304 	orr.w	r3, r3, #4
 800761a:	6013      	str	r3, [r2, #0]
}
 800761c:	bf00      	nop
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <LL_RCC_SetRFWKPClockSource>:
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800762e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007636:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800763a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <LL_RCC_SetSMPSClockSource>:
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800765a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	f023 0203 	bic.w	r2, r3, #3
 8007664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4313      	orrs	r3, r2
 800766c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <LL_RCC_SetSMPSPrescaler>:
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800768c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4313      	orrs	r3, r2
 8007694:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <LL_RCC_SetUSARTClockSource>:
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80076aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b2:	f023 0203 	bic.w	r2, r3, #3
 80076b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4313      	orrs	r3, r2
 80076be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <LL_RCC_SetLPUARTClockSource>:
{
 80076ce:	b480      	push	{r7}
 80076d0:	b083      	sub	sp, #12
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80076d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <LL_RCC_SetI2CClockSource>:
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007706:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	091b      	lsrs	r3, r3, #4
 800770e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007712:	43db      	mvns	r3, r3
 8007714:	401a      	ands	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800771e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <LL_RCC_SetLPTIMClockSource>:
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800773c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007740:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	0c1b      	lsrs	r3, r3, #16
 8007748:	041b      	lsls	r3, r3, #16
 800774a:	43db      	mvns	r3, r3
 800774c:	401a      	ands	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007756:	4313      	orrs	r3, r2
 8007758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <LL_RCC_SetSAIClockSource>:
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007778:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800777c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4313      	orrs	r3, r2
 8007784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <LL_RCC_SetRNGClockSource>:
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800779c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80077a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <LL_RCC_SetCLK48ClockSource>:
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80077c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4313      	orrs	r3, r2
 80077dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <LL_RCC_SetUSBClockSource>:
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff ffe3 	bl	80077c0 <LL_RCC_SetCLK48ClockSource>
}
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <LL_RCC_SetADCClockSource>:
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800780a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800780e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007812:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4313      	orrs	r3, r2
 800781e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <LL_RCC_SetRTCClockSource>:
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800783a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4313      	orrs	r3, r2
 800784a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <LL_RCC_GetRTCClockSource>:
{
 800785a:	b480      	push	{r7}
 800785c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800785e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007866:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800786a:	4618      	mov	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <LL_RCC_ForceBackupDomainReset>:
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800788c:	bf00      	nop
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007896:	b480      	push	{r7}
 8007898:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800789a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800789e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80078ae:	bf00      	nop
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <LL_RCC_PLLSAI1_Enable>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80078bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078ca:	6013      	str	r3, [r2, #0]
}
 80078cc:	bf00      	nop
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <LL_RCC_PLLSAI1_Disable>:
{
 80078d6:	b480      	push	{r7}
 80078d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80078da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078e8:	6013      	str	r3, [r2, #0]
}
 80078ea:	bf00      	nop
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <LL_RCC_PLLSAI1_IsReady>:
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80078f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007906:	d101      	bne.n	800790c <LL_RCC_PLLSAI1_IsReady+0x18>
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007920:	2300      	movs	r3, #0
 8007922:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007924:	2300      	movs	r3, #0
 8007926:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d034      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800793c:	d021      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800793e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007942:	d81b      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007944:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007948:	d01d      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800794a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800794e:	d815      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007958:	d110      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800795a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007968:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800796a:	e00d      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3304      	adds	r3, #4
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f94d 	bl	8007c10 <RCCEx_PLLSAI1_ConfigNP>
 8007976:	4603      	mov	r3, r0
 8007978:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800797a:	e005      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	77fb      	strb	r3, [r7, #31]
        break;
 8007980:	e002      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007982:	bf00      	nop
 8007984:	e000      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007988:	7ffb      	ldrb	r3, [r7, #31]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d105      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff fee8 	bl	8007768 <LL_RCC_SetSAIClockSource>
 8007998:	e001      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799a:	7ffb      	ldrb	r3, [r7, #31]
 800799c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d046      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80079aa:	f7ff ff56 	bl	800785a <LL_RCC_GetRTCClockSource>
 80079ae:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d03c      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80079ba:	f7fe fc8b 	bl	80062d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff ff30 	bl	800782e <LL_RCC_SetRTCClockSource>
 80079ce:	e02e      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80079d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80079da:	f7ff ff4b 	bl	8007874 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80079de:	f7ff ff5a 	bl	8007896 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80079f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80079fa:	f7ff fde1 	bl	80075c0 <LL_RCC_LSE_IsEnabled>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d114      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a04:	f7fc fb32 	bl	800406c <HAL_GetTick>
 8007a08:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007a0a:	e00b      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a0c:	f7fc fb2e 	bl	800406c <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d902      	bls.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	77fb      	strb	r3, [r7, #31]
              break;
 8007a22:	e004      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007a24:	f7ff fdde 	bl	80075e4 <LL_RCC_LSE_IsReady>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d1ee      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007a2e:	7ffb      	ldrb	r3, [r7, #31]
 8007a30:	77bb      	strb	r3, [r7, #30]
 8007a32:	e001      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a34:	7ffb      	ldrb	r3, [r7, #31]
 8007a36:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fe2a 	bl	80076a2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff fe35 	bl	80076ce <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fe5d 	bl	8007734 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff fe52 	bl	8007734 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d004      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff fe2a 	bl	80076fa <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d004      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7ff fe1f 	bl	80076fa <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d022      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff fe8d 	bl	80077ec <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ada:	d107      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007aea:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007af4:	d10b      	bne.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3304      	adds	r3, #4
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f8e3 	bl	8007cc6 <RCCEx_PLLSAI1_ConfigNQ>
 8007b00:	4603      	mov	r3, r0
 8007b02:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007b04:	7ffb      	ldrb	r3, [r7, #31]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007b0a:	7ffb      	ldrb	r3, [r7, #31]
 8007b0c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d02b      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b22:	d008      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b2c:	d003      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d105      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff fe2a 	bl	8007794 <LL_RCC_SetRNGClockSource>
 8007b40:	e00a      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	f7ff fe21 	bl	8007794 <LL_RCC_SetRNGClockSource>
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff fe34 	bl	80077c0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007b60:	d107      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d022      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fe3d 	bl	8007802 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b90:	d107      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ba0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007baa:	d10b      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f8e3 	bl	8007d7c <RCCEx_PLLSAI1_ConfigNR>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007bba:	7ffb      	ldrb	r3, [r7, #31]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007bc0:	7ffb      	ldrb	r3, [r7, #31]
 8007bc2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d004      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff fd26 	bl	8007626 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d009      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff fd45 	bl	800767a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff fd2c 	bl	8007652 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007bfa:	7fbb      	ldrb	r3, [r7, #30]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3720      	adds	r7, #32
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007c08:	f7ff fcfe 	bl	8007608 <LL_RCC_MSI_EnablePLLMode>
}
 8007c0c:	bf00      	nop
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007c1c:	f7ff fe5b 	bl	80078d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c20:	f7fc fa24 	bl	800406c <HAL_GetTick>
 8007c24:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007c26:	e009      	b.n	8007c3c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c28:	f7fc fa20 	bl	800406c <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d902      	bls.n	8007c3c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	73fb      	strb	r3, [r7, #15]
      break;
 8007c3a:	e004      	b.n	8007c46 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007c3c:	f7ff fe5a 	bl	80078f4 <LL_RCC_PLLSAI1_IsReady>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1f0      	bne.n	8007c28 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d137      	bne.n	8007cbc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c60:	4313      	orrs	r3, r2
 8007c62:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c76:	4313      	orrs	r3, r2
 8007c78:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007c7a:	f7ff fe1d 	bl	80078b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7e:	f7fc f9f5 	bl	800406c <HAL_GetTick>
 8007c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007c84:	e009      	b.n	8007c9a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c86:	f7fc f9f1 	bl	800406c <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d902      	bls.n	8007c9a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	73fb      	strb	r3, [r7, #15]
        break;
 8007c98:	e004      	b.n	8007ca4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007c9a:	f7ff fe2b 	bl	80078f4 <LL_RCC_PLLSAI1_IsReady>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d1f0      	bne.n	8007c86 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d108      	bne.n	8007cbc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007cd2:	f7ff fe00 	bl	80078d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cd6:	f7fc f9c9 	bl	800406c <HAL_GetTick>
 8007cda:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007cdc:	e009      	b.n	8007cf2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cde:	f7fc f9c5 	bl	800406c <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d902      	bls.n	8007cf2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e004      	b.n	8007cfc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007cf2:	f7ff fdff 	bl	80078f4 <LL_RCC_PLLSAI1_IsReady>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1f0      	bne.n	8007cde <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d137      	bne.n	8007d72 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d16:	4313      	orrs	r3, r2
 8007d18:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007d30:	f7ff fdc2 	bl	80078b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d34:	f7fc f99a 	bl	800406c <HAL_GetTick>
 8007d38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007d3a:	e009      	b.n	8007d50 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d3c:	f7fc f996 	bl	800406c <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d902      	bls.n	8007d50 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8007d4e:	e004      	b.n	8007d5a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007d50:	f7ff fdd0 	bl	80078f4 <LL_RCC_PLLSAI1_IsReady>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d1f0      	bne.n	8007d3c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d108      	bne.n	8007d72 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d64:	691a      	ldr	r2, [r3, #16]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007d88:	f7ff fda5 	bl	80078d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d8c:	f7fc f96e 	bl	800406c <HAL_GetTick>
 8007d90:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007d92:	e009      	b.n	8007da8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d94:	f7fc f96a 	bl	800406c <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d902      	bls.n	8007da8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	73fb      	strb	r3, [r7, #15]
      break;
 8007da6:	e004      	b.n	8007db2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007da8:	f7ff fda4 	bl	80078f4 <LL_RCC_PLLSAI1_IsReady>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f0      	bne.n	8007d94 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d137      	bne.n	8007e28 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	021b      	lsls	r3, r3, #8
 8007dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007de2:	4313      	orrs	r3, r2
 8007de4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007de6:	f7ff fd67 	bl	80078b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dea:	f7fc f93f 	bl	800406c <HAL_GetTick>
 8007dee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007df0:	e009      	b.n	8007e06 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007df2:	f7fc f93b 	bl	800406c <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d902      	bls.n	8007e06 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	73fb      	strb	r3, [r7, #15]
        break;
 8007e04:	e004      	b.n	8007e10 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e06:	f7ff fd75 	bl	80078f4 <LL_RCC_PLLSAI1_IsReady>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d1f0      	bne.n	8007df2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d108      	bne.n	8007e28 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e24:	4313      	orrs	r3, r2
 8007e26:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e42:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007e46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e68:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007e6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	43db      	mvns	r3, r3
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	4013      	ands	r3, r2
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007e96:	b084      	sub	sp, #16
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	f107 0014 	add.w	r0, r7, #20
 8007ea4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	b004      	add	sp, #16
 8007ed6:	4770      	bx	lr

08007ed8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b09d      	sub	sp, #116	; 0x74
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	78db      	ldrb	r3, [r3, #3]
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d81f      	bhi.n	8007f4a <USB_ActivateEndpoint+0x72>
 8007f0a:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <USB_ActivateEndpoint+0x38>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f3d 	.word	0x08007f3d
 8007f18:	08007f53 	.word	0x08007f53
 8007f1c:	08007f2f 	.word	0x08007f2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007f20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007f2c:	e012      	b.n	8007f54 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007f2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f32:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007f36:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007f3a:	e00b      	b.n	8007f54 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007f3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007f48:	e004      	b.n	8007f54 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007f50:	e000      	b.n	8007f54 <USB_ActivateEndpoint+0x7c>
      break;
 8007f52:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	441a      	add	r2, r3
 8007f5e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	b21b      	sxth	r3, r3
 8007f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	b21a      	sxth	r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	b21b      	sxth	r3, r3
 8007f96:	4313      	orrs	r3, r2
 8007f98:	b21b      	sxth	r3, r3
 8007f9a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	441a      	add	r2, r3
 8007fa8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	7b1b      	ldrb	r3, [r3, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f040 816e 	bne.w	80082a6 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 8084 	beq.w	80080dc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	61bb      	str	r3, [r7, #24]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	61bb      	str	r3, [r7, #24]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	00da      	lsls	r2, r3, #3
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	88db      	ldrh	r3, [r3, #6]
 8007ffc:	085b      	lsrs	r3, r3, #1
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	b29a      	uxth	r2, r3
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	827b      	strh	r3, [r7, #18]
 8008016:	8a7b      	ldrh	r3, [r7, #18]
 8008018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01b      	beq.n	8008058 <USB_ActivateEndpoint+0x180>
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008036:	823b      	strh	r3, [r7, #16]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	441a      	add	r2, r3
 8008042:	8a3b      	ldrh	r3, [r7, #16]
 8008044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800804c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008050:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008054:	b29b      	uxth	r3, r3
 8008056:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	78db      	ldrb	r3, [r3, #3]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d020      	beq.n	80080a2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008076:	81bb      	strh	r3, [r7, #12]
 8008078:	89bb      	ldrh	r3, [r7, #12]
 800807a:	f083 0320 	eor.w	r3, r3, #32
 800807e:	81bb      	strh	r3, [r7, #12]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	441a      	add	r2, r3
 800808a:	89bb      	ldrh	r3, [r7, #12]
 800808c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809c:	b29b      	uxth	r3, r3
 800809e:	8013      	strh	r3, [r2, #0]
 80080a0:	e2cb      	b.n	800863a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b8:	81fb      	strh	r3, [r7, #14]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	441a      	add	r2, r3
 80080c4:	89fb      	ldrh	r3, [r7, #14]
 80080c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	8013      	strh	r3, [r2, #0]
 80080da:	e2ae      	b.n	800863a <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	633b      	str	r3, [r7, #48]	; 0x30
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	4413      	add	r3, r2
 80080ee:	633b      	str	r3, [r7, #48]	; 0x30
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	00da      	lsls	r2, r3, #3
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	4413      	add	r3, r2
 80080fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	88db      	ldrh	r3, [r3, #6]
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	b29b      	uxth	r3, r3
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800811a:	b29b      	uxth	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	4413      	add	r3, r2
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	00da      	lsls	r2, r3, #3
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	4413      	add	r3, r2
 800812e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b3e      	cmp	r3, #62	; 0x3e
 800813a:	d918      	bls.n	800816e <USB_ActivateEndpoint+0x296>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	095b      	lsrs	r3, r3, #5
 8008142:	66bb      	str	r3, [r7, #104]	; 0x68
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	f003 031f 	and.w	r3, r3, #31
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <USB_ActivateEndpoint+0x27e>
 8008150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008152:	3b01      	subs	r3, #1
 8008154:	66bb      	str	r3, [r7, #104]	; 0x68
 8008156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008158:	b29b      	uxth	r3, r3
 800815a:	029b      	lsls	r3, r3, #10
 800815c:	b29b      	uxth	r3, r3
 800815e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008166:	b29a      	uxth	r2, r3
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e029      	b.n	80081c2 <USB_ActivateEndpoint+0x2ea>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d112      	bne.n	800819c <USB_ActivateEndpoint+0x2c4>
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008180:	b29a      	uxth	r2, r3
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008194:	b29a      	uxth	r2, r3
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	801a      	strh	r2, [r3, #0]
 800819a:	e012      	b.n	80081c2 <USB_ActivateEndpoint+0x2ea>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <USB_ActivateEndpoint+0x2de>
 80081b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081b2:	3301      	adds	r3, #1
 80081b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80081b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	029b      	lsls	r3, r3, #10
 80081bc:	b29a      	uxth	r2, r3
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80081d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01b      	beq.n	8008212 <USB_ActivateEndpoint+0x33a>
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f0:	843b      	strh	r3, [r7, #32]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	441a      	add	r2, r3
 80081fc:	8c3b      	ldrh	r3, [r7, #32]
 80081fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008206:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800820a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820e:	b29b      	uxth	r3, r3
 8008210:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d124      	bne.n	8008264 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800822c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008230:	83bb      	strh	r3, [r7, #28]
 8008232:	8bbb      	ldrh	r3, [r7, #28]
 8008234:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008238:	83bb      	strh	r3, [r7, #28]
 800823a:	8bbb      	ldrh	r3, [r7, #28]
 800823c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008240:	83bb      	strh	r3, [r7, #28]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	441a      	add	r2, r3
 800824c:	8bbb      	ldrh	r3, [r7, #28]
 800824e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800825a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825e:	b29b      	uxth	r3, r3
 8008260:	8013      	strh	r3, [r2, #0]
 8008262:	e1ea      	b.n	800863a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827a:	83fb      	strh	r3, [r7, #30]
 800827c:	8bfb      	ldrh	r3, [r7, #30]
 800827e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008282:	83fb      	strh	r3, [r7, #30]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	441a      	add	r2, r3
 800828e:	8bfb      	ldrh	r3, [r7, #30]
 8008290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	8013      	strh	r3, [r2, #0]
 80082a4:	e1c9      	b.n	800863a <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	78db      	ldrb	r3, [r3, #3]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d11e      	bne.n	80082ec <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	441a      	add	r2, r3
 80082d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80082d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80082e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	8013      	strh	r3, [r2, #0]
 80082ea:	e01d      	b.n	8008328 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80082fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008302:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	441a      	add	r2, r3
 8008310:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008324:	b29b      	uxth	r3, r3
 8008326:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008332:	b29b      	uxth	r3, r3
 8008334:	461a      	mov	r2, r3
 8008336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008338:	4413      	add	r3, r2
 800833a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	00da      	lsls	r2, r3, #3
 8008342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008344:	4413      	add	r3, r2
 8008346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800834a:	65bb      	str	r3, [r7, #88]	; 0x58
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	891b      	ldrh	r3, [r3, #8]
 8008350:	085b      	lsrs	r3, r3, #1
 8008352:	b29b      	uxth	r3, r3
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800835a:	801a      	strh	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	657b      	str	r3, [r7, #84]	; 0x54
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008366:	b29b      	uxth	r3, r3
 8008368:	461a      	mov	r2, r3
 800836a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800836c:	4413      	add	r3, r2
 800836e:	657b      	str	r3, [r7, #84]	; 0x54
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	00da      	lsls	r2, r3, #3
 8008376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008378:	4413      	add	r3, r2
 800837a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800837e:	653b      	str	r3, [r7, #80]	; 0x50
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	895b      	ldrh	r3, [r3, #10]
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	b29b      	uxth	r3, r3
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800838e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f040 8093 	bne.w	80084c0 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80083aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80083ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01b      	beq.n	80083ee <USB_ActivateEndpoint+0x516>
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	441a      	add	r2, r3
 80083d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80083fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01b      	beq.n	800843e <USB_ActivateEndpoint+0x566>
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	441a      	add	r2, r3
 8008428:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800842a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800843a:	b29b      	uxth	r3, r3
 800843c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	b29b      	uxth	r3, r3
 800844c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008454:	873b      	strh	r3, [r7, #56]	; 0x38
 8008456:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008458:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800845c:	873b      	strh	r3, [r7, #56]	; 0x38
 800845e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008460:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008464:	873b      	strh	r3, [r7, #56]	; 0x38
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	441a      	add	r2, r3
 8008470:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800847a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008482:	b29b      	uxth	r3, r3
 8008484:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29b      	uxth	r3, r3
 8008494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800849c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	441a      	add	r2, r3
 80084a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	8013      	strh	r3, [r2, #0]
 80084be:	e0bc      	b.n	800863a <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80084d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01d      	beq.n	8008518 <USB_ActivateEndpoint+0x640>
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	441a      	add	r2, r3
 8008500:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800850c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008514:	b29b      	uxth	r3, r3
 8008516:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008528:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800852c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01d      	beq.n	8008570 <USB_ActivateEndpoint+0x698>
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	441a      	add	r2, r3
 8008558:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800855c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800856c:	b29b      	uxth	r3, r3
 800856e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	78db      	ldrb	r3, [r3, #3]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d024      	beq.n	80085c2 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	b29b      	uxth	r3, r3
 8008586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800858a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800858e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008592:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008596:	f083 0320 	eor.w	r3, r3, #32
 800859a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	441a      	add	r2, r3
 80085a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80085ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085bc:	b29b      	uxth	r3, r3
 80085be:	8013      	strh	r3, [r2, #0]
 80085c0:	e01d      	b.n	80085fe <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	441a      	add	r2, r3
 80085e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80085ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29b      	uxth	r3, r3
 800860c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008614:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	441a      	add	r2, r3
 8008622:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800862a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800862e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008636:	b29b      	uxth	r3, r3
 8008638:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800863a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800863e:	4618      	mov	r0, r3
 8008640:	3774      	adds	r7, #116	; 0x74
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop

0800864c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800864c:	b480      	push	{r7}
 800864e:	b08d      	sub	sp, #52	; 0x34
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	7b1b      	ldrb	r3, [r3, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f040 808e 	bne.w	800877c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d044      	beq.n	80086f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	81bb      	strh	r3, [r7, #12]
 8008676:	89bb      	ldrh	r3, [r7, #12]
 8008678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01b      	beq.n	80086b8 <USB_DeactivateEndpoint+0x6c>
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008696:	817b      	strh	r3, [r7, #10]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	441a      	add	r2, r3
 80086a2:	897b      	ldrh	r3, [r7, #10]
 80086a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ce:	813b      	strh	r3, [r7, #8]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	441a      	add	r2, r3
 80086da:	893b      	ldrh	r3, [r7, #8]
 80086dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	8013      	strh	r3, [r2, #0]
 80086f0:	e192      	b.n	8008a18 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	827b      	strh	r3, [r7, #18]
 8008700:	8a7b      	ldrh	r3, [r7, #18]
 8008702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d01b      	beq.n	8008742 <USB_DeactivateEndpoint+0xf6>
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b29b      	uxth	r3, r3
 8008718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008720:	823b      	strh	r3, [r7, #16]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	441a      	add	r2, r3
 800872c:	8a3b      	ldrh	r3, [r7, #16]
 800872e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800873a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873e:	b29b      	uxth	r3, r3
 8008740:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008758:	81fb      	strh	r3, [r7, #14]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	441a      	add	r2, r3
 8008764:	89fb      	ldrh	r3, [r7, #14]
 8008766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800876a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800876e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008776:	b29b      	uxth	r3, r3
 8008778:	8013      	strh	r3, [r2, #0]
 800877a:	e14d      	b.n	8008a18 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f040 80a5 	bne.w	80088d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	843b      	strh	r3, [r7, #32]
 8008794:	8c3b      	ldrh	r3, [r7, #32]
 8008796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d01b      	beq.n	80087d6 <USB_DeactivateEndpoint+0x18a>
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b4:	83fb      	strh	r3, [r7, #30]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	441a      	add	r2, r3
 80087c0:	8bfb      	ldrh	r3, [r7, #30]
 80087c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	83bb      	strh	r3, [r7, #28]
 80087e4:	8bbb      	ldrh	r3, [r7, #28]
 80087e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01b      	beq.n	8008826 <USB_DeactivateEndpoint+0x1da>
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008804:	837b      	strh	r3, [r7, #26]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	441a      	add	r2, r3
 8008810:	8b7b      	ldrh	r3, [r7, #26]
 8008812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800881e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008822:	b29b      	uxth	r3, r3
 8008824:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883c:	833b      	strh	r3, [r7, #24]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	441a      	add	r2, r3
 8008848:	8b3b      	ldrh	r3, [r7, #24]
 800884a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800884e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008856:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800885a:	b29b      	uxth	r3, r3
 800885c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	b29b      	uxth	r3, r3
 800886c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008874:	82fb      	strh	r3, [r7, #22]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	441a      	add	r2, r3
 8008880:	8afb      	ldrh	r3, [r7, #22]
 8008882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800888a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800888e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008892:	b29b      	uxth	r3, r3
 8008894:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ac:	82bb      	strh	r3, [r7, #20]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	441a      	add	r2, r3
 80088b8:	8abb      	ldrh	r3, [r7, #20]
 80088ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	8013      	strh	r3, [r2, #0]
 80088ce:	e0a3      	b.n	8008a18 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80088de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01b      	beq.n	8008920 <USB_DeactivateEndpoint+0x2d4>
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	441a      	add	r2, r3
 800890a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800890c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891c:	b29b      	uxth	r3, r3
 800891e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800892e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01b      	beq.n	8008970 <USB_DeactivateEndpoint+0x324>
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	441a      	add	r2, r3
 800895a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800895c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800896c:	b29b      	uxth	r3, r3
 800896e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	b29b      	uxth	r3, r3
 800897e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008986:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	441a      	add	r2, r3
 8008992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800899c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	441a      	add	r2, r3
 80089ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089dc:	b29b      	uxth	r3, r3
 80089de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	441a      	add	r2, r3
 8008a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3734      	adds	r7, #52	; 0x34
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b0c2      	sub	sp, #264	; 0x108
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a34:	6018      	str	r0, [r3, #0]
 8008a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a3e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	f040 867b 	bne.w	8009748 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699a      	ldr	r2, [r3, #24]
 8008a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d908      	bls.n	8008a80 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a7e:	e007      	b.n	8008a90 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	7b1b      	ldrb	r3, [r3, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d13a      	bne.n	8008b16 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6959      	ldr	r1, [r3, #20]
 8008aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	88da      	ldrh	r2, [r3, #6]
 8008ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ac2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ac6:	6800      	ldr	r0, [r0, #0]
 8008ac8:	f001 fc1d 	bl	800a306 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	461a      	mov	r2, r3
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	4413      	add	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	00da      	lsls	r2, r3, #3
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	4413      	add	r3, r2
 8008b02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	801a      	strh	r2, [r3, #0]
 8008b12:	f000 bde3 	b.w	80096dc <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	78db      	ldrb	r3, [r3, #3]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	f040 843a 	bne.w	800939c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6a1a      	ldr	r2, [r3, #32]
 8008b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	f240 83b7 	bls.w	80092b4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	441a      	add	r2, r3
 8008b8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6a1a      	ldr	r2, [r3, #32]
 8008bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 81b3 	beq.w	8008f4e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8008bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d16d      	bne.n	8008ce0 <USB_EPStartXfer+0x2ba>
 8008c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c24:	4413      	add	r3, r2
 8008c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	00da      	lsls	r2, r3, #3
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	4413      	add	r3, r2
 8008c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c44:	2b3e      	cmp	r3, #62	; 0x3e
 8008c46:	d91c      	bls.n	8008c82 <USB_EPStartXfer+0x25c>
 8008c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c56:	f003 031f 	and.w	r3, r3, #31
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d104      	bne.n	8008c68 <USB_EPStartXfer+0x242>
 8008c5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c62:	3b01      	subs	r3, #1
 8008c64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	029b      	lsls	r3, r3, #10
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	801a      	strh	r2, [r3, #0]
 8008c80:	e053      	b.n	8008d2a <USB_EPStartXfer+0x304>
 8008c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d112      	bne.n	8008cb0 <USB_EPStartXfer+0x28a>
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	801a      	strh	r2, [r3, #0]
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	801a      	strh	r2, [r3, #0]
 8008cae:	e03c      	b.n	8008d2a <USB_EPStartXfer+0x304>
 8008cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d004      	beq.n	8008cd0 <USB_EPStartXfer+0x2aa>
 8008cc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cca:	3301      	adds	r3, #1
 8008ccc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008cd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	029b      	lsls	r3, r3, #10
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	801a      	strh	r2, [r3, #0]
 8008cde:	e024      	b.n	8008d2a <USB_EPStartXfer+0x304>
 8008ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	785b      	ldrb	r3, [r3, #1]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d11c      	bne.n	8008d2a <USB_EPStartXfer+0x304>
 8008cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	4413      	add	r3, r2
 8008d06:	633b      	str	r3, [r7, #48]	; 0x30
 8008d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	00da      	lsls	r2, r3, #3
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	4413      	add	r3, r2
 8008d1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	895b      	ldrh	r3, [r3, #10]
 8008d36:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6959      	ldr	r1, [r3, #20]
 8008d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d50:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d54:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d58:	6800      	ldr	r0, [r0, #0]
 8008d5a:	f001 fad4 	bl	800a306 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	695a      	ldr	r2, [r3, #20]
 8008d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6e:	441a      	add	r2, r3
 8008d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6a1a      	ldr	r2, [r3, #32]
 8008d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d90f      	bls.n	8008db8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6a1a      	ldr	r2, [r3, #32]
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da8:	1ad2      	subs	r2, r2, r3
 8008daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	621a      	str	r2, [r3, #32]
 8008db6:	e00e      	b.n	8008dd6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d16d      	bne.n	8008ec2 <USB_EPStartXfer+0x49c>
 8008de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	61bb      	str	r3, [r7, #24]
 8008df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	461a      	mov	r2, r3
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	4413      	add	r3, r2
 8008e08:	61bb      	str	r3, [r7, #24]
 8008e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	00da      	lsls	r2, r3, #3
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e26:	2b3e      	cmp	r3, #62	; 0x3e
 8008e28:	d91c      	bls.n	8008e64 <USB_EPStartXfer+0x43e>
 8008e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e38:	f003 031f 	and.w	r3, r3, #31
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <USB_EPStartXfer+0x424>
 8008e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e44:	3b01      	subs	r3, #1
 8008e46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	029b      	lsls	r3, r3, #10
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	801a      	strh	r2, [r3, #0]
 8008e62:	e059      	b.n	8008f18 <USB_EPStartXfer+0x4f2>
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d112      	bne.n	8008e92 <USB_EPStartXfer+0x46c>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	801a      	strh	r2, [r3, #0]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	e042      	b.n	8008f18 <USB_EPStartXfer+0x4f2>
 8008e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d004      	beq.n	8008eb2 <USB_EPStartXfer+0x48c>
 8008ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eac:	3301      	adds	r3, #1
 8008eae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	029b      	lsls	r3, r3, #10
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	801a      	strh	r2, [r3, #0]
 8008ec0:	e02a      	b.n	8008f18 <USB_EPStartXfer+0x4f2>
 8008ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	785b      	ldrb	r3, [r3, #1]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d122      	bne.n	8008f18 <USB_EPStartXfer+0x4f2>
 8008ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	623b      	str	r3, [r7, #32]
 8008ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	623b      	str	r3, [r7, #32]
 8008ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	00da      	lsls	r2, r3, #3
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	4413      	add	r3, r2
 8008f08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f0c:	61fb      	str	r3, [r7, #28]
 8008f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	891b      	ldrh	r3, [r3, #8]
 8008f24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6959      	ldr	r1, [r3, #20]
 8008f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f46:	6800      	ldr	r0, [r0, #0]
 8008f48:	f001 f9dd 	bl	800a306 <USB_WritePMA>
 8008f4c:	e3c6      	b.n	80096dc <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	785b      	ldrb	r3, [r3, #1]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d16d      	bne.n	800903a <USB_EPStartXfer+0x614>
 8008f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7e:	4413      	add	r3, r2
 8008f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	00da      	lsls	r2, r3, #3
 8008f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f92:	4413      	add	r3, r2
 8008f94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f98:	647b      	str	r3, [r7, #68]	; 0x44
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008fa0:	d91c      	bls.n	8008fdc <USB_EPStartXfer+0x5b6>
 8008fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa6:	095b      	lsrs	r3, r3, #5
 8008fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d104      	bne.n	8008fc2 <USB_EPStartXfer+0x59c>
 8008fb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	029b      	lsls	r3, r3, #10
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fd8:	801a      	strh	r2, [r3, #0]
 8008fda:	e059      	b.n	8009090 <USB_EPStartXfer+0x66a>
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d112      	bne.n	800900a <USB_EPStartXfer+0x5e4>
 8008fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff2:	801a      	strh	r2, [r3, #0]
 8008ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff6:	881b      	ldrh	r3, [r3, #0]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009002:	b29a      	uxth	r2, r3
 8009004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009006:	801a      	strh	r2, [r3, #0]
 8009008:	e042      	b.n	8009090 <USB_EPStartXfer+0x66a>
 800900a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900e:	085b      	lsrs	r3, r3, #1
 8009010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <USB_EPStartXfer+0x604>
 8009020:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009024:	3301      	adds	r3, #1
 8009026:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800902a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800902e:	b29b      	uxth	r3, r3
 8009030:	029b      	lsls	r3, r3, #10
 8009032:	b29a      	uxth	r2, r3
 8009034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	e02a      	b.n	8009090 <USB_EPStartXfer+0x66a>
 800903a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800903e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d122      	bne.n	8009090 <USB_EPStartXfer+0x66a>
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	653b      	str	r3, [r7, #80]	; 0x50
 8009056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009064:	b29b      	uxth	r3, r3
 8009066:	461a      	mov	r2, r3
 8009068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800906a:	4413      	add	r3, r2
 800906c:	653b      	str	r3, [r7, #80]	; 0x50
 800906e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	00da      	lsls	r2, r3, #3
 800907c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800907e:	4413      	add	r3, r2
 8009080:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908a:	b29a      	uxth	r2, r3
 800908c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800908e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	891b      	ldrh	r3, [r3, #8]
 800909c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6959      	ldr	r1, [r3, #20]
 80090ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80090b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80090ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80090be:	6800      	ldr	r0, [r0, #0]
 80090c0:	f001 f921 	bl	800a306 <USB_WritePMA>
            ep->xfer_buff += len;
 80090c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	695a      	ldr	r2, [r3, #20]
 80090d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d4:	441a      	add	r2, r3
 80090d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80090e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6a1a      	ldr	r2, [r3, #32]
 80090ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d90f      	bls.n	800911e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80090fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6a1a      	ldr	r2, [r3, #32]
 800910a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	621a      	str	r2, [r3, #32]
 800911c:	e00e      	b.n	800913c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800911e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800912e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2200      	movs	r2, #0
 800913a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800913c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	643b      	str	r3, [r7, #64]	; 0x40
 8009148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	785b      	ldrb	r3, [r3, #1]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d16d      	bne.n	8009234 <USB_EPStartXfer+0x80e>
 8009158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	63bb      	str	r3, [r7, #56]	; 0x38
 8009164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009172:	b29b      	uxth	r3, r3
 8009174:	461a      	mov	r2, r3
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	4413      	add	r3, r2
 800917a:	63bb      	str	r3, [r7, #56]	; 0x38
 800917c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	00da      	lsls	r2, r3, #3
 800918a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918c:	4413      	add	r3, r2
 800918e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009192:	637b      	str	r3, [r7, #52]	; 0x34
 8009194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009198:	2b3e      	cmp	r3, #62	; 0x3e
 800919a:	d91c      	bls.n	80091d6 <USB_EPStartXfer+0x7b0>
 800919c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a0:	095b      	lsrs	r3, r3, #5
 80091a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d104      	bne.n	80091bc <USB_EPStartXfer+0x796>
 80091b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b6:	3b01      	subs	r3, #1
 80091b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	029b      	lsls	r3, r3, #10
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	e053      	b.n	800927e <USB_EPStartXfer+0x858>
 80091d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d112      	bne.n	8009204 <USB_EPStartXfer+0x7de>
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ec:	801a      	strh	r2, [r3, #0]
 80091ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009200:	801a      	strh	r2, [r3, #0]
 8009202:	e03c      	b.n	800927e <USB_EPStartXfer+0x858>
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009208:	085b      	lsrs	r3, r3, #1
 800920a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800920e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <USB_EPStartXfer+0x7fe>
 800921a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800921e:	3301      	adds	r3, #1
 8009220:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009228:	b29b      	uxth	r3, r3
 800922a:	029b      	lsls	r3, r3, #10
 800922c:	b29a      	uxth	r2, r3
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	801a      	strh	r2, [r3, #0]
 8009232:	e024      	b.n	800927e <USB_EPStartXfer+0x858>
 8009234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	785b      	ldrb	r3, [r3, #1]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d11c      	bne.n	800927e <USB_EPStartXfer+0x858>
 8009244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009252:	b29b      	uxth	r3, r3
 8009254:	461a      	mov	r2, r3
 8009256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009258:	4413      	add	r3, r2
 800925a:	643b      	str	r3, [r7, #64]	; 0x40
 800925c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	00da      	lsls	r2, r3, #3
 800926a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926c:	4413      	add	r3, r2
 800926e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009278:	b29a      	uxth	r2, r3
 800927a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800927e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	895b      	ldrh	r3, [r3, #10]
 800928a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800928e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6959      	ldr	r1, [r3, #20]
 800929a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929e:	b29b      	uxth	r3, r3
 80092a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80092a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80092a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80092ac:	6800      	ldr	r0, [r0, #0]
 80092ae:	f001 f82a 	bl	800a306 <USB_WritePMA>
 80092b2:	e213      	b.n	80096dc <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80092b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80092c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80092e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80092ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	441a      	add	r2, r3
 8009308:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800930c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931c:	b29b      	uxth	r3, r3
 800931e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800932c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800933a:	b29b      	uxth	r3, r3
 800933c:	461a      	mov	r2, r3
 800933e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009340:	4413      	add	r3, r2
 8009342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	00da      	lsls	r2, r3, #3
 8009352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009354:	4413      	add	r3, r2
 8009356:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800935a:	65bb      	str	r3, [r7, #88]	; 0x58
 800935c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009360:	b29a      	uxth	r2, r3
 8009362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009364:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800936a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	891b      	ldrh	r3, [r3, #8]
 8009372:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800937a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6959      	ldr	r1, [r3, #20]
 8009382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009386:	b29b      	uxth	r3, r3
 8009388:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800938c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009390:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009394:	6800      	ldr	r0, [r0, #0]
 8009396:	f000 ffb6 	bl	800a306 <USB_WritePMA>
 800939a:	e19f      	b.n	80096dc <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800939c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6a1a      	ldr	r2, [r3, #32]
 80093a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ac:	1ad2      	subs	r2, r2, r3
 80093ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 80bc 	beq.w	800955a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	673b      	str	r3, [r7, #112]	; 0x70
 80093ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	785b      	ldrb	r3, [r3, #1]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d16d      	bne.n	80094da <USB_EPStartXfer+0xab4>
 80093fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	66bb      	str	r3, [r7, #104]	; 0x68
 800940a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009418:	b29b      	uxth	r3, r3
 800941a:	461a      	mov	r2, r3
 800941c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800941e:	4413      	add	r3, r2
 8009420:	66bb      	str	r3, [r7, #104]	; 0x68
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	00da      	lsls	r2, r3, #3
 8009430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009432:	4413      	add	r3, r2
 8009434:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009438:	667b      	str	r3, [r7, #100]	; 0x64
 800943a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943e:	2b3e      	cmp	r3, #62	; 0x3e
 8009440:	d91c      	bls.n	800947c <USB_EPStartXfer+0xa56>
 8009442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009446:	095b      	lsrs	r3, r3, #5
 8009448:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009450:	f003 031f 	and.w	r3, r3, #31
 8009454:	2b00      	cmp	r3, #0
 8009456:	d104      	bne.n	8009462 <USB_EPStartXfer+0xa3c>
 8009458:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800945c:	3b01      	subs	r3, #1
 800945e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009462:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009466:	b29b      	uxth	r3, r3
 8009468:	029b      	lsls	r3, r3, #10
 800946a:	b29b      	uxth	r3, r3
 800946c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009474:	b29a      	uxth	r2, r3
 8009476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009478:	801a      	strh	r2, [r3, #0]
 800947a:	e053      	b.n	8009524 <USB_EPStartXfer+0xafe>
 800947c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009480:	2b00      	cmp	r3, #0
 8009482:	d112      	bne.n	80094aa <USB_EPStartXfer+0xa84>
 8009484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	b29b      	uxth	r3, r3
 800948a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800948e:	b29a      	uxth	r2, r3
 8009490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009492:	801a      	strh	r2, [r3, #0]
 8009494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	b29b      	uxth	r3, r3
 800949a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800949e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094a6:	801a      	strh	r2, [r3, #0]
 80094a8:	e03c      	b.n	8009524 <USB_EPStartXfer+0xafe>
 80094aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ae:	085b      	lsrs	r3, r3, #1
 80094b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80094b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d004      	beq.n	80094ca <USB_EPStartXfer+0xaa4>
 80094c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80094c4:	3301      	adds	r3, #1
 80094c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80094ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	029b      	lsls	r3, r3, #10
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094d6:	801a      	strh	r2, [r3, #0]
 80094d8:	e024      	b.n	8009524 <USB_EPStartXfer+0xafe>
 80094da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d11c      	bne.n	8009524 <USB_EPStartXfer+0xafe>
 80094ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	461a      	mov	r2, r3
 80094fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094fe:	4413      	add	r3, r2
 8009500:	673b      	str	r3, [r7, #112]	; 0x70
 8009502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	00da      	lsls	r2, r3, #3
 8009510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009512:	4413      	add	r3, r2
 8009514:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009518:	66fb      	str	r3, [r7, #108]	; 0x6c
 800951a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951e:	b29a      	uxth	r2, r3
 8009520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009522:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	895b      	ldrh	r3, [r3, #10]
 8009530:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6959      	ldr	r1, [r3, #20]
 8009540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009544:	b29b      	uxth	r3, r3
 8009546:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800954a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800954e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009552:	6800      	ldr	r0, [r0, #0]
 8009554:	f000 fed7 	bl	800a306 <USB_WritePMA>
 8009558:	e0c0      	b.n	80096dc <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800955a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	785b      	ldrb	r3, [r3, #1]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d16d      	bne.n	8009646 <USB_EPStartXfer+0xc20>
 800956a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009584:	b29b      	uxth	r3, r3
 8009586:	461a      	mov	r2, r3
 8009588:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800958a:	4413      	add	r3, r2
 800958c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800958e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	00da      	lsls	r2, r3, #3
 800959c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800959e:	4413      	add	r3, r2
 80095a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80095a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095aa:	2b3e      	cmp	r3, #62	; 0x3e
 80095ac:	d91c      	bls.n	80095e8 <USB_EPStartXfer+0xbc2>
 80095ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b2:	095b      	lsrs	r3, r3, #5
 80095b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80095b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095bc:	f003 031f 	and.w	r3, r3, #31
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d104      	bne.n	80095ce <USB_EPStartXfer+0xba8>
 80095c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80095c8:	3b01      	subs	r3, #1
 80095ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80095ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	029b      	lsls	r3, r3, #10
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095e4:	801a      	strh	r2, [r3, #0]
 80095e6:	e05f      	b.n	80096a8 <USB_EPStartXfer+0xc82>
 80095e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d112      	bne.n	8009616 <USB_EPStartXfer+0xbf0>
 80095f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095fe:	801a      	strh	r2, [r3, #0]
 8009600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800960a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800960e:	b29a      	uxth	r2, r3
 8009610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009612:	801a      	strh	r2, [r3, #0]
 8009614:	e048      	b.n	80096a8 <USB_EPStartXfer+0xc82>
 8009616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961a:	085b      	lsrs	r3, r3, #1
 800961c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <USB_EPStartXfer+0xc10>
 800962c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009630:	3301      	adds	r3, #1
 8009632:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009636:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800963a:	b29b      	uxth	r3, r3
 800963c:	029b      	lsls	r3, r3, #10
 800963e:	b29a      	uxth	r2, r3
 8009640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009642:	801a      	strh	r2, [r3, #0]
 8009644:	e030      	b.n	80096a8 <USB_EPStartXfer+0xc82>
 8009646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	785b      	ldrb	r3, [r3, #1]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d128      	bne.n	80096a8 <USB_EPStartXfer+0xc82>
 8009656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009672:	b29b      	uxth	r3, r3
 8009674:	461a      	mov	r2, r3
 8009676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800967a:	4413      	add	r3, r2
 800967c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	00da      	lsls	r2, r3, #3
 800968e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009692:	4413      	add	r3, r2
 8009694:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800969c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80096a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	891b      	ldrh	r3, [r3, #8]
 80096b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6959      	ldr	r1, [r3, #20]
 80096c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80096d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096d6:	6800      	ldr	r0, [r0, #0]
 80096d8:	f000 fe15 	bl	800a306 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80096dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009702:	817b      	strh	r3, [r7, #10]
 8009704:	897b      	ldrh	r3, [r7, #10]
 8009706:	f083 0310 	eor.w	r3, r3, #16
 800970a:	817b      	strh	r3, [r7, #10]
 800970c:	897b      	ldrh	r3, [r7, #10]
 800970e:	f083 0320 	eor.w	r3, r3, #32
 8009712:	817b      	strh	r3, [r7, #10]
 8009714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	441a      	add	r2, r3
 800972e:	897b      	ldrh	r3, [r7, #10]
 8009730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800973c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009740:	b29b      	uxth	r3, r3
 8009742:	8013      	strh	r3, [r2, #0]
 8009744:	f000 bc9f 	b.w	800a086 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	7b1b      	ldrb	r3, [r3, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f040 80ae 	bne.w	80098b6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800975a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	699a      	ldr	r2, [r3, #24]
 8009766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	429a      	cmp	r2, r3
 8009774:	d917      	bls.n	80097a6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8009776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699a      	ldr	r2, [r3, #24]
 8009792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009796:	1ad2      	subs	r2, r2, r3
 8009798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	619a      	str	r2, [r3, #24]
 80097a4:	e00e      	b.n	80097c4 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80097a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80097b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2200      	movs	r2, #0
 80097c2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80097c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	461a      	mov	r2, r3
 80097e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097e8:	4413      	add	r3, r2
 80097ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	00da      	lsls	r2, r3, #3
 80097fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009800:	4413      	add	r3, r2
 8009802:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800980a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800980e:	2b3e      	cmp	r3, #62	; 0x3e
 8009810:	d91d      	bls.n	800984e <USB_EPStartXfer+0xe28>
 8009812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	2b00      	cmp	r3, #0
 8009826:	d104      	bne.n	8009832 <USB_EPStartXfer+0xe0c>
 8009828:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800982c:	3b01      	subs	r3, #1
 800982e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009832:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009836:	b29b      	uxth	r3, r3
 8009838:	029b      	lsls	r3, r3, #10
 800983a:	b29b      	uxth	r3, r3
 800983c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009844:	b29a      	uxth	r2, r3
 8009846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800984a:	801a      	strh	r2, [r3, #0]
 800984c:	e3e1      	b.n	800a012 <USB_EPStartXfer+0x15ec>
 800984e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009852:	2b00      	cmp	r3, #0
 8009854:	d116      	bne.n	8009884 <USB_EPStartXfer+0xe5e>
 8009856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	b29b      	uxth	r3, r3
 800985e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009862:	b29a      	uxth	r2, r3
 8009864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009868:	801a      	strh	r2, [r3, #0]
 800986a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800987a:	b29a      	uxth	r2, r3
 800987c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009880:	801a      	strh	r2, [r3, #0]
 8009882:	e3c6      	b.n	800a012 <USB_EPStartXfer+0x15ec>
 8009884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009888:	085b      	lsrs	r3, r3, #1
 800988a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b00      	cmp	r3, #0
 8009898:	d004      	beq.n	80098a4 <USB_EPStartXfer+0xe7e>
 800989a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800989e:	3301      	adds	r3, #1
 80098a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	029b      	lsls	r3, r3, #10
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098b2:	801a      	strh	r2, [r3, #0]
 80098b4:	e3ad      	b.n	800a012 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80098b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	78db      	ldrb	r3, [r3, #3]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	f040 8200 	bne.w	8009cc8 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80098c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	785b      	ldrb	r3, [r3, #1]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f040 8091 	bne.w	80099fc <USB_EPStartXfer+0xfd6>
 80098da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	461a      	mov	r2, r3
 80098fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098fe:	4413      	add	r3, r2
 8009900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	00da      	lsls	r2, r3, #3
 8009912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009916:	4413      	add	r3, r2
 8009918:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800991c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b3e      	cmp	r3, #62	; 0x3e
 800992e:	d925      	bls.n	800997c <USB_EPStartXfer+0xf56>
 8009930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	095b      	lsrs	r3, r3, #5
 800993e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	f003 031f 	and.w	r3, r3, #31
 8009952:	2b00      	cmp	r3, #0
 8009954:	d104      	bne.n	8009960 <USB_EPStartXfer+0xf3a>
 8009956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995a:	3b01      	subs	r3, #1
 800995c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009964:	b29b      	uxth	r3, r3
 8009966:	029b      	lsls	r3, r3, #10
 8009968:	b29b      	uxth	r3, r3
 800996a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800996e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009972:	b29a      	uxth	r2, r3
 8009974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009978:	801a      	strh	r2, [r3, #0]
 800997a:	e074      	b.n	8009a66 <USB_EPStartXfer+0x1040>
 800997c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d116      	bne.n	80099ba <USB_EPStartXfer+0xf94>
 800998c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009998:	b29a      	uxth	r2, r3
 800999a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800999e:	801a      	strh	r2, [r3, #0]
 80099a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099b6:	801a      	strh	r2, [r3, #0]
 80099b8:	e055      	b.n	8009a66 <USB_EPStartXfer+0x1040>
 80099ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	085b      	lsrs	r3, r3, #1
 80099c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <USB_EPStartXfer+0xfc4>
 80099e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e4:	3301      	adds	r3, #1
 80099e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	029b      	lsls	r3, r3, #10
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099f8:	801a      	strh	r2, [r3, #0]
 80099fa:	e034      	b.n	8009a66 <USB_EPStartXfer+0x1040>
 80099fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d12c      	bne.n	8009a66 <USB_EPStartXfer+0x1040>
 8009a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a30:	4413      	add	r3, r2
 8009a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	00da      	lsls	r2, r3, #3
 8009a44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a48:	4413      	add	r3, r2
 8009a4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	785b      	ldrb	r3, [r3, #1]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f040 8091 	bne.w	8009ba8 <USB_EPStartXfer+0x1182>
 8009a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aaa:	4413      	add	r3, r2
 8009aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	00da      	lsls	r2, r3, #3
 8009abe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8009ada:	d925      	bls.n	8009b28 <USB_EPStartXfer+0x1102>
 8009adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	095b      	lsrs	r3, r3, #5
 8009aea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f003 031f 	and.w	r3, r3, #31
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d104      	bne.n	8009b0c <USB_EPStartXfer+0x10e6>
 8009b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b06:	3b01      	subs	r3, #1
 8009b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	029b      	lsls	r3, r3, #10
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b24:	801a      	strh	r2, [r3, #0]
 8009b26:	e06d      	b.n	8009c04 <USB_EPStartXfer+0x11de>
 8009b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d116      	bne.n	8009b66 <USB_EPStartXfer+0x1140>
 8009b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b4a:	801a      	strh	r2, [r3, #0]
 8009b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	e04e      	b.n	8009c04 <USB_EPStartXfer+0x11de>
 8009b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	085b      	lsrs	r3, r3, #1
 8009b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d004      	beq.n	8009b96 <USB_EPStartXfer+0x1170>
 8009b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b90:	3301      	adds	r3, #1
 8009b92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	029b      	lsls	r3, r3, #10
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ba4:	801a      	strh	r2, [r3, #0]
 8009ba6:	e02d      	b.n	8009c04 <USB_EPStartXfer+0x11de>
 8009ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d125      	bne.n	8009c04 <USB_EPStartXfer+0x11de>
 8009bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	461a      	mov	r2, r3
 8009bca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bce:	4413      	add	r3, r2
 8009bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	00da      	lsls	r2, r3, #3
 8009be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009be6:	4413      	add	r3, r2
 8009be8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c02:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 81fe 	beq.w	800a012 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d005      	beq.n	8009c4e <USB_EPStartXfer+0x1228>
 8009c42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10d      	bne.n	8009c6a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f040 81db 	bne.w	800a012 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f040 81d4 	bne.w	800a012 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c90:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	441a      	add	r2, r3
 8009cae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	8013      	strh	r3, [r2, #0]
 8009cc6:	e1a4      	b.n	800a012 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	78db      	ldrb	r3, [r3, #3]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	f040 819a 	bne.w	800a00e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d917      	bls.n	8009d26 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8009cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	699a      	ldr	r2, [r3, #24]
 8009d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d16:	1ad2      	subs	r2, r2, r3
 8009d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	619a      	str	r2, [r3, #24]
 8009d24:	e00e      	b.n	8009d44 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8009d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2200      	movs	r2, #0
 8009d42:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d178      	bne.n	8009e46 <USB_EPStartXfer+0x1420>
 8009d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	461a      	mov	r2, r3
 8009d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d78:	4413      	add	r3, r2
 8009d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	00da      	lsls	r2, r3, #3
 8009d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d90:	4413      	add	r3, r2
 8009d92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8009da0:	d91d      	bls.n	8009dde <USB_EPStartXfer+0x13b8>
 8009da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da6:	095b      	lsrs	r3, r3, #5
 8009da8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db0:	f003 031f 	and.w	r3, r3, #31
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d104      	bne.n	8009dc2 <USB_EPStartXfer+0x139c>
 8009db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	029b      	lsls	r3, r3, #10
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	e064      	b.n	8009ea8 <USB_EPStartXfer+0x1482>
 8009dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d116      	bne.n	8009e14 <USB_EPStartXfer+0x13ee>
 8009de6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009df8:	801a      	strh	r2, [r3, #0]
 8009dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dfe:	881b      	ldrh	r3, [r3, #0]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e10:	801a      	strh	r2, [r3, #0]
 8009e12:	e049      	b.n	8009ea8 <USB_EPStartXfer+0x1482>
 8009e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e18:	085b      	lsrs	r3, r3, #1
 8009e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <USB_EPStartXfer+0x140e>
 8009e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e2e:	3301      	adds	r3, #1
 8009e30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	029b      	lsls	r3, r3, #10
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e42:	801a      	strh	r2, [r3, #0]
 8009e44:	e030      	b.n	8009ea8 <USB_EPStartXfer+0x1482>
 8009e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	785b      	ldrb	r3, [r3, #1]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d128      	bne.n	8009ea8 <USB_EPStartXfer+0x1482>
 8009e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	461a      	mov	r2, r3
 8009e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	00da      	lsls	r2, r3, #3
 8009e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e92:	4413      	add	r3, r2
 8009e94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d178      	bne.n	8009fb8 <USB_EPStartXfer+0x1592>
 8009ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009eea:	4413      	add	r3, r2
 8009eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	00da      	lsls	r2, r3, #3
 8009efe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f02:	4413      	add	r3, r2
 8009f04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f10:	2b3e      	cmp	r3, #62	; 0x3e
 8009f12:	d91d      	bls.n	8009f50 <USB_EPStartXfer+0x152a>
 8009f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f18:	095b      	lsrs	r3, r3, #5
 8009f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f22:	f003 031f 	and.w	r3, r3, #31
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d104      	bne.n	8009f34 <USB_EPStartXfer+0x150e>
 8009f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	029b      	lsls	r3, r3, #10
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f4c:	801a      	strh	r2, [r3, #0]
 8009f4e:	e060      	b.n	800a012 <USB_EPStartXfer+0x15ec>
 8009f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d116      	bne.n	8009f86 <USB_EPStartXfer+0x1560>
 8009f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f6a:	801a      	strh	r2, [r3, #0]
 8009f6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f82:	801a      	strh	r2, [r3, #0]
 8009f84:	e045      	b.n	800a012 <USB_EPStartXfer+0x15ec>
 8009f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f8a:	085b      	lsrs	r3, r3, #1
 8009f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d004      	beq.n	8009fa6 <USB_EPStartXfer+0x1580>
 8009f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	029b      	lsls	r3, r3, #10
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fb4:	801a      	strh	r2, [r3, #0]
 8009fb6:	e02c      	b.n	800a012 <USB_EPStartXfer+0x15ec>
 8009fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	785b      	ldrb	r3, [r3, #1]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d124      	bne.n	800a012 <USB_EPStartXfer+0x15ec>
 8009fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	461a      	mov	r2, r3
 8009fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fde:	4413      	add	r3, r2
 8009fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	00da      	lsls	r2, r3, #3
 8009ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a004:	b29a      	uxth	r2, r3
 800a006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a00a:	801a      	strh	r2, [r3, #0]
 800a00c:	e001      	b.n	800a012 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e03a      	b.n	800a088 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a038:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a03c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a040:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a044:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a048:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a04c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a050:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	441a      	add	r2, r3
 800a06e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a07a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a082:	b29b      	uxth	r3, r3
 800a084:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	785b      	ldrb	r3, [r3, #1]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d020      	beq.n	800a0e6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ba:	81bb      	strh	r3, [r7, #12]
 800a0bc:	89bb      	ldrh	r3, [r7, #12]
 800a0be:	f083 0310 	eor.w	r3, r3, #16
 800a0c2:	81bb      	strh	r3, [r7, #12]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	441a      	add	r2, r3
 800a0ce:	89bb      	ldrh	r3, [r7, #12]
 800a0d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	8013      	strh	r3, [r2, #0]
 800a0e4:	e01f      	b.n	800a126 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fc:	81fb      	strh	r3, [r7, #14]
 800a0fe:	89fb      	ldrh	r3, [r7, #14]
 800a100:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a104:	81fb      	strh	r3, [r7, #14]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	441a      	add	r2, r3
 800a110:	89fb      	ldrh	r3, [r7, #14]
 800a112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a11a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a122:	b29b      	uxth	r3, r3
 800a124:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	7b1b      	ldrb	r3, [r3, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 809d 	bne.w	800a282 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	785b      	ldrb	r3, [r3, #1]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d04c      	beq.n	800a1ea <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	823b      	strh	r3, [r7, #16]
 800a15e:	8a3b      	ldrh	r3, [r7, #16]
 800a160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01b      	beq.n	800a1a0 <USB_EPClearStall+0x6c>
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	b29b      	uxth	r3, r3
 800a176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17e:	81fb      	strh	r3, [r7, #14]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	441a      	add	r2, r3
 800a18a:	89fb      	ldrh	r3, [r7, #14]
 800a18c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a198:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	78db      	ldrb	r3, [r3, #3]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d06c      	beq.n	800a282 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1be:	81bb      	strh	r3, [r7, #12]
 800a1c0:	89bb      	ldrh	r3, [r7, #12]
 800a1c2:	f083 0320 	eor.w	r3, r3, #32
 800a1c6:	81bb      	strh	r3, [r7, #12]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	441a      	add	r2, r3
 800a1d2:	89bb      	ldrh	r3, [r7, #12]
 800a1d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	8013      	strh	r3, [r2, #0]
 800a1e8:	e04b      	b.n	800a282 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	82fb      	strh	r3, [r7, #22]
 800a1f8:	8afb      	ldrh	r3, [r7, #22]
 800a1fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d01b      	beq.n	800a23a <USB_EPClearStall+0x106>
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	881b      	ldrh	r3, [r3, #0]
 800a20e:	b29b      	uxth	r3, r3
 800a210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a218:	82bb      	strh	r3, [r7, #20]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	441a      	add	r2, r3
 800a224:	8abb      	ldrh	r3, [r7, #20]
 800a226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a22a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a22e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a236:	b29b      	uxth	r3, r3
 800a238:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	b29b      	uxth	r3, r3
 800a248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a24c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a250:	827b      	strh	r3, [r7, #18]
 800a252:	8a7b      	ldrh	r3, [r7, #18]
 800a254:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a258:	827b      	strh	r3, [r7, #18]
 800a25a:	8a7b      	ldrh	r3, [r7, #18]
 800a25c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a260:	827b      	strh	r3, [r7, #18]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	441a      	add	r2, r3
 800a26c:	8a7b      	ldrh	r3, [r7, #18]
 800a26e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a27e:	b29b      	uxth	r3, r3
 800a280:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	371c      	adds	r7, #28
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a29c:	78fb      	ldrb	r3, [r7, #3]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d103      	bne.n	800a2aa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2280      	movs	r2, #128	; 0x80
 800a2a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b085      	sub	sp, #20
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a306:	b480      	push	{r7}
 800a308:	b08b      	sub	sp, #44	; 0x2c
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	4611      	mov	r1, r2
 800a312:	461a      	mov	r2, r3
 800a314:	460b      	mov	r3, r1
 800a316:	80fb      	strh	r3, [r7, #6]
 800a318:	4613      	mov	r3, r2
 800a31a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a31c:	88bb      	ldrh	r3, [r7, #4]
 800a31e:	3301      	adds	r3, #1
 800a320:	085b      	lsrs	r3, r3, #1
 800a322:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a32c:	88fa      	ldrh	r2, [r7, #6]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a336:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
 800a33c:	e01b      	b.n	800a376 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	3301      	adds	r3, #1
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	021b      	lsls	r3, r3, #8
 800a34c:	b21a      	sxth	r2, r3
 800a34e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a352:	4313      	orrs	r3, r2
 800a354:	b21b      	sxth	r3, r3
 800a356:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	8a7a      	ldrh	r2, [r7, #18]
 800a35c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	3302      	adds	r3, #2
 800a362:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	3301      	adds	r3, #1
 800a368:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	3301      	adds	r3, #1
 800a36e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	3b01      	subs	r3, #1
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1e0      	bne.n	800a33e <USB_WritePMA+0x38>
  }
}
 800a37c:	bf00      	nop
 800a37e:	bf00      	nop
 800a380:	372c      	adds	r7, #44	; 0x2c
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b08b      	sub	sp, #44	; 0x2c
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	4611      	mov	r1, r2
 800a396:	461a      	mov	r2, r3
 800a398:	460b      	mov	r3, r1
 800a39a:	80fb      	strh	r3, [r7, #6]
 800a39c:	4613      	mov	r3, r2
 800a39e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a3a0:	88bb      	ldrh	r3, [r7, #4]
 800a3a2:	085b      	lsrs	r3, r3, #1
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a3b0:	88fa      	ldrh	r2, [r7, #6]
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c0:	e018      	b.n	800a3f4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	3302      	adds	r3, #2
 800a3ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	0a1b      	lsrs	r3, r3, #8
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e3      	bne.n	800a3c2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a3fa:	88bb      	ldrh	r3, [r7, #4]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	b29b      	uxth	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d007      	beq.n	800a416 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	b2da      	uxtb	r2, r3
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	701a      	strb	r2, [r3, #0]
  }
}
 800a416:	bf00      	nop
 800a418:	372c      	adds	r7, #44	; 0x2c
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a42e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a432:	f002 f95b 	bl	800c6ec <USBD_static_malloc>
 800a436:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d105      	bne.n	800a44a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a446:	2302      	movs	r3, #2
 800a448:	e066      	b.n	800a518 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	7c1b      	ldrb	r3, [r3, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d119      	bne.n	800a48e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a45a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a45e:	2202      	movs	r2, #2
 800a460:	2181      	movs	r1, #129	; 0x81
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f001 ffe7 	bl	800c436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a46e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a472:	2202      	movs	r2, #2
 800a474:	2101      	movs	r1, #1
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 ffdd 	bl	800c436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2210      	movs	r2, #16
 800a488:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a48c:	e016      	b.n	800a4bc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a48e:	2340      	movs	r3, #64	; 0x40
 800a490:	2202      	movs	r2, #2
 800a492:	2181      	movs	r1, #129	; 0x81
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f001 ffce 	bl	800c436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4a0:	2340      	movs	r3, #64	; 0x40
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f001 ffc5 	bl	800c436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2210      	movs	r2, #16
 800a4b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a4bc:	2308      	movs	r3, #8
 800a4be:	2203      	movs	r2, #3
 800a4c0:	2182      	movs	r1, #130	; 0x82
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f001 ffb7 	bl	800c436 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	7c1b      	ldrb	r3, [r3, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d109      	bne.n	800a506 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f002 f889 	bl	800c616 <USBD_LL_PrepareReceive>
 800a504:	e007      	b.n	800a516 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	2101      	movs	r1, #1
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f002 f880 	bl	800c616 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a52c:	2181      	movs	r1, #129	; 0x81
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 ffa7 	bl	800c482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a53a:	2101      	movs	r1, #1
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f001 ffa0 	bl	800c482 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a54a:	2182      	movs	r1, #130	; 0x82
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 ff98 	bl	800c482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00e      	beq.n	800a58a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a57c:	4618      	mov	r0, r3
 800a57e:	f002 f8c3 	bl	800c708 <USBD_static_free>
    pdev->pClassData = NULL;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	e0af      	b.n	800a71c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d03f      	beq.n	800a648 <USBD_CDC_Setup+0xb4>
 800a5c8:	2b20      	cmp	r3, #32
 800a5ca:	f040 809f 	bne.w	800a70c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	88db      	ldrh	r3, [r3, #6]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d02e      	beq.n	800a634 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	b25b      	sxtb	r3, r3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	da16      	bge.n	800a60e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a5ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	88d2      	ldrh	r2, [r2, #6]
 800a5f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	88db      	ldrh	r3, [r3, #6]
 800a5f8:	2b07      	cmp	r3, #7
 800a5fa:	bf28      	it	cs
 800a5fc:	2307      	movcs	r3, #7
 800a5fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	89fa      	ldrh	r2, [r7, #14]
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 facf 	bl	800bbaa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a60c:	e085      	b.n	800a71a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	785a      	ldrb	r2, [r3, #1]
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	88db      	ldrh	r3, [r3, #6]
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a624:	6939      	ldr	r1, [r7, #16]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	88db      	ldrh	r3, [r3, #6]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f001 fae8 	bl	800bc02 <USBD_CtlPrepareRx>
      break;
 800a632:	e072      	b.n	800a71a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	7850      	ldrb	r0, [r2, #1]
 800a640:	2200      	movs	r2, #0
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	4798      	blx	r3
      break;
 800a646:	e068      	b.n	800a71a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	785b      	ldrb	r3, [r3, #1]
 800a64c:	2b0b      	cmp	r3, #11
 800a64e:	d852      	bhi.n	800a6f6 <USBD_CDC_Setup+0x162>
 800a650:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <USBD_CDC_Setup+0xc4>)
 800a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a689 	.word	0x0800a689
 800a65c:	0800a705 	.word	0x0800a705
 800a660:	0800a6f7 	.word	0x0800a6f7
 800a664:	0800a6f7 	.word	0x0800a6f7
 800a668:	0800a6f7 	.word	0x0800a6f7
 800a66c:	0800a6f7 	.word	0x0800a6f7
 800a670:	0800a6f7 	.word	0x0800a6f7
 800a674:	0800a6f7 	.word	0x0800a6f7
 800a678:	0800a6f7 	.word	0x0800a6f7
 800a67c:	0800a6f7 	.word	0x0800a6f7
 800a680:	0800a6b3 	.word	0x0800a6b3
 800a684:	0800a6dd 	.word	0x0800a6dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b03      	cmp	r3, #3
 800a692:	d107      	bne.n	800a6a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a694:	f107 030a 	add.w	r3, r7, #10
 800a698:	2202      	movs	r2, #2
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 fa84 	bl	800bbaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6a2:	e032      	b.n	800a70a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 fa0e 	bl	800bac8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	75fb      	strb	r3, [r7, #23]
          break;
 800a6b0:	e02b      	b.n	800a70a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d107      	bne.n	800a6ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a6be:	f107 030d 	add.w	r3, r7, #13
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 fa6f 	bl	800bbaa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6cc:	e01d      	b.n	800a70a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a6ce:	6839      	ldr	r1, [r7, #0]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f001 f9f9 	bl	800bac8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a6da:	e016      	b.n	800a70a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d00f      	beq.n	800a708 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f001 f9ec 	bl	800bac8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a6f4:	e008      	b.n	800a708 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f001 f9e5 	bl	800bac8 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6fe:	2303      	movs	r3, #3
 800a700:	75fb      	strb	r3, [r7, #23]
          break;
 800a702:	e002      	b.n	800a70a <USBD_CDC_Setup+0x176>
          break;
 800a704:	bf00      	nop
 800a706:	e008      	b.n	800a71a <USBD_CDC_Setup+0x186>
          break;
 800a708:	bf00      	nop
      }
      break;
 800a70a:	e006      	b.n	800a71a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 f9da 	bl	800bac8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a714:	2303      	movs	r3, #3
 800a716:	75fb      	strb	r3, [r7, #23]
      break;
 800a718:	bf00      	nop
  }

  return (uint8_t)ret;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a736:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a742:	2303      	movs	r3, #3
 800a744:	e04f      	b.n	800a7e6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a74c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a74e:	78fa      	ldrb	r2, [r7, #3]
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	440b      	add	r3, r1
 800a75c:	3318      	adds	r3, #24
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d029      	beq.n	800a7b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	440b      	add	r3, r1
 800a772:	3318      	adds	r3, #24
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	78f9      	ldrb	r1, [r7, #3]
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	460b      	mov	r3, r1
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	4403      	add	r3, r0
 800a784:	333c      	adds	r3, #60	; 0x3c
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	fbb2 f1f3 	udiv	r1, r2, r3
 800a78c:	fb01 f303 	mul.w	r3, r1, r3
 800a790:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a792:	2b00      	cmp	r3, #0
 800a794:	d110      	bne.n	800a7b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a796:	78fa      	ldrb	r2, [r7, #3]
 800a798:	6879      	ldr	r1, [r7, #4]
 800a79a:	4613      	mov	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	440b      	add	r3, r1
 800a7a4:	3318      	adds	r3, #24
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a7aa:	78f9      	ldrb	r1, [r7, #3]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 ff0f 	bl	800c5d4 <USBD_LL_Transmit>
 800a7b6:	e015      	b.n	800a7e4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00b      	beq.n	800a7e4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a7e0:	78fa      	ldrb	r2, [r7, #3]
 800a7e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a800:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e015      	b.n	800a83c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 ff1f 	bl	800c658 <USBD_LL_GetRxDataSize>
 800a81a:	4602      	mov	r2, r0
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a836:	4611      	mov	r1, r2
 800a838:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a852:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e01b      	b.n	800a896 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d015      	beq.n	800a894 <USBD_CDC_EP0_RxReady+0x50>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a86e:	2bff      	cmp	r3, #255	; 0xff
 800a870:	d010      	beq.n	800a894 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a880:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a888:	b292      	uxth	r2, r2
 800a88a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	22ff      	movs	r2, #255	; 0xff
 800a890:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2243      	movs	r2, #67	; 0x43
 800a8ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a8ae:	4b03      	ldr	r3, [pc, #12]	; (800a8bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	2000009c 	.word	0x2000009c

0800a8c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2243      	movs	r2, #67	; 0x43
 800a8cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a8ce:	4b03      	ldr	r3, [pc, #12]	; (800a8dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	20000058 	.word	0x20000058

0800a8e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2243      	movs	r2, #67	; 0x43
 800a8ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a8ee:	4b03      	ldr	r3, [pc, #12]	; (800a8fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	200000e0 	.word	0x200000e0

0800a900 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	220a      	movs	r2, #10
 800a90c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a90e:	4b03      	ldr	r3, [pc, #12]	; (800a91c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	20000014 	.word	0x20000014

0800a920 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a930:	2303      	movs	r3, #3
 800a932:	e004      	b.n	800a93e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b087      	sub	sp, #28
 800a94e:	af00      	add	r7, sp, #0
 800a950:	60f8      	str	r0, [r7, #12]
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a95c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a964:	2303      	movs	r3, #3
 800a966:	e008      	b.n	800a97a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	371c      	adds	r7, #28
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a986:	b480      	push	{r7}
 800a988:	b085      	sub	sp, #20
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a996:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e004      	b.n	800a9ac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9c6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e01a      	b.n	800aa10 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d114      	bne.n	800aa0e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa02:	2181      	movs	r1, #129	; 0x81
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f001 fde5 	bl	800c5d4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e016      	b.n	800aa64 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	7c1b      	ldrb	r3, [r3, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d109      	bne.n	800aa52 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa48:	2101      	movs	r1, #1
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 fde3 	bl	800c616 <USBD_LL_PrepareReceive>
 800aa50:	e007      	b.n	800aa62 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa58:	2340      	movs	r3, #64	; 0x40
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 fdda 	bl	800c616 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	4613      	mov	r3, r2
 800aa78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e01f      	b.n	800aac4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d003      	beq.n	800aaaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	79fa      	ldrb	r2, [r7, #7]
 800aab6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f001 fc3f 	bl	800c33c <USBD_LL_Init>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aad6:	2300      	movs	r3, #0
 800aad8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e016      	b.n	800ab12 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab00:	f107 020e 	add.w	r2, r7, #14
 800ab04:	4610      	mov	r0, r2
 800ab06:	4798      	blx	r3
 800ab08:	4602      	mov	r2, r0
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f001 fc6c 	bl	800c400 <USBD_LL_Start>
 800ab28:	4603      	mov	r3, r0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab54:	2303      	movs	r3, #3
 800ab56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d009      	beq.n	800ab76 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	78fa      	ldrb	r2, [r7, #3]
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	4798      	blx	r3
 800ab72:	4603      	mov	r3, r0
 800ab74:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d007      	beq.n	800aba6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	78fa      	ldrb	r2, [r7, #3]
 800aba0:	4611      	mov	r1, r2
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	4798      	blx	r3
  }

  return USBD_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 ff46 	bl	800ba54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800abd6:	461a      	mov	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abe4:	f003 031f 	and.w	r3, r3, #31
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d01a      	beq.n	800ac22 <USBD_LL_SetupStage+0x72>
 800abec:	2b02      	cmp	r3, #2
 800abee:	d822      	bhi.n	800ac36 <USBD_LL_SetupStage+0x86>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <USBD_LL_SetupStage+0x4a>
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d00a      	beq.n	800ac0e <USBD_LL_SetupStage+0x5e>
 800abf8:	e01d      	b.n	800ac36 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f9ee 	bl	800afe4 <USBD_StdDevReq>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac0c:	e020      	b.n	800ac50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac14:	4619      	mov	r1, r3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa52 	bl	800b0c0 <USBD_StdItfReq>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac20:	e016      	b.n	800ac50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa91 	bl	800b152 <USBD_StdEPReq>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73fb      	strb	r3, [r7, #15]
      break;
 800ac34:	e00c      	b.n	800ac50 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f001 fc3b 	bl	800c4c0 <USBD_LL_StallEP>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac4e:	bf00      	nop
  }

  return ret;
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b086      	sub	sp, #24
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	460b      	mov	r3, r1
 800ac64:	607a      	str	r2, [r7, #4]
 800ac66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac68:	7afb      	ldrb	r3, [r7, #11]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d138      	bne.n	800ace0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d14a      	bne.n	800ad16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d913      	bls.n	800acb4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	1ad2      	subs	r2, r2, r3
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	68da      	ldr	r2, [r3, #12]
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	4293      	cmp	r3, r2
 800aca4:	bf28      	it	cs
 800aca6:	4613      	movcs	r3, r2
 800aca8:	461a      	mov	r2, r3
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f000 ffc5 	bl	800bc3c <USBD_CtlContinueRx>
 800acb2:	e030      	b.n	800ad16 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b03      	cmp	r3, #3
 800acbe:	d10b      	bne.n	800acd8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d005      	beq.n	800acd8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 ffc0 	bl	800bc5e <USBD_CtlSendStatus>
 800acde:	e01a      	b.n	800ad16 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b03      	cmp	r3, #3
 800acea:	d114      	bne.n	800ad16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00e      	beq.n	800ad16 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	7afa      	ldrb	r2, [r7, #11]
 800ad02:	4611      	mov	r1, r2
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	4798      	blx	r3
 800ad08:	4603      	mov	r3, r0
 800ad0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	e000      	b.n	800ad18 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3718      	adds	r7, #24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad2e:	7afb      	ldrb	r3, [r7, #11]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d16b      	bne.n	800ae0c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	3314      	adds	r3, #20
 800ad38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d156      	bne.n	800adf2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	689a      	ldr	r2, [r3, #8]
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d914      	bls.n	800ad7a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	689a      	ldr	r2, [r3, #8]
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	1ad2      	subs	r2, r2, r3
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	461a      	mov	r2, r3
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 ff3a 	bl	800bbe0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2100      	movs	r1, #0
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f001 fc4f 	bl	800c616 <USBD_LL_PrepareReceive>
 800ad78:	e03b      	b.n	800adf2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d11c      	bne.n	800adc0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d316      	bcc.n	800adc0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d20f      	bcs.n	800adc0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ada0:	2200      	movs	r2, #0
 800ada2:	2100      	movs	r1, #0
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f000 ff1b 	bl	800bbe0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adb2:	2300      	movs	r3, #0
 800adb4:	2200      	movs	r2, #0
 800adb6:	2100      	movs	r1, #0
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f001 fc2c 	bl	800c616 <USBD_LL_PrepareReceive>
 800adbe:	e018      	b.n	800adf2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d10b      	bne.n	800ade4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d005      	beq.n	800ade4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ade4:	2180      	movs	r1, #128	; 0x80
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f001 fb6a 	bl	800c4c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f000 ff49 	bl	800bc84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d122      	bne.n	800ae42 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f7ff fe98 	bl	800ab32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae0a:	e01a      	b.n	800ae42 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b03      	cmp	r3, #3
 800ae16:	d114      	bne.n	800ae42 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00e      	beq.n	800ae42 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	7afa      	ldrb	r2, [r7, #11]
 800ae2e:	4611      	mov	r1, r2
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	4798      	blx	r3
 800ae34:	4603      	mov	r3, r0
 800ae36:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	e000      	b.n	800ae44 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e02f      	b.n	800aee0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00f      	beq.n	800aeaa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d009      	beq.n	800aeaa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	6852      	ldr	r2, [r2, #4]
 800aea2:	b2d2      	uxtb	r2, r2
 800aea4:	4611      	mov	r1, r2
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aeaa:	2340      	movs	r3, #64	; 0x40
 800aeac:	2200      	movs	r2, #0
 800aeae:	2100      	movs	r1, #0
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f001 fac0 	bl	800c436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2240      	movs	r2, #64	; 0x40
 800aec2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aec6:	2340      	movs	r3, #64	; 0x40
 800aec8:	2200      	movs	r2, #0
 800aeca:	2180      	movs	r1, #128	; 0x80
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f001 fab2 	bl	800c436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2240      	movs	r2, #64	; 0x40
 800aedc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	78fa      	ldrb	r2, [r7, #3]
 800aef8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af16:	b2da      	uxtb	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2204      	movs	r2, #4
 800af22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b04      	cmp	r3, #4
 800af46:	d106      	bne.n	800af56 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800af76:	2303      	movs	r3, #3
 800af78:	e012      	b.n	800afa0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b03      	cmp	r3, #3
 800af84:	d10b      	bne.n	800af9e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d005      	beq.n	800af9e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	3301      	adds	r3, #1
 800afbe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800afc6:	8a3b      	ldrh	r3, [r7, #16]
 800afc8:	021b      	lsls	r3, r3, #8
 800afca:	b21a      	sxth	r2, r3
 800afcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	b21b      	sxth	r3, r3
 800afd4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800afd6:	89fb      	ldrh	r3, [r7, #14]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	371c      	adds	r7, #28
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800affa:	2b40      	cmp	r3, #64	; 0x40
 800affc:	d005      	beq.n	800b00a <USBD_StdDevReq+0x26>
 800affe:	2b40      	cmp	r3, #64	; 0x40
 800b000:	d853      	bhi.n	800b0aa <USBD_StdDevReq+0xc6>
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00b      	beq.n	800b01e <USBD_StdDevReq+0x3a>
 800b006:	2b20      	cmp	r3, #32
 800b008:	d14f      	bne.n	800b0aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	4798      	blx	r3
 800b018:	4603      	mov	r3, r0
 800b01a:	73fb      	strb	r3, [r7, #15]
      break;
 800b01c:	e04a      	b.n	800b0b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	785b      	ldrb	r3, [r3, #1]
 800b022:	2b09      	cmp	r3, #9
 800b024:	d83b      	bhi.n	800b09e <USBD_StdDevReq+0xba>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <USBD_StdDevReq+0x48>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b081 	.word	0x0800b081
 800b030:	0800b095 	.word	0x0800b095
 800b034:	0800b09f 	.word	0x0800b09f
 800b038:	0800b08b 	.word	0x0800b08b
 800b03c:	0800b09f 	.word	0x0800b09f
 800b040:	0800b05f 	.word	0x0800b05f
 800b044:	0800b055 	.word	0x0800b055
 800b048:	0800b09f 	.word	0x0800b09f
 800b04c:	0800b077 	.word	0x0800b077
 800b050:	0800b069 	.word	0x0800b069
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f9de 	bl	800b418 <USBD_GetDescriptor>
          break;
 800b05c:	e024      	b.n	800b0a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fb6d 	bl	800b740 <USBD_SetAddress>
          break;
 800b066:	e01f      	b.n	800b0a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fbac 	bl	800b7c8 <USBD_SetConfig>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]
          break;
 800b074:	e018      	b.n	800b0a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fc4b 	bl	800b914 <USBD_GetConfig>
          break;
 800b07e:	e013      	b.n	800b0a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fc7c 	bl	800b980 <USBD_GetStatus>
          break;
 800b088:	e00e      	b.n	800b0a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fcab 	bl	800b9e8 <USBD_SetFeature>
          break;
 800b092:	e009      	b.n	800b0a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fcba 	bl	800ba10 <USBD_ClrFeature>
          break;
 800b09c:	e004      	b.n	800b0a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fd11 	bl	800bac8 <USBD_CtlError>
          break;
 800b0a6:	bf00      	nop
      }
      break;
 800b0a8:	e004      	b.n	800b0b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fd0b 	bl	800bac8 <USBD_CtlError>
      break;
 800b0b2:	bf00      	nop
  }

  return ret;
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop

0800b0c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0d6:	2b40      	cmp	r3, #64	; 0x40
 800b0d8:	d005      	beq.n	800b0e6 <USBD_StdItfReq+0x26>
 800b0da:	2b40      	cmp	r3, #64	; 0x40
 800b0dc:	d82f      	bhi.n	800b13e <USBD_StdItfReq+0x7e>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <USBD_StdItfReq+0x26>
 800b0e2:	2b20      	cmp	r3, #32
 800b0e4:	d12b      	bne.n	800b13e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d81d      	bhi.n	800b130 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	889b      	ldrh	r3, [r3, #4]
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d813      	bhi.n	800b126 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	4798      	blx	r3
 800b10c:	4603      	mov	r3, r0
 800b10e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	88db      	ldrh	r3, [r3, #6]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d110      	bne.n	800b13a <USBD_StdItfReq+0x7a>
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10d      	bne.n	800b13a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fd9d 	bl	800bc5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b124:	e009      	b.n	800b13a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fccd 	bl	800bac8 <USBD_CtlError>
          break;
 800b12e:	e004      	b.n	800b13a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fcc8 	bl	800bac8 <USBD_CtlError>
          break;
 800b138:	e000      	b.n	800b13c <USBD_StdItfReq+0x7c>
          break;
 800b13a:	bf00      	nop
      }
      break;
 800b13c:	e004      	b.n	800b148 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fcc1 	bl	800bac8 <USBD_CtlError>
      break;
 800b146:	bf00      	nop
  }

  return ret;
 800b148:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	889b      	ldrh	r3, [r3, #4]
 800b164:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b16e:	2b40      	cmp	r3, #64	; 0x40
 800b170:	d007      	beq.n	800b182 <USBD_StdEPReq+0x30>
 800b172:	2b40      	cmp	r3, #64	; 0x40
 800b174:	f200 8145 	bhi.w	800b402 <USBD_StdEPReq+0x2b0>
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00c      	beq.n	800b196 <USBD_StdEPReq+0x44>
 800b17c:	2b20      	cmp	r3, #32
 800b17e:	f040 8140 	bne.w	800b402 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	4798      	blx	r3
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]
      break;
 800b194:	e13a      	b.n	800b40c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	785b      	ldrb	r3, [r3, #1]
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d007      	beq.n	800b1ae <USBD_StdEPReq+0x5c>
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	f300 8129 	bgt.w	800b3f6 <USBD_StdEPReq+0x2a4>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d07f      	beq.n	800b2a8 <USBD_StdEPReq+0x156>
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d03c      	beq.n	800b226 <USBD_StdEPReq+0xd4>
 800b1ac:	e123      	b.n	800b3f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d002      	beq.n	800b1c0 <USBD_StdEPReq+0x6e>
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d016      	beq.n	800b1ec <USBD_StdEPReq+0x9a>
 800b1be:	e02c      	b.n	800b21a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00d      	beq.n	800b1e2 <USBD_StdEPReq+0x90>
 800b1c6:	7bbb      	ldrb	r3, [r7, #14]
 800b1c8:	2b80      	cmp	r3, #128	; 0x80
 800b1ca:	d00a      	beq.n	800b1e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f001 f975 	bl	800c4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1d6:	2180      	movs	r1, #128	; 0x80
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 f971 	bl	800c4c0 <USBD_LL_StallEP>
 800b1de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1e0:	e020      	b.n	800b224 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fc6f 	bl	800bac8 <USBD_CtlError>
              break;
 800b1ea:	e01b      	b.n	800b224 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	885b      	ldrh	r3, [r3, #2]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10e      	bne.n	800b212 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00b      	beq.n	800b212 <USBD_StdEPReq+0xc0>
 800b1fa:	7bbb      	ldrb	r3, [r7, #14]
 800b1fc:	2b80      	cmp	r3, #128	; 0x80
 800b1fe:	d008      	beq.n	800b212 <USBD_StdEPReq+0xc0>
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	88db      	ldrh	r3, [r3, #6]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d104      	bne.n	800b212 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b208:	7bbb      	ldrb	r3, [r7, #14]
 800b20a:	4619      	mov	r1, r3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f001 f957 	bl	800c4c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fd23 	bl	800bc5e <USBD_CtlSendStatus>

              break;
 800b218:	e004      	b.n	800b224 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fc53 	bl	800bac8 <USBD_CtlError>
              break;
 800b222:	bf00      	nop
          }
          break;
 800b224:	e0ec      	b.n	800b400 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d002      	beq.n	800b238 <USBD_StdEPReq+0xe6>
 800b232:	2b03      	cmp	r3, #3
 800b234:	d016      	beq.n	800b264 <USBD_StdEPReq+0x112>
 800b236:	e030      	b.n	800b29a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b238:	7bbb      	ldrb	r3, [r7, #14]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00d      	beq.n	800b25a <USBD_StdEPReq+0x108>
 800b23e:	7bbb      	ldrb	r3, [r7, #14]
 800b240:	2b80      	cmp	r3, #128	; 0x80
 800b242:	d00a      	beq.n	800b25a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f001 f939 	bl	800c4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b24e:	2180      	movs	r1, #128	; 0x80
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f001 f935 	bl	800c4c0 <USBD_LL_StallEP>
 800b256:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b258:	e025      	b.n	800b2a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b25a:	6839      	ldr	r1, [r7, #0]
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 fc33 	bl	800bac8 <USBD_CtlError>
              break;
 800b262:	e020      	b.n	800b2a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	885b      	ldrh	r3, [r3, #2]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d11b      	bne.n	800b2a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b272:	2b00      	cmp	r3, #0
 800b274:	d004      	beq.n	800b280 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b276:	7bbb      	ldrb	r3, [r7, #14]
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f001 f93f 	bl	800c4fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fcec 	bl	800bc5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	4798      	blx	r3
 800b294:	4603      	mov	r3, r0
 800b296:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b298:	e004      	b.n	800b2a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fc13 	bl	800bac8 <USBD_CtlError>
              break;
 800b2a2:	e000      	b.n	800b2a6 <USBD_StdEPReq+0x154>
              break;
 800b2a4:	bf00      	nop
          }
          break;
 800b2a6:	e0ab      	b.n	800b400 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d002      	beq.n	800b2ba <USBD_StdEPReq+0x168>
 800b2b4:	2b03      	cmp	r3, #3
 800b2b6:	d032      	beq.n	800b31e <USBD_StdEPReq+0x1cc>
 800b2b8:	e097      	b.n	800b3ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d007      	beq.n	800b2d0 <USBD_StdEPReq+0x17e>
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	2b80      	cmp	r3, #128	; 0x80
 800b2c4:	d004      	beq.n	800b2d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fbfd 	bl	800bac8 <USBD_CtlError>
                break;
 800b2ce:	e091      	b.n	800b3f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	da0b      	bge.n	800b2f0 <USBD_StdEPReq+0x19e>
 800b2d8:	7bbb      	ldrb	r3, [r7, #14]
 800b2da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	3310      	adds	r3, #16
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	e00b      	b.n	800b308 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2f0:	7bbb      	ldrb	r3, [r7, #14]
 800b2f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	4413      	add	r3, r2
 800b306:	3304      	adds	r3, #4
 800b308:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2200      	movs	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2202      	movs	r2, #2
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fc47 	bl	800bbaa <USBD_CtlSendData>
              break;
 800b31c:	e06a      	b.n	800b3f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b31e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b322:	2b00      	cmp	r3, #0
 800b324:	da11      	bge.n	800b34a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b326:	7bbb      	ldrb	r3, [r7, #14]
 800b328:	f003 020f 	and.w	r2, r3, #15
 800b32c:	6879      	ldr	r1, [r7, #4]
 800b32e:	4613      	mov	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	440b      	add	r3, r1
 800b338:	3324      	adds	r3, #36	; 0x24
 800b33a:	881b      	ldrh	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d117      	bne.n	800b370 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fbc0 	bl	800bac8 <USBD_CtlError>
                  break;
 800b348:	e054      	b.n	800b3f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b34a:	7bbb      	ldrb	r3, [r7, #14]
 800b34c:	f003 020f 	and.w	r2, r3, #15
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	440b      	add	r3, r1
 800b35c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d104      	bne.n	800b370 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fbad 	bl	800bac8 <USBD_CtlError>
                  break;
 800b36e:	e041      	b.n	800b3f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b374:	2b00      	cmp	r3, #0
 800b376:	da0b      	bge.n	800b390 <USBD_StdEPReq+0x23e>
 800b378:	7bbb      	ldrb	r3, [r7, #14]
 800b37a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	3310      	adds	r3, #16
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	4413      	add	r3, r2
 800b38c:	3304      	adds	r3, #4
 800b38e:	e00b      	b.n	800b3a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b396:	4613      	mov	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <USBD_StdEPReq+0x264>
 800b3b0:	7bbb      	ldrb	r3, [r7, #14]
 800b3b2:	2b80      	cmp	r3, #128	; 0x80
 800b3b4:	d103      	bne.n	800b3be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	e00e      	b.n	800b3dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3be:	7bbb      	ldrb	r3, [r7, #14]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f001 f8ba 	bl	800c53c <USBD_LL_IsStallEP>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	e002      	b.n	800b3dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fbe1 	bl	800bbaa <USBD_CtlSendData>
              break;
 800b3e8:	e004      	b.n	800b3f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fb6b 	bl	800bac8 <USBD_CtlError>
              break;
 800b3f2:	bf00      	nop
          }
          break;
 800b3f4:	e004      	b.n	800b400 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fb65 	bl	800bac8 <USBD_CtlError>
          break;
 800b3fe:	bf00      	nop
      }
      break;
 800b400:	e004      	b.n	800b40c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fb5f 	bl	800bac8 <USBD_CtlError>
      break;
 800b40a:	bf00      	nop
  }

  return ret;
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b422:	2300      	movs	r3, #0
 800b424:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b42a:	2300      	movs	r3, #0
 800b42c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	885b      	ldrh	r3, [r3, #2]
 800b432:	0a1b      	lsrs	r3, r3, #8
 800b434:	b29b      	uxth	r3, r3
 800b436:	3b01      	subs	r3, #1
 800b438:	2b0e      	cmp	r3, #14
 800b43a:	f200 8152 	bhi.w	800b6e2 <USBD_GetDescriptor+0x2ca>
 800b43e:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <USBD_GetDescriptor+0x2c>)
 800b440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b444:	0800b4b5 	.word	0x0800b4b5
 800b448:	0800b4cd 	.word	0x0800b4cd
 800b44c:	0800b50d 	.word	0x0800b50d
 800b450:	0800b6e3 	.word	0x0800b6e3
 800b454:	0800b6e3 	.word	0x0800b6e3
 800b458:	0800b683 	.word	0x0800b683
 800b45c:	0800b6af 	.word	0x0800b6af
 800b460:	0800b6e3 	.word	0x0800b6e3
 800b464:	0800b6e3 	.word	0x0800b6e3
 800b468:	0800b6e3 	.word	0x0800b6e3
 800b46c:	0800b6e3 	.word	0x0800b6e3
 800b470:	0800b6e3 	.word	0x0800b6e3
 800b474:	0800b6e3 	.word	0x0800b6e3
 800b478:	0800b6e3 	.word	0x0800b6e3
 800b47c:	0800b481 	.word	0x0800b481
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b486:	69db      	ldr	r3, [r3, #28]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b492:	69db      	ldr	r3, [r3, #28]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	7c12      	ldrb	r2, [r2, #16]
 800b498:	f107 0108 	add.w	r1, r7, #8
 800b49c:	4610      	mov	r0, r2
 800b49e:	4798      	blx	r3
 800b4a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4a2:	e126      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4a4:	6839      	ldr	r1, [r7, #0]
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fb0e 	bl	800bac8 <USBD_CtlError>
        err++;
 800b4ac:	7afb      	ldrb	r3, [r7, #11]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	72fb      	strb	r3, [r7, #11]
      break;
 800b4b2:	e11e      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	7c12      	ldrb	r2, [r2, #16]
 800b4c0:	f107 0108 	add.w	r1, r7, #8
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	60f8      	str	r0, [r7, #12]
      break;
 800b4ca:	e112      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	7c1b      	ldrb	r3, [r3, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10d      	bne.n	800b4f0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4dc:	f107 0208 	add.w	r2, r7, #8
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	4798      	blx	r3
 800b4e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4ee:	e100      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f8:	f107 0208 	add.w	r2, r7, #8
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	4798      	blx	r3
 800b500:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3301      	adds	r3, #1
 800b506:	2202      	movs	r2, #2
 800b508:	701a      	strb	r2, [r3, #0]
      break;
 800b50a:	e0f2      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	885b      	ldrh	r3, [r3, #2]
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b05      	cmp	r3, #5
 800b514:	f200 80ac 	bhi.w	800b670 <USBD_GetDescriptor+0x258>
 800b518:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <USBD_GetDescriptor+0x108>)
 800b51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51e:	bf00      	nop
 800b520:	0800b539 	.word	0x0800b539
 800b524:	0800b56d 	.word	0x0800b56d
 800b528:	0800b5a1 	.word	0x0800b5a1
 800b52c:	0800b5d5 	.word	0x0800b5d5
 800b530:	0800b609 	.word	0x0800b609
 800b534:	0800b63d 	.word	0x0800b63d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00b      	beq.n	800b55c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	7c12      	ldrb	r2, [r2, #16]
 800b550:	f107 0108 	add.w	r1, r7, #8
 800b554:	4610      	mov	r0, r2
 800b556:	4798      	blx	r3
 800b558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b55a:	e091      	b.n	800b680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fab2 	bl	800bac8 <USBD_CtlError>
            err++;
 800b564:	7afb      	ldrb	r3, [r7, #11]
 800b566:	3301      	adds	r3, #1
 800b568:	72fb      	strb	r3, [r7, #11]
          break;
 800b56a:	e089      	b.n	800b680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	7c12      	ldrb	r2, [r2, #16]
 800b584:	f107 0108 	add.w	r1, r7, #8
 800b588:	4610      	mov	r0, r2
 800b58a:	4798      	blx	r3
 800b58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b58e:	e077      	b.n	800b680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa98 	bl	800bac8 <USBD_CtlError>
            err++;
 800b598:	7afb      	ldrb	r3, [r7, #11]
 800b59a:	3301      	adds	r3, #1
 800b59c:	72fb      	strb	r3, [r7, #11]
          break;
 800b59e:	e06f      	b.n	800b680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	7c12      	ldrb	r2, [r2, #16]
 800b5b8:	f107 0108 	add.w	r1, r7, #8
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4798      	blx	r3
 800b5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5c2:	e05d      	b.n	800b680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fa7e 	bl	800bac8 <USBD_CtlError>
            err++;
 800b5cc:	7afb      	ldrb	r3, [r7, #11]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5d2:	e055      	b.n	800b680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	7c12      	ldrb	r2, [r2, #16]
 800b5ec:	f107 0108 	add.w	r1, r7, #8
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	4798      	blx	r3
 800b5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5f6:	e043      	b.n	800b680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fa64 	bl	800bac8 <USBD_CtlError>
            err++;
 800b600:	7afb      	ldrb	r3, [r7, #11]
 800b602:	3301      	adds	r3, #1
 800b604:	72fb      	strb	r3, [r7, #11]
          break;
 800b606:	e03b      	b.n	800b680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b60e:	695b      	ldr	r3, [r3, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00b      	beq.n	800b62c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	7c12      	ldrb	r2, [r2, #16]
 800b620:	f107 0108 	add.w	r1, r7, #8
 800b624:	4610      	mov	r0, r2
 800b626:	4798      	blx	r3
 800b628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b62a:	e029      	b.n	800b680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa4a 	bl	800bac8 <USBD_CtlError>
            err++;
 800b634:	7afb      	ldrb	r3, [r7, #11]
 800b636:	3301      	adds	r3, #1
 800b638:	72fb      	strb	r3, [r7, #11]
          break;
 800b63a:	e021      	b.n	800b680 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00b      	beq.n	800b660 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b64e:	699b      	ldr	r3, [r3, #24]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	7c12      	ldrb	r2, [r2, #16]
 800b654:	f107 0108 	add.w	r1, r7, #8
 800b658:	4610      	mov	r0, r2
 800b65a:	4798      	blx	r3
 800b65c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b65e:	e00f      	b.n	800b680 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fa30 	bl	800bac8 <USBD_CtlError>
            err++;
 800b668:	7afb      	ldrb	r3, [r7, #11]
 800b66a:	3301      	adds	r3, #1
 800b66c:	72fb      	strb	r3, [r7, #11]
          break;
 800b66e:	e007      	b.n	800b680 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fa28 	bl	800bac8 <USBD_CtlError>
          err++;
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	3301      	adds	r3, #1
 800b67c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b67e:	bf00      	nop
      }
      break;
 800b680:	e037      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	7c1b      	ldrb	r3, [r3, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d109      	bne.n	800b69e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	f107 0208 	add.w	r2, r7, #8
 800b696:	4610      	mov	r0, r2
 800b698:	4798      	blx	r3
 800b69a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b69c:	e029      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fa11 	bl	800bac8 <USBD_CtlError>
        err++;
 800b6a6:	7afb      	ldrb	r3, [r7, #11]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	72fb      	strb	r3, [r7, #11]
      break;
 800b6ac:	e021      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	7c1b      	ldrb	r3, [r3, #16]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10d      	bne.n	800b6d2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6be:	f107 0208 	add.w	r2, r7, #8
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	4798      	blx	r3
 800b6c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	2207      	movs	r2, #7
 800b6ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6d0:	e00f      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f9f7 	bl	800bac8 <USBD_CtlError>
        err++;
 800b6da:	7afb      	ldrb	r3, [r7, #11]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	72fb      	strb	r3, [r7, #11]
      break;
 800b6e0:	e007      	b.n	800b6f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b6e2:	6839      	ldr	r1, [r7, #0]
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 f9ef 	bl	800bac8 <USBD_CtlError>
      err++;
 800b6ea:	7afb      	ldrb	r3, [r7, #11]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	72fb      	strb	r3, [r7, #11]
      break;
 800b6f0:	bf00      	nop
  }

  if (err != 0U)
 800b6f2:	7afb      	ldrb	r3, [r7, #11]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d11e      	bne.n	800b736 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	88db      	ldrh	r3, [r3, #6]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d016      	beq.n	800b72e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b700:	893b      	ldrh	r3, [r7, #8]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00e      	beq.n	800b724 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	88da      	ldrh	r2, [r3, #6]
 800b70a:	893b      	ldrh	r3, [r7, #8]
 800b70c:	4293      	cmp	r3, r2
 800b70e:	bf28      	it	cs
 800b710:	4613      	movcs	r3, r2
 800b712:	b29b      	uxth	r3, r3
 800b714:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b716:	893b      	ldrh	r3, [r7, #8]
 800b718:	461a      	mov	r2, r3
 800b71a:	68f9      	ldr	r1, [r7, #12]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fa44 	bl	800bbaa <USBD_CtlSendData>
 800b722:	e009      	b.n	800b738 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b724:	6839      	ldr	r1, [r7, #0]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f9ce 	bl	800bac8 <USBD_CtlError>
 800b72c:	e004      	b.n	800b738 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fa95 	bl	800bc5e <USBD_CtlSendStatus>
 800b734:	e000      	b.n	800b738 <USBD_GetDescriptor+0x320>
    return;
 800b736:	bf00      	nop
  }
}
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop

0800b740 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	889b      	ldrh	r3, [r3, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d131      	bne.n	800b7b6 <USBD_SetAddress+0x76>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	88db      	ldrh	r3, [r3, #6]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d12d      	bne.n	800b7b6 <USBD_SetAddress+0x76>
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	885b      	ldrh	r3, [r3, #2]
 800b75e:	2b7f      	cmp	r3, #127	; 0x7f
 800b760:	d829      	bhi.n	800b7b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	885b      	ldrh	r3, [r3, #2]
 800b766:	b2db      	uxtb	r3, r3
 800b768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b76c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b03      	cmp	r3, #3
 800b778:	d104      	bne.n	800b784 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f9a3 	bl	800bac8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b782:	e01d      	b.n	800b7c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	7bfa      	ldrb	r2, [r7, #15]
 800b788:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 ff00 	bl	800c596 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fa61 	bl	800bc5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d004      	beq.n	800b7ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7aa:	e009      	b.n	800b7c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b4:	e004      	b.n	800b7c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7b6:	6839      	ldr	r1, [r7, #0]
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f985 	bl	800bac8 <USBD_CtlError>
  }
}
 800b7be:	bf00      	nop
 800b7c0:	bf00      	nop
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	885b      	ldrh	r3, [r3, #2]
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	4b4c      	ldr	r3, [pc, #304]	; (800b910 <USBD_SetConfig+0x148>)
 800b7de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7e0:	4b4b      	ldr	r3, [pc, #300]	; (800b910 <USBD_SetConfig+0x148>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d905      	bls.n	800b7f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f96c 	bl	800bac8 <USBD_CtlError>
    return USBD_FAIL;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e088      	b.n	800b906 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d002      	beq.n	800b806 <USBD_SetConfig+0x3e>
 800b800:	2b03      	cmp	r3, #3
 800b802:	d025      	beq.n	800b850 <USBD_SetConfig+0x88>
 800b804:	e071      	b.n	800b8ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b806:	4b42      	ldr	r3, [pc, #264]	; (800b910 <USBD_SetConfig+0x148>)
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d01c      	beq.n	800b848 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b80e:	4b40      	ldr	r3, [pc, #256]	; (800b910 <USBD_SetConfig+0x148>)
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	461a      	mov	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b818:	4b3d      	ldr	r3, [pc, #244]	; (800b910 <USBD_SetConfig+0x148>)
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff f992 	bl	800ab48 <USBD_SetClassConfig>
 800b824:	4603      	mov	r3, r0
 800b826:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b828:	7bfb      	ldrb	r3, [r7, #15]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d004      	beq.n	800b838 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f949 	bl	800bac8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b836:	e065      	b.n	800b904 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 fa10 	bl	800bc5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2203      	movs	r2, #3
 800b842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b846:	e05d      	b.n	800b904 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fa08 	bl	800bc5e <USBD_CtlSendStatus>
      break;
 800b84e:	e059      	b.n	800b904 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b850:	4b2f      	ldr	r3, [pc, #188]	; (800b910 <USBD_SetConfig+0x148>)
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d112      	bne.n	800b87e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2202      	movs	r2, #2
 800b85c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b860:	4b2b      	ldr	r3, [pc, #172]	; (800b910 <USBD_SetConfig+0x148>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	461a      	mov	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b86a:	4b29      	ldr	r3, [pc, #164]	; (800b910 <USBD_SetConfig+0x148>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	4619      	mov	r1, r3
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f7ff f985 	bl	800ab80 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f9f1 	bl	800bc5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b87c:	e042      	b.n	800b904 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b87e:	4b24      	ldr	r3, [pc, #144]	; (800b910 <USBD_SetConfig+0x148>)
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d02a      	beq.n	800b8e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	b2db      	uxtb	r3, r3
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7ff f973 	bl	800ab80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b89a:	4b1d      	ldr	r3, [pc, #116]	; (800b910 <USBD_SetConfig+0x148>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8a4:	4b1a      	ldr	r3, [pc, #104]	; (800b910 <USBD_SetConfig+0x148>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff f94c 	bl	800ab48 <USBD_SetClassConfig>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00f      	beq.n	800b8da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f903 	bl	800bac8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff f958 	bl	800ab80 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8d8:	e014      	b.n	800b904 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f9bf 	bl	800bc5e <USBD_CtlSendStatus>
      break;
 800b8e0:	e010      	b.n	800b904 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 f9bb 	bl	800bc5e <USBD_CtlSendStatus>
      break;
 800b8e8:	e00c      	b.n	800b904 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b8ea:	6839      	ldr	r1, [r7, #0]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 f8eb 	bl	800bac8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8f2:	4b07      	ldr	r3, [pc, #28]	; (800b910 <USBD_SetConfig+0x148>)
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff f941 	bl	800ab80 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8fe:	2303      	movs	r3, #3
 800b900:	73fb      	strb	r3, [r7, #15]
      break;
 800b902:	bf00      	nop
  }

  return ret;
 800b904:	7bfb      	ldrb	r3, [r7, #15]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	20002b44 	.word	0x20002b44

0800b914 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	88db      	ldrh	r3, [r3, #6]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d004      	beq.n	800b930 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f8cd 	bl	800bac8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b92e:	e023      	b.n	800b978 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b02      	cmp	r3, #2
 800b93a:	dc02      	bgt.n	800b942 <USBD_GetConfig+0x2e>
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	dc03      	bgt.n	800b948 <USBD_GetConfig+0x34>
 800b940:	e015      	b.n	800b96e <USBD_GetConfig+0x5a>
 800b942:	2b03      	cmp	r3, #3
 800b944:	d00b      	beq.n	800b95e <USBD_GetConfig+0x4a>
 800b946:	e012      	b.n	800b96e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3308      	adds	r3, #8
 800b952:	2201      	movs	r2, #1
 800b954:	4619      	mov	r1, r3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f927 	bl	800bbaa <USBD_CtlSendData>
        break;
 800b95c:	e00c      	b.n	800b978 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3304      	adds	r3, #4
 800b962:	2201      	movs	r2, #1
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f91f 	bl	800bbaa <USBD_CtlSendData>
        break;
 800b96c:	e004      	b.n	800b978 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f8a9 	bl	800bac8 <USBD_CtlError>
        break;
 800b976:	bf00      	nop
}
 800b978:	bf00      	nop
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b990:	b2db      	uxtb	r3, r3
 800b992:	3b01      	subs	r3, #1
 800b994:	2b02      	cmp	r3, #2
 800b996:	d81e      	bhi.n	800b9d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	88db      	ldrh	r3, [r3, #6]
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d004      	beq.n	800b9aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f890 	bl	800bac8 <USBD_CtlError>
        break;
 800b9a8:	e01a      	b.n	800b9e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d005      	beq.n	800b9c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	f043 0202 	orr.w	r2, r3, #2
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	330c      	adds	r3, #12
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f8eb 	bl	800bbaa <USBD_CtlSendData>
      break;
 800b9d4:	e004      	b.n	800b9e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f875 	bl	800bac8 <USBD_CtlError>
      break;
 800b9de:	bf00      	nop
  }
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	885b      	ldrh	r3, [r3, #2]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d106      	bne.n	800ba08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f92b 	bl	800bc5e <USBD_CtlSendStatus>
  }
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	3b01      	subs	r3, #1
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	d80b      	bhi.n	800ba40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	885b      	ldrh	r3, [r3, #2]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d10c      	bne.n	800ba4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f910 	bl	800bc5e <USBD_CtlSendStatus>
      }
      break;
 800ba3e:	e004      	b.n	800ba4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f840 	bl	800bac8 <USBD_CtlError>
      break;
 800ba48:	e000      	b.n	800ba4c <USBD_ClrFeature+0x3c>
      break;
 800ba4a:	bf00      	nop
  }
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	781a      	ldrb	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	781a      	ldrb	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f7ff fa92 	bl	800afa8 <SWAPBYTE>
 800ba84:	4603      	mov	r3, r0
 800ba86:	461a      	mov	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3301      	adds	r3, #1
 800ba96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7ff fa85 	bl	800afa8 <SWAPBYTE>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	461a      	mov	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3301      	adds	r3, #1
 800baaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	3301      	adds	r3, #1
 800bab0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f7ff fa78 	bl	800afa8 <SWAPBYTE>
 800bab8:	4603      	mov	r3, r0
 800baba:	461a      	mov	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	80da      	strh	r2, [r3, #6]
}
 800bac0:	bf00      	nop
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bad2:	2180      	movs	r1, #128	; 0x80
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fcf3 	bl	800c4c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bada:	2100      	movs	r1, #0
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fcef 	bl	800c4c0 <USBD_LL_StallEP>
}
 800bae2:	bf00      	nop
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b086      	sub	sp, #24
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800baf6:	2300      	movs	r3, #0
 800baf8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d036      	beq.n	800bb6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb04:	6938      	ldr	r0, [r7, #16]
 800bb06:	f000 f836 	bl	800bb76 <USBD_GetLen>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	7812      	ldrb	r2, [r2, #0]
 800bb22:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb24:	7dfb      	ldrb	r3, [r7, #23]
 800bb26:	3301      	adds	r3, #1
 800bb28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	4413      	add	r3, r2
 800bb30:	2203      	movs	r2, #3
 800bb32:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
 800bb36:	3301      	adds	r3, #1
 800bb38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb3a:	e013      	b.n	800bb64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	4413      	add	r3, r2
 800bb42:	693a      	ldr	r2, [r7, #16]
 800bb44:	7812      	ldrb	r2, [r2, #0]
 800bb46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	613b      	str	r3, [r7, #16]
    idx++;
 800bb4e:	7dfb      	ldrb	r3, [r7, #23]
 800bb50:	3301      	adds	r3, #1
 800bb52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	4413      	add	r3, r2
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	3301      	adds	r3, #1
 800bb62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1e7      	bne.n	800bb3c <USBD_GetString+0x52>
 800bb6c:	e000      	b.n	800bb70 <USBD_GetString+0x86>
    return;
 800bb6e:	bf00      	nop
  }
}
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b085      	sub	sp, #20
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb86:	e005      	b.n	800bb94 <USBD_GetLen+0x1e>
  {
    len++;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	3301      	adds	r3, #1
 800bb92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1f5      	bne.n	800bb88 <USBD_GetLen+0x12>
  }

  return len;
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr

0800bbaa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	60f8      	str	r0, [r7, #12]
 800bbb2:	60b9      	str	r1, [r7, #8]
 800bbb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2202      	movs	r2, #2
 800bbba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	2100      	movs	r1, #0
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f000 fcff 	bl	800c5d4 <USBD_LL_Transmit>

  return USBD_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3710      	adds	r7, #16
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f000 fcee 	bl	800c5d4 <USBD_LL_Transmit>

  return USBD_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2203      	movs	r2, #3
 800bc12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f000 fcf2 	bl	800c616 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f000 fce1 	bl	800c616 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2204      	movs	r2, #4
 800bc6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc6e:	2300      	movs	r3, #0
 800bc70:	2200      	movs	r2, #0
 800bc72:	2100      	movs	r1, #0
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fcad 	bl	800c5d4 <USBD_LL_Transmit>

  return USBD_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2205      	movs	r2, #5
 800bc90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc94:	2300      	movs	r3, #0
 800bc96:	2200      	movs	r2, #0
 800bc98:	2100      	movs	r1, #0
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fcbb 	bl	800c616 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	4912      	ldr	r1, [pc, #72]	; (800bcfc <MX_USB_Device_Init+0x50>)
 800bcb4:	4812      	ldr	r0, [pc, #72]	; (800bd00 <MX_USB_Device_Init+0x54>)
 800bcb6:	f7fe fed9 	bl	800aa6c <USBD_Init>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bcc0:	f7f7 ff5c 	bl	8003b7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bcc4:	490f      	ldr	r1, [pc, #60]	; (800bd04 <MX_USB_Device_Init+0x58>)
 800bcc6:	480e      	ldr	r0, [pc, #56]	; (800bd00 <MX_USB_Device_Init+0x54>)
 800bcc8:	f7fe ff00 	bl	800aacc <USBD_RegisterClass>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bcd2:	f7f7 ff53 	bl	8003b7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bcd6:	490c      	ldr	r1, [pc, #48]	; (800bd08 <MX_USB_Device_Init+0x5c>)
 800bcd8:	4809      	ldr	r0, [pc, #36]	; (800bd00 <MX_USB_Device_Init+0x54>)
 800bcda:	f7fe fe21 	bl	800a920 <USBD_CDC_RegisterInterface>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800bce4:	f7f7 ff4a 	bl	8003b7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bce8:	4805      	ldr	r0, [pc, #20]	; (800bd00 <MX_USB_Device_Init+0x54>)
 800bcea:	f7fe ff16 	bl	800ab1a <USBD_Start>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800bcf4:	f7f7 ff42 	bl	8003b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bcf8:	bf00      	nop
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	2000013c 	.word	0x2000013c
 800bd00:	20002b48 	.word	0x20002b48
 800bd04:	20000020 	.word	0x20000020
 800bd08:	20000128 	.word	0x20000128

0800bd0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bd10:	2200      	movs	r2, #0
 800bd12:	4905      	ldr	r1, [pc, #20]	; (800bd28 <CDC_Init_FS+0x1c>)
 800bd14:	4805      	ldr	r0, [pc, #20]	; (800bd2c <CDC_Init_FS+0x20>)
 800bd16:	f7fe fe18 	bl	800a94a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bd1a:	4905      	ldr	r1, [pc, #20]	; (800bd30 <CDC_Init_FS+0x24>)
 800bd1c:	4803      	ldr	r0, [pc, #12]	; (800bd2c <CDC_Init_FS+0x20>)
 800bd1e:	f7fe fe32 	bl	800a986 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bd22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	20003618 	.word	0x20003618
 800bd2c:	20002b48 	.word	0x20002b48
 800bd30:	20002e18 	.word	0x20002e18

0800bd34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bd34:	b480      	push	{r7}
 800bd36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	6039      	str	r1, [r7, #0]
 800bd4e:	71fb      	strb	r3, [r7, #7]
 800bd50:	4613      	mov	r3, r2
 800bd52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd54:	79fb      	ldrb	r3, [r7, #7]
 800bd56:	2b23      	cmp	r3, #35	; 0x23
 800bd58:	d84a      	bhi.n	800bdf0 <CDC_Control_FS+0xac>
 800bd5a:	a201      	add	r2, pc, #4	; (adr r2, 800bd60 <CDC_Control_FS+0x1c>)
 800bd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd60:	0800bdf1 	.word	0x0800bdf1
 800bd64:	0800bdf1 	.word	0x0800bdf1
 800bd68:	0800bdf1 	.word	0x0800bdf1
 800bd6c:	0800bdf1 	.word	0x0800bdf1
 800bd70:	0800bdf1 	.word	0x0800bdf1
 800bd74:	0800bdf1 	.word	0x0800bdf1
 800bd78:	0800bdf1 	.word	0x0800bdf1
 800bd7c:	0800bdf1 	.word	0x0800bdf1
 800bd80:	0800bdf1 	.word	0x0800bdf1
 800bd84:	0800bdf1 	.word	0x0800bdf1
 800bd88:	0800bdf1 	.word	0x0800bdf1
 800bd8c:	0800bdf1 	.word	0x0800bdf1
 800bd90:	0800bdf1 	.word	0x0800bdf1
 800bd94:	0800bdf1 	.word	0x0800bdf1
 800bd98:	0800bdf1 	.word	0x0800bdf1
 800bd9c:	0800bdf1 	.word	0x0800bdf1
 800bda0:	0800bdf1 	.word	0x0800bdf1
 800bda4:	0800bdf1 	.word	0x0800bdf1
 800bda8:	0800bdf1 	.word	0x0800bdf1
 800bdac:	0800bdf1 	.word	0x0800bdf1
 800bdb0:	0800bdf1 	.word	0x0800bdf1
 800bdb4:	0800bdf1 	.word	0x0800bdf1
 800bdb8:	0800bdf1 	.word	0x0800bdf1
 800bdbc:	0800bdf1 	.word	0x0800bdf1
 800bdc0:	0800bdf1 	.word	0x0800bdf1
 800bdc4:	0800bdf1 	.word	0x0800bdf1
 800bdc8:	0800bdf1 	.word	0x0800bdf1
 800bdcc:	0800bdf1 	.word	0x0800bdf1
 800bdd0:	0800bdf1 	.word	0x0800bdf1
 800bdd4:	0800bdf1 	.word	0x0800bdf1
 800bdd8:	0800bdf1 	.word	0x0800bdf1
 800bddc:	0800bdf1 	.word	0x0800bdf1
 800bde0:	0800bdf1 	.word	0x0800bdf1
 800bde4:	0800bdf1 	.word	0x0800bdf1
 800bde8:	0800bdf1 	.word	0x0800bdf1
 800bdec:	0800bdf1 	.word	0x0800bdf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bdf0:	bf00      	nop
  }

  return (USBD_OK);
 800bdf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	4808      	ldr	r0, [pc, #32]	; (800be30 <CDC_Receive_FS+0x30>)
 800be0e:	f7fe fdba 	bl	800a986 <USBD_CDC_SetRxBuffer>
  byteInBuffer += *Len;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	4b07      	ldr	r3, [pc, #28]	; (800be34 <CDC_Receive_FS+0x34>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4413      	add	r3, r2
 800be1c:	4a05      	ldr	r2, [pc, #20]	; (800be34 <CDC_Receive_FS+0x34>)
 800be1e:	6013      	str	r3, [r2, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800be20:	4803      	ldr	r0, [pc, #12]	; (800be30 <CDC_Receive_FS+0x30>)
 800be22:	f7fe fdf9 	bl	800aa18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800be26:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	20002b48 	.word	0x20002b48
 800be34:	20003e18 	.word	0x20003e18

0800be38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800be48:	4b0d      	ldr	r3, [pc, #52]	; (800be80 <CDC_Transmit_FS+0x48>)
 800be4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e00b      	b.n	800be76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be5e:	887b      	ldrh	r3, [r7, #2]
 800be60:	461a      	mov	r2, r3
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	4806      	ldr	r0, [pc, #24]	; (800be80 <CDC_Transmit_FS+0x48>)
 800be66:	f7fe fd70 	bl	800a94a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be6a:	4805      	ldr	r0, [pc, #20]	; (800be80 <CDC_Transmit_FS+0x48>)
 800be6c:	f7fe fda4 	bl	800a9b8 <USBD_CDC_TransmitPacket>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be74:	7bfb      	ldrb	r3, [r7, #15]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	20002b48 	.word	0x20002b48

0800be84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	4613      	mov	r3, r2
 800be90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	371c      	adds	r7, #28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
	...

0800bea8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	6039      	str	r1, [r7, #0]
 800beb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2212      	movs	r2, #18
 800beb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800beba:	4b03      	ldr	r3, [pc, #12]	; (800bec8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	2000015c 	.word	0x2000015c

0800becc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	6039      	str	r1, [r7, #0]
 800bed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	2204      	movs	r2, #4
 800bedc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bede:	4b03      	ldr	r3, [pc, #12]	; (800beec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	20000170 	.word	0x20000170

0800bef0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	4603      	mov	r3, r0
 800bef8:	6039      	str	r1, [r7, #0]
 800befa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800befc:	79fb      	ldrb	r3, [r7, #7]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d105      	bne.n	800bf0e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bf02:	683a      	ldr	r2, [r7, #0]
 800bf04:	4907      	ldr	r1, [pc, #28]	; (800bf24 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bf06:	4808      	ldr	r0, [pc, #32]	; (800bf28 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bf08:	f7ff fdef 	bl	800baea <USBD_GetString>
 800bf0c:	e004      	b.n	800bf18 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	4904      	ldr	r1, [pc, #16]	; (800bf24 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bf12:	4805      	ldr	r0, [pc, #20]	; (800bf28 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bf14:	f7ff fde9 	bl	800baea <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf18:	4b02      	ldr	r3, [pc, #8]	; (800bf24 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	20003e1c 	.word	0x20003e1c
 800bf28:	08011164 	.word	0x08011164

0800bf2c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	6039      	str	r1, [r7, #0]
 800bf36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	4904      	ldr	r1, [pc, #16]	; (800bf4c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bf3c:	4804      	ldr	r0, [pc, #16]	; (800bf50 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bf3e:	f7ff fdd4 	bl	800baea <USBD_GetString>
  return USBD_StrDesc;
 800bf42:	4b02      	ldr	r3, [pc, #8]	; (800bf4c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20003e1c 	.word	0x20003e1c
 800bf50:	0801117c 	.word	0x0801117c

0800bf54 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	6039      	str	r1, [r7, #0]
 800bf5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	221a      	movs	r2, #26
 800bf64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf66:	f000 f843 	bl	800bff0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bf6a:	4b02      	ldr	r3, [pc, #8]	; (800bf74 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	20000174 	.word	0x20000174

0800bf78 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	4603      	mov	r3, r0
 800bf80:	6039      	str	r1, [r7, #0]
 800bf82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf84:	79fb      	ldrb	r3, [r7, #7]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d105      	bne.n	800bf96 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	4907      	ldr	r1, [pc, #28]	; (800bfac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bf8e:	4808      	ldr	r0, [pc, #32]	; (800bfb0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bf90:	f7ff fdab 	bl	800baea <USBD_GetString>
 800bf94:	e004      	b.n	800bfa0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	4904      	ldr	r1, [pc, #16]	; (800bfac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bf9a:	4805      	ldr	r0, [pc, #20]	; (800bfb0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bf9c:	f7ff fda5 	bl	800baea <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfa0:	4b02      	ldr	r3, [pc, #8]	; (800bfac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20003e1c 	.word	0x20003e1c
 800bfb0:	08011190 	.word	0x08011190

0800bfb4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	4603      	mov	r3, r0
 800bfbc:	6039      	str	r1, [r7, #0]
 800bfbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bfc0:	79fb      	ldrb	r3, [r7, #7]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d105      	bne.n	800bfd2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	4907      	ldr	r1, [pc, #28]	; (800bfe8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bfca:	4808      	ldr	r0, [pc, #32]	; (800bfec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bfcc:	f7ff fd8d 	bl	800baea <USBD_GetString>
 800bfd0:	e004      	b.n	800bfdc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	4904      	ldr	r1, [pc, #16]	; (800bfe8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bfd6:	4805      	ldr	r0, [pc, #20]	; (800bfec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bfd8:	f7ff fd87 	bl	800baea <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfdc:	4b02      	ldr	r3, [pc, #8]	; (800bfe8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20003e1c 	.word	0x20003e1c
 800bfec:	0801119c 	.word	0x0801119c

0800bff0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bff6:	4b0f      	ldr	r3, [pc, #60]	; (800c034 <Get_SerialNum+0x44>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bffc:	4b0e      	ldr	r3, [pc, #56]	; (800c038 <Get_SerialNum+0x48>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c002:	4b0e      	ldr	r3, [pc, #56]	; (800c03c <Get_SerialNum+0x4c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4413      	add	r3, r2
 800c00e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d009      	beq.n	800c02a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c016:	2208      	movs	r2, #8
 800c018:	4909      	ldr	r1, [pc, #36]	; (800c040 <Get_SerialNum+0x50>)
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f000 f814 	bl	800c048 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c020:	2204      	movs	r2, #4
 800c022:	4908      	ldr	r1, [pc, #32]	; (800c044 <Get_SerialNum+0x54>)
 800c024:	68b8      	ldr	r0, [r7, #8]
 800c026:	f000 f80f 	bl	800c048 <IntToUnicode>
  }
}
 800c02a:	bf00      	nop
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	1fff7590 	.word	0x1fff7590
 800c038:	1fff7594 	.word	0x1fff7594
 800c03c:	1fff7598 	.word	0x1fff7598
 800c040:	20000176 	.word	0x20000176
 800c044:	20000186 	.word	0x20000186

0800c048 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c048:	b480      	push	{r7}
 800c04a:	b087      	sub	sp, #28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	4613      	mov	r3, r2
 800c054:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c056:	2300      	movs	r3, #0
 800c058:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c05a:	2300      	movs	r3, #0
 800c05c:	75fb      	strb	r3, [r7, #23]
 800c05e:	e027      	b.n	800c0b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	0f1b      	lsrs	r3, r3, #28
 800c064:	2b09      	cmp	r3, #9
 800c066:	d80b      	bhi.n	800c080 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	0f1b      	lsrs	r3, r3, #28
 800c06c:	b2da      	uxtb	r2, r3
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	005b      	lsls	r3, r3, #1
 800c072:	4619      	mov	r1, r3
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	440b      	add	r3, r1
 800c078:	3230      	adds	r2, #48	; 0x30
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]
 800c07e:	e00a      	b.n	800c096 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	0f1b      	lsrs	r3, r3, #28
 800c084:	b2da      	uxtb	r2, r3
 800c086:	7dfb      	ldrb	r3, [r7, #23]
 800c088:	005b      	lsls	r3, r3, #1
 800c08a:	4619      	mov	r1, r3
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	440b      	add	r3, r1
 800c090:	3237      	adds	r2, #55	; 0x37
 800c092:	b2d2      	uxtb	r2, r2
 800c094:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	011b      	lsls	r3, r3, #4
 800c09a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	005b      	lsls	r3, r3, #1
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c0aa:	7dfb      	ldrb	r3, [r7, #23]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	75fb      	strb	r3, [r7, #23]
 800c0b0:	7dfa      	ldrb	r2, [r7, #23]
 800c0b2:	79fb      	ldrb	r3, [r7, #7]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d3d3      	bcc.n	800c060 <IntToUnicode+0x18>
  }
}
 800c0b8:	bf00      	nop
 800c0ba:	bf00      	nop
 800c0bc:	371c      	adds	r7, #28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <LL_AHB2_GRP1_EnableClock>:
{
 800c0c6:	b480      	push	{r7}
 800c0c8:	b085      	sub	sp, #20
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800c0ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800c0de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4013      	ands	r3, r2
 800c0e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
}
 800c0ec:	bf00      	nop
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <LL_APB1_GRP1_EnableClock>:
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800c100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c104:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800c110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c114:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4013      	ands	r3, r2
 800c11a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c11c:	68fb      	ldr	r3, [r7, #12]
}
 800c11e:	bf00      	nop
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
	...

0800c12c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b09c      	sub	sp, #112	; 0x70
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c134:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c138:	2200      	movs	r2, #0
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	605a      	str	r2, [r3, #4]
 800c13e:	609a      	str	r2, [r3, #8]
 800c140:	60da      	str	r2, [r3, #12]
 800c142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c144:	f107 030c 	add.w	r3, r7, #12
 800c148:	2250      	movs	r2, #80	; 0x50
 800c14a:	2100      	movs	r1, #0
 800c14c:	4618      	mov	r0, r3
 800c14e:	f000 fb45 	bl	800c7dc <memset>
  if(pcdHandle->Instance==USB)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a23      	ldr	r2, [pc, #140]	; (800c1e4 <HAL_PCD_MspInit+0xb8>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d13e      	bne.n	800c1da <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c15c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c160:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800c162:	2318      	movs	r3, #24
 800c164:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800c166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c16a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800c16c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c170:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800c172:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c176:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800c178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c17c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c17e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c182:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c184:	f107 030c 	add.w	r3, r7, #12
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fb fbc5 	bl	8007918 <HAL_RCCEx_PeriphCLKConfig>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d001      	beq.n	800c198 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800c194:	f7f7 fcf2 	bl	8003b7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c198:	2001      	movs	r0, #1
 800c19a:	f7ff ff94 	bl	800c0c6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c19e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c1a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800c1b0:	230a      	movs	r3, #10
 800c1b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c1be:	f7f8 f8a1 	bl	8004304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c1c2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800c1c6:	f7ff ff97 	bl	800c0f8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	2014      	movs	r0, #20
 800c1d0:	f7f8 f863 	bl	800429a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c1d4:	2014      	movs	r0, #20
 800c1d6:	f7f8 f87a 	bl	80042ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c1da:	bf00      	nop
 800c1dc:	3770      	adds	r7, #112	; 0x70
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	40006800 	.word	0x40006800

0800c1e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4610      	mov	r0, r2
 800c200:	f7fe fcd6 	bl	800abb0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c204:	bf00      	nop
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c21e:	78fa      	ldrb	r2, [r7, #3]
 800c220:	6879      	ldr	r1, [r7, #4]
 800c222:	4613      	mov	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4413      	add	r3, r2
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	440b      	add	r3, r1
 800c22c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	78fb      	ldrb	r3, [r7, #3]
 800c234:	4619      	mov	r1, r3
 800c236:	f7fe fd10 	bl	800ac5a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c23a:	bf00      	nop
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b082      	sub	sp, #8
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	460b      	mov	r3, r1
 800c24c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c254:	78fa      	ldrb	r2, [r7, #3]
 800c256:	6879      	ldr	r1, [r7, #4]
 800c258:	4613      	mov	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4413      	add	r3, r2
 800c25e:	00db      	lsls	r3, r3, #3
 800c260:	440b      	add	r3, r1
 800c262:	3340      	adds	r3, #64	; 0x40
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	78fb      	ldrb	r3, [r7, #3]
 800c268:	4619      	mov	r1, r3
 800c26a:	f7fe fd59 	bl	800ad20 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c26e:	bf00      	nop
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b082      	sub	sp, #8
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c284:	4618      	mov	r0, r3
 800c286:	f7fe fe6d 	bl	800af64 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c28a:	bf00      	nop
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b084      	sub	sp, #16
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c29a:	2301      	movs	r3, #1
 800c29c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d001      	beq.n	800c2aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c2a6:	f7f7 fc69 	bl	8003b7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c2b0:	7bfa      	ldrb	r2, [r7, #15]
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7fe fe17 	bl	800aee8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fe fdc3 	bl	800ae4c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c2c6:	bf00      	nop
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fe fe12 	bl	800af08 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d005      	beq.n	800c2f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2ec:	4b04      	ldr	r3, [pc, #16]	; (800c300 <HAL_PCD_SuspendCallback+0x30>)
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	4a03      	ldr	r2, [pc, #12]	; (800c300 <HAL_PCD_SuspendCallback+0x30>)
 800c2f2:	f043 0306 	orr.w	r3, r3, #6
 800c2f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	e000ed00 	.word	0xe000ed00

0800c304 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d007      	beq.n	800c324 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c314:	4b08      	ldr	r3, [pc, #32]	; (800c338 <HAL_PCD_ResumeCallback+0x34>)
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	4a07      	ldr	r2, [pc, #28]	; (800c338 <HAL_PCD_ResumeCallback+0x34>)
 800c31a:	f023 0306 	bic.w	r3, r3, #6
 800c31e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c320:	f000 f9fc 	bl	800c71c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fe02 	bl	800af34 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	e000ed00 	.word	0xe000ed00

0800c33c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c344:	4a2c      	ldr	r2, [pc, #176]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a2a      	ldr	r2, [pc, #168]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c350:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c354:	f7f9 ffdc 	bl	8006310 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800c358:	4b27      	ldr	r3, [pc, #156]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c35a:	4a28      	ldr	r2, [pc, #160]	; (800c3fc <USBD_LL_Init+0xc0>)
 800c35c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c35e:	4b26      	ldr	r3, [pc, #152]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c360:	2208      	movs	r2, #8
 800c362:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c364:	4b24      	ldr	r3, [pc, #144]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c366:	2202      	movs	r2, #2
 800c368:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c36a:	4b23      	ldr	r3, [pc, #140]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c36c:	2202      	movs	r2, #2
 800c36e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c370:	4b21      	ldr	r3, [pc, #132]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c372:	2200      	movs	r2, #0
 800c374:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c376:	4b20      	ldr	r3, [pc, #128]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c378:	2200      	movs	r2, #0
 800c37a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c37c:	4b1e      	ldr	r3, [pc, #120]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c37e:	2200      	movs	r2, #0
 800c380:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c382:	4b1d      	ldr	r3, [pc, #116]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c384:	2200      	movs	r2, #0
 800c386:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c388:	481b      	ldr	r0, [pc, #108]	; (800c3f8 <USBD_LL_Init+0xbc>)
 800c38a:	f7f8 fa51 	bl	8004830 <HAL_PCD_Init>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d001      	beq.n	800c398 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c394:	f7f7 fbf2 	bl	8003b7c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c39e:	2318      	movs	r3, #24
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	f7f9 ff27 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3ae:	2358      	movs	r3, #88	; 0x58
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2180      	movs	r1, #128	; 0x80
 800c3b4:	f7f9 ff1f 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3be:	23c0      	movs	r3, #192	; 0xc0
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	2181      	movs	r1, #129	; 0x81
 800c3c4:	f7f9 ff17 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	f7f9 ff0e 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	2182      	movs	r1, #130	; 0x82
 800c3e8:	f7f9 ff05 	bl	80061f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	2000401c 	.word	0x2000401c
 800c3fc:	40006800 	.word	0x40006800

0800c400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c416:	4618      	mov	r0, r3
 800c418:	f7f8 faf5 	bl	8004a06 <HAL_PCD_Start>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	4618      	mov	r0, r3
 800c424:	f000 f980 	bl	800c728 <USBD_Get_USB_Status>
 800c428:	4603      	mov	r3, r0
 800c42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b084      	sub	sp, #16
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	4608      	mov	r0, r1
 800c440:	4611      	mov	r1, r2
 800c442:	461a      	mov	r2, r3
 800c444:	4603      	mov	r3, r0
 800c446:	70fb      	strb	r3, [r7, #3]
 800c448:	460b      	mov	r3, r1
 800c44a:	70bb      	strb	r3, [r7, #2]
 800c44c:	4613      	mov	r3, r2
 800c44e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c454:	2300      	movs	r3, #0
 800c456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c45e:	78bb      	ldrb	r3, [r7, #2]
 800c460:	883a      	ldrh	r2, [r7, #0]
 800c462:	78f9      	ldrb	r1, [r7, #3]
 800c464:	f7f8 fc3d 	bl	8004ce2 <HAL_PCD_EP_Open>
 800c468:	4603      	mov	r3, r0
 800c46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 f95a 	bl	800c728 <USBD_Get_USB_Status>
 800c474:	4603      	mov	r3, r0
 800c476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c478:	7bbb      	ldrb	r3, [r7, #14]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b084      	sub	sp, #16
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	460b      	mov	r3, r1
 800c48c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c49c:	78fa      	ldrb	r2, [r7, #3]
 800c49e:	4611      	mov	r1, r2
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7f8 fc86 	bl	8004db2 <HAL_PCD_EP_Close>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4aa:	7bfb      	ldrb	r3, [r7, #15]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 f93b 	bl	800c728 <USBD_Get_USB_Status>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4da:	78fa      	ldrb	r2, [r7, #3]
 800c4dc:	4611      	mov	r1, r2
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7f8 fd4b 	bl	8004f7a <HAL_PCD_EP_SetStall>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f91c 	bl	800c728 <USBD_Get_USB_Status>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	460b      	mov	r3, r1
 800c508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c518:	78fa      	ldrb	r2, [r7, #3]
 800c51a:	4611      	mov	r1, r2
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7f8 fd80 	bl	8005022 <HAL_PCD_EP_ClrStall>
 800c522:	4603      	mov	r3, r0
 800c524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 f8fd 	bl	800c728 <USBD_Get_USB_Status>
 800c52e:	4603      	mov	r3, r0
 800c530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c532:	7bbb      	ldrb	r3, [r7, #14]
}
 800c534:	4618      	mov	r0, r3
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c54e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c554:	2b00      	cmp	r3, #0
 800c556:	da0c      	bge.n	800c572 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c558:	78fb      	ldrb	r3, [r7, #3]
 800c55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c55e:	68f9      	ldr	r1, [r7, #12]
 800c560:	1c5a      	adds	r2, r3, #1
 800c562:	4613      	mov	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	440b      	add	r3, r1
 800c56c:	3306      	adds	r3, #6
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	e00b      	b.n	800c58a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c572:	78fb      	ldrb	r3, [r7, #3]
 800c574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c578:	68f9      	ldr	r1, [r7, #12]
 800c57a:	4613      	mov	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	00db      	lsls	r3, r3, #3
 800c582:	440b      	add	r3, r1
 800c584:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800c588:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3714      	adds	r7, #20
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	460b      	mov	r3, r1
 800c5a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c5b0:	78fa      	ldrb	r2, [r7, #3]
 800c5b2:	4611      	mov	r1, r2
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7f8 fb6f 	bl	8004c98 <HAL_PCD_SetAddress>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5be:	7bfb      	ldrb	r3, [r7, #15]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 f8b1 	bl	800c728 <USBD_Get_USB_Status>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	607a      	str	r2, [r7, #4]
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c5f2:	7af9      	ldrb	r1, [r7, #11]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	f7f8 fc7b 	bl	8004ef2 <HAL_PCD_EP_Transmit>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c600:	7dfb      	ldrb	r3, [r7, #23]
 800c602:	4618      	mov	r0, r3
 800c604:	f000 f890 	bl	800c728 <USBD_Get_USB_Status>
 800c608:	4603      	mov	r3, r0
 800c60a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c60c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3718      	adds	r7, #24
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}

0800c616 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b086      	sub	sp, #24
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	60f8      	str	r0, [r7, #12]
 800c61e:	607a      	str	r2, [r7, #4]
 800c620:	603b      	str	r3, [r7, #0]
 800c622:	460b      	mov	r3, r1
 800c624:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c626:	2300      	movs	r3, #0
 800c628:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c634:	7af9      	ldrb	r1, [r7, #11]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	f7f8 fc04 	bl	8004e46 <HAL_PCD_EP_Receive>
 800c63e:	4603      	mov	r3, r0
 800c640:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	4618      	mov	r0, r3
 800c646:	f000 f86f 	bl	800c728 <USBD_Get_USB_Status>
 800c64a:	4603      	mov	r3, r0
 800c64c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c64e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	460b      	mov	r3, r1
 800c662:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c66a:	78fa      	ldrb	r2, [r7, #3]
 800c66c:	4611      	mov	r1, r2
 800c66e:	4618      	mov	r0, r3
 800c670:	f7f8 fc27 	bl	8004ec2 <HAL_PCD_EP_GetRxCount>
 800c674:	4603      	mov	r3, r0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c68c:	78fb      	ldrb	r3, [r7, #3]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <HAL_PCDEx_LPM_Callback+0x18>
 800c692:	2b01      	cmp	r3, #1
 800c694:	d013      	beq.n	800c6be <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c696:	e023      	b.n	800c6e0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d007      	beq.n	800c6b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c6a0:	f000 f83c 	bl	800c71c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c6a4:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	4a0f      	ldr	r2, [pc, #60]	; (800c6e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c6aa:	f023 0306 	bic.w	r3, r3, #6
 800c6ae:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fe fc3c 	bl	800af34 <USBD_LL_Resume>
    break;
 800c6bc:	e010      	b.n	800c6e0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fe fc1f 	bl	800af08 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	699b      	ldr	r3, [r3, #24]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d005      	beq.n	800c6de <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c6d2:	4b05      	ldr	r3, [pc, #20]	; (800c6e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	4a04      	ldr	r2, [pc, #16]	; (800c6e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800c6d8:	f043 0306 	orr.w	r3, r3, #6
 800c6dc:	6113      	str	r3, [r2, #16]
    break;
 800c6de:	bf00      	nop
}
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	e000ed00 	.word	0xe000ed00

0800c6ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c6f4:	4b03      	ldr	r3, [pc, #12]	; (800c704 <USBD_static_malloc+0x18>)
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	20004314 	.word	0x20004314

0800c708 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]

}
 800c710:	bf00      	nop
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c720:	f7f7 f958 	bl	80039d4 <SystemClock_Config>
}
 800c724:	bf00      	nop
 800c726:	bd80      	pop	{r7, pc}

0800c728 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c732:	2300      	movs	r3, #0
 800c734:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c736:	79fb      	ldrb	r3, [r7, #7]
 800c738:	2b03      	cmp	r3, #3
 800c73a:	d817      	bhi.n	800c76c <USBD_Get_USB_Status+0x44>
 800c73c:	a201      	add	r2, pc, #4	; (adr r2, 800c744 <USBD_Get_USB_Status+0x1c>)
 800c73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c742:	bf00      	nop
 800c744:	0800c755 	.word	0x0800c755
 800c748:	0800c75b 	.word	0x0800c75b
 800c74c:	0800c761 	.word	0x0800c761
 800c750:	0800c767 	.word	0x0800c767
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c754:	2300      	movs	r3, #0
 800c756:	73fb      	strb	r3, [r7, #15]
    break;
 800c758:	e00b      	b.n	800c772 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c75a:	2303      	movs	r3, #3
 800c75c:	73fb      	strb	r3, [r7, #15]
    break;
 800c75e:	e008      	b.n	800c772 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c760:	2301      	movs	r3, #1
 800c762:	73fb      	strb	r3, [r7, #15]
    break;
 800c764:	e005      	b.n	800c772 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c766:	2303      	movs	r3, #3
 800c768:	73fb      	strb	r3, [r7, #15]
    break;
 800c76a:	e002      	b.n	800c772 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c76c:	2303      	movs	r3, #3
 800c76e:	73fb      	strb	r3, [r7, #15]
    break;
 800c770:	bf00      	nop
  }
  return usb_status;
 800c772:	7bfb      	ldrb	r3, [r7, #15]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <atoi>:
 800c780:	220a      	movs	r2, #10
 800c782:	2100      	movs	r1, #0
 800c784:	f001 bd80 	b.w	800e288 <strtol>

0800c788 <__errno>:
 800c788:	4b01      	ldr	r3, [pc, #4]	; (800c790 <__errno+0x8>)
 800c78a:	6818      	ldr	r0, [r3, #0]
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	20000190 	.word	0x20000190

0800c794 <__libc_init_array>:
 800c794:	b570      	push	{r4, r5, r6, lr}
 800c796:	4d0d      	ldr	r5, [pc, #52]	; (800c7cc <__libc_init_array+0x38>)
 800c798:	4c0d      	ldr	r4, [pc, #52]	; (800c7d0 <__libc_init_array+0x3c>)
 800c79a:	1b64      	subs	r4, r4, r5
 800c79c:	10a4      	asrs	r4, r4, #2
 800c79e:	2600      	movs	r6, #0
 800c7a0:	42a6      	cmp	r6, r4
 800c7a2:	d109      	bne.n	800c7b8 <__libc_init_array+0x24>
 800c7a4:	4d0b      	ldr	r5, [pc, #44]	; (800c7d4 <__libc_init_array+0x40>)
 800c7a6:	4c0c      	ldr	r4, [pc, #48]	; (800c7d8 <__libc_init_array+0x44>)
 800c7a8:	f004 fc9e 	bl	80110e8 <_init>
 800c7ac:	1b64      	subs	r4, r4, r5
 800c7ae:	10a4      	asrs	r4, r4, #2
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	42a6      	cmp	r6, r4
 800c7b4:	d105      	bne.n	800c7c2 <__libc_init_array+0x2e>
 800c7b6:	bd70      	pop	{r4, r5, r6, pc}
 800c7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7bc:	4798      	blx	r3
 800c7be:	3601      	adds	r6, #1
 800c7c0:	e7ee      	b.n	800c7a0 <__libc_init_array+0xc>
 800c7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c6:	4798      	blx	r3
 800c7c8:	3601      	adds	r6, #1
 800c7ca:	e7f2      	b.n	800c7b2 <__libc_init_array+0x1e>
 800c7cc:	080116d4 	.word	0x080116d4
 800c7d0:	080116d4 	.word	0x080116d4
 800c7d4:	080116d4 	.word	0x080116d4
 800c7d8:	080116d8 	.word	0x080116d8

0800c7dc <memset>:
 800c7dc:	4402      	add	r2, r0
 800c7de:	4603      	mov	r3, r0
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d100      	bne.n	800c7e6 <memset+0xa>
 800c7e4:	4770      	bx	lr
 800c7e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c7ea:	e7f9      	b.n	800c7e0 <memset+0x4>

0800c7ec <__cvt>:
 800c7ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f0:	ec55 4b10 	vmov	r4, r5, d0
 800c7f4:	2d00      	cmp	r5, #0
 800c7f6:	460e      	mov	r6, r1
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	462b      	mov	r3, r5
 800c7fc:	bfbb      	ittet	lt
 800c7fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c802:	461d      	movlt	r5, r3
 800c804:	2300      	movge	r3, #0
 800c806:	232d      	movlt	r3, #45	; 0x2d
 800c808:	700b      	strb	r3, [r1, #0]
 800c80a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c80c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c810:	4691      	mov	r9, r2
 800c812:	f023 0820 	bic.w	r8, r3, #32
 800c816:	bfbc      	itt	lt
 800c818:	4622      	movlt	r2, r4
 800c81a:	4614      	movlt	r4, r2
 800c81c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c820:	d005      	beq.n	800c82e <__cvt+0x42>
 800c822:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c826:	d100      	bne.n	800c82a <__cvt+0x3e>
 800c828:	3601      	adds	r6, #1
 800c82a:	2102      	movs	r1, #2
 800c82c:	e000      	b.n	800c830 <__cvt+0x44>
 800c82e:	2103      	movs	r1, #3
 800c830:	ab03      	add	r3, sp, #12
 800c832:	9301      	str	r3, [sp, #4]
 800c834:	ab02      	add	r3, sp, #8
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	ec45 4b10 	vmov	d0, r4, r5
 800c83c:	4653      	mov	r3, sl
 800c83e:	4632      	mov	r2, r6
 800c840:	f001 fdba 	bl	800e3b8 <_dtoa_r>
 800c844:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c848:	4607      	mov	r7, r0
 800c84a:	d102      	bne.n	800c852 <__cvt+0x66>
 800c84c:	f019 0f01 	tst.w	r9, #1
 800c850:	d022      	beq.n	800c898 <__cvt+0xac>
 800c852:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c856:	eb07 0906 	add.w	r9, r7, r6
 800c85a:	d110      	bne.n	800c87e <__cvt+0x92>
 800c85c:	783b      	ldrb	r3, [r7, #0]
 800c85e:	2b30      	cmp	r3, #48	; 0x30
 800c860:	d10a      	bne.n	800c878 <__cvt+0x8c>
 800c862:	2200      	movs	r2, #0
 800c864:	2300      	movs	r3, #0
 800c866:	4620      	mov	r0, r4
 800c868:	4629      	mov	r1, r5
 800c86a:	f7f4 f905 	bl	8000a78 <__aeabi_dcmpeq>
 800c86e:	b918      	cbnz	r0, 800c878 <__cvt+0x8c>
 800c870:	f1c6 0601 	rsb	r6, r6, #1
 800c874:	f8ca 6000 	str.w	r6, [sl]
 800c878:	f8da 3000 	ldr.w	r3, [sl]
 800c87c:	4499      	add	r9, r3
 800c87e:	2200      	movs	r2, #0
 800c880:	2300      	movs	r3, #0
 800c882:	4620      	mov	r0, r4
 800c884:	4629      	mov	r1, r5
 800c886:	f7f4 f8f7 	bl	8000a78 <__aeabi_dcmpeq>
 800c88a:	b108      	cbz	r0, 800c890 <__cvt+0xa4>
 800c88c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c890:	2230      	movs	r2, #48	; 0x30
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	454b      	cmp	r3, r9
 800c896:	d307      	bcc.n	800c8a8 <__cvt+0xbc>
 800c898:	9b03      	ldr	r3, [sp, #12]
 800c89a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c89c:	1bdb      	subs	r3, r3, r7
 800c89e:	4638      	mov	r0, r7
 800c8a0:	6013      	str	r3, [r2, #0]
 800c8a2:	b004      	add	sp, #16
 800c8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a8:	1c59      	adds	r1, r3, #1
 800c8aa:	9103      	str	r1, [sp, #12]
 800c8ac:	701a      	strb	r2, [r3, #0]
 800c8ae:	e7f0      	b.n	800c892 <__cvt+0xa6>

0800c8b0 <__exponent>:
 800c8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	bfb8      	it	lt
 800c8b8:	4249      	neglt	r1, r1
 800c8ba:	f803 2b02 	strb.w	r2, [r3], #2
 800c8be:	bfb4      	ite	lt
 800c8c0:	222d      	movlt	r2, #45	; 0x2d
 800c8c2:	222b      	movge	r2, #43	; 0x2b
 800c8c4:	2909      	cmp	r1, #9
 800c8c6:	7042      	strb	r2, [r0, #1]
 800c8c8:	dd2a      	ble.n	800c920 <__exponent+0x70>
 800c8ca:	f10d 0407 	add.w	r4, sp, #7
 800c8ce:	46a4      	mov	ip, r4
 800c8d0:	270a      	movs	r7, #10
 800c8d2:	46a6      	mov	lr, r4
 800c8d4:	460a      	mov	r2, r1
 800c8d6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c8da:	fb07 1516 	mls	r5, r7, r6, r1
 800c8de:	3530      	adds	r5, #48	; 0x30
 800c8e0:	2a63      	cmp	r2, #99	; 0x63
 800c8e2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c8e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	dcf1      	bgt.n	800c8d2 <__exponent+0x22>
 800c8ee:	3130      	adds	r1, #48	; 0x30
 800c8f0:	f1ae 0502 	sub.w	r5, lr, #2
 800c8f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c8f8:	1c44      	adds	r4, r0, #1
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	4561      	cmp	r1, ip
 800c8fe:	d30a      	bcc.n	800c916 <__exponent+0x66>
 800c900:	f10d 0209 	add.w	r2, sp, #9
 800c904:	eba2 020e 	sub.w	r2, r2, lr
 800c908:	4565      	cmp	r5, ip
 800c90a:	bf88      	it	hi
 800c90c:	2200      	movhi	r2, #0
 800c90e:	4413      	add	r3, r2
 800c910:	1a18      	subs	r0, r3, r0
 800c912:	b003      	add	sp, #12
 800c914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c91a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c91e:	e7ed      	b.n	800c8fc <__exponent+0x4c>
 800c920:	2330      	movs	r3, #48	; 0x30
 800c922:	3130      	adds	r1, #48	; 0x30
 800c924:	7083      	strb	r3, [r0, #2]
 800c926:	70c1      	strb	r1, [r0, #3]
 800c928:	1d03      	adds	r3, r0, #4
 800c92a:	e7f1      	b.n	800c910 <__exponent+0x60>

0800c92c <_printf_float>:
 800c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c930:	ed2d 8b02 	vpush	{d8}
 800c934:	b08d      	sub	sp, #52	; 0x34
 800c936:	460c      	mov	r4, r1
 800c938:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c93c:	4616      	mov	r6, r2
 800c93e:	461f      	mov	r7, r3
 800c940:	4605      	mov	r5, r0
 800c942:	f002 fe97 	bl	800f674 <_localeconv_r>
 800c946:	f8d0 a000 	ldr.w	sl, [r0]
 800c94a:	4650      	mov	r0, sl
 800c94c:	f7f3 fc18 	bl	8000180 <strlen>
 800c950:	2300      	movs	r3, #0
 800c952:	930a      	str	r3, [sp, #40]	; 0x28
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	9305      	str	r3, [sp, #20]
 800c958:	f8d8 3000 	ldr.w	r3, [r8]
 800c95c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c960:	3307      	adds	r3, #7
 800c962:	f023 0307 	bic.w	r3, r3, #7
 800c966:	f103 0208 	add.w	r2, r3, #8
 800c96a:	f8c8 2000 	str.w	r2, [r8]
 800c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c972:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c976:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c97a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c97e:	9307      	str	r3, [sp, #28]
 800c980:	f8cd 8018 	str.w	r8, [sp, #24]
 800c984:	ee08 0a10 	vmov	s16, r0
 800c988:	4b9f      	ldr	r3, [pc, #636]	; (800cc08 <_printf_float+0x2dc>)
 800c98a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c98e:	f04f 32ff 	mov.w	r2, #4294967295
 800c992:	f7f4 f8a3 	bl	8000adc <__aeabi_dcmpun>
 800c996:	bb88      	cbnz	r0, 800c9fc <_printf_float+0xd0>
 800c998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c99c:	4b9a      	ldr	r3, [pc, #616]	; (800cc08 <_printf_float+0x2dc>)
 800c99e:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a2:	f7f4 f87d 	bl	8000aa0 <__aeabi_dcmple>
 800c9a6:	bb48      	cbnz	r0, 800c9fc <_printf_float+0xd0>
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	4649      	mov	r1, r9
 800c9b0:	f7f4 f86c 	bl	8000a8c <__aeabi_dcmplt>
 800c9b4:	b110      	cbz	r0, 800c9bc <_printf_float+0x90>
 800c9b6:	232d      	movs	r3, #45	; 0x2d
 800c9b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9bc:	4b93      	ldr	r3, [pc, #588]	; (800cc0c <_printf_float+0x2e0>)
 800c9be:	4894      	ldr	r0, [pc, #592]	; (800cc10 <_printf_float+0x2e4>)
 800c9c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c9c4:	bf94      	ite	ls
 800c9c6:	4698      	movls	r8, r3
 800c9c8:	4680      	movhi	r8, r0
 800c9ca:	2303      	movs	r3, #3
 800c9cc:	6123      	str	r3, [r4, #16]
 800c9ce:	9b05      	ldr	r3, [sp, #20]
 800c9d0:	f023 0204 	bic.w	r2, r3, #4
 800c9d4:	6022      	str	r2, [r4, #0]
 800c9d6:	f04f 0900 	mov.w	r9, #0
 800c9da:	9700      	str	r7, [sp, #0]
 800c9dc:	4633      	mov	r3, r6
 800c9de:	aa0b      	add	r2, sp, #44	; 0x2c
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	f000 f9d8 	bl	800cd98 <_printf_common>
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	f040 8090 	bne.w	800cb0e <_printf_float+0x1e2>
 800c9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f2:	b00d      	add	sp, #52	; 0x34
 800c9f4:	ecbd 8b02 	vpop	{d8}
 800c9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fc:	4642      	mov	r2, r8
 800c9fe:	464b      	mov	r3, r9
 800ca00:	4640      	mov	r0, r8
 800ca02:	4649      	mov	r1, r9
 800ca04:	f7f4 f86a 	bl	8000adc <__aeabi_dcmpun>
 800ca08:	b140      	cbz	r0, 800ca1c <_printf_float+0xf0>
 800ca0a:	464b      	mov	r3, r9
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	bfbc      	itt	lt
 800ca10:	232d      	movlt	r3, #45	; 0x2d
 800ca12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca16:	487f      	ldr	r0, [pc, #508]	; (800cc14 <_printf_float+0x2e8>)
 800ca18:	4b7f      	ldr	r3, [pc, #508]	; (800cc18 <_printf_float+0x2ec>)
 800ca1a:	e7d1      	b.n	800c9c0 <_printf_float+0x94>
 800ca1c:	6863      	ldr	r3, [r4, #4]
 800ca1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ca22:	9206      	str	r2, [sp, #24]
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	d13f      	bne.n	800caa8 <_printf_float+0x17c>
 800ca28:	2306      	movs	r3, #6
 800ca2a:	6063      	str	r3, [r4, #4]
 800ca2c:	9b05      	ldr	r3, [sp, #20]
 800ca2e:	6861      	ldr	r1, [r4, #4]
 800ca30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ca34:	2300      	movs	r3, #0
 800ca36:	9303      	str	r3, [sp, #12]
 800ca38:	ab0a      	add	r3, sp, #40	; 0x28
 800ca3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ca3e:	ab09      	add	r3, sp, #36	; 0x24
 800ca40:	ec49 8b10 	vmov	d0, r8, r9
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	6022      	str	r2, [r4, #0]
 800ca48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f7ff fecd 	bl	800c7ec <__cvt>
 800ca52:	9b06      	ldr	r3, [sp, #24]
 800ca54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca56:	2b47      	cmp	r3, #71	; 0x47
 800ca58:	4680      	mov	r8, r0
 800ca5a:	d108      	bne.n	800ca6e <_printf_float+0x142>
 800ca5c:	1cc8      	adds	r0, r1, #3
 800ca5e:	db02      	blt.n	800ca66 <_printf_float+0x13a>
 800ca60:	6863      	ldr	r3, [r4, #4]
 800ca62:	4299      	cmp	r1, r3
 800ca64:	dd41      	ble.n	800caea <_printf_float+0x1be>
 800ca66:	f1ab 0b02 	sub.w	fp, fp, #2
 800ca6a:	fa5f fb8b 	uxtb.w	fp, fp
 800ca6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca72:	d820      	bhi.n	800cab6 <_printf_float+0x18a>
 800ca74:	3901      	subs	r1, #1
 800ca76:	465a      	mov	r2, fp
 800ca78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca7c:	9109      	str	r1, [sp, #36]	; 0x24
 800ca7e:	f7ff ff17 	bl	800c8b0 <__exponent>
 800ca82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca84:	1813      	adds	r3, r2, r0
 800ca86:	2a01      	cmp	r2, #1
 800ca88:	4681      	mov	r9, r0
 800ca8a:	6123      	str	r3, [r4, #16]
 800ca8c:	dc02      	bgt.n	800ca94 <_printf_float+0x168>
 800ca8e:	6822      	ldr	r2, [r4, #0]
 800ca90:	07d2      	lsls	r2, r2, #31
 800ca92:	d501      	bpl.n	800ca98 <_printf_float+0x16c>
 800ca94:	3301      	adds	r3, #1
 800ca96:	6123      	str	r3, [r4, #16]
 800ca98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d09c      	beq.n	800c9da <_printf_float+0xae>
 800caa0:	232d      	movs	r3, #45	; 0x2d
 800caa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caa6:	e798      	b.n	800c9da <_printf_float+0xae>
 800caa8:	9a06      	ldr	r2, [sp, #24]
 800caaa:	2a47      	cmp	r2, #71	; 0x47
 800caac:	d1be      	bne.n	800ca2c <_printf_float+0x100>
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1bc      	bne.n	800ca2c <_printf_float+0x100>
 800cab2:	2301      	movs	r3, #1
 800cab4:	e7b9      	b.n	800ca2a <_printf_float+0xfe>
 800cab6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800caba:	d118      	bne.n	800caee <_printf_float+0x1c2>
 800cabc:	2900      	cmp	r1, #0
 800cabe:	6863      	ldr	r3, [r4, #4]
 800cac0:	dd0b      	ble.n	800cada <_printf_float+0x1ae>
 800cac2:	6121      	str	r1, [r4, #16]
 800cac4:	b913      	cbnz	r3, 800cacc <_printf_float+0x1a0>
 800cac6:	6822      	ldr	r2, [r4, #0]
 800cac8:	07d0      	lsls	r0, r2, #31
 800caca:	d502      	bpl.n	800cad2 <_printf_float+0x1a6>
 800cacc:	3301      	adds	r3, #1
 800cace:	440b      	add	r3, r1
 800cad0:	6123      	str	r3, [r4, #16]
 800cad2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cad4:	f04f 0900 	mov.w	r9, #0
 800cad8:	e7de      	b.n	800ca98 <_printf_float+0x16c>
 800cada:	b913      	cbnz	r3, 800cae2 <_printf_float+0x1b6>
 800cadc:	6822      	ldr	r2, [r4, #0]
 800cade:	07d2      	lsls	r2, r2, #31
 800cae0:	d501      	bpl.n	800cae6 <_printf_float+0x1ba>
 800cae2:	3302      	adds	r3, #2
 800cae4:	e7f4      	b.n	800cad0 <_printf_float+0x1a4>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e7f2      	b.n	800cad0 <_printf_float+0x1a4>
 800caea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800caee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caf0:	4299      	cmp	r1, r3
 800caf2:	db05      	blt.n	800cb00 <_printf_float+0x1d4>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	6121      	str	r1, [r4, #16]
 800caf8:	07d8      	lsls	r0, r3, #31
 800cafa:	d5ea      	bpl.n	800cad2 <_printf_float+0x1a6>
 800cafc:	1c4b      	adds	r3, r1, #1
 800cafe:	e7e7      	b.n	800cad0 <_printf_float+0x1a4>
 800cb00:	2900      	cmp	r1, #0
 800cb02:	bfd4      	ite	le
 800cb04:	f1c1 0202 	rsble	r2, r1, #2
 800cb08:	2201      	movgt	r2, #1
 800cb0a:	4413      	add	r3, r2
 800cb0c:	e7e0      	b.n	800cad0 <_printf_float+0x1a4>
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	055a      	lsls	r2, r3, #21
 800cb12:	d407      	bmi.n	800cb24 <_printf_float+0x1f8>
 800cb14:	6923      	ldr	r3, [r4, #16]
 800cb16:	4642      	mov	r2, r8
 800cb18:	4631      	mov	r1, r6
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	47b8      	blx	r7
 800cb1e:	3001      	adds	r0, #1
 800cb20:	d12c      	bne.n	800cb7c <_printf_float+0x250>
 800cb22:	e764      	b.n	800c9ee <_printf_float+0xc2>
 800cb24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb28:	f240 80e0 	bls.w	800ccec <_printf_float+0x3c0>
 800cb2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb30:	2200      	movs	r2, #0
 800cb32:	2300      	movs	r3, #0
 800cb34:	f7f3 ffa0 	bl	8000a78 <__aeabi_dcmpeq>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d034      	beq.n	800cba6 <_printf_float+0x27a>
 800cb3c:	4a37      	ldr	r2, [pc, #220]	; (800cc1c <_printf_float+0x2f0>)
 800cb3e:	2301      	movs	r3, #1
 800cb40:	4631      	mov	r1, r6
 800cb42:	4628      	mov	r0, r5
 800cb44:	47b8      	blx	r7
 800cb46:	3001      	adds	r0, #1
 800cb48:	f43f af51 	beq.w	800c9ee <_printf_float+0xc2>
 800cb4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb50:	429a      	cmp	r2, r3
 800cb52:	db02      	blt.n	800cb5a <_printf_float+0x22e>
 800cb54:	6823      	ldr	r3, [r4, #0]
 800cb56:	07d8      	lsls	r0, r3, #31
 800cb58:	d510      	bpl.n	800cb7c <_printf_float+0x250>
 800cb5a:	ee18 3a10 	vmov	r3, s16
 800cb5e:	4652      	mov	r2, sl
 800cb60:	4631      	mov	r1, r6
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b8      	blx	r7
 800cb66:	3001      	adds	r0, #1
 800cb68:	f43f af41 	beq.w	800c9ee <_printf_float+0xc2>
 800cb6c:	f04f 0800 	mov.w	r8, #0
 800cb70:	f104 091a 	add.w	r9, r4, #26
 800cb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb76:	3b01      	subs	r3, #1
 800cb78:	4543      	cmp	r3, r8
 800cb7a:	dc09      	bgt.n	800cb90 <_printf_float+0x264>
 800cb7c:	6823      	ldr	r3, [r4, #0]
 800cb7e:	079b      	lsls	r3, r3, #30
 800cb80:	f100 8105 	bmi.w	800cd8e <_printf_float+0x462>
 800cb84:	68e0      	ldr	r0, [r4, #12]
 800cb86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb88:	4298      	cmp	r0, r3
 800cb8a:	bfb8      	it	lt
 800cb8c:	4618      	movlt	r0, r3
 800cb8e:	e730      	b.n	800c9f2 <_printf_float+0xc6>
 800cb90:	2301      	movs	r3, #1
 800cb92:	464a      	mov	r2, r9
 800cb94:	4631      	mov	r1, r6
 800cb96:	4628      	mov	r0, r5
 800cb98:	47b8      	blx	r7
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	f43f af27 	beq.w	800c9ee <_printf_float+0xc2>
 800cba0:	f108 0801 	add.w	r8, r8, #1
 800cba4:	e7e6      	b.n	800cb74 <_printf_float+0x248>
 800cba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	dc39      	bgt.n	800cc20 <_printf_float+0x2f4>
 800cbac:	4a1b      	ldr	r2, [pc, #108]	; (800cc1c <_printf_float+0x2f0>)
 800cbae:	2301      	movs	r3, #1
 800cbb0:	4631      	mov	r1, r6
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	47b8      	blx	r7
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	f43f af19 	beq.w	800c9ee <_printf_float+0xc2>
 800cbbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	d102      	bne.n	800cbca <_printf_float+0x29e>
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	07d9      	lsls	r1, r3, #31
 800cbc8:	d5d8      	bpl.n	800cb7c <_printf_float+0x250>
 800cbca:	ee18 3a10 	vmov	r3, s16
 800cbce:	4652      	mov	r2, sl
 800cbd0:	4631      	mov	r1, r6
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	47b8      	blx	r7
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	f43f af09 	beq.w	800c9ee <_printf_float+0xc2>
 800cbdc:	f04f 0900 	mov.w	r9, #0
 800cbe0:	f104 0a1a 	add.w	sl, r4, #26
 800cbe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe6:	425b      	negs	r3, r3
 800cbe8:	454b      	cmp	r3, r9
 800cbea:	dc01      	bgt.n	800cbf0 <_printf_float+0x2c4>
 800cbec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbee:	e792      	b.n	800cb16 <_printf_float+0x1ea>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	4652      	mov	r2, sl
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	47b8      	blx	r7
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	f43f aef7 	beq.w	800c9ee <_printf_float+0xc2>
 800cc00:	f109 0901 	add.w	r9, r9, #1
 800cc04:	e7ee      	b.n	800cbe4 <_printf_float+0x2b8>
 800cc06:	bf00      	nop
 800cc08:	7fefffff 	.word	0x7fefffff
 800cc0c:	08011230 	.word	0x08011230
 800cc10:	08011234 	.word	0x08011234
 800cc14:	0801123c 	.word	0x0801123c
 800cc18:	08011238 	.word	0x08011238
 800cc1c:	08011240 	.word	0x08011240
 800cc20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc24:	429a      	cmp	r2, r3
 800cc26:	bfa8      	it	ge
 800cc28:	461a      	movge	r2, r3
 800cc2a:	2a00      	cmp	r2, #0
 800cc2c:	4691      	mov	r9, r2
 800cc2e:	dc37      	bgt.n	800cca0 <_printf_float+0x374>
 800cc30:	f04f 0b00 	mov.w	fp, #0
 800cc34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc38:	f104 021a 	add.w	r2, r4, #26
 800cc3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc3e:	9305      	str	r3, [sp, #20]
 800cc40:	eba3 0309 	sub.w	r3, r3, r9
 800cc44:	455b      	cmp	r3, fp
 800cc46:	dc33      	bgt.n	800ccb0 <_printf_float+0x384>
 800cc48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	db3b      	blt.n	800ccc8 <_printf_float+0x39c>
 800cc50:	6823      	ldr	r3, [r4, #0]
 800cc52:	07da      	lsls	r2, r3, #31
 800cc54:	d438      	bmi.n	800ccc8 <_printf_float+0x39c>
 800cc56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc58:	9a05      	ldr	r2, [sp, #20]
 800cc5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc5c:	1a9a      	subs	r2, r3, r2
 800cc5e:	eba3 0901 	sub.w	r9, r3, r1
 800cc62:	4591      	cmp	r9, r2
 800cc64:	bfa8      	it	ge
 800cc66:	4691      	movge	r9, r2
 800cc68:	f1b9 0f00 	cmp.w	r9, #0
 800cc6c:	dc35      	bgt.n	800ccda <_printf_float+0x3ae>
 800cc6e:	f04f 0800 	mov.w	r8, #0
 800cc72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc76:	f104 0a1a 	add.w	sl, r4, #26
 800cc7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc7e:	1a9b      	subs	r3, r3, r2
 800cc80:	eba3 0309 	sub.w	r3, r3, r9
 800cc84:	4543      	cmp	r3, r8
 800cc86:	f77f af79 	ble.w	800cb7c <_printf_float+0x250>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	4652      	mov	r2, sl
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b8      	blx	r7
 800cc94:	3001      	adds	r0, #1
 800cc96:	f43f aeaa 	beq.w	800c9ee <_printf_float+0xc2>
 800cc9a:	f108 0801 	add.w	r8, r8, #1
 800cc9e:	e7ec      	b.n	800cc7a <_printf_float+0x34e>
 800cca0:	4613      	mov	r3, r2
 800cca2:	4631      	mov	r1, r6
 800cca4:	4642      	mov	r2, r8
 800cca6:	4628      	mov	r0, r5
 800cca8:	47b8      	blx	r7
 800ccaa:	3001      	adds	r0, #1
 800ccac:	d1c0      	bne.n	800cc30 <_printf_float+0x304>
 800ccae:	e69e      	b.n	800c9ee <_printf_float+0xc2>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	9205      	str	r2, [sp, #20]
 800ccb8:	47b8      	blx	r7
 800ccba:	3001      	adds	r0, #1
 800ccbc:	f43f ae97 	beq.w	800c9ee <_printf_float+0xc2>
 800ccc0:	9a05      	ldr	r2, [sp, #20]
 800ccc2:	f10b 0b01 	add.w	fp, fp, #1
 800ccc6:	e7b9      	b.n	800cc3c <_printf_float+0x310>
 800ccc8:	ee18 3a10 	vmov	r3, s16
 800cccc:	4652      	mov	r2, sl
 800ccce:	4631      	mov	r1, r6
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	47b8      	blx	r7
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	d1be      	bne.n	800cc56 <_printf_float+0x32a>
 800ccd8:	e689      	b.n	800c9ee <_printf_float+0xc2>
 800ccda:	9a05      	ldr	r2, [sp, #20]
 800ccdc:	464b      	mov	r3, r9
 800ccde:	4442      	add	r2, r8
 800cce0:	4631      	mov	r1, r6
 800cce2:	4628      	mov	r0, r5
 800cce4:	47b8      	blx	r7
 800cce6:	3001      	adds	r0, #1
 800cce8:	d1c1      	bne.n	800cc6e <_printf_float+0x342>
 800ccea:	e680      	b.n	800c9ee <_printf_float+0xc2>
 800ccec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccee:	2a01      	cmp	r2, #1
 800ccf0:	dc01      	bgt.n	800ccf6 <_printf_float+0x3ca>
 800ccf2:	07db      	lsls	r3, r3, #31
 800ccf4:	d538      	bpl.n	800cd68 <_printf_float+0x43c>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	4642      	mov	r2, r8
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	47b8      	blx	r7
 800cd00:	3001      	adds	r0, #1
 800cd02:	f43f ae74 	beq.w	800c9ee <_printf_float+0xc2>
 800cd06:	ee18 3a10 	vmov	r3, s16
 800cd0a:	4652      	mov	r2, sl
 800cd0c:	4631      	mov	r1, r6
 800cd0e:	4628      	mov	r0, r5
 800cd10:	47b8      	blx	r7
 800cd12:	3001      	adds	r0, #1
 800cd14:	f43f ae6b 	beq.w	800c9ee <_printf_float+0xc2>
 800cd18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	2300      	movs	r3, #0
 800cd20:	f7f3 feaa 	bl	8000a78 <__aeabi_dcmpeq>
 800cd24:	b9d8      	cbnz	r0, 800cd5e <_printf_float+0x432>
 800cd26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd28:	f108 0201 	add.w	r2, r8, #1
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	4631      	mov	r1, r6
 800cd30:	4628      	mov	r0, r5
 800cd32:	47b8      	blx	r7
 800cd34:	3001      	adds	r0, #1
 800cd36:	d10e      	bne.n	800cd56 <_printf_float+0x42a>
 800cd38:	e659      	b.n	800c9ee <_printf_float+0xc2>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	4652      	mov	r2, sl
 800cd3e:	4631      	mov	r1, r6
 800cd40:	4628      	mov	r0, r5
 800cd42:	47b8      	blx	r7
 800cd44:	3001      	adds	r0, #1
 800cd46:	f43f ae52 	beq.w	800c9ee <_printf_float+0xc2>
 800cd4a:	f108 0801 	add.w	r8, r8, #1
 800cd4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd50:	3b01      	subs	r3, #1
 800cd52:	4543      	cmp	r3, r8
 800cd54:	dcf1      	bgt.n	800cd3a <_printf_float+0x40e>
 800cd56:	464b      	mov	r3, r9
 800cd58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd5c:	e6dc      	b.n	800cb18 <_printf_float+0x1ec>
 800cd5e:	f04f 0800 	mov.w	r8, #0
 800cd62:	f104 0a1a 	add.w	sl, r4, #26
 800cd66:	e7f2      	b.n	800cd4e <_printf_float+0x422>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	4642      	mov	r2, r8
 800cd6c:	e7df      	b.n	800cd2e <_printf_float+0x402>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	464a      	mov	r2, r9
 800cd72:	4631      	mov	r1, r6
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b8      	blx	r7
 800cd78:	3001      	adds	r0, #1
 800cd7a:	f43f ae38 	beq.w	800c9ee <_printf_float+0xc2>
 800cd7e:	f108 0801 	add.w	r8, r8, #1
 800cd82:	68e3      	ldr	r3, [r4, #12]
 800cd84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd86:	1a5b      	subs	r3, r3, r1
 800cd88:	4543      	cmp	r3, r8
 800cd8a:	dcf0      	bgt.n	800cd6e <_printf_float+0x442>
 800cd8c:	e6fa      	b.n	800cb84 <_printf_float+0x258>
 800cd8e:	f04f 0800 	mov.w	r8, #0
 800cd92:	f104 0919 	add.w	r9, r4, #25
 800cd96:	e7f4      	b.n	800cd82 <_printf_float+0x456>

0800cd98 <_printf_common>:
 800cd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd9c:	4616      	mov	r6, r2
 800cd9e:	4699      	mov	r9, r3
 800cda0:	688a      	ldr	r2, [r1, #8]
 800cda2:	690b      	ldr	r3, [r1, #16]
 800cda4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	bfb8      	it	lt
 800cdac:	4613      	movlt	r3, r2
 800cdae:	6033      	str	r3, [r6, #0]
 800cdb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdb4:	4607      	mov	r7, r0
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	b10a      	cbz	r2, 800cdbe <_printf_common+0x26>
 800cdba:	3301      	adds	r3, #1
 800cdbc:	6033      	str	r3, [r6, #0]
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	0699      	lsls	r1, r3, #26
 800cdc2:	bf42      	ittt	mi
 800cdc4:	6833      	ldrmi	r3, [r6, #0]
 800cdc6:	3302      	addmi	r3, #2
 800cdc8:	6033      	strmi	r3, [r6, #0]
 800cdca:	6825      	ldr	r5, [r4, #0]
 800cdcc:	f015 0506 	ands.w	r5, r5, #6
 800cdd0:	d106      	bne.n	800cde0 <_printf_common+0x48>
 800cdd2:	f104 0a19 	add.w	sl, r4, #25
 800cdd6:	68e3      	ldr	r3, [r4, #12]
 800cdd8:	6832      	ldr	r2, [r6, #0]
 800cdda:	1a9b      	subs	r3, r3, r2
 800cddc:	42ab      	cmp	r3, r5
 800cdde:	dc26      	bgt.n	800ce2e <_printf_common+0x96>
 800cde0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cde4:	1e13      	subs	r3, r2, #0
 800cde6:	6822      	ldr	r2, [r4, #0]
 800cde8:	bf18      	it	ne
 800cdea:	2301      	movne	r3, #1
 800cdec:	0692      	lsls	r2, r2, #26
 800cdee:	d42b      	bmi.n	800ce48 <_printf_common+0xb0>
 800cdf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdf4:	4649      	mov	r1, r9
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	47c0      	blx	r8
 800cdfa:	3001      	adds	r0, #1
 800cdfc:	d01e      	beq.n	800ce3c <_printf_common+0xa4>
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	68e5      	ldr	r5, [r4, #12]
 800ce02:	6832      	ldr	r2, [r6, #0]
 800ce04:	f003 0306 	and.w	r3, r3, #6
 800ce08:	2b04      	cmp	r3, #4
 800ce0a:	bf08      	it	eq
 800ce0c:	1aad      	subeq	r5, r5, r2
 800ce0e:	68a3      	ldr	r3, [r4, #8]
 800ce10:	6922      	ldr	r2, [r4, #16]
 800ce12:	bf0c      	ite	eq
 800ce14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce18:	2500      	movne	r5, #0
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	bfc4      	itt	gt
 800ce1e:	1a9b      	subgt	r3, r3, r2
 800ce20:	18ed      	addgt	r5, r5, r3
 800ce22:	2600      	movs	r6, #0
 800ce24:	341a      	adds	r4, #26
 800ce26:	42b5      	cmp	r5, r6
 800ce28:	d11a      	bne.n	800ce60 <_printf_common+0xc8>
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e008      	b.n	800ce40 <_printf_common+0xa8>
 800ce2e:	2301      	movs	r3, #1
 800ce30:	4652      	mov	r2, sl
 800ce32:	4649      	mov	r1, r9
 800ce34:	4638      	mov	r0, r7
 800ce36:	47c0      	blx	r8
 800ce38:	3001      	adds	r0, #1
 800ce3a:	d103      	bne.n	800ce44 <_printf_common+0xac>
 800ce3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce44:	3501      	adds	r5, #1
 800ce46:	e7c6      	b.n	800cdd6 <_printf_common+0x3e>
 800ce48:	18e1      	adds	r1, r4, r3
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	2030      	movs	r0, #48	; 0x30
 800ce4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce52:	4422      	add	r2, r4
 800ce54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce5c:	3302      	adds	r3, #2
 800ce5e:	e7c7      	b.n	800cdf0 <_printf_common+0x58>
 800ce60:	2301      	movs	r3, #1
 800ce62:	4622      	mov	r2, r4
 800ce64:	4649      	mov	r1, r9
 800ce66:	4638      	mov	r0, r7
 800ce68:	47c0      	blx	r8
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	d0e6      	beq.n	800ce3c <_printf_common+0xa4>
 800ce6e:	3601      	adds	r6, #1
 800ce70:	e7d9      	b.n	800ce26 <_printf_common+0x8e>
	...

0800ce74 <_printf_i>:
 800ce74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce78:	7e0f      	ldrb	r7, [r1, #24]
 800ce7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce7c:	2f78      	cmp	r7, #120	; 0x78
 800ce7e:	4691      	mov	r9, r2
 800ce80:	4680      	mov	r8, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	469a      	mov	sl, r3
 800ce86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce8a:	d807      	bhi.n	800ce9c <_printf_i+0x28>
 800ce8c:	2f62      	cmp	r7, #98	; 0x62
 800ce8e:	d80a      	bhi.n	800cea6 <_printf_i+0x32>
 800ce90:	2f00      	cmp	r7, #0
 800ce92:	f000 80d8 	beq.w	800d046 <_printf_i+0x1d2>
 800ce96:	2f58      	cmp	r7, #88	; 0x58
 800ce98:	f000 80a3 	beq.w	800cfe2 <_printf_i+0x16e>
 800ce9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cea4:	e03a      	b.n	800cf1c <_printf_i+0xa8>
 800cea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ceaa:	2b15      	cmp	r3, #21
 800ceac:	d8f6      	bhi.n	800ce9c <_printf_i+0x28>
 800ceae:	a101      	add	r1, pc, #4	; (adr r1, 800ceb4 <_printf_i+0x40>)
 800ceb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ceb4:	0800cf0d 	.word	0x0800cf0d
 800ceb8:	0800cf21 	.word	0x0800cf21
 800cebc:	0800ce9d 	.word	0x0800ce9d
 800cec0:	0800ce9d 	.word	0x0800ce9d
 800cec4:	0800ce9d 	.word	0x0800ce9d
 800cec8:	0800ce9d 	.word	0x0800ce9d
 800cecc:	0800cf21 	.word	0x0800cf21
 800ced0:	0800ce9d 	.word	0x0800ce9d
 800ced4:	0800ce9d 	.word	0x0800ce9d
 800ced8:	0800ce9d 	.word	0x0800ce9d
 800cedc:	0800ce9d 	.word	0x0800ce9d
 800cee0:	0800d02d 	.word	0x0800d02d
 800cee4:	0800cf51 	.word	0x0800cf51
 800cee8:	0800d00f 	.word	0x0800d00f
 800ceec:	0800ce9d 	.word	0x0800ce9d
 800cef0:	0800ce9d 	.word	0x0800ce9d
 800cef4:	0800d04f 	.word	0x0800d04f
 800cef8:	0800ce9d 	.word	0x0800ce9d
 800cefc:	0800cf51 	.word	0x0800cf51
 800cf00:	0800ce9d 	.word	0x0800ce9d
 800cf04:	0800ce9d 	.word	0x0800ce9d
 800cf08:	0800d017 	.word	0x0800d017
 800cf0c:	682b      	ldr	r3, [r5, #0]
 800cf0e:	1d1a      	adds	r2, r3, #4
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	602a      	str	r2, [r5, #0]
 800cf14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e0a3      	b.n	800d068 <_printf_i+0x1f4>
 800cf20:	6820      	ldr	r0, [r4, #0]
 800cf22:	6829      	ldr	r1, [r5, #0]
 800cf24:	0606      	lsls	r6, r0, #24
 800cf26:	f101 0304 	add.w	r3, r1, #4
 800cf2a:	d50a      	bpl.n	800cf42 <_printf_i+0xce>
 800cf2c:	680e      	ldr	r6, [r1, #0]
 800cf2e:	602b      	str	r3, [r5, #0]
 800cf30:	2e00      	cmp	r6, #0
 800cf32:	da03      	bge.n	800cf3c <_printf_i+0xc8>
 800cf34:	232d      	movs	r3, #45	; 0x2d
 800cf36:	4276      	negs	r6, r6
 800cf38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf3c:	485e      	ldr	r0, [pc, #376]	; (800d0b8 <_printf_i+0x244>)
 800cf3e:	230a      	movs	r3, #10
 800cf40:	e019      	b.n	800cf76 <_printf_i+0x102>
 800cf42:	680e      	ldr	r6, [r1, #0]
 800cf44:	602b      	str	r3, [r5, #0]
 800cf46:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf4a:	bf18      	it	ne
 800cf4c:	b236      	sxthne	r6, r6
 800cf4e:	e7ef      	b.n	800cf30 <_printf_i+0xbc>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	6820      	ldr	r0, [r4, #0]
 800cf54:	1d19      	adds	r1, r3, #4
 800cf56:	6029      	str	r1, [r5, #0]
 800cf58:	0601      	lsls	r1, r0, #24
 800cf5a:	d501      	bpl.n	800cf60 <_printf_i+0xec>
 800cf5c:	681e      	ldr	r6, [r3, #0]
 800cf5e:	e002      	b.n	800cf66 <_printf_i+0xf2>
 800cf60:	0646      	lsls	r6, r0, #25
 800cf62:	d5fb      	bpl.n	800cf5c <_printf_i+0xe8>
 800cf64:	881e      	ldrh	r6, [r3, #0]
 800cf66:	4854      	ldr	r0, [pc, #336]	; (800d0b8 <_printf_i+0x244>)
 800cf68:	2f6f      	cmp	r7, #111	; 0x6f
 800cf6a:	bf0c      	ite	eq
 800cf6c:	2308      	moveq	r3, #8
 800cf6e:	230a      	movne	r3, #10
 800cf70:	2100      	movs	r1, #0
 800cf72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf76:	6865      	ldr	r5, [r4, #4]
 800cf78:	60a5      	str	r5, [r4, #8]
 800cf7a:	2d00      	cmp	r5, #0
 800cf7c:	bfa2      	ittt	ge
 800cf7e:	6821      	ldrge	r1, [r4, #0]
 800cf80:	f021 0104 	bicge.w	r1, r1, #4
 800cf84:	6021      	strge	r1, [r4, #0]
 800cf86:	b90e      	cbnz	r6, 800cf8c <_printf_i+0x118>
 800cf88:	2d00      	cmp	r5, #0
 800cf8a:	d04d      	beq.n	800d028 <_printf_i+0x1b4>
 800cf8c:	4615      	mov	r5, r2
 800cf8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf92:	fb03 6711 	mls	r7, r3, r1, r6
 800cf96:	5dc7      	ldrb	r7, [r0, r7]
 800cf98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf9c:	4637      	mov	r7, r6
 800cf9e:	42bb      	cmp	r3, r7
 800cfa0:	460e      	mov	r6, r1
 800cfa2:	d9f4      	bls.n	800cf8e <_printf_i+0x11a>
 800cfa4:	2b08      	cmp	r3, #8
 800cfa6:	d10b      	bne.n	800cfc0 <_printf_i+0x14c>
 800cfa8:	6823      	ldr	r3, [r4, #0]
 800cfaa:	07de      	lsls	r6, r3, #31
 800cfac:	d508      	bpl.n	800cfc0 <_printf_i+0x14c>
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	6861      	ldr	r1, [r4, #4]
 800cfb2:	4299      	cmp	r1, r3
 800cfb4:	bfde      	ittt	le
 800cfb6:	2330      	movle	r3, #48	; 0x30
 800cfb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cfbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cfc0:	1b52      	subs	r2, r2, r5
 800cfc2:	6122      	str	r2, [r4, #16]
 800cfc4:	f8cd a000 	str.w	sl, [sp]
 800cfc8:	464b      	mov	r3, r9
 800cfca:	aa03      	add	r2, sp, #12
 800cfcc:	4621      	mov	r1, r4
 800cfce:	4640      	mov	r0, r8
 800cfd0:	f7ff fee2 	bl	800cd98 <_printf_common>
 800cfd4:	3001      	adds	r0, #1
 800cfd6:	d14c      	bne.n	800d072 <_printf_i+0x1fe>
 800cfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfdc:	b004      	add	sp, #16
 800cfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe2:	4835      	ldr	r0, [pc, #212]	; (800d0b8 <_printf_i+0x244>)
 800cfe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cfe8:	6829      	ldr	r1, [r5, #0]
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	f851 6b04 	ldr.w	r6, [r1], #4
 800cff0:	6029      	str	r1, [r5, #0]
 800cff2:	061d      	lsls	r5, r3, #24
 800cff4:	d514      	bpl.n	800d020 <_printf_i+0x1ac>
 800cff6:	07df      	lsls	r7, r3, #31
 800cff8:	bf44      	itt	mi
 800cffa:	f043 0320 	orrmi.w	r3, r3, #32
 800cffe:	6023      	strmi	r3, [r4, #0]
 800d000:	b91e      	cbnz	r6, 800d00a <_printf_i+0x196>
 800d002:	6823      	ldr	r3, [r4, #0]
 800d004:	f023 0320 	bic.w	r3, r3, #32
 800d008:	6023      	str	r3, [r4, #0]
 800d00a:	2310      	movs	r3, #16
 800d00c:	e7b0      	b.n	800cf70 <_printf_i+0xfc>
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	f043 0320 	orr.w	r3, r3, #32
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	2378      	movs	r3, #120	; 0x78
 800d018:	4828      	ldr	r0, [pc, #160]	; (800d0bc <_printf_i+0x248>)
 800d01a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d01e:	e7e3      	b.n	800cfe8 <_printf_i+0x174>
 800d020:	0659      	lsls	r1, r3, #25
 800d022:	bf48      	it	mi
 800d024:	b2b6      	uxthmi	r6, r6
 800d026:	e7e6      	b.n	800cff6 <_printf_i+0x182>
 800d028:	4615      	mov	r5, r2
 800d02a:	e7bb      	b.n	800cfa4 <_printf_i+0x130>
 800d02c:	682b      	ldr	r3, [r5, #0]
 800d02e:	6826      	ldr	r6, [r4, #0]
 800d030:	6961      	ldr	r1, [r4, #20]
 800d032:	1d18      	adds	r0, r3, #4
 800d034:	6028      	str	r0, [r5, #0]
 800d036:	0635      	lsls	r5, r6, #24
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	d501      	bpl.n	800d040 <_printf_i+0x1cc>
 800d03c:	6019      	str	r1, [r3, #0]
 800d03e:	e002      	b.n	800d046 <_printf_i+0x1d2>
 800d040:	0670      	lsls	r0, r6, #25
 800d042:	d5fb      	bpl.n	800d03c <_printf_i+0x1c8>
 800d044:	8019      	strh	r1, [r3, #0]
 800d046:	2300      	movs	r3, #0
 800d048:	6123      	str	r3, [r4, #16]
 800d04a:	4615      	mov	r5, r2
 800d04c:	e7ba      	b.n	800cfc4 <_printf_i+0x150>
 800d04e:	682b      	ldr	r3, [r5, #0]
 800d050:	1d1a      	adds	r2, r3, #4
 800d052:	602a      	str	r2, [r5, #0]
 800d054:	681d      	ldr	r5, [r3, #0]
 800d056:	6862      	ldr	r2, [r4, #4]
 800d058:	2100      	movs	r1, #0
 800d05a:	4628      	mov	r0, r5
 800d05c:	f7f3 f898 	bl	8000190 <memchr>
 800d060:	b108      	cbz	r0, 800d066 <_printf_i+0x1f2>
 800d062:	1b40      	subs	r0, r0, r5
 800d064:	6060      	str	r0, [r4, #4]
 800d066:	6863      	ldr	r3, [r4, #4]
 800d068:	6123      	str	r3, [r4, #16]
 800d06a:	2300      	movs	r3, #0
 800d06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d070:	e7a8      	b.n	800cfc4 <_printf_i+0x150>
 800d072:	6923      	ldr	r3, [r4, #16]
 800d074:	462a      	mov	r2, r5
 800d076:	4649      	mov	r1, r9
 800d078:	4640      	mov	r0, r8
 800d07a:	47d0      	blx	sl
 800d07c:	3001      	adds	r0, #1
 800d07e:	d0ab      	beq.n	800cfd8 <_printf_i+0x164>
 800d080:	6823      	ldr	r3, [r4, #0]
 800d082:	079b      	lsls	r3, r3, #30
 800d084:	d413      	bmi.n	800d0ae <_printf_i+0x23a>
 800d086:	68e0      	ldr	r0, [r4, #12]
 800d088:	9b03      	ldr	r3, [sp, #12]
 800d08a:	4298      	cmp	r0, r3
 800d08c:	bfb8      	it	lt
 800d08e:	4618      	movlt	r0, r3
 800d090:	e7a4      	b.n	800cfdc <_printf_i+0x168>
 800d092:	2301      	movs	r3, #1
 800d094:	4632      	mov	r2, r6
 800d096:	4649      	mov	r1, r9
 800d098:	4640      	mov	r0, r8
 800d09a:	47d0      	blx	sl
 800d09c:	3001      	adds	r0, #1
 800d09e:	d09b      	beq.n	800cfd8 <_printf_i+0x164>
 800d0a0:	3501      	adds	r5, #1
 800d0a2:	68e3      	ldr	r3, [r4, #12]
 800d0a4:	9903      	ldr	r1, [sp, #12]
 800d0a6:	1a5b      	subs	r3, r3, r1
 800d0a8:	42ab      	cmp	r3, r5
 800d0aa:	dcf2      	bgt.n	800d092 <_printf_i+0x21e>
 800d0ac:	e7eb      	b.n	800d086 <_printf_i+0x212>
 800d0ae:	2500      	movs	r5, #0
 800d0b0:	f104 0619 	add.w	r6, r4, #25
 800d0b4:	e7f5      	b.n	800d0a2 <_printf_i+0x22e>
 800d0b6:	bf00      	nop
 800d0b8:	08011242 	.word	0x08011242
 800d0bc:	08011253 	.word	0x08011253

0800d0c0 <_scanf_float>:
 800d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	b087      	sub	sp, #28
 800d0c6:	4617      	mov	r7, r2
 800d0c8:	9303      	str	r3, [sp, #12]
 800d0ca:	688b      	ldr	r3, [r1, #8]
 800d0cc:	1e5a      	subs	r2, r3, #1
 800d0ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d0d2:	bf83      	ittte	hi
 800d0d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d0d8:	195b      	addhi	r3, r3, r5
 800d0da:	9302      	strhi	r3, [sp, #8]
 800d0dc:	2300      	movls	r3, #0
 800d0de:	bf86      	itte	hi
 800d0e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d0e4:	608b      	strhi	r3, [r1, #8]
 800d0e6:	9302      	strls	r3, [sp, #8]
 800d0e8:	680b      	ldr	r3, [r1, #0]
 800d0ea:	468b      	mov	fp, r1
 800d0ec:	2500      	movs	r5, #0
 800d0ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d0f2:	f84b 3b1c 	str.w	r3, [fp], #28
 800d0f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d0fa:	4680      	mov	r8, r0
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	465e      	mov	r6, fp
 800d100:	46aa      	mov	sl, r5
 800d102:	46a9      	mov	r9, r5
 800d104:	9501      	str	r5, [sp, #4]
 800d106:	68a2      	ldr	r2, [r4, #8]
 800d108:	b152      	cbz	r2, 800d120 <_scanf_float+0x60>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	2b4e      	cmp	r3, #78	; 0x4e
 800d110:	d864      	bhi.n	800d1dc <_scanf_float+0x11c>
 800d112:	2b40      	cmp	r3, #64	; 0x40
 800d114:	d83c      	bhi.n	800d190 <_scanf_float+0xd0>
 800d116:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d11a:	b2c8      	uxtb	r0, r1
 800d11c:	280e      	cmp	r0, #14
 800d11e:	d93a      	bls.n	800d196 <_scanf_float+0xd6>
 800d120:	f1b9 0f00 	cmp.w	r9, #0
 800d124:	d003      	beq.n	800d12e <_scanf_float+0x6e>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d132:	f1ba 0f01 	cmp.w	sl, #1
 800d136:	f200 8113 	bhi.w	800d360 <_scanf_float+0x2a0>
 800d13a:	455e      	cmp	r6, fp
 800d13c:	f200 8105 	bhi.w	800d34a <_scanf_float+0x28a>
 800d140:	2501      	movs	r5, #1
 800d142:	4628      	mov	r0, r5
 800d144:	b007      	add	sp, #28
 800d146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d14e:	2a0d      	cmp	r2, #13
 800d150:	d8e6      	bhi.n	800d120 <_scanf_float+0x60>
 800d152:	a101      	add	r1, pc, #4	; (adr r1, 800d158 <_scanf_float+0x98>)
 800d154:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d158:	0800d297 	.word	0x0800d297
 800d15c:	0800d121 	.word	0x0800d121
 800d160:	0800d121 	.word	0x0800d121
 800d164:	0800d121 	.word	0x0800d121
 800d168:	0800d2f7 	.word	0x0800d2f7
 800d16c:	0800d2cf 	.word	0x0800d2cf
 800d170:	0800d121 	.word	0x0800d121
 800d174:	0800d121 	.word	0x0800d121
 800d178:	0800d2a5 	.word	0x0800d2a5
 800d17c:	0800d121 	.word	0x0800d121
 800d180:	0800d121 	.word	0x0800d121
 800d184:	0800d121 	.word	0x0800d121
 800d188:	0800d121 	.word	0x0800d121
 800d18c:	0800d25d 	.word	0x0800d25d
 800d190:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d194:	e7db      	b.n	800d14e <_scanf_float+0x8e>
 800d196:	290e      	cmp	r1, #14
 800d198:	d8c2      	bhi.n	800d120 <_scanf_float+0x60>
 800d19a:	a001      	add	r0, pc, #4	; (adr r0, 800d1a0 <_scanf_float+0xe0>)
 800d19c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d1a0:	0800d24f 	.word	0x0800d24f
 800d1a4:	0800d121 	.word	0x0800d121
 800d1a8:	0800d24f 	.word	0x0800d24f
 800d1ac:	0800d2e3 	.word	0x0800d2e3
 800d1b0:	0800d121 	.word	0x0800d121
 800d1b4:	0800d1fd 	.word	0x0800d1fd
 800d1b8:	0800d239 	.word	0x0800d239
 800d1bc:	0800d239 	.word	0x0800d239
 800d1c0:	0800d239 	.word	0x0800d239
 800d1c4:	0800d239 	.word	0x0800d239
 800d1c8:	0800d239 	.word	0x0800d239
 800d1cc:	0800d239 	.word	0x0800d239
 800d1d0:	0800d239 	.word	0x0800d239
 800d1d4:	0800d239 	.word	0x0800d239
 800d1d8:	0800d239 	.word	0x0800d239
 800d1dc:	2b6e      	cmp	r3, #110	; 0x6e
 800d1de:	d809      	bhi.n	800d1f4 <_scanf_float+0x134>
 800d1e0:	2b60      	cmp	r3, #96	; 0x60
 800d1e2:	d8b2      	bhi.n	800d14a <_scanf_float+0x8a>
 800d1e4:	2b54      	cmp	r3, #84	; 0x54
 800d1e6:	d077      	beq.n	800d2d8 <_scanf_float+0x218>
 800d1e8:	2b59      	cmp	r3, #89	; 0x59
 800d1ea:	d199      	bne.n	800d120 <_scanf_float+0x60>
 800d1ec:	2d07      	cmp	r5, #7
 800d1ee:	d197      	bne.n	800d120 <_scanf_float+0x60>
 800d1f0:	2508      	movs	r5, #8
 800d1f2:	e029      	b.n	800d248 <_scanf_float+0x188>
 800d1f4:	2b74      	cmp	r3, #116	; 0x74
 800d1f6:	d06f      	beq.n	800d2d8 <_scanf_float+0x218>
 800d1f8:	2b79      	cmp	r3, #121	; 0x79
 800d1fa:	e7f6      	b.n	800d1ea <_scanf_float+0x12a>
 800d1fc:	6821      	ldr	r1, [r4, #0]
 800d1fe:	05c8      	lsls	r0, r1, #23
 800d200:	d51a      	bpl.n	800d238 <_scanf_float+0x178>
 800d202:	9b02      	ldr	r3, [sp, #8]
 800d204:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d208:	6021      	str	r1, [r4, #0]
 800d20a:	f109 0901 	add.w	r9, r9, #1
 800d20e:	b11b      	cbz	r3, 800d218 <_scanf_float+0x158>
 800d210:	3b01      	subs	r3, #1
 800d212:	3201      	adds	r2, #1
 800d214:	9302      	str	r3, [sp, #8]
 800d216:	60a2      	str	r2, [r4, #8]
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	3b01      	subs	r3, #1
 800d21c:	60a3      	str	r3, [r4, #8]
 800d21e:	6923      	ldr	r3, [r4, #16]
 800d220:	3301      	adds	r3, #1
 800d222:	6123      	str	r3, [r4, #16]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3b01      	subs	r3, #1
 800d228:	2b00      	cmp	r3, #0
 800d22a:	607b      	str	r3, [r7, #4]
 800d22c:	f340 8084 	ble.w	800d338 <_scanf_float+0x278>
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	3301      	adds	r3, #1
 800d234:	603b      	str	r3, [r7, #0]
 800d236:	e766      	b.n	800d106 <_scanf_float+0x46>
 800d238:	eb1a 0f05 	cmn.w	sl, r5
 800d23c:	f47f af70 	bne.w	800d120 <_scanf_float+0x60>
 800d240:	6822      	ldr	r2, [r4, #0]
 800d242:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d246:	6022      	str	r2, [r4, #0]
 800d248:	f806 3b01 	strb.w	r3, [r6], #1
 800d24c:	e7e4      	b.n	800d218 <_scanf_float+0x158>
 800d24e:	6822      	ldr	r2, [r4, #0]
 800d250:	0610      	lsls	r0, r2, #24
 800d252:	f57f af65 	bpl.w	800d120 <_scanf_float+0x60>
 800d256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d25a:	e7f4      	b.n	800d246 <_scanf_float+0x186>
 800d25c:	f1ba 0f00 	cmp.w	sl, #0
 800d260:	d10e      	bne.n	800d280 <_scanf_float+0x1c0>
 800d262:	f1b9 0f00 	cmp.w	r9, #0
 800d266:	d10e      	bne.n	800d286 <_scanf_float+0x1c6>
 800d268:	6822      	ldr	r2, [r4, #0]
 800d26a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d26e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d272:	d108      	bne.n	800d286 <_scanf_float+0x1c6>
 800d274:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d278:	6022      	str	r2, [r4, #0]
 800d27a:	f04f 0a01 	mov.w	sl, #1
 800d27e:	e7e3      	b.n	800d248 <_scanf_float+0x188>
 800d280:	f1ba 0f02 	cmp.w	sl, #2
 800d284:	d055      	beq.n	800d332 <_scanf_float+0x272>
 800d286:	2d01      	cmp	r5, #1
 800d288:	d002      	beq.n	800d290 <_scanf_float+0x1d0>
 800d28a:	2d04      	cmp	r5, #4
 800d28c:	f47f af48 	bne.w	800d120 <_scanf_float+0x60>
 800d290:	3501      	adds	r5, #1
 800d292:	b2ed      	uxtb	r5, r5
 800d294:	e7d8      	b.n	800d248 <_scanf_float+0x188>
 800d296:	f1ba 0f01 	cmp.w	sl, #1
 800d29a:	f47f af41 	bne.w	800d120 <_scanf_float+0x60>
 800d29e:	f04f 0a02 	mov.w	sl, #2
 800d2a2:	e7d1      	b.n	800d248 <_scanf_float+0x188>
 800d2a4:	b97d      	cbnz	r5, 800d2c6 <_scanf_float+0x206>
 800d2a6:	f1b9 0f00 	cmp.w	r9, #0
 800d2aa:	f47f af3c 	bne.w	800d126 <_scanf_float+0x66>
 800d2ae:	6822      	ldr	r2, [r4, #0]
 800d2b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d2b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d2b8:	f47f af39 	bne.w	800d12e <_scanf_float+0x6e>
 800d2bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d2c0:	6022      	str	r2, [r4, #0]
 800d2c2:	2501      	movs	r5, #1
 800d2c4:	e7c0      	b.n	800d248 <_scanf_float+0x188>
 800d2c6:	2d03      	cmp	r5, #3
 800d2c8:	d0e2      	beq.n	800d290 <_scanf_float+0x1d0>
 800d2ca:	2d05      	cmp	r5, #5
 800d2cc:	e7de      	b.n	800d28c <_scanf_float+0x1cc>
 800d2ce:	2d02      	cmp	r5, #2
 800d2d0:	f47f af26 	bne.w	800d120 <_scanf_float+0x60>
 800d2d4:	2503      	movs	r5, #3
 800d2d6:	e7b7      	b.n	800d248 <_scanf_float+0x188>
 800d2d8:	2d06      	cmp	r5, #6
 800d2da:	f47f af21 	bne.w	800d120 <_scanf_float+0x60>
 800d2de:	2507      	movs	r5, #7
 800d2e0:	e7b2      	b.n	800d248 <_scanf_float+0x188>
 800d2e2:	6822      	ldr	r2, [r4, #0]
 800d2e4:	0591      	lsls	r1, r2, #22
 800d2e6:	f57f af1b 	bpl.w	800d120 <_scanf_float+0x60>
 800d2ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d2ee:	6022      	str	r2, [r4, #0]
 800d2f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d2f4:	e7a8      	b.n	800d248 <_scanf_float+0x188>
 800d2f6:	6822      	ldr	r2, [r4, #0]
 800d2f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d2fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d300:	d006      	beq.n	800d310 <_scanf_float+0x250>
 800d302:	0550      	lsls	r0, r2, #21
 800d304:	f57f af0c 	bpl.w	800d120 <_scanf_float+0x60>
 800d308:	f1b9 0f00 	cmp.w	r9, #0
 800d30c:	f43f af0f 	beq.w	800d12e <_scanf_float+0x6e>
 800d310:	0591      	lsls	r1, r2, #22
 800d312:	bf58      	it	pl
 800d314:	9901      	ldrpl	r1, [sp, #4]
 800d316:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d31a:	bf58      	it	pl
 800d31c:	eba9 0101 	subpl.w	r1, r9, r1
 800d320:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d324:	bf58      	it	pl
 800d326:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d32a:	6022      	str	r2, [r4, #0]
 800d32c:	f04f 0900 	mov.w	r9, #0
 800d330:	e78a      	b.n	800d248 <_scanf_float+0x188>
 800d332:	f04f 0a03 	mov.w	sl, #3
 800d336:	e787      	b.n	800d248 <_scanf_float+0x188>
 800d338:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d33c:	4639      	mov	r1, r7
 800d33e:	4640      	mov	r0, r8
 800d340:	4798      	blx	r3
 800d342:	2800      	cmp	r0, #0
 800d344:	f43f aedf 	beq.w	800d106 <_scanf_float+0x46>
 800d348:	e6ea      	b.n	800d120 <_scanf_float+0x60>
 800d34a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d34e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d352:	463a      	mov	r2, r7
 800d354:	4640      	mov	r0, r8
 800d356:	4798      	blx	r3
 800d358:	6923      	ldr	r3, [r4, #16]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	6123      	str	r3, [r4, #16]
 800d35e:	e6ec      	b.n	800d13a <_scanf_float+0x7a>
 800d360:	1e6b      	subs	r3, r5, #1
 800d362:	2b06      	cmp	r3, #6
 800d364:	d825      	bhi.n	800d3b2 <_scanf_float+0x2f2>
 800d366:	2d02      	cmp	r5, #2
 800d368:	d836      	bhi.n	800d3d8 <_scanf_float+0x318>
 800d36a:	455e      	cmp	r6, fp
 800d36c:	f67f aee8 	bls.w	800d140 <_scanf_float+0x80>
 800d370:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d374:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d378:	463a      	mov	r2, r7
 800d37a:	4640      	mov	r0, r8
 800d37c:	4798      	blx	r3
 800d37e:	6923      	ldr	r3, [r4, #16]
 800d380:	3b01      	subs	r3, #1
 800d382:	6123      	str	r3, [r4, #16]
 800d384:	e7f1      	b.n	800d36a <_scanf_float+0x2aa>
 800d386:	9802      	ldr	r0, [sp, #8]
 800d388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d38c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d390:	9002      	str	r0, [sp, #8]
 800d392:	463a      	mov	r2, r7
 800d394:	4640      	mov	r0, r8
 800d396:	4798      	blx	r3
 800d398:	6923      	ldr	r3, [r4, #16]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	6123      	str	r3, [r4, #16]
 800d39e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3a2:	fa5f fa8a 	uxtb.w	sl, sl
 800d3a6:	f1ba 0f02 	cmp.w	sl, #2
 800d3aa:	d1ec      	bne.n	800d386 <_scanf_float+0x2c6>
 800d3ac:	3d03      	subs	r5, #3
 800d3ae:	b2ed      	uxtb	r5, r5
 800d3b0:	1b76      	subs	r6, r6, r5
 800d3b2:	6823      	ldr	r3, [r4, #0]
 800d3b4:	05da      	lsls	r2, r3, #23
 800d3b6:	d52f      	bpl.n	800d418 <_scanf_float+0x358>
 800d3b8:	055b      	lsls	r3, r3, #21
 800d3ba:	d510      	bpl.n	800d3de <_scanf_float+0x31e>
 800d3bc:	455e      	cmp	r6, fp
 800d3be:	f67f aebf 	bls.w	800d140 <_scanf_float+0x80>
 800d3c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d3ca:	463a      	mov	r2, r7
 800d3cc:	4640      	mov	r0, r8
 800d3ce:	4798      	blx	r3
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	3b01      	subs	r3, #1
 800d3d4:	6123      	str	r3, [r4, #16]
 800d3d6:	e7f1      	b.n	800d3bc <_scanf_float+0x2fc>
 800d3d8:	46aa      	mov	sl, r5
 800d3da:	9602      	str	r6, [sp, #8]
 800d3dc:	e7df      	b.n	800d39e <_scanf_float+0x2de>
 800d3de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d3e2:	6923      	ldr	r3, [r4, #16]
 800d3e4:	2965      	cmp	r1, #101	; 0x65
 800d3e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d3ea:	f106 35ff 	add.w	r5, r6, #4294967295
 800d3ee:	6123      	str	r3, [r4, #16]
 800d3f0:	d00c      	beq.n	800d40c <_scanf_float+0x34c>
 800d3f2:	2945      	cmp	r1, #69	; 0x45
 800d3f4:	d00a      	beq.n	800d40c <_scanf_float+0x34c>
 800d3f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3fa:	463a      	mov	r2, r7
 800d3fc:	4640      	mov	r0, r8
 800d3fe:	4798      	blx	r3
 800d400:	6923      	ldr	r3, [r4, #16]
 800d402:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d406:	3b01      	subs	r3, #1
 800d408:	1eb5      	subs	r5, r6, #2
 800d40a:	6123      	str	r3, [r4, #16]
 800d40c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d410:	463a      	mov	r2, r7
 800d412:	4640      	mov	r0, r8
 800d414:	4798      	blx	r3
 800d416:	462e      	mov	r6, r5
 800d418:	6825      	ldr	r5, [r4, #0]
 800d41a:	f015 0510 	ands.w	r5, r5, #16
 800d41e:	d159      	bne.n	800d4d4 <_scanf_float+0x414>
 800d420:	7035      	strb	r5, [r6, #0]
 800d422:	6823      	ldr	r3, [r4, #0]
 800d424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d42c:	d11b      	bne.n	800d466 <_scanf_float+0x3a6>
 800d42e:	9b01      	ldr	r3, [sp, #4]
 800d430:	454b      	cmp	r3, r9
 800d432:	eba3 0209 	sub.w	r2, r3, r9
 800d436:	d123      	bne.n	800d480 <_scanf_float+0x3c0>
 800d438:	2200      	movs	r2, #0
 800d43a:	4659      	mov	r1, fp
 800d43c:	4640      	mov	r0, r8
 800d43e:	f000 fe99 	bl	800e174 <_strtod_r>
 800d442:	6822      	ldr	r2, [r4, #0]
 800d444:	9b03      	ldr	r3, [sp, #12]
 800d446:	f012 0f02 	tst.w	r2, #2
 800d44a:	ec57 6b10 	vmov	r6, r7, d0
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	d021      	beq.n	800d496 <_scanf_float+0x3d6>
 800d452:	9903      	ldr	r1, [sp, #12]
 800d454:	1d1a      	adds	r2, r3, #4
 800d456:	600a      	str	r2, [r1, #0]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	e9c3 6700 	strd	r6, r7, [r3]
 800d45e:	68e3      	ldr	r3, [r4, #12]
 800d460:	3301      	adds	r3, #1
 800d462:	60e3      	str	r3, [r4, #12]
 800d464:	e66d      	b.n	800d142 <_scanf_float+0x82>
 800d466:	9b04      	ldr	r3, [sp, #16]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d0e5      	beq.n	800d438 <_scanf_float+0x378>
 800d46c:	9905      	ldr	r1, [sp, #20]
 800d46e:	230a      	movs	r3, #10
 800d470:	462a      	mov	r2, r5
 800d472:	3101      	adds	r1, #1
 800d474:	4640      	mov	r0, r8
 800d476:	f000 ff05 	bl	800e284 <_strtol_r>
 800d47a:	9b04      	ldr	r3, [sp, #16]
 800d47c:	9e05      	ldr	r6, [sp, #20]
 800d47e:	1ac2      	subs	r2, r0, r3
 800d480:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d484:	429e      	cmp	r6, r3
 800d486:	bf28      	it	cs
 800d488:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d48c:	4912      	ldr	r1, [pc, #72]	; (800d4d8 <_scanf_float+0x418>)
 800d48e:	4630      	mov	r0, r6
 800d490:	f000 f82c 	bl	800d4ec <siprintf>
 800d494:	e7d0      	b.n	800d438 <_scanf_float+0x378>
 800d496:	9903      	ldr	r1, [sp, #12]
 800d498:	f012 0f04 	tst.w	r2, #4
 800d49c:	f103 0204 	add.w	r2, r3, #4
 800d4a0:	600a      	str	r2, [r1, #0]
 800d4a2:	d1d9      	bne.n	800d458 <_scanf_float+0x398>
 800d4a4:	f8d3 8000 	ldr.w	r8, [r3]
 800d4a8:	ee10 2a10 	vmov	r2, s0
 800d4ac:	ee10 0a10 	vmov	r0, s0
 800d4b0:	463b      	mov	r3, r7
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f7f3 fb12 	bl	8000adc <__aeabi_dcmpun>
 800d4b8:	b128      	cbz	r0, 800d4c6 <_scanf_float+0x406>
 800d4ba:	4808      	ldr	r0, [pc, #32]	; (800d4dc <_scanf_float+0x41c>)
 800d4bc:	f000 f810 	bl	800d4e0 <nanf>
 800d4c0:	ed88 0a00 	vstr	s0, [r8]
 800d4c4:	e7cb      	b.n	800d45e <_scanf_float+0x39e>
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	4639      	mov	r1, r7
 800d4ca:	f7f3 fb65 	bl	8000b98 <__aeabi_d2f>
 800d4ce:	f8c8 0000 	str.w	r0, [r8]
 800d4d2:	e7c4      	b.n	800d45e <_scanf_float+0x39e>
 800d4d4:	2500      	movs	r5, #0
 800d4d6:	e634      	b.n	800d142 <_scanf_float+0x82>
 800d4d8:	08011264 	.word	0x08011264
 800d4dc:	08011670 	.word	0x08011670

0800d4e0 <nanf>:
 800d4e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d4e8 <nanf+0x8>
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	7fc00000 	.word	0x7fc00000

0800d4ec <siprintf>:
 800d4ec:	b40e      	push	{r1, r2, r3}
 800d4ee:	b500      	push	{lr}
 800d4f0:	b09c      	sub	sp, #112	; 0x70
 800d4f2:	ab1d      	add	r3, sp, #116	; 0x74
 800d4f4:	9002      	str	r0, [sp, #8]
 800d4f6:	9006      	str	r0, [sp, #24]
 800d4f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d4fc:	4809      	ldr	r0, [pc, #36]	; (800d524 <siprintf+0x38>)
 800d4fe:	9107      	str	r1, [sp, #28]
 800d500:	9104      	str	r1, [sp, #16]
 800d502:	4909      	ldr	r1, [pc, #36]	; (800d528 <siprintf+0x3c>)
 800d504:	f853 2b04 	ldr.w	r2, [r3], #4
 800d508:	9105      	str	r1, [sp, #20]
 800d50a:	6800      	ldr	r0, [r0, #0]
 800d50c:	9301      	str	r3, [sp, #4]
 800d50e:	a902      	add	r1, sp, #8
 800d510:	f002 fef0 	bl	80102f4 <_svfiprintf_r>
 800d514:	9b02      	ldr	r3, [sp, #8]
 800d516:	2200      	movs	r2, #0
 800d518:	701a      	strb	r2, [r3, #0]
 800d51a:	b01c      	add	sp, #112	; 0x70
 800d51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d520:	b003      	add	sp, #12
 800d522:	4770      	bx	lr
 800d524:	20000190 	.word	0x20000190
 800d528:	ffff0208 	.word	0xffff0208

0800d52c <sulp>:
 800d52c:	b570      	push	{r4, r5, r6, lr}
 800d52e:	4604      	mov	r4, r0
 800d530:	460d      	mov	r5, r1
 800d532:	ec45 4b10 	vmov	d0, r4, r5
 800d536:	4616      	mov	r6, r2
 800d538:	f002 fc3a 	bl	800fdb0 <__ulp>
 800d53c:	ec51 0b10 	vmov	r0, r1, d0
 800d540:	b17e      	cbz	r6, 800d562 <sulp+0x36>
 800d542:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d546:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	dd09      	ble.n	800d562 <sulp+0x36>
 800d54e:	051b      	lsls	r3, r3, #20
 800d550:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d554:	2400      	movs	r4, #0
 800d556:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d55a:	4622      	mov	r2, r4
 800d55c:	462b      	mov	r3, r5
 800d55e:	f7f3 f823 	bl	80005a8 <__aeabi_dmul>
 800d562:	bd70      	pop	{r4, r5, r6, pc}
 800d564:	0000      	movs	r0, r0
	...

0800d568 <_strtod_l>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	ed2d 8b02 	vpush	{d8}
 800d570:	b09d      	sub	sp, #116	; 0x74
 800d572:	461f      	mov	r7, r3
 800d574:	2300      	movs	r3, #0
 800d576:	9318      	str	r3, [sp, #96]	; 0x60
 800d578:	4ba2      	ldr	r3, [pc, #648]	; (800d804 <_strtod_l+0x29c>)
 800d57a:	9213      	str	r2, [sp, #76]	; 0x4c
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	9305      	str	r3, [sp, #20]
 800d580:	4604      	mov	r4, r0
 800d582:	4618      	mov	r0, r3
 800d584:	4688      	mov	r8, r1
 800d586:	f7f2 fdfb 	bl	8000180 <strlen>
 800d58a:	f04f 0a00 	mov.w	sl, #0
 800d58e:	4605      	mov	r5, r0
 800d590:	f04f 0b00 	mov.w	fp, #0
 800d594:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d59a:	781a      	ldrb	r2, [r3, #0]
 800d59c:	2a2b      	cmp	r2, #43	; 0x2b
 800d59e:	d04e      	beq.n	800d63e <_strtod_l+0xd6>
 800d5a0:	d83b      	bhi.n	800d61a <_strtod_l+0xb2>
 800d5a2:	2a0d      	cmp	r2, #13
 800d5a4:	d834      	bhi.n	800d610 <_strtod_l+0xa8>
 800d5a6:	2a08      	cmp	r2, #8
 800d5a8:	d834      	bhi.n	800d614 <_strtod_l+0xac>
 800d5aa:	2a00      	cmp	r2, #0
 800d5ac:	d03e      	beq.n	800d62c <_strtod_l+0xc4>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	930a      	str	r3, [sp, #40]	; 0x28
 800d5b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d5b4:	7833      	ldrb	r3, [r6, #0]
 800d5b6:	2b30      	cmp	r3, #48	; 0x30
 800d5b8:	f040 80b0 	bne.w	800d71c <_strtod_l+0x1b4>
 800d5bc:	7873      	ldrb	r3, [r6, #1]
 800d5be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d5c2:	2b58      	cmp	r3, #88	; 0x58
 800d5c4:	d168      	bne.n	800d698 <_strtod_l+0x130>
 800d5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5c8:	9301      	str	r3, [sp, #4]
 800d5ca:	ab18      	add	r3, sp, #96	; 0x60
 800d5cc:	9702      	str	r7, [sp, #8]
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	4a8d      	ldr	r2, [pc, #564]	; (800d808 <_strtod_l+0x2a0>)
 800d5d2:	ab19      	add	r3, sp, #100	; 0x64
 800d5d4:	a917      	add	r1, sp, #92	; 0x5c
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	f001 fd44 	bl	800f064 <__gethex>
 800d5dc:	f010 0707 	ands.w	r7, r0, #7
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	d005      	beq.n	800d5f0 <_strtod_l+0x88>
 800d5e4:	2f06      	cmp	r7, #6
 800d5e6:	d12c      	bne.n	800d642 <_strtod_l+0xda>
 800d5e8:	3601      	adds	r6, #1
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	9617      	str	r6, [sp, #92]	; 0x5c
 800d5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d5f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f040 8590 	bne.w	800e118 <_strtod_l+0xbb0>
 800d5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5fa:	b1eb      	cbz	r3, 800d638 <_strtod_l+0xd0>
 800d5fc:	4652      	mov	r2, sl
 800d5fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d602:	ec43 2b10 	vmov	d0, r2, r3
 800d606:	b01d      	add	sp, #116	; 0x74
 800d608:	ecbd 8b02 	vpop	{d8}
 800d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d610:	2a20      	cmp	r2, #32
 800d612:	d1cc      	bne.n	800d5ae <_strtod_l+0x46>
 800d614:	3301      	adds	r3, #1
 800d616:	9317      	str	r3, [sp, #92]	; 0x5c
 800d618:	e7be      	b.n	800d598 <_strtod_l+0x30>
 800d61a:	2a2d      	cmp	r2, #45	; 0x2d
 800d61c:	d1c7      	bne.n	800d5ae <_strtod_l+0x46>
 800d61e:	2201      	movs	r2, #1
 800d620:	920a      	str	r2, [sp, #40]	; 0x28
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	9217      	str	r2, [sp, #92]	; 0x5c
 800d626:	785b      	ldrb	r3, [r3, #1]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1c2      	bne.n	800d5b2 <_strtod_l+0x4a>
 800d62c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d62e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d632:	2b00      	cmp	r3, #0
 800d634:	f040 856e 	bne.w	800e114 <_strtod_l+0xbac>
 800d638:	4652      	mov	r2, sl
 800d63a:	465b      	mov	r3, fp
 800d63c:	e7e1      	b.n	800d602 <_strtod_l+0x9a>
 800d63e:	2200      	movs	r2, #0
 800d640:	e7ee      	b.n	800d620 <_strtod_l+0xb8>
 800d642:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d644:	b13a      	cbz	r2, 800d656 <_strtod_l+0xee>
 800d646:	2135      	movs	r1, #53	; 0x35
 800d648:	a81a      	add	r0, sp, #104	; 0x68
 800d64a:	f002 fcbc 	bl	800ffc6 <__copybits>
 800d64e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d650:	4620      	mov	r0, r4
 800d652:	f002 f87b 	bl	800f74c <_Bfree>
 800d656:	3f01      	subs	r7, #1
 800d658:	2f04      	cmp	r7, #4
 800d65a:	d806      	bhi.n	800d66a <_strtod_l+0x102>
 800d65c:	e8df f007 	tbb	[pc, r7]
 800d660:	1714030a 	.word	0x1714030a
 800d664:	0a          	.byte	0x0a
 800d665:	00          	.byte	0x00
 800d666:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d66a:	0728      	lsls	r0, r5, #28
 800d66c:	d5c0      	bpl.n	800d5f0 <_strtod_l+0x88>
 800d66e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d672:	e7bd      	b.n	800d5f0 <_strtod_l+0x88>
 800d674:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d678:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d67a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d67e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d682:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d686:	e7f0      	b.n	800d66a <_strtod_l+0x102>
 800d688:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d80c <_strtod_l+0x2a4>
 800d68c:	e7ed      	b.n	800d66a <_strtod_l+0x102>
 800d68e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d692:	f04f 3aff 	mov.w	sl, #4294967295
 800d696:	e7e8      	b.n	800d66a <_strtod_l+0x102>
 800d698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d69a:	1c5a      	adds	r2, r3, #1
 800d69c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d69e:	785b      	ldrb	r3, [r3, #1]
 800d6a0:	2b30      	cmp	r3, #48	; 0x30
 800d6a2:	d0f9      	beq.n	800d698 <_strtod_l+0x130>
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d0a3      	beq.n	800d5f0 <_strtod_l+0x88>
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	f04f 0900 	mov.w	r9, #0
 800d6ae:	9304      	str	r3, [sp, #16]
 800d6b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6b2:	9308      	str	r3, [sp, #32]
 800d6b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d6b8:	464f      	mov	r7, r9
 800d6ba:	220a      	movs	r2, #10
 800d6bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d6be:	7806      	ldrb	r6, [r0, #0]
 800d6c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d6c4:	b2d9      	uxtb	r1, r3
 800d6c6:	2909      	cmp	r1, #9
 800d6c8:	d92a      	bls.n	800d720 <_strtod_l+0x1b8>
 800d6ca:	9905      	ldr	r1, [sp, #20]
 800d6cc:	462a      	mov	r2, r5
 800d6ce:	f002 ff2b 	bl	8010528 <strncmp>
 800d6d2:	b398      	cbz	r0, 800d73c <_strtod_l+0x1d4>
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	4632      	mov	r2, r6
 800d6d8:	463d      	mov	r5, r7
 800d6da:	9005      	str	r0, [sp, #20]
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2a65      	cmp	r2, #101	; 0x65
 800d6e0:	d001      	beq.n	800d6e6 <_strtod_l+0x17e>
 800d6e2:	2a45      	cmp	r2, #69	; 0x45
 800d6e4:	d118      	bne.n	800d718 <_strtod_l+0x1b0>
 800d6e6:	b91d      	cbnz	r5, 800d6f0 <_strtod_l+0x188>
 800d6e8:	9a04      	ldr	r2, [sp, #16]
 800d6ea:	4302      	orrs	r2, r0
 800d6ec:	d09e      	beq.n	800d62c <_strtod_l+0xc4>
 800d6ee:	2500      	movs	r5, #0
 800d6f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d6f4:	f108 0201 	add.w	r2, r8, #1
 800d6f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d6fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d6fe:	2a2b      	cmp	r2, #43	; 0x2b
 800d700:	d075      	beq.n	800d7ee <_strtod_l+0x286>
 800d702:	2a2d      	cmp	r2, #45	; 0x2d
 800d704:	d07b      	beq.n	800d7fe <_strtod_l+0x296>
 800d706:	f04f 0c00 	mov.w	ip, #0
 800d70a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d70e:	2909      	cmp	r1, #9
 800d710:	f240 8082 	bls.w	800d818 <_strtod_l+0x2b0>
 800d714:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d718:	2600      	movs	r6, #0
 800d71a:	e09d      	b.n	800d858 <_strtod_l+0x2f0>
 800d71c:	2300      	movs	r3, #0
 800d71e:	e7c4      	b.n	800d6aa <_strtod_l+0x142>
 800d720:	2f08      	cmp	r7, #8
 800d722:	bfd8      	it	le
 800d724:	9907      	ldrle	r1, [sp, #28]
 800d726:	f100 0001 	add.w	r0, r0, #1
 800d72a:	bfda      	itte	le
 800d72c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d730:	9307      	strle	r3, [sp, #28]
 800d732:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d736:	3701      	adds	r7, #1
 800d738:	9017      	str	r0, [sp, #92]	; 0x5c
 800d73a:	e7bf      	b.n	800d6bc <_strtod_l+0x154>
 800d73c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d73e:	195a      	adds	r2, r3, r5
 800d740:	9217      	str	r2, [sp, #92]	; 0x5c
 800d742:	5d5a      	ldrb	r2, [r3, r5]
 800d744:	2f00      	cmp	r7, #0
 800d746:	d037      	beq.n	800d7b8 <_strtod_l+0x250>
 800d748:	9005      	str	r0, [sp, #20]
 800d74a:	463d      	mov	r5, r7
 800d74c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d750:	2b09      	cmp	r3, #9
 800d752:	d912      	bls.n	800d77a <_strtod_l+0x212>
 800d754:	2301      	movs	r3, #1
 800d756:	e7c2      	b.n	800d6de <_strtod_l+0x176>
 800d758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d75a:	1c5a      	adds	r2, r3, #1
 800d75c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d75e:	785a      	ldrb	r2, [r3, #1]
 800d760:	3001      	adds	r0, #1
 800d762:	2a30      	cmp	r2, #48	; 0x30
 800d764:	d0f8      	beq.n	800d758 <_strtod_l+0x1f0>
 800d766:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d76a:	2b08      	cmp	r3, #8
 800d76c:	f200 84d9 	bhi.w	800e122 <_strtod_l+0xbba>
 800d770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d772:	9005      	str	r0, [sp, #20]
 800d774:	2000      	movs	r0, #0
 800d776:	9308      	str	r3, [sp, #32]
 800d778:	4605      	mov	r5, r0
 800d77a:	3a30      	subs	r2, #48	; 0x30
 800d77c:	f100 0301 	add.w	r3, r0, #1
 800d780:	d014      	beq.n	800d7ac <_strtod_l+0x244>
 800d782:	9905      	ldr	r1, [sp, #20]
 800d784:	4419      	add	r1, r3
 800d786:	9105      	str	r1, [sp, #20]
 800d788:	462b      	mov	r3, r5
 800d78a:	eb00 0e05 	add.w	lr, r0, r5
 800d78e:	210a      	movs	r1, #10
 800d790:	4573      	cmp	r3, lr
 800d792:	d113      	bne.n	800d7bc <_strtod_l+0x254>
 800d794:	182b      	adds	r3, r5, r0
 800d796:	2b08      	cmp	r3, #8
 800d798:	f105 0501 	add.w	r5, r5, #1
 800d79c:	4405      	add	r5, r0
 800d79e:	dc1c      	bgt.n	800d7da <_strtod_l+0x272>
 800d7a0:	9907      	ldr	r1, [sp, #28]
 800d7a2:	230a      	movs	r3, #10
 800d7a4:	fb03 2301 	mla	r3, r3, r1, r2
 800d7a8:	9307      	str	r3, [sp, #28]
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d7ae:	1c51      	adds	r1, r2, #1
 800d7b0:	9117      	str	r1, [sp, #92]	; 0x5c
 800d7b2:	7852      	ldrb	r2, [r2, #1]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	e7c9      	b.n	800d74c <_strtod_l+0x1e4>
 800d7b8:	4638      	mov	r0, r7
 800d7ba:	e7d2      	b.n	800d762 <_strtod_l+0x1fa>
 800d7bc:	2b08      	cmp	r3, #8
 800d7be:	dc04      	bgt.n	800d7ca <_strtod_l+0x262>
 800d7c0:	9e07      	ldr	r6, [sp, #28]
 800d7c2:	434e      	muls	r6, r1
 800d7c4:	9607      	str	r6, [sp, #28]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	e7e2      	b.n	800d790 <_strtod_l+0x228>
 800d7ca:	f103 0c01 	add.w	ip, r3, #1
 800d7ce:	f1bc 0f10 	cmp.w	ip, #16
 800d7d2:	bfd8      	it	le
 800d7d4:	fb01 f909 	mulle.w	r9, r1, r9
 800d7d8:	e7f5      	b.n	800d7c6 <_strtod_l+0x25e>
 800d7da:	2d10      	cmp	r5, #16
 800d7dc:	bfdc      	itt	le
 800d7de:	230a      	movle	r3, #10
 800d7e0:	fb03 2909 	mlale	r9, r3, r9, r2
 800d7e4:	e7e1      	b.n	800d7aa <_strtod_l+0x242>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	9305      	str	r3, [sp, #20]
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e77c      	b.n	800d6e8 <_strtod_l+0x180>
 800d7ee:	f04f 0c00 	mov.w	ip, #0
 800d7f2:	f108 0202 	add.w	r2, r8, #2
 800d7f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800d7f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d7fc:	e785      	b.n	800d70a <_strtod_l+0x1a2>
 800d7fe:	f04f 0c01 	mov.w	ip, #1
 800d802:	e7f6      	b.n	800d7f2 <_strtod_l+0x28a>
 800d804:	080114b8 	.word	0x080114b8
 800d808:	0801126c 	.word	0x0801126c
 800d80c:	7ff00000 	.word	0x7ff00000
 800d810:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d812:	1c51      	adds	r1, r2, #1
 800d814:	9117      	str	r1, [sp, #92]	; 0x5c
 800d816:	7852      	ldrb	r2, [r2, #1]
 800d818:	2a30      	cmp	r2, #48	; 0x30
 800d81a:	d0f9      	beq.n	800d810 <_strtod_l+0x2a8>
 800d81c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d820:	2908      	cmp	r1, #8
 800d822:	f63f af79 	bhi.w	800d718 <_strtod_l+0x1b0>
 800d826:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d82a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d82c:	9206      	str	r2, [sp, #24]
 800d82e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d830:	1c51      	adds	r1, r2, #1
 800d832:	9117      	str	r1, [sp, #92]	; 0x5c
 800d834:	7852      	ldrb	r2, [r2, #1]
 800d836:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d83a:	2e09      	cmp	r6, #9
 800d83c:	d937      	bls.n	800d8ae <_strtod_l+0x346>
 800d83e:	9e06      	ldr	r6, [sp, #24]
 800d840:	1b89      	subs	r1, r1, r6
 800d842:	2908      	cmp	r1, #8
 800d844:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d848:	dc02      	bgt.n	800d850 <_strtod_l+0x2e8>
 800d84a:	4576      	cmp	r6, lr
 800d84c:	bfa8      	it	ge
 800d84e:	4676      	movge	r6, lr
 800d850:	f1bc 0f00 	cmp.w	ip, #0
 800d854:	d000      	beq.n	800d858 <_strtod_l+0x2f0>
 800d856:	4276      	negs	r6, r6
 800d858:	2d00      	cmp	r5, #0
 800d85a:	d14d      	bne.n	800d8f8 <_strtod_l+0x390>
 800d85c:	9904      	ldr	r1, [sp, #16]
 800d85e:	4301      	orrs	r1, r0
 800d860:	f47f aec6 	bne.w	800d5f0 <_strtod_l+0x88>
 800d864:	2b00      	cmp	r3, #0
 800d866:	f47f aee1 	bne.w	800d62c <_strtod_l+0xc4>
 800d86a:	2a69      	cmp	r2, #105	; 0x69
 800d86c:	d027      	beq.n	800d8be <_strtod_l+0x356>
 800d86e:	dc24      	bgt.n	800d8ba <_strtod_l+0x352>
 800d870:	2a49      	cmp	r2, #73	; 0x49
 800d872:	d024      	beq.n	800d8be <_strtod_l+0x356>
 800d874:	2a4e      	cmp	r2, #78	; 0x4e
 800d876:	f47f aed9 	bne.w	800d62c <_strtod_l+0xc4>
 800d87a:	499f      	ldr	r1, [pc, #636]	; (800daf8 <_strtod_l+0x590>)
 800d87c:	a817      	add	r0, sp, #92	; 0x5c
 800d87e:	f001 fe49 	bl	800f514 <__match>
 800d882:	2800      	cmp	r0, #0
 800d884:	f43f aed2 	beq.w	800d62c <_strtod_l+0xc4>
 800d888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b28      	cmp	r3, #40	; 0x28
 800d88e:	d12d      	bne.n	800d8ec <_strtod_l+0x384>
 800d890:	499a      	ldr	r1, [pc, #616]	; (800dafc <_strtod_l+0x594>)
 800d892:	aa1a      	add	r2, sp, #104	; 0x68
 800d894:	a817      	add	r0, sp, #92	; 0x5c
 800d896:	f001 fe51 	bl	800f53c <__hexnan>
 800d89a:	2805      	cmp	r0, #5
 800d89c:	d126      	bne.n	800d8ec <_strtod_l+0x384>
 800d89e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d8a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d8a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d8ac:	e6a0      	b.n	800d5f0 <_strtod_l+0x88>
 800d8ae:	210a      	movs	r1, #10
 800d8b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d8b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d8b8:	e7b9      	b.n	800d82e <_strtod_l+0x2c6>
 800d8ba:	2a6e      	cmp	r2, #110	; 0x6e
 800d8bc:	e7db      	b.n	800d876 <_strtod_l+0x30e>
 800d8be:	4990      	ldr	r1, [pc, #576]	; (800db00 <_strtod_l+0x598>)
 800d8c0:	a817      	add	r0, sp, #92	; 0x5c
 800d8c2:	f001 fe27 	bl	800f514 <__match>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	f43f aeb0 	beq.w	800d62c <_strtod_l+0xc4>
 800d8cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8ce:	498d      	ldr	r1, [pc, #564]	; (800db04 <_strtod_l+0x59c>)
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	a817      	add	r0, sp, #92	; 0x5c
 800d8d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d8d6:	f001 fe1d 	bl	800f514 <__match>
 800d8da:	b910      	cbnz	r0, 800d8e2 <_strtod_l+0x37a>
 800d8dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8de:	3301      	adds	r3, #1
 800d8e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d8e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800db14 <_strtod_l+0x5ac>
 800d8e6:	f04f 0a00 	mov.w	sl, #0
 800d8ea:	e681      	b.n	800d5f0 <_strtod_l+0x88>
 800d8ec:	4886      	ldr	r0, [pc, #536]	; (800db08 <_strtod_l+0x5a0>)
 800d8ee:	f002 fe03 	bl	80104f8 <nan>
 800d8f2:	ec5b ab10 	vmov	sl, fp, d0
 800d8f6:	e67b      	b.n	800d5f0 <_strtod_l+0x88>
 800d8f8:	9b05      	ldr	r3, [sp, #20]
 800d8fa:	9807      	ldr	r0, [sp, #28]
 800d8fc:	1af3      	subs	r3, r6, r3
 800d8fe:	2f00      	cmp	r7, #0
 800d900:	bf08      	it	eq
 800d902:	462f      	moveq	r7, r5
 800d904:	2d10      	cmp	r5, #16
 800d906:	9306      	str	r3, [sp, #24]
 800d908:	46a8      	mov	r8, r5
 800d90a:	bfa8      	it	ge
 800d90c:	f04f 0810 	movge.w	r8, #16
 800d910:	f7f2 fdd0 	bl	80004b4 <__aeabi_ui2d>
 800d914:	2d09      	cmp	r5, #9
 800d916:	4682      	mov	sl, r0
 800d918:	468b      	mov	fp, r1
 800d91a:	dd13      	ble.n	800d944 <_strtod_l+0x3dc>
 800d91c:	4b7b      	ldr	r3, [pc, #492]	; (800db0c <_strtod_l+0x5a4>)
 800d91e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d922:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d926:	f7f2 fe3f 	bl	80005a8 <__aeabi_dmul>
 800d92a:	4682      	mov	sl, r0
 800d92c:	4648      	mov	r0, r9
 800d92e:	468b      	mov	fp, r1
 800d930:	f7f2 fdc0 	bl	80004b4 <__aeabi_ui2d>
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	4650      	mov	r0, sl
 800d93a:	4659      	mov	r1, fp
 800d93c:	f7f2 fc7e 	bl	800023c <__adddf3>
 800d940:	4682      	mov	sl, r0
 800d942:	468b      	mov	fp, r1
 800d944:	2d0f      	cmp	r5, #15
 800d946:	dc38      	bgt.n	800d9ba <_strtod_l+0x452>
 800d948:	9b06      	ldr	r3, [sp, #24]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	f43f ae50 	beq.w	800d5f0 <_strtod_l+0x88>
 800d950:	dd24      	ble.n	800d99c <_strtod_l+0x434>
 800d952:	2b16      	cmp	r3, #22
 800d954:	dc0b      	bgt.n	800d96e <_strtod_l+0x406>
 800d956:	496d      	ldr	r1, [pc, #436]	; (800db0c <_strtod_l+0x5a4>)
 800d958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d960:	4652      	mov	r2, sl
 800d962:	465b      	mov	r3, fp
 800d964:	f7f2 fe20 	bl	80005a8 <__aeabi_dmul>
 800d968:	4682      	mov	sl, r0
 800d96a:	468b      	mov	fp, r1
 800d96c:	e640      	b.n	800d5f0 <_strtod_l+0x88>
 800d96e:	9a06      	ldr	r2, [sp, #24]
 800d970:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d974:	4293      	cmp	r3, r2
 800d976:	db20      	blt.n	800d9ba <_strtod_l+0x452>
 800d978:	4c64      	ldr	r4, [pc, #400]	; (800db0c <_strtod_l+0x5a4>)
 800d97a:	f1c5 050f 	rsb	r5, r5, #15
 800d97e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d982:	4652      	mov	r2, sl
 800d984:	465b      	mov	r3, fp
 800d986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d98a:	f7f2 fe0d 	bl	80005a8 <__aeabi_dmul>
 800d98e:	9b06      	ldr	r3, [sp, #24]
 800d990:	1b5d      	subs	r5, r3, r5
 800d992:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d996:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d99a:	e7e3      	b.n	800d964 <_strtod_l+0x3fc>
 800d99c:	9b06      	ldr	r3, [sp, #24]
 800d99e:	3316      	adds	r3, #22
 800d9a0:	db0b      	blt.n	800d9ba <_strtod_l+0x452>
 800d9a2:	9b05      	ldr	r3, [sp, #20]
 800d9a4:	1b9e      	subs	r6, r3, r6
 800d9a6:	4b59      	ldr	r3, [pc, #356]	; (800db0c <_strtod_l+0x5a4>)
 800d9a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d9ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d9b0:	4650      	mov	r0, sl
 800d9b2:	4659      	mov	r1, fp
 800d9b4:	f7f2 ff22 	bl	80007fc <__aeabi_ddiv>
 800d9b8:	e7d6      	b.n	800d968 <_strtod_l+0x400>
 800d9ba:	9b06      	ldr	r3, [sp, #24]
 800d9bc:	eba5 0808 	sub.w	r8, r5, r8
 800d9c0:	4498      	add	r8, r3
 800d9c2:	f1b8 0f00 	cmp.w	r8, #0
 800d9c6:	dd74      	ble.n	800dab2 <_strtod_l+0x54a>
 800d9c8:	f018 030f 	ands.w	r3, r8, #15
 800d9cc:	d00a      	beq.n	800d9e4 <_strtod_l+0x47c>
 800d9ce:	494f      	ldr	r1, [pc, #316]	; (800db0c <_strtod_l+0x5a4>)
 800d9d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d9d4:	4652      	mov	r2, sl
 800d9d6:	465b      	mov	r3, fp
 800d9d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9dc:	f7f2 fde4 	bl	80005a8 <__aeabi_dmul>
 800d9e0:	4682      	mov	sl, r0
 800d9e2:	468b      	mov	fp, r1
 800d9e4:	f038 080f 	bics.w	r8, r8, #15
 800d9e8:	d04f      	beq.n	800da8a <_strtod_l+0x522>
 800d9ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d9ee:	dd22      	ble.n	800da36 <_strtod_l+0x4ce>
 800d9f0:	2500      	movs	r5, #0
 800d9f2:	462e      	mov	r6, r5
 800d9f4:	9507      	str	r5, [sp, #28]
 800d9f6:	9505      	str	r5, [sp, #20]
 800d9f8:	2322      	movs	r3, #34	; 0x22
 800d9fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800db14 <_strtod_l+0x5ac>
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	f04f 0a00 	mov.w	sl, #0
 800da04:	9b07      	ldr	r3, [sp, #28]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f43f adf2 	beq.w	800d5f0 <_strtod_l+0x88>
 800da0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da0e:	4620      	mov	r0, r4
 800da10:	f001 fe9c 	bl	800f74c <_Bfree>
 800da14:	9905      	ldr	r1, [sp, #20]
 800da16:	4620      	mov	r0, r4
 800da18:	f001 fe98 	bl	800f74c <_Bfree>
 800da1c:	4631      	mov	r1, r6
 800da1e:	4620      	mov	r0, r4
 800da20:	f001 fe94 	bl	800f74c <_Bfree>
 800da24:	9907      	ldr	r1, [sp, #28]
 800da26:	4620      	mov	r0, r4
 800da28:	f001 fe90 	bl	800f74c <_Bfree>
 800da2c:	4629      	mov	r1, r5
 800da2e:	4620      	mov	r0, r4
 800da30:	f001 fe8c 	bl	800f74c <_Bfree>
 800da34:	e5dc      	b.n	800d5f0 <_strtod_l+0x88>
 800da36:	4b36      	ldr	r3, [pc, #216]	; (800db10 <_strtod_l+0x5a8>)
 800da38:	9304      	str	r3, [sp, #16]
 800da3a:	2300      	movs	r3, #0
 800da3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800da40:	4650      	mov	r0, sl
 800da42:	4659      	mov	r1, fp
 800da44:	4699      	mov	r9, r3
 800da46:	f1b8 0f01 	cmp.w	r8, #1
 800da4a:	dc21      	bgt.n	800da90 <_strtod_l+0x528>
 800da4c:	b10b      	cbz	r3, 800da52 <_strtod_l+0x4ea>
 800da4e:	4682      	mov	sl, r0
 800da50:	468b      	mov	fp, r1
 800da52:	4b2f      	ldr	r3, [pc, #188]	; (800db10 <_strtod_l+0x5a8>)
 800da54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800da58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800da5c:	4652      	mov	r2, sl
 800da5e:	465b      	mov	r3, fp
 800da60:	e9d9 0100 	ldrd	r0, r1, [r9]
 800da64:	f7f2 fda0 	bl	80005a8 <__aeabi_dmul>
 800da68:	4b2a      	ldr	r3, [pc, #168]	; (800db14 <_strtod_l+0x5ac>)
 800da6a:	460a      	mov	r2, r1
 800da6c:	400b      	ands	r3, r1
 800da6e:	492a      	ldr	r1, [pc, #168]	; (800db18 <_strtod_l+0x5b0>)
 800da70:	428b      	cmp	r3, r1
 800da72:	4682      	mov	sl, r0
 800da74:	d8bc      	bhi.n	800d9f0 <_strtod_l+0x488>
 800da76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800da7a:	428b      	cmp	r3, r1
 800da7c:	bf86      	itte	hi
 800da7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800db1c <_strtod_l+0x5b4>
 800da82:	f04f 3aff 	movhi.w	sl, #4294967295
 800da86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800da8a:	2300      	movs	r3, #0
 800da8c:	9304      	str	r3, [sp, #16]
 800da8e:	e084      	b.n	800db9a <_strtod_l+0x632>
 800da90:	f018 0f01 	tst.w	r8, #1
 800da94:	d005      	beq.n	800daa2 <_strtod_l+0x53a>
 800da96:	9b04      	ldr	r3, [sp, #16]
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	f7f2 fd84 	bl	80005a8 <__aeabi_dmul>
 800daa0:	2301      	movs	r3, #1
 800daa2:	9a04      	ldr	r2, [sp, #16]
 800daa4:	3208      	adds	r2, #8
 800daa6:	f109 0901 	add.w	r9, r9, #1
 800daaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800daae:	9204      	str	r2, [sp, #16]
 800dab0:	e7c9      	b.n	800da46 <_strtod_l+0x4de>
 800dab2:	d0ea      	beq.n	800da8a <_strtod_l+0x522>
 800dab4:	f1c8 0800 	rsb	r8, r8, #0
 800dab8:	f018 020f 	ands.w	r2, r8, #15
 800dabc:	d00a      	beq.n	800dad4 <_strtod_l+0x56c>
 800dabe:	4b13      	ldr	r3, [pc, #76]	; (800db0c <_strtod_l+0x5a4>)
 800dac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dac4:	4650      	mov	r0, sl
 800dac6:	4659      	mov	r1, fp
 800dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dacc:	f7f2 fe96 	bl	80007fc <__aeabi_ddiv>
 800dad0:	4682      	mov	sl, r0
 800dad2:	468b      	mov	fp, r1
 800dad4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dad8:	d0d7      	beq.n	800da8a <_strtod_l+0x522>
 800dada:	f1b8 0f1f 	cmp.w	r8, #31
 800dade:	dd1f      	ble.n	800db20 <_strtod_l+0x5b8>
 800dae0:	2500      	movs	r5, #0
 800dae2:	462e      	mov	r6, r5
 800dae4:	9507      	str	r5, [sp, #28]
 800dae6:	9505      	str	r5, [sp, #20]
 800dae8:	2322      	movs	r3, #34	; 0x22
 800daea:	f04f 0a00 	mov.w	sl, #0
 800daee:	f04f 0b00 	mov.w	fp, #0
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	e786      	b.n	800da04 <_strtod_l+0x49c>
 800daf6:	bf00      	nop
 800daf8:	0801123d 	.word	0x0801123d
 800dafc:	08011280 	.word	0x08011280
 800db00:	08011235 	.word	0x08011235
 800db04:	080113c4 	.word	0x080113c4
 800db08:	08011670 	.word	0x08011670
 800db0c:	08011550 	.word	0x08011550
 800db10:	08011528 	.word	0x08011528
 800db14:	7ff00000 	.word	0x7ff00000
 800db18:	7ca00000 	.word	0x7ca00000
 800db1c:	7fefffff 	.word	0x7fefffff
 800db20:	f018 0310 	ands.w	r3, r8, #16
 800db24:	bf18      	it	ne
 800db26:	236a      	movne	r3, #106	; 0x6a
 800db28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ded8 <_strtod_l+0x970>
 800db2c:	9304      	str	r3, [sp, #16]
 800db2e:	4650      	mov	r0, sl
 800db30:	4659      	mov	r1, fp
 800db32:	2300      	movs	r3, #0
 800db34:	f018 0f01 	tst.w	r8, #1
 800db38:	d004      	beq.n	800db44 <_strtod_l+0x5dc>
 800db3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800db3e:	f7f2 fd33 	bl	80005a8 <__aeabi_dmul>
 800db42:	2301      	movs	r3, #1
 800db44:	ea5f 0868 	movs.w	r8, r8, asr #1
 800db48:	f109 0908 	add.w	r9, r9, #8
 800db4c:	d1f2      	bne.n	800db34 <_strtod_l+0x5cc>
 800db4e:	b10b      	cbz	r3, 800db54 <_strtod_l+0x5ec>
 800db50:	4682      	mov	sl, r0
 800db52:	468b      	mov	fp, r1
 800db54:	9b04      	ldr	r3, [sp, #16]
 800db56:	b1c3      	cbz	r3, 800db8a <_strtod_l+0x622>
 800db58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800db5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800db60:	2b00      	cmp	r3, #0
 800db62:	4659      	mov	r1, fp
 800db64:	dd11      	ble.n	800db8a <_strtod_l+0x622>
 800db66:	2b1f      	cmp	r3, #31
 800db68:	f340 8124 	ble.w	800ddb4 <_strtod_l+0x84c>
 800db6c:	2b34      	cmp	r3, #52	; 0x34
 800db6e:	bfde      	ittt	le
 800db70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800db74:	f04f 33ff 	movle.w	r3, #4294967295
 800db78:	fa03 f202 	lslle.w	r2, r3, r2
 800db7c:	f04f 0a00 	mov.w	sl, #0
 800db80:	bfcc      	ite	gt
 800db82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800db86:	ea02 0b01 	andle.w	fp, r2, r1
 800db8a:	2200      	movs	r2, #0
 800db8c:	2300      	movs	r3, #0
 800db8e:	4650      	mov	r0, sl
 800db90:	4659      	mov	r1, fp
 800db92:	f7f2 ff71 	bl	8000a78 <__aeabi_dcmpeq>
 800db96:	2800      	cmp	r0, #0
 800db98:	d1a2      	bne.n	800dae0 <_strtod_l+0x578>
 800db9a:	9b07      	ldr	r3, [sp, #28]
 800db9c:	9300      	str	r3, [sp, #0]
 800db9e:	9908      	ldr	r1, [sp, #32]
 800dba0:	462b      	mov	r3, r5
 800dba2:	463a      	mov	r2, r7
 800dba4:	4620      	mov	r0, r4
 800dba6:	f001 fe39 	bl	800f81c <__s2b>
 800dbaa:	9007      	str	r0, [sp, #28]
 800dbac:	2800      	cmp	r0, #0
 800dbae:	f43f af1f 	beq.w	800d9f0 <_strtod_l+0x488>
 800dbb2:	9b05      	ldr	r3, [sp, #20]
 800dbb4:	1b9e      	subs	r6, r3, r6
 800dbb6:	9b06      	ldr	r3, [sp, #24]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	bfb4      	ite	lt
 800dbbc:	4633      	movlt	r3, r6
 800dbbe:	2300      	movge	r3, #0
 800dbc0:	930c      	str	r3, [sp, #48]	; 0x30
 800dbc2:	9b06      	ldr	r3, [sp, #24]
 800dbc4:	2500      	movs	r5, #0
 800dbc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dbca:	9312      	str	r3, [sp, #72]	; 0x48
 800dbcc:	462e      	mov	r6, r5
 800dbce:	9b07      	ldr	r3, [sp, #28]
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	6859      	ldr	r1, [r3, #4]
 800dbd4:	f001 fd7a 	bl	800f6cc <_Balloc>
 800dbd8:	9005      	str	r0, [sp, #20]
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	f43f af0c 	beq.w	800d9f8 <_strtod_l+0x490>
 800dbe0:	9b07      	ldr	r3, [sp, #28]
 800dbe2:	691a      	ldr	r2, [r3, #16]
 800dbe4:	3202      	adds	r2, #2
 800dbe6:	f103 010c 	add.w	r1, r3, #12
 800dbea:	0092      	lsls	r2, r2, #2
 800dbec:	300c      	adds	r0, #12
 800dbee:	f001 fd5f 	bl	800f6b0 <memcpy>
 800dbf2:	ec4b ab10 	vmov	d0, sl, fp
 800dbf6:	aa1a      	add	r2, sp, #104	; 0x68
 800dbf8:	a919      	add	r1, sp, #100	; 0x64
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f002 f954 	bl	800fea8 <__d2b>
 800dc00:	ec4b ab18 	vmov	d8, sl, fp
 800dc04:	9018      	str	r0, [sp, #96]	; 0x60
 800dc06:	2800      	cmp	r0, #0
 800dc08:	f43f aef6 	beq.w	800d9f8 <_strtod_l+0x490>
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f001 fe9e 	bl	800f950 <__i2b>
 800dc14:	4606      	mov	r6, r0
 800dc16:	2800      	cmp	r0, #0
 800dc18:	f43f aeee 	beq.w	800d9f8 <_strtod_l+0x490>
 800dc1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc1e:	9904      	ldr	r1, [sp, #16]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	bfab      	itete	ge
 800dc24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800dc26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800dc28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800dc2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800dc2e:	bfac      	ite	ge
 800dc30:	eb03 0902 	addge.w	r9, r3, r2
 800dc34:	1ad7      	sublt	r7, r2, r3
 800dc36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dc38:	eba3 0801 	sub.w	r8, r3, r1
 800dc3c:	4490      	add	r8, r2
 800dc3e:	4ba1      	ldr	r3, [pc, #644]	; (800dec4 <_strtod_l+0x95c>)
 800dc40:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc44:	4598      	cmp	r8, r3
 800dc46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dc4a:	f280 80c7 	bge.w	800dddc <_strtod_l+0x874>
 800dc4e:	eba3 0308 	sub.w	r3, r3, r8
 800dc52:	2b1f      	cmp	r3, #31
 800dc54:	eba2 0203 	sub.w	r2, r2, r3
 800dc58:	f04f 0101 	mov.w	r1, #1
 800dc5c:	f300 80b1 	bgt.w	800ddc2 <_strtod_l+0x85a>
 800dc60:	fa01 f303 	lsl.w	r3, r1, r3
 800dc64:	930d      	str	r3, [sp, #52]	; 0x34
 800dc66:	2300      	movs	r3, #0
 800dc68:	9308      	str	r3, [sp, #32]
 800dc6a:	eb09 0802 	add.w	r8, r9, r2
 800dc6e:	9b04      	ldr	r3, [sp, #16]
 800dc70:	45c1      	cmp	r9, r8
 800dc72:	4417      	add	r7, r2
 800dc74:	441f      	add	r7, r3
 800dc76:	464b      	mov	r3, r9
 800dc78:	bfa8      	it	ge
 800dc7a:	4643      	movge	r3, r8
 800dc7c:	42bb      	cmp	r3, r7
 800dc7e:	bfa8      	it	ge
 800dc80:	463b      	movge	r3, r7
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	bfc2      	ittt	gt
 800dc86:	eba8 0803 	subgt.w	r8, r8, r3
 800dc8a:	1aff      	subgt	r7, r7, r3
 800dc8c:	eba9 0903 	subgt.w	r9, r9, r3
 800dc90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	dd17      	ble.n	800dcc6 <_strtod_l+0x75e>
 800dc96:	4631      	mov	r1, r6
 800dc98:	461a      	mov	r2, r3
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f001 ff18 	bl	800fad0 <__pow5mult>
 800dca0:	4606      	mov	r6, r0
 800dca2:	2800      	cmp	r0, #0
 800dca4:	f43f aea8 	beq.w	800d9f8 <_strtod_l+0x490>
 800dca8:	4601      	mov	r1, r0
 800dcaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dcac:	4620      	mov	r0, r4
 800dcae:	f001 fe65 	bl	800f97c <__multiply>
 800dcb2:	900b      	str	r0, [sp, #44]	; 0x2c
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	f43f ae9f 	beq.w	800d9f8 <_strtod_l+0x490>
 800dcba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f001 fd45 	bl	800f74c <_Bfree>
 800dcc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcc4:	9318      	str	r3, [sp, #96]	; 0x60
 800dcc6:	f1b8 0f00 	cmp.w	r8, #0
 800dcca:	f300 808c 	bgt.w	800dde6 <_strtod_l+0x87e>
 800dcce:	9b06      	ldr	r3, [sp, #24]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	dd08      	ble.n	800dce6 <_strtod_l+0x77e>
 800dcd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dcd6:	9905      	ldr	r1, [sp, #20]
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f001 fef9 	bl	800fad0 <__pow5mult>
 800dcde:	9005      	str	r0, [sp, #20]
 800dce0:	2800      	cmp	r0, #0
 800dce2:	f43f ae89 	beq.w	800d9f8 <_strtod_l+0x490>
 800dce6:	2f00      	cmp	r7, #0
 800dce8:	dd08      	ble.n	800dcfc <_strtod_l+0x794>
 800dcea:	9905      	ldr	r1, [sp, #20]
 800dcec:	463a      	mov	r2, r7
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f001 ff48 	bl	800fb84 <__lshift>
 800dcf4:	9005      	str	r0, [sp, #20]
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	f43f ae7e 	beq.w	800d9f8 <_strtod_l+0x490>
 800dcfc:	f1b9 0f00 	cmp.w	r9, #0
 800dd00:	dd08      	ble.n	800dd14 <_strtod_l+0x7ac>
 800dd02:	4631      	mov	r1, r6
 800dd04:	464a      	mov	r2, r9
 800dd06:	4620      	mov	r0, r4
 800dd08:	f001 ff3c 	bl	800fb84 <__lshift>
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	f43f ae72 	beq.w	800d9f8 <_strtod_l+0x490>
 800dd14:	9a05      	ldr	r2, [sp, #20]
 800dd16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f001 ffbf 	bl	800fc9c <__mdiff>
 800dd1e:	4605      	mov	r5, r0
 800dd20:	2800      	cmp	r0, #0
 800dd22:	f43f ae69 	beq.w	800d9f8 <_strtod_l+0x490>
 800dd26:	68c3      	ldr	r3, [r0, #12]
 800dd28:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	60c3      	str	r3, [r0, #12]
 800dd2e:	4631      	mov	r1, r6
 800dd30:	f001 ff98 	bl	800fc64 <__mcmp>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	da60      	bge.n	800ddfa <_strtod_l+0x892>
 800dd38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd3a:	ea53 030a 	orrs.w	r3, r3, sl
 800dd3e:	f040 8082 	bne.w	800de46 <_strtod_l+0x8de>
 800dd42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d17d      	bne.n	800de46 <_strtod_l+0x8de>
 800dd4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd4e:	0d1b      	lsrs	r3, r3, #20
 800dd50:	051b      	lsls	r3, r3, #20
 800dd52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dd56:	d976      	bls.n	800de46 <_strtod_l+0x8de>
 800dd58:	696b      	ldr	r3, [r5, #20]
 800dd5a:	b913      	cbnz	r3, 800dd62 <_strtod_l+0x7fa>
 800dd5c:	692b      	ldr	r3, [r5, #16]
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	dd71      	ble.n	800de46 <_strtod_l+0x8de>
 800dd62:	4629      	mov	r1, r5
 800dd64:	2201      	movs	r2, #1
 800dd66:	4620      	mov	r0, r4
 800dd68:	f001 ff0c 	bl	800fb84 <__lshift>
 800dd6c:	4631      	mov	r1, r6
 800dd6e:	4605      	mov	r5, r0
 800dd70:	f001 ff78 	bl	800fc64 <__mcmp>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	dd66      	ble.n	800de46 <_strtod_l+0x8de>
 800dd78:	9904      	ldr	r1, [sp, #16]
 800dd7a:	4a53      	ldr	r2, [pc, #332]	; (800dec8 <_strtod_l+0x960>)
 800dd7c:	465b      	mov	r3, fp
 800dd7e:	2900      	cmp	r1, #0
 800dd80:	f000 8081 	beq.w	800de86 <_strtod_l+0x91e>
 800dd84:	ea02 010b 	and.w	r1, r2, fp
 800dd88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dd8c:	dc7b      	bgt.n	800de86 <_strtod_l+0x91e>
 800dd8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dd92:	f77f aea9 	ble.w	800dae8 <_strtod_l+0x580>
 800dd96:	4b4d      	ldr	r3, [pc, #308]	; (800decc <_strtod_l+0x964>)
 800dd98:	4650      	mov	r0, sl
 800dd9a:	4659      	mov	r1, fp
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	f7f2 fc03 	bl	80005a8 <__aeabi_dmul>
 800dda2:	460b      	mov	r3, r1
 800dda4:	4303      	orrs	r3, r0
 800dda6:	bf08      	it	eq
 800dda8:	2322      	moveq	r3, #34	; 0x22
 800ddaa:	4682      	mov	sl, r0
 800ddac:	468b      	mov	fp, r1
 800ddae:	bf08      	it	eq
 800ddb0:	6023      	streq	r3, [r4, #0]
 800ddb2:	e62b      	b.n	800da0c <_strtod_l+0x4a4>
 800ddb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddbc:	ea03 0a0a 	and.w	sl, r3, sl
 800ddc0:	e6e3      	b.n	800db8a <_strtod_l+0x622>
 800ddc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ddc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ddca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ddce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ddd2:	fa01 f308 	lsl.w	r3, r1, r8
 800ddd6:	9308      	str	r3, [sp, #32]
 800ddd8:	910d      	str	r1, [sp, #52]	; 0x34
 800ddda:	e746      	b.n	800dc6a <_strtod_l+0x702>
 800dddc:	2300      	movs	r3, #0
 800ddde:	9308      	str	r3, [sp, #32]
 800dde0:	2301      	movs	r3, #1
 800dde2:	930d      	str	r3, [sp, #52]	; 0x34
 800dde4:	e741      	b.n	800dc6a <_strtod_l+0x702>
 800dde6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dde8:	4642      	mov	r2, r8
 800ddea:	4620      	mov	r0, r4
 800ddec:	f001 feca 	bl	800fb84 <__lshift>
 800ddf0:	9018      	str	r0, [sp, #96]	; 0x60
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	f47f af6b 	bne.w	800dcce <_strtod_l+0x766>
 800ddf8:	e5fe      	b.n	800d9f8 <_strtod_l+0x490>
 800ddfa:	465f      	mov	r7, fp
 800ddfc:	d16e      	bne.n	800dedc <_strtod_l+0x974>
 800ddfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de04:	b342      	cbz	r2, 800de58 <_strtod_l+0x8f0>
 800de06:	4a32      	ldr	r2, [pc, #200]	; (800ded0 <_strtod_l+0x968>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d128      	bne.n	800de5e <_strtod_l+0x8f6>
 800de0c:	9b04      	ldr	r3, [sp, #16]
 800de0e:	4651      	mov	r1, sl
 800de10:	b1eb      	cbz	r3, 800de4e <_strtod_l+0x8e6>
 800de12:	4b2d      	ldr	r3, [pc, #180]	; (800dec8 <_strtod_l+0x960>)
 800de14:	403b      	ands	r3, r7
 800de16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800de1a:	f04f 32ff 	mov.w	r2, #4294967295
 800de1e:	d819      	bhi.n	800de54 <_strtod_l+0x8ec>
 800de20:	0d1b      	lsrs	r3, r3, #20
 800de22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800de26:	fa02 f303 	lsl.w	r3, r2, r3
 800de2a:	4299      	cmp	r1, r3
 800de2c:	d117      	bne.n	800de5e <_strtod_l+0x8f6>
 800de2e:	4b29      	ldr	r3, [pc, #164]	; (800ded4 <_strtod_l+0x96c>)
 800de30:	429f      	cmp	r7, r3
 800de32:	d102      	bne.n	800de3a <_strtod_l+0x8d2>
 800de34:	3101      	adds	r1, #1
 800de36:	f43f addf 	beq.w	800d9f8 <_strtod_l+0x490>
 800de3a:	4b23      	ldr	r3, [pc, #140]	; (800dec8 <_strtod_l+0x960>)
 800de3c:	403b      	ands	r3, r7
 800de3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800de42:	f04f 0a00 	mov.w	sl, #0
 800de46:	9b04      	ldr	r3, [sp, #16]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d1a4      	bne.n	800dd96 <_strtod_l+0x82e>
 800de4c:	e5de      	b.n	800da0c <_strtod_l+0x4a4>
 800de4e:	f04f 33ff 	mov.w	r3, #4294967295
 800de52:	e7ea      	b.n	800de2a <_strtod_l+0x8c2>
 800de54:	4613      	mov	r3, r2
 800de56:	e7e8      	b.n	800de2a <_strtod_l+0x8c2>
 800de58:	ea53 030a 	orrs.w	r3, r3, sl
 800de5c:	d08c      	beq.n	800dd78 <_strtod_l+0x810>
 800de5e:	9b08      	ldr	r3, [sp, #32]
 800de60:	b1db      	cbz	r3, 800de9a <_strtod_l+0x932>
 800de62:	423b      	tst	r3, r7
 800de64:	d0ef      	beq.n	800de46 <_strtod_l+0x8de>
 800de66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de68:	9a04      	ldr	r2, [sp, #16]
 800de6a:	4650      	mov	r0, sl
 800de6c:	4659      	mov	r1, fp
 800de6e:	b1c3      	cbz	r3, 800dea2 <_strtod_l+0x93a>
 800de70:	f7ff fb5c 	bl	800d52c <sulp>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	ec51 0b18 	vmov	r0, r1, d8
 800de7c:	f7f2 f9de 	bl	800023c <__adddf3>
 800de80:	4682      	mov	sl, r0
 800de82:	468b      	mov	fp, r1
 800de84:	e7df      	b.n	800de46 <_strtod_l+0x8de>
 800de86:	4013      	ands	r3, r2
 800de88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800de8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800de90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800de94:	f04f 3aff 	mov.w	sl, #4294967295
 800de98:	e7d5      	b.n	800de46 <_strtod_l+0x8de>
 800de9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de9c:	ea13 0f0a 	tst.w	r3, sl
 800dea0:	e7e0      	b.n	800de64 <_strtod_l+0x8fc>
 800dea2:	f7ff fb43 	bl	800d52c <sulp>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	ec51 0b18 	vmov	r0, r1, d8
 800deae:	f7f2 f9c3 	bl	8000238 <__aeabi_dsub>
 800deb2:	2200      	movs	r2, #0
 800deb4:	2300      	movs	r3, #0
 800deb6:	4682      	mov	sl, r0
 800deb8:	468b      	mov	fp, r1
 800deba:	f7f2 fddd 	bl	8000a78 <__aeabi_dcmpeq>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d0c1      	beq.n	800de46 <_strtod_l+0x8de>
 800dec2:	e611      	b.n	800dae8 <_strtod_l+0x580>
 800dec4:	fffffc02 	.word	0xfffffc02
 800dec8:	7ff00000 	.word	0x7ff00000
 800decc:	39500000 	.word	0x39500000
 800ded0:	000fffff 	.word	0x000fffff
 800ded4:	7fefffff 	.word	0x7fefffff
 800ded8:	08011298 	.word	0x08011298
 800dedc:	4631      	mov	r1, r6
 800dede:	4628      	mov	r0, r5
 800dee0:	f002 f83e 	bl	800ff60 <__ratio>
 800dee4:	ec59 8b10 	vmov	r8, r9, d0
 800dee8:	ee10 0a10 	vmov	r0, s0
 800deec:	2200      	movs	r2, #0
 800deee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800def2:	4649      	mov	r1, r9
 800def4:	f7f2 fdd4 	bl	8000aa0 <__aeabi_dcmple>
 800def8:	2800      	cmp	r0, #0
 800defa:	d07a      	beq.n	800dff2 <_strtod_l+0xa8a>
 800defc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800defe:	2b00      	cmp	r3, #0
 800df00:	d04a      	beq.n	800df98 <_strtod_l+0xa30>
 800df02:	4b95      	ldr	r3, [pc, #596]	; (800e158 <_strtod_l+0xbf0>)
 800df04:	2200      	movs	r2, #0
 800df06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e158 <_strtod_l+0xbf0>
 800df0e:	f04f 0800 	mov.w	r8, #0
 800df12:	4b92      	ldr	r3, [pc, #584]	; (800e15c <_strtod_l+0xbf4>)
 800df14:	403b      	ands	r3, r7
 800df16:	930d      	str	r3, [sp, #52]	; 0x34
 800df18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df1a:	4b91      	ldr	r3, [pc, #580]	; (800e160 <_strtod_l+0xbf8>)
 800df1c:	429a      	cmp	r2, r3
 800df1e:	f040 80b0 	bne.w	800e082 <_strtod_l+0xb1a>
 800df22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800df2a:	ec4b ab10 	vmov	d0, sl, fp
 800df2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df32:	f001 ff3d 	bl	800fdb0 <__ulp>
 800df36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df3a:	ec53 2b10 	vmov	r2, r3, d0
 800df3e:	f7f2 fb33 	bl	80005a8 <__aeabi_dmul>
 800df42:	4652      	mov	r2, sl
 800df44:	465b      	mov	r3, fp
 800df46:	f7f2 f979 	bl	800023c <__adddf3>
 800df4a:	460b      	mov	r3, r1
 800df4c:	4983      	ldr	r1, [pc, #524]	; (800e15c <_strtod_l+0xbf4>)
 800df4e:	4a85      	ldr	r2, [pc, #532]	; (800e164 <_strtod_l+0xbfc>)
 800df50:	4019      	ands	r1, r3
 800df52:	4291      	cmp	r1, r2
 800df54:	4682      	mov	sl, r0
 800df56:	d960      	bls.n	800e01a <_strtod_l+0xab2>
 800df58:	ee18 3a90 	vmov	r3, s17
 800df5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800df60:	4293      	cmp	r3, r2
 800df62:	d104      	bne.n	800df6e <_strtod_l+0xa06>
 800df64:	ee18 3a10 	vmov	r3, s16
 800df68:	3301      	adds	r3, #1
 800df6a:	f43f ad45 	beq.w	800d9f8 <_strtod_l+0x490>
 800df6e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e170 <_strtod_l+0xc08>
 800df72:	f04f 3aff 	mov.w	sl, #4294967295
 800df76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800df78:	4620      	mov	r0, r4
 800df7a:	f001 fbe7 	bl	800f74c <_Bfree>
 800df7e:	9905      	ldr	r1, [sp, #20]
 800df80:	4620      	mov	r0, r4
 800df82:	f001 fbe3 	bl	800f74c <_Bfree>
 800df86:	4631      	mov	r1, r6
 800df88:	4620      	mov	r0, r4
 800df8a:	f001 fbdf 	bl	800f74c <_Bfree>
 800df8e:	4629      	mov	r1, r5
 800df90:	4620      	mov	r0, r4
 800df92:	f001 fbdb 	bl	800f74c <_Bfree>
 800df96:	e61a      	b.n	800dbce <_strtod_l+0x666>
 800df98:	f1ba 0f00 	cmp.w	sl, #0
 800df9c:	d11b      	bne.n	800dfd6 <_strtod_l+0xa6e>
 800df9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfa2:	b9f3      	cbnz	r3, 800dfe2 <_strtod_l+0xa7a>
 800dfa4:	4b6c      	ldr	r3, [pc, #432]	; (800e158 <_strtod_l+0xbf0>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	4640      	mov	r0, r8
 800dfaa:	4649      	mov	r1, r9
 800dfac:	f7f2 fd6e 	bl	8000a8c <__aeabi_dcmplt>
 800dfb0:	b9d0      	cbnz	r0, 800dfe8 <_strtod_l+0xa80>
 800dfb2:	4640      	mov	r0, r8
 800dfb4:	4649      	mov	r1, r9
 800dfb6:	4b6c      	ldr	r3, [pc, #432]	; (800e168 <_strtod_l+0xc00>)
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f7f2 faf5 	bl	80005a8 <__aeabi_dmul>
 800dfbe:	4680      	mov	r8, r0
 800dfc0:	4689      	mov	r9, r1
 800dfc2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dfc6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dfca:	9315      	str	r3, [sp, #84]	; 0x54
 800dfcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dfd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dfd4:	e79d      	b.n	800df12 <_strtod_l+0x9aa>
 800dfd6:	f1ba 0f01 	cmp.w	sl, #1
 800dfda:	d102      	bne.n	800dfe2 <_strtod_l+0xa7a>
 800dfdc:	2f00      	cmp	r7, #0
 800dfde:	f43f ad83 	beq.w	800dae8 <_strtod_l+0x580>
 800dfe2:	4b62      	ldr	r3, [pc, #392]	; (800e16c <_strtod_l+0xc04>)
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	e78e      	b.n	800df06 <_strtod_l+0x99e>
 800dfe8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e168 <_strtod_l+0xc00>
 800dfec:	f04f 0800 	mov.w	r8, #0
 800dff0:	e7e7      	b.n	800dfc2 <_strtod_l+0xa5a>
 800dff2:	4b5d      	ldr	r3, [pc, #372]	; (800e168 <_strtod_l+0xc00>)
 800dff4:	4640      	mov	r0, r8
 800dff6:	4649      	mov	r1, r9
 800dff8:	2200      	movs	r2, #0
 800dffa:	f7f2 fad5 	bl	80005a8 <__aeabi_dmul>
 800dffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e000:	4680      	mov	r8, r0
 800e002:	4689      	mov	r9, r1
 800e004:	b933      	cbnz	r3, 800e014 <_strtod_l+0xaac>
 800e006:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e00a:	900e      	str	r0, [sp, #56]	; 0x38
 800e00c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e00e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e012:	e7dd      	b.n	800dfd0 <_strtod_l+0xa68>
 800e014:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e018:	e7f9      	b.n	800e00e <_strtod_l+0xaa6>
 800e01a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e01e:	9b04      	ldr	r3, [sp, #16]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1a8      	bne.n	800df76 <_strtod_l+0xa0e>
 800e024:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e02a:	0d1b      	lsrs	r3, r3, #20
 800e02c:	051b      	lsls	r3, r3, #20
 800e02e:	429a      	cmp	r2, r3
 800e030:	d1a1      	bne.n	800df76 <_strtod_l+0xa0e>
 800e032:	4640      	mov	r0, r8
 800e034:	4649      	mov	r1, r9
 800e036:	f7f2 fdff 	bl	8000c38 <__aeabi_d2lz>
 800e03a:	f7f2 fa87 	bl	800054c <__aeabi_l2d>
 800e03e:	4602      	mov	r2, r0
 800e040:	460b      	mov	r3, r1
 800e042:	4640      	mov	r0, r8
 800e044:	4649      	mov	r1, r9
 800e046:	f7f2 f8f7 	bl	8000238 <__aeabi_dsub>
 800e04a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e04c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e050:	ea43 030a 	orr.w	r3, r3, sl
 800e054:	4313      	orrs	r3, r2
 800e056:	4680      	mov	r8, r0
 800e058:	4689      	mov	r9, r1
 800e05a:	d055      	beq.n	800e108 <_strtod_l+0xba0>
 800e05c:	a336      	add	r3, pc, #216	; (adr r3, 800e138 <_strtod_l+0xbd0>)
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	f7f2 fd13 	bl	8000a8c <__aeabi_dcmplt>
 800e066:	2800      	cmp	r0, #0
 800e068:	f47f acd0 	bne.w	800da0c <_strtod_l+0x4a4>
 800e06c:	a334      	add	r3, pc, #208	; (adr r3, 800e140 <_strtod_l+0xbd8>)
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	4640      	mov	r0, r8
 800e074:	4649      	mov	r1, r9
 800e076:	f7f2 fd27 	bl	8000ac8 <__aeabi_dcmpgt>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	f43f af7b 	beq.w	800df76 <_strtod_l+0xa0e>
 800e080:	e4c4      	b.n	800da0c <_strtod_l+0x4a4>
 800e082:	9b04      	ldr	r3, [sp, #16]
 800e084:	b333      	cbz	r3, 800e0d4 <_strtod_l+0xb6c>
 800e086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e088:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e08c:	d822      	bhi.n	800e0d4 <_strtod_l+0xb6c>
 800e08e:	a32e      	add	r3, pc, #184	; (adr r3, 800e148 <_strtod_l+0xbe0>)
 800e090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e094:	4640      	mov	r0, r8
 800e096:	4649      	mov	r1, r9
 800e098:	f7f2 fd02 	bl	8000aa0 <__aeabi_dcmple>
 800e09c:	b1a0      	cbz	r0, 800e0c8 <_strtod_l+0xb60>
 800e09e:	4649      	mov	r1, r9
 800e0a0:	4640      	mov	r0, r8
 800e0a2:	f7f2 fd59 	bl	8000b58 <__aeabi_d2uiz>
 800e0a6:	2801      	cmp	r0, #1
 800e0a8:	bf38      	it	cc
 800e0aa:	2001      	movcc	r0, #1
 800e0ac:	f7f2 fa02 	bl	80004b4 <__aeabi_ui2d>
 800e0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0b2:	4680      	mov	r8, r0
 800e0b4:	4689      	mov	r9, r1
 800e0b6:	bb23      	cbnz	r3, 800e102 <_strtod_l+0xb9a>
 800e0b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0bc:	9010      	str	r0, [sp, #64]	; 0x40
 800e0be:	9311      	str	r3, [sp, #68]	; 0x44
 800e0c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e0c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e0cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e0d0:	1a9b      	subs	r3, r3, r2
 800e0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e0d8:	eeb0 0a48 	vmov.f32	s0, s16
 800e0dc:	eef0 0a68 	vmov.f32	s1, s17
 800e0e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e0e4:	f001 fe64 	bl	800fdb0 <__ulp>
 800e0e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e0ec:	ec53 2b10 	vmov	r2, r3, d0
 800e0f0:	f7f2 fa5a 	bl	80005a8 <__aeabi_dmul>
 800e0f4:	ec53 2b18 	vmov	r2, r3, d8
 800e0f8:	f7f2 f8a0 	bl	800023c <__adddf3>
 800e0fc:	4682      	mov	sl, r0
 800e0fe:	468b      	mov	fp, r1
 800e100:	e78d      	b.n	800e01e <_strtod_l+0xab6>
 800e102:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e106:	e7db      	b.n	800e0c0 <_strtod_l+0xb58>
 800e108:	a311      	add	r3, pc, #68	; (adr r3, 800e150 <_strtod_l+0xbe8>)
 800e10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10e:	f7f2 fcbd 	bl	8000a8c <__aeabi_dcmplt>
 800e112:	e7b2      	b.n	800e07a <_strtod_l+0xb12>
 800e114:	2300      	movs	r3, #0
 800e116:	930a      	str	r3, [sp, #40]	; 0x28
 800e118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e11a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	f7ff ba6b 	b.w	800d5f8 <_strtod_l+0x90>
 800e122:	2a65      	cmp	r2, #101	; 0x65
 800e124:	f43f ab5f 	beq.w	800d7e6 <_strtod_l+0x27e>
 800e128:	2a45      	cmp	r2, #69	; 0x45
 800e12a:	f43f ab5c 	beq.w	800d7e6 <_strtod_l+0x27e>
 800e12e:	2301      	movs	r3, #1
 800e130:	f7ff bb94 	b.w	800d85c <_strtod_l+0x2f4>
 800e134:	f3af 8000 	nop.w
 800e138:	94a03595 	.word	0x94a03595
 800e13c:	3fdfffff 	.word	0x3fdfffff
 800e140:	35afe535 	.word	0x35afe535
 800e144:	3fe00000 	.word	0x3fe00000
 800e148:	ffc00000 	.word	0xffc00000
 800e14c:	41dfffff 	.word	0x41dfffff
 800e150:	94a03595 	.word	0x94a03595
 800e154:	3fcfffff 	.word	0x3fcfffff
 800e158:	3ff00000 	.word	0x3ff00000
 800e15c:	7ff00000 	.word	0x7ff00000
 800e160:	7fe00000 	.word	0x7fe00000
 800e164:	7c9fffff 	.word	0x7c9fffff
 800e168:	3fe00000 	.word	0x3fe00000
 800e16c:	bff00000 	.word	0xbff00000
 800e170:	7fefffff 	.word	0x7fefffff

0800e174 <_strtod_r>:
 800e174:	4b01      	ldr	r3, [pc, #4]	; (800e17c <_strtod_r+0x8>)
 800e176:	f7ff b9f7 	b.w	800d568 <_strtod_l>
 800e17a:	bf00      	nop
 800e17c:	200001f8 	.word	0x200001f8

0800e180 <_strtol_l.constprop.0>:
 800e180:	2b01      	cmp	r3, #1
 800e182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e186:	d001      	beq.n	800e18c <_strtol_l.constprop.0+0xc>
 800e188:	2b24      	cmp	r3, #36	; 0x24
 800e18a:	d906      	bls.n	800e19a <_strtol_l.constprop.0+0x1a>
 800e18c:	f7fe fafc 	bl	800c788 <__errno>
 800e190:	2316      	movs	r3, #22
 800e192:	6003      	str	r3, [r0, #0]
 800e194:	2000      	movs	r0, #0
 800e196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e19a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e280 <_strtol_l.constprop.0+0x100>
 800e19e:	460d      	mov	r5, r1
 800e1a0:	462e      	mov	r6, r5
 800e1a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e1aa:	f017 0708 	ands.w	r7, r7, #8
 800e1ae:	d1f7      	bne.n	800e1a0 <_strtol_l.constprop.0+0x20>
 800e1b0:	2c2d      	cmp	r4, #45	; 0x2d
 800e1b2:	d132      	bne.n	800e21a <_strtol_l.constprop.0+0x9a>
 800e1b4:	782c      	ldrb	r4, [r5, #0]
 800e1b6:	2701      	movs	r7, #1
 800e1b8:	1cb5      	adds	r5, r6, #2
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d05b      	beq.n	800e276 <_strtol_l.constprop.0+0xf6>
 800e1be:	2b10      	cmp	r3, #16
 800e1c0:	d109      	bne.n	800e1d6 <_strtol_l.constprop.0+0x56>
 800e1c2:	2c30      	cmp	r4, #48	; 0x30
 800e1c4:	d107      	bne.n	800e1d6 <_strtol_l.constprop.0+0x56>
 800e1c6:	782c      	ldrb	r4, [r5, #0]
 800e1c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e1cc:	2c58      	cmp	r4, #88	; 0x58
 800e1ce:	d14d      	bne.n	800e26c <_strtol_l.constprop.0+0xec>
 800e1d0:	786c      	ldrb	r4, [r5, #1]
 800e1d2:	2310      	movs	r3, #16
 800e1d4:	3502      	adds	r5, #2
 800e1d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e1da:	f108 38ff 	add.w	r8, r8, #4294967295
 800e1de:	f04f 0c00 	mov.w	ip, #0
 800e1e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800e1e6:	4666      	mov	r6, ip
 800e1e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800e1ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e1f0:	f1be 0f09 	cmp.w	lr, #9
 800e1f4:	d816      	bhi.n	800e224 <_strtol_l.constprop.0+0xa4>
 800e1f6:	4674      	mov	r4, lr
 800e1f8:	42a3      	cmp	r3, r4
 800e1fa:	dd24      	ble.n	800e246 <_strtol_l.constprop.0+0xc6>
 800e1fc:	f1bc 0f00 	cmp.w	ip, #0
 800e200:	db1e      	blt.n	800e240 <_strtol_l.constprop.0+0xc0>
 800e202:	45b1      	cmp	r9, r6
 800e204:	d31c      	bcc.n	800e240 <_strtol_l.constprop.0+0xc0>
 800e206:	d101      	bne.n	800e20c <_strtol_l.constprop.0+0x8c>
 800e208:	45a2      	cmp	sl, r4
 800e20a:	db19      	blt.n	800e240 <_strtol_l.constprop.0+0xc0>
 800e20c:	fb06 4603 	mla	r6, r6, r3, r4
 800e210:	f04f 0c01 	mov.w	ip, #1
 800e214:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e218:	e7e8      	b.n	800e1ec <_strtol_l.constprop.0+0x6c>
 800e21a:	2c2b      	cmp	r4, #43	; 0x2b
 800e21c:	bf04      	itt	eq
 800e21e:	782c      	ldrbeq	r4, [r5, #0]
 800e220:	1cb5      	addeq	r5, r6, #2
 800e222:	e7ca      	b.n	800e1ba <_strtol_l.constprop.0+0x3a>
 800e224:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e228:	f1be 0f19 	cmp.w	lr, #25
 800e22c:	d801      	bhi.n	800e232 <_strtol_l.constprop.0+0xb2>
 800e22e:	3c37      	subs	r4, #55	; 0x37
 800e230:	e7e2      	b.n	800e1f8 <_strtol_l.constprop.0+0x78>
 800e232:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e236:	f1be 0f19 	cmp.w	lr, #25
 800e23a:	d804      	bhi.n	800e246 <_strtol_l.constprop.0+0xc6>
 800e23c:	3c57      	subs	r4, #87	; 0x57
 800e23e:	e7db      	b.n	800e1f8 <_strtol_l.constprop.0+0x78>
 800e240:	f04f 3cff 	mov.w	ip, #4294967295
 800e244:	e7e6      	b.n	800e214 <_strtol_l.constprop.0+0x94>
 800e246:	f1bc 0f00 	cmp.w	ip, #0
 800e24a:	da05      	bge.n	800e258 <_strtol_l.constprop.0+0xd8>
 800e24c:	2322      	movs	r3, #34	; 0x22
 800e24e:	6003      	str	r3, [r0, #0]
 800e250:	4646      	mov	r6, r8
 800e252:	b942      	cbnz	r2, 800e266 <_strtol_l.constprop.0+0xe6>
 800e254:	4630      	mov	r0, r6
 800e256:	e79e      	b.n	800e196 <_strtol_l.constprop.0+0x16>
 800e258:	b107      	cbz	r7, 800e25c <_strtol_l.constprop.0+0xdc>
 800e25a:	4276      	negs	r6, r6
 800e25c:	2a00      	cmp	r2, #0
 800e25e:	d0f9      	beq.n	800e254 <_strtol_l.constprop.0+0xd4>
 800e260:	f1bc 0f00 	cmp.w	ip, #0
 800e264:	d000      	beq.n	800e268 <_strtol_l.constprop.0+0xe8>
 800e266:	1e69      	subs	r1, r5, #1
 800e268:	6011      	str	r1, [r2, #0]
 800e26a:	e7f3      	b.n	800e254 <_strtol_l.constprop.0+0xd4>
 800e26c:	2430      	movs	r4, #48	; 0x30
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1b1      	bne.n	800e1d6 <_strtol_l.constprop.0+0x56>
 800e272:	2308      	movs	r3, #8
 800e274:	e7af      	b.n	800e1d6 <_strtol_l.constprop.0+0x56>
 800e276:	2c30      	cmp	r4, #48	; 0x30
 800e278:	d0a5      	beq.n	800e1c6 <_strtol_l.constprop.0+0x46>
 800e27a:	230a      	movs	r3, #10
 800e27c:	e7ab      	b.n	800e1d6 <_strtol_l.constprop.0+0x56>
 800e27e:	bf00      	nop
 800e280:	080112c1 	.word	0x080112c1

0800e284 <_strtol_r>:
 800e284:	f7ff bf7c 	b.w	800e180 <_strtol_l.constprop.0>

0800e288 <strtol>:
 800e288:	4613      	mov	r3, r2
 800e28a:	460a      	mov	r2, r1
 800e28c:	4601      	mov	r1, r0
 800e28e:	4802      	ldr	r0, [pc, #8]	; (800e298 <strtol+0x10>)
 800e290:	6800      	ldr	r0, [r0, #0]
 800e292:	f7ff bf75 	b.w	800e180 <_strtol_l.constprop.0>
 800e296:	bf00      	nop
 800e298:	20000190 	.word	0x20000190

0800e29c <quorem>:
 800e29c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a0:	6903      	ldr	r3, [r0, #16]
 800e2a2:	690c      	ldr	r4, [r1, #16]
 800e2a4:	42a3      	cmp	r3, r4
 800e2a6:	4607      	mov	r7, r0
 800e2a8:	f2c0 8081 	blt.w	800e3ae <quorem+0x112>
 800e2ac:	3c01      	subs	r4, #1
 800e2ae:	f101 0814 	add.w	r8, r1, #20
 800e2b2:	f100 0514 	add.w	r5, r0, #20
 800e2b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2ba:	9301      	str	r3, [sp, #4]
 800e2bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e2c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e2cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e2d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800e2d4:	d331      	bcc.n	800e33a <quorem+0x9e>
 800e2d6:	f04f 0e00 	mov.w	lr, #0
 800e2da:	4640      	mov	r0, r8
 800e2dc:	46ac      	mov	ip, r5
 800e2de:	46f2      	mov	sl, lr
 800e2e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2e4:	b293      	uxth	r3, r2
 800e2e6:	fb06 e303 	mla	r3, r6, r3, lr
 800e2ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	ebaa 0303 	sub.w	r3, sl, r3
 800e2f4:	f8dc a000 	ldr.w	sl, [ip]
 800e2f8:	0c12      	lsrs	r2, r2, #16
 800e2fa:	fa13 f38a 	uxtah	r3, r3, sl
 800e2fe:	fb06 e202 	mla	r2, r6, r2, lr
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	9b00      	ldr	r3, [sp, #0]
 800e306:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e30a:	b292      	uxth	r2, r2
 800e30c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e314:	f8bd 3000 	ldrh.w	r3, [sp]
 800e318:	4581      	cmp	r9, r0
 800e31a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e31e:	f84c 3b04 	str.w	r3, [ip], #4
 800e322:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e326:	d2db      	bcs.n	800e2e0 <quorem+0x44>
 800e328:	f855 300b 	ldr.w	r3, [r5, fp]
 800e32c:	b92b      	cbnz	r3, 800e33a <quorem+0x9e>
 800e32e:	9b01      	ldr	r3, [sp, #4]
 800e330:	3b04      	subs	r3, #4
 800e332:	429d      	cmp	r5, r3
 800e334:	461a      	mov	r2, r3
 800e336:	d32e      	bcc.n	800e396 <quorem+0xfa>
 800e338:	613c      	str	r4, [r7, #16]
 800e33a:	4638      	mov	r0, r7
 800e33c:	f001 fc92 	bl	800fc64 <__mcmp>
 800e340:	2800      	cmp	r0, #0
 800e342:	db24      	blt.n	800e38e <quorem+0xf2>
 800e344:	3601      	adds	r6, #1
 800e346:	4628      	mov	r0, r5
 800e348:	f04f 0c00 	mov.w	ip, #0
 800e34c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e350:	f8d0 e000 	ldr.w	lr, [r0]
 800e354:	b293      	uxth	r3, r2
 800e356:	ebac 0303 	sub.w	r3, ip, r3
 800e35a:	0c12      	lsrs	r2, r2, #16
 800e35c:	fa13 f38e 	uxtah	r3, r3, lr
 800e360:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e364:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e368:	b29b      	uxth	r3, r3
 800e36a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e36e:	45c1      	cmp	r9, r8
 800e370:	f840 3b04 	str.w	r3, [r0], #4
 800e374:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e378:	d2e8      	bcs.n	800e34c <quorem+0xb0>
 800e37a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e37e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e382:	b922      	cbnz	r2, 800e38e <quorem+0xf2>
 800e384:	3b04      	subs	r3, #4
 800e386:	429d      	cmp	r5, r3
 800e388:	461a      	mov	r2, r3
 800e38a:	d30a      	bcc.n	800e3a2 <quorem+0x106>
 800e38c:	613c      	str	r4, [r7, #16]
 800e38e:	4630      	mov	r0, r6
 800e390:	b003      	add	sp, #12
 800e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e396:	6812      	ldr	r2, [r2, #0]
 800e398:	3b04      	subs	r3, #4
 800e39a:	2a00      	cmp	r2, #0
 800e39c:	d1cc      	bne.n	800e338 <quorem+0x9c>
 800e39e:	3c01      	subs	r4, #1
 800e3a0:	e7c7      	b.n	800e332 <quorem+0x96>
 800e3a2:	6812      	ldr	r2, [r2, #0]
 800e3a4:	3b04      	subs	r3, #4
 800e3a6:	2a00      	cmp	r2, #0
 800e3a8:	d1f0      	bne.n	800e38c <quorem+0xf0>
 800e3aa:	3c01      	subs	r4, #1
 800e3ac:	e7eb      	b.n	800e386 <quorem+0xea>
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	e7ee      	b.n	800e390 <quorem+0xf4>
 800e3b2:	0000      	movs	r0, r0
 800e3b4:	0000      	movs	r0, r0
	...

0800e3b8 <_dtoa_r>:
 800e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	ed2d 8b04 	vpush	{d8-d9}
 800e3c0:	ec57 6b10 	vmov	r6, r7, d0
 800e3c4:	b093      	sub	sp, #76	; 0x4c
 800e3c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e3c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e3cc:	9106      	str	r1, [sp, #24]
 800e3ce:	ee10 aa10 	vmov	sl, s0
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	9209      	str	r2, [sp, #36]	; 0x24
 800e3d6:	930c      	str	r3, [sp, #48]	; 0x30
 800e3d8:	46bb      	mov	fp, r7
 800e3da:	b975      	cbnz	r5, 800e3fa <_dtoa_r+0x42>
 800e3dc:	2010      	movs	r0, #16
 800e3de:	f001 f94d 	bl	800f67c <malloc>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	6260      	str	r0, [r4, #36]	; 0x24
 800e3e6:	b920      	cbnz	r0, 800e3f2 <_dtoa_r+0x3a>
 800e3e8:	4ba7      	ldr	r3, [pc, #668]	; (800e688 <_dtoa_r+0x2d0>)
 800e3ea:	21ea      	movs	r1, #234	; 0xea
 800e3ec:	48a7      	ldr	r0, [pc, #668]	; (800e68c <_dtoa_r+0x2d4>)
 800e3ee:	f002 f8bd 	bl	801056c <__assert_func>
 800e3f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3f6:	6005      	str	r5, [r0, #0]
 800e3f8:	60c5      	str	r5, [r0, #12]
 800e3fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3fc:	6819      	ldr	r1, [r3, #0]
 800e3fe:	b151      	cbz	r1, 800e416 <_dtoa_r+0x5e>
 800e400:	685a      	ldr	r2, [r3, #4]
 800e402:	604a      	str	r2, [r1, #4]
 800e404:	2301      	movs	r3, #1
 800e406:	4093      	lsls	r3, r2
 800e408:	608b      	str	r3, [r1, #8]
 800e40a:	4620      	mov	r0, r4
 800e40c:	f001 f99e 	bl	800f74c <_Bfree>
 800e410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e412:	2200      	movs	r2, #0
 800e414:	601a      	str	r2, [r3, #0]
 800e416:	1e3b      	subs	r3, r7, #0
 800e418:	bfaa      	itet	ge
 800e41a:	2300      	movge	r3, #0
 800e41c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e420:	f8c8 3000 	strge.w	r3, [r8]
 800e424:	4b9a      	ldr	r3, [pc, #616]	; (800e690 <_dtoa_r+0x2d8>)
 800e426:	bfbc      	itt	lt
 800e428:	2201      	movlt	r2, #1
 800e42a:	f8c8 2000 	strlt.w	r2, [r8]
 800e42e:	ea33 030b 	bics.w	r3, r3, fp
 800e432:	d11b      	bne.n	800e46c <_dtoa_r+0xb4>
 800e434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e436:	f242 730f 	movw	r3, #9999	; 0x270f
 800e43a:	6013      	str	r3, [r2, #0]
 800e43c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e440:	4333      	orrs	r3, r6
 800e442:	f000 8592 	beq.w	800ef6a <_dtoa_r+0xbb2>
 800e446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e448:	b963      	cbnz	r3, 800e464 <_dtoa_r+0xac>
 800e44a:	4b92      	ldr	r3, [pc, #584]	; (800e694 <_dtoa_r+0x2dc>)
 800e44c:	e022      	b.n	800e494 <_dtoa_r+0xdc>
 800e44e:	4b92      	ldr	r3, [pc, #584]	; (800e698 <_dtoa_r+0x2e0>)
 800e450:	9301      	str	r3, [sp, #4]
 800e452:	3308      	adds	r3, #8
 800e454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e456:	6013      	str	r3, [r2, #0]
 800e458:	9801      	ldr	r0, [sp, #4]
 800e45a:	b013      	add	sp, #76	; 0x4c
 800e45c:	ecbd 8b04 	vpop	{d8-d9}
 800e460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e464:	4b8b      	ldr	r3, [pc, #556]	; (800e694 <_dtoa_r+0x2dc>)
 800e466:	9301      	str	r3, [sp, #4]
 800e468:	3303      	adds	r3, #3
 800e46a:	e7f3      	b.n	800e454 <_dtoa_r+0x9c>
 800e46c:	2200      	movs	r2, #0
 800e46e:	2300      	movs	r3, #0
 800e470:	4650      	mov	r0, sl
 800e472:	4659      	mov	r1, fp
 800e474:	f7f2 fb00 	bl	8000a78 <__aeabi_dcmpeq>
 800e478:	ec4b ab19 	vmov	d9, sl, fp
 800e47c:	4680      	mov	r8, r0
 800e47e:	b158      	cbz	r0, 800e498 <_dtoa_r+0xe0>
 800e480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e482:	2301      	movs	r3, #1
 800e484:	6013      	str	r3, [r2, #0]
 800e486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 856b 	beq.w	800ef64 <_dtoa_r+0xbac>
 800e48e:	4883      	ldr	r0, [pc, #524]	; (800e69c <_dtoa_r+0x2e4>)
 800e490:	6018      	str	r0, [r3, #0]
 800e492:	1e43      	subs	r3, r0, #1
 800e494:	9301      	str	r3, [sp, #4]
 800e496:	e7df      	b.n	800e458 <_dtoa_r+0xa0>
 800e498:	ec4b ab10 	vmov	d0, sl, fp
 800e49c:	aa10      	add	r2, sp, #64	; 0x40
 800e49e:	a911      	add	r1, sp, #68	; 0x44
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f001 fd01 	bl	800fea8 <__d2b>
 800e4a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e4aa:	ee08 0a10 	vmov	s16, r0
 800e4ae:	2d00      	cmp	r5, #0
 800e4b0:	f000 8084 	beq.w	800e5bc <_dtoa_r+0x204>
 800e4b4:	ee19 3a90 	vmov	r3, s19
 800e4b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e4c0:	4656      	mov	r6, sl
 800e4c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e4c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e4ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e4ce:	4b74      	ldr	r3, [pc, #464]	; (800e6a0 <_dtoa_r+0x2e8>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	f7f1 feaf 	bl	8000238 <__aeabi_dsub>
 800e4da:	a365      	add	r3, pc, #404	; (adr r3, 800e670 <_dtoa_r+0x2b8>)
 800e4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e0:	f7f2 f862 	bl	80005a8 <__aeabi_dmul>
 800e4e4:	a364      	add	r3, pc, #400	; (adr r3, 800e678 <_dtoa_r+0x2c0>)
 800e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ea:	f7f1 fea7 	bl	800023c <__adddf3>
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	460f      	mov	r7, r1
 800e4f4:	f7f1 ffee 	bl	80004d4 <__aeabi_i2d>
 800e4f8:	a361      	add	r3, pc, #388	; (adr r3, 800e680 <_dtoa_r+0x2c8>)
 800e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fe:	f7f2 f853 	bl	80005a8 <__aeabi_dmul>
 800e502:	4602      	mov	r2, r0
 800e504:	460b      	mov	r3, r1
 800e506:	4630      	mov	r0, r6
 800e508:	4639      	mov	r1, r7
 800e50a:	f7f1 fe97 	bl	800023c <__adddf3>
 800e50e:	4606      	mov	r6, r0
 800e510:	460f      	mov	r7, r1
 800e512:	f7f2 faf9 	bl	8000b08 <__aeabi_d2iz>
 800e516:	2200      	movs	r2, #0
 800e518:	9000      	str	r0, [sp, #0]
 800e51a:	2300      	movs	r3, #0
 800e51c:	4630      	mov	r0, r6
 800e51e:	4639      	mov	r1, r7
 800e520:	f7f2 fab4 	bl	8000a8c <__aeabi_dcmplt>
 800e524:	b150      	cbz	r0, 800e53c <_dtoa_r+0x184>
 800e526:	9800      	ldr	r0, [sp, #0]
 800e528:	f7f1 ffd4 	bl	80004d4 <__aeabi_i2d>
 800e52c:	4632      	mov	r2, r6
 800e52e:	463b      	mov	r3, r7
 800e530:	f7f2 faa2 	bl	8000a78 <__aeabi_dcmpeq>
 800e534:	b910      	cbnz	r0, 800e53c <_dtoa_r+0x184>
 800e536:	9b00      	ldr	r3, [sp, #0]
 800e538:	3b01      	subs	r3, #1
 800e53a:	9300      	str	r3, [sp, #0]
 800e53c:	9b00      	ldr	r3, [sp, #0]
 800e53e:	2b16      	cmp	r3, #22
 800e540:	d85a      	bhi.n	800e5f8 <_dtoa_r+0x240>
 800e542:	9a00      	ldr	r2, [sp, #0]
 800e544:	4b57      	ldr	r3, [pc, #348]	; (800e6a4 <_dtoa_r+0x2ec>)
 800e546:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	ec51 0b19 	vmov	r0, r1, d9
 800e552:	f7f2 fa9b 	bl	8000a8c <__aeabi_dcmplt>
 800e556:	2800      	cmp	r0, #0
 800e558:	d050      	beq.n	800e5fc <_dtoa_r+0x244>
 800e55a:	9b00      	ldr	r3, [sp, #0]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	2300      	movs	r3, #0
 800e562:	930b      	str	r3, [sp, #44]	; 0x2c
 800e564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e566:	1b5d      	subs	r5, r3, r5
 800e568:	1e6b      	subs	r3, r5, #1
 800e56a:	9305      	str	r3, [sp, #20]
 800e56c:	bf45      	ittet	mi
 800e56e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e572:	9304      	strmi	r3, [sp, #16]
 800e574:	2300      	movpl	r3, #0
 800e576:	2300      	movmi	r3, #0
 800e578:	bf4c      	ite	mi
 800e57a:	9305      	strmi	r3, [sp, #20]
 800e57c:	9304      	strpl	r3, [sp, #16]
 800e57e:	9b00      	ldr	r3, [sp, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	db3d      	blt.n	800e600 <_dtoa_r+0x248>
 800e584:	9b05      	ldr	r3, [sp, #20]
 800e586:	9a00      	ldr	r2, [sp, #0]
 800e588:	920a      	str	r2, [sp, #40]	; 0x28
 800e58a:	4413      	add	r3, r2
 800e58c:	9305      	str	r3, [sp, #20]
 800e58e:	2300      	movs	r3, #0
 800e590:	9307      	str	r3, [sp, #28]
 800e592:	9b06      	ldr	r3, [sp, #24]
 800e594:	2b09      	cmp	r3, #9
 800e596:	f200 8089 	bhi.w	800e6ac <_dtoa_r+0x2f4>
 800e59a:	2b05      	cmp	r3, #5
 800e59c:	bfc4      	itt	gt
 800e59e:	3b04      	subgt	r3, #4
 800e5a0:	9306      	strgt	r3, [sp, #24]
 800e5a2:	9b06      	ldr	r3, [sp, #24]
 800e5a4:	f1a3 0302 	sub.w	r3, r3, #2
 800e5a8:	bfcc      	ite	gt
 800e5aa:	2500      	movgt	r5, #0
 800e5ac:	2501      	movle	r5, #1
 800e5ae:	2b03      	cmp	r3, #3
 800e5b0:	f200 8087 	bhi.w	800e6c2 <_dtoa_r+0x30a>
 800e5b4:	e8df f003 	tbb	[pc, r3]
 800e5b8:	59383a2d 	.word	0x59383a2d
 800e5bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e5c0:	441d      	add	r5, r3
 800e5c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e5c6:	2b20      	cmp	r3, #32
 800e5c8:	bfc1      	itttt	gt
 800e5ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e5ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e5d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e5d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e5da:	bfda      	itte	le
 800e5dc:	f1c3 0320 	rsble	r3, r3, #32
 800e5e0:	fa06 f003 	lslle.w	r0, r6, r3
 800e5e4:	4318      	orrgt	r0, r3
 800e5e6:	f7f1 ff65 	bl	80004b4 <__aeabi_ui2d>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	4606      	mov	r6, r0
 800e5ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e5f2:	3d01      	subs	r5, #1
 800e5f4:	930e      	str	r3, [sp, #56]	; 0x38
 800e5f6:	e76a      	b.n	800e4ce <_dtoa_r+0x116>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	e7b2      	b.n	800e562 <_dtoa_r+0x1aa>
 800e5fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800e5fe:	e7b1      	b.n	800e564 <_dtoa_r+0x1ac>
 800e600:	9b04      	ldr	r3, [sp, #16]
 800e602:	9a00      	ldr	r2, [sp, #0]
 800e604:	1a9b      	subs	r3, r3, r2
 800e606:	9304      	str	r3, [sp, #16]
 800e608:	4253      	negs	r3, r2
 800e60a:	9307      	str	r3, [sp, #28]
 800e60c:	2300      	movs	r3, #0
 800e60e:	930a      	str	r3, [sp, #40]	; 0x28
 800e610:	e7bf      	b.n	800e592 <_dtoa_r+0x1da>
 800e612:	2300      	movs	r3, #0
 800e614:	9308      	str	r3, [sp, #32]
 800e616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e618:	2b00      	cmp	r3, #0
 800e61a:	dc55      	bgt.n	800e6c8 <_dtoa_r+0x310>
 800e61c:	2301      	movs	r3, #1
 800e61e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e622:	461a      	mov	r2, r3
 800e624:	9209      	str	r2, [sp, #36]	; 0x24
 800e626:	e00c      	b.n	800e642 <_dtoa_r+0x28a>
 800e628:	2301      	movs	r3, #1
 800e62a:	e7f3      	b.n	800e614 <_dtoa_r+0x25c>
 800e62c:	2300      	movs	r3, #0
 800e62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e630:	9308      	str	r3, [sp, #32]
 800e632:	9b00      	ldr	r3, [sp, #0]
 800e634:	4413      	add	r3, r2
 800e636:	9302      	str	r3, [sp, #8]
 800e638:	3301      	adds	r3, #1
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	9303      	str	r3, [sp, #12]
 800e63e:	bfb8      	it	lt
 800e640:	2301      	movlt	r3, #1
 800e642:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e644:	2200      	movs	r2, #0
 800e646:	6042      	str	r2, [r0, #4]
 800e648:	2204      	movs	r2, #4
 800e64a:	f102 0614 	add.w	r6, r2, #20
 800e64e:	429e      	cmp	r6, r3
 800e650:	6841      	ldr	r1, [r0, #4]
 800e652:	d93d      	bls.n	800e6d0 <_dtoa_r+0x318>
 800e654:	4620      	mov	r0, r4
 800e656:	f001 f839 	bl	800f6cc <_Balloc>
 800e65a:	9001      	str	r0, [sp, #4]
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d13b      	bne.n	800e6d8 <_dtoa_r+0x320>
 800e660:	4b11      	ldr	r3, [pc, #68]	; (800e6a8 <_dtoa_r+0x2f0>)
 800e662:	4602      	mov	r2, r0
 800e664:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e668:	e6c0      	b.n	800e3ec <_dtoa_r+0x34>
 800e66a:	2301      	movs	r3, #1
 800e66c:	e7df      	b.n	800e62e <_dtoa_r+0x276>
 800e66e:	bf00      	nop
 800e670:	636f4361 	.word	0x636f4361
 800e674:	3fd287a7 	.word	0x3fd287a7
 800e678:	8b60c8b3 	.word	0x8b60c8b3
 800e67c:	3fc68a28 	.word	0x3fc68a28
 800e680:	509f79fb 	.word	0x509f79fb
 800e684:	3fd34413 	.word	0x3fd34413
 800e688:	080113ce 	.word	0x080113ce
 800e68c:	080113e5 	.word	0x080113e5
 800e690:	7ff00000 	.word	0x7ff00000
 800e694:	080113ca 	.word	0x080113ca
 800e698:	080113c1 	.word	0x080113c1
 800e69c:	08011241 	.word	0x08011241
 800e6a0:	3ff80000 	.word	0x3ff80000
 800e6a4:	08011550 	.word	0x08011550
 800e6a8:	08011440 	.word	0x08011440
 800e6ac:	2501      	movs	r5, #1
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	9306      	str	r3, [sp, #24]
 800e6b2:	9508      	str	r5, [sp, #32]
 800e6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	2312      	movs	r3, #18
 800e6c0:	e7b0      	b.n	800e624 <_dtoa_r+0x26c>
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	9308      	str	r3, [sp, #32]
 800e6c6:	e7f5      	b.n	800e6b4 <_dtoa_r+0x2fc>
 800e6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e6ce:	e7b8      	b.n	800e642 <_dtoa_r+0x28a>
 800e6d0:	3101      	adds	r1, #1
 800e6d2:	6041      	str	r1, [r0, #4]
 800e6d4:	0052      	lsls	r2, r2, #1
 800e6d6:	e7b8      	b.n	800e64a <_dtoa_r+0x292>
 800e6d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6da:	9a01      	ldr	r2, [sp, #4]
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	9b03      	ldr	r3, [sp, #12]
 800e6e0:	2b0e      	cmp	r3, #14
 800e6e2:	f200 809d 	bhi.w	800e820 <_dtoa_r+0x468>
 800e6e6:	2d00      	cmp	r5, #0
 800e6e8:	f000 809a 	beq.w	800e820 <_dtoa_r+0x468>
 800e6ec:	9b00      	ldr	r3, [sp, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	dd32      	ble.n	800e758 <_dtoa_r+0x3a0>
 800e6f2:	4ab7      	ldr	r2, [pc, #732]	; (800e9d0 <_dtoa_r+0x618>)
 800e6f4:	f003 030f 	and.w	r3, r3, #15
 800e6f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e6fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e700:	9b00      	ldr	r3, [sp, #0]
 800e702:	05d8      	lsls	r0, r3, #23
 800e704:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e708:	d516      	bpl.n	800e738 <_dtoa_r+0x380>
 800e70a:	4bb2      	ldr	r3, [pc, #712]	; (800e9d4 <_dtoa_r+0x61c>)
 800e70c:	ec51 0b19 	vmov	r0, r1, d9
 800e710:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e714:	f7f2 f872 	bl	80007fc <__aeabi_ddiv>
 800e718:	f007 070f 	and.w	r7, r7, #15
 800e71c:	4682      	mov	sl, r0
 800e71e:	468b      	mov	fp, r1
 800e720:	2503      	movs	r5, #3
 800e722:	4eac      	ldr	r6, [pc, #688]	; (800e9d4 <_dtoa_r+0x61c>)
 800e724:	b957      	cbnz	r7, 800e73c <_dtoa_r+0x384>
 800e726:	4642      	mov	r2, r8
 800e728:	464b      	mov	r3, r9
 800e72a:	4650      	mov	r0, sl
 800e72c:	4659      	mov	r1, fp
 800e72e:	f7f2 f865 	bl	80007fc <__aeabi_ddiv>
 800e732:	4682      	mov	sl, r0
 800e734:	468b      	mov	fp, r1
 800e736:	e028      	b.n	800e78a <_dtoa_r+0x3d2>
 800e738:	2502      	movs	r5, #2
 800e73a:	e7f2      	b.n	800e722 <_dtoa_r+0x36a>
 800e73c:	07f9      	lsls	r1, r7, #31
 800e73e:	d508      	bpl.n	800e752 <_dtoa_r+0x39a>
 800e740:	4640      	mov	r0, r8
 800e742:	4649      	mov	r1, r9
 800e744:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e748:	f7f1 ff2e 	bl	80005a8 <__aeabi_dmul>
 800e74c:	3501      	adds	r5, #1
 800e74e:	4680      	mov	r8, r0
 800e750:	4689      	mov	r9, r1
 800e752:	107f      	asrs	r7, r7, #1
 800e754:	3608      	adds	r6, #8
 800e756:	e7e5      	b.n	800e724 <_dtoa_r+0x36c>
 800e758:	f000 809b 	beq.w	800e892 <_dtoa_r+0x4da>
 800e75c:	9b00      	ldr	r3, [sp, #0]
 800e75e:	4f9d      	ldr	r7, [pc, #628]	; (800e9d4 <_dtoa_r+0x61c>)
 800e760:	425e      	negs	r6, r3
 800e762:	4b9b      	ldr	r3, [pc, #620]	; (800e9d0 <_dtoa_r+0x618>)
 800e764:	f006 020f 	and.w	r2, r6, #15
 800e768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	ec51 0b19 	vmov	r0, r1, d9
 800e774:	f7f1 ff18 	bl	80005a8 <__aeabi_dmul>
 800e778:	1136      	asrs	r6, r6, #4
 800e77a:	4682      	mov	sl, r0
 800e77c:	468b      	mov	fp, r1
 800e77e:	2300      	movs	r3, #0
 800e780:	2502      	movs	r5, #2
 800e782:	2e00      	cmp	r6, #0
 800e784:	d17a      	bne.n	800e87c <_dtoa_r+0x4c4>
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1d3      	bne.n	800e732 <_dtoa_r+0x37a>
 800e78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f000 8082 	beq.w	800e896 <_dtoa_r+0x4de>
 800e792:	4b91      	ldr	r3, [pc, #580]	; (800e9d8 <_dtoa_r+0x620>)
 800e794:	2200      	movs	r2, #0
 800e796:	4650      	mov	r0, sl
 800e798:	4659      	mov	r1, fp
 800e79a:	f7f2 f977 	bl	8000a8c <__aeabi_dcmplt>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d079      	beq.n	800e896 <_dtoa_r+0x4de>
 800e7a2:	9b03      	ldr	r3, [sp, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d076      	beq.n	800e896 <_dtoa_r+0x4de>
 800e7a8:	9b02      	ldr	r3, [sp, #8]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	dd36      	ble.n	800e81c <_dtoa_r+0x464>
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	4650      	mov	r0, sl
 800e7b2:	4659      	mov	r1, fp
 800e7b4:	1e5f      	subs	r7, r3, #1
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	4b88      	ldr	r3, [pc, #544]	; (800e9dc <_dtoa_r+0x624>)
 800e7ba:	f7f1 fef5 	bl	80005a8 <__aeabi_dmul>
 800e7be:	9e02      	ldr	r6, [sp, #8]
 800e7c0:	4682      	mov	sl, r0
 800e7c2:	468b      	mov	fp, r1
 800e7c4:	3501      	adds	r5, #1
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	f7f1 fe84 	bl	80004d4 <__aeabi_i2d>
 800e7cc:	4652      	mov	r2, sl
 800e7ce:	465b      	mov	r3, fp
 800e7d0:	f7f1 feea 	bl	80005a8 <__aeabi_dmul>
 800e7d4:	4b82      	ldr	r3, [pc, #520]	; (800e9e0 <_dtoa_r+0x628>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f7f1 fd30 	bl	800023c <__adddf3>
 800e7dc:	46d0      	mov	r8, sl
 800e7de:	46d9      	mov	r9, fp
 800e7e0:	4682      	mov	sl, r0
 800e7e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e7e6:	2e00      	cmp	r6, #0
 800e7e8:	d158      	bne.n	800e89c <_dtoa_r+0x4e4>
 800e7ea:	4b7e      	ldr	r3, [pc, #504]	; (800e9e4 <_dtoa_r+0x62c>)
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	4640      	mov	r0, r8
 800e7f0:	4649      	mov	r1, r9
 800e7f2:	f7f1 fd21 	bl	8000238 <__aeabi_dsub>
 800e7f6:	4652      	mov	r2, sl
 800e7f8:	465b      	mov	r3, fp
 800e7fa:	4680      	mov	r8, r0
 800e7fc:	4689      	mov	r9, r1
 800e7fe:	f7f2 f963 	bl	8000ac8 <__aeabi_dcmpgt>
 800e802:	2800      	cmp	r0, #0
 800e804:	f040 8295 	bne.w	800ed32 <_dtoa_r+0x97a>
 800e808:	4652      	mov	r2, sl
 800e80a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e80e:	4640      	mov	r0, r8
 800e810:	4649      	mov	r1, r9
 800e812:	f7f2 f93b 	bl	8000a8c <__aeabi_dcmplt>
 800e816:	2800      	cmp	r0, #0
 800e818:	f040 8289 	bne.w	800ed2e <_dtoa_r+0x976>
 800e81c:	ec5b ab19 	vmov	sl, fp, d9
 800e820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e822:	2b00      	cmp	r3, #0
 800e824:	f2c0 8148 	blt.w	800eab8 <_dtoa_r+0x700>
 800e828:	9a00      	ldr	r2, [sp, #0]
 800e82a:	2a0e      	cmp	r2, #14
 800e82c:	f300 8144 	bgt.w	800eab8 <_dtoa_r+0x700>
 800e830:	4b67      	ldr	r3, [pc, #412]	; (800e9d0 <_dtoa_r+0x618>)
 800e832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e836:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f280 80d5 	bge.w	800e9ec <_dtoa_r+0x634>
 800e842:	9b03      	ldr	r3, [sp, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	f300 80d1 	bgt.w	800e9ec <_dtoa_r+0x634>
 800e84a:	f040 826f 	bne.w	800ed2c <_dtoa_r+0x974>
 800e84e:	4b65      	ldr	r3, [pc, #404]	; (800e9e4 <_dtoa_r+0x62c>)
 800e850:	2200      	movs	r2, #0
 800e852:	4640      	mov	r0, r8
 800e854:	4649      	mov	r1, r9
 800e856:	f7f1 fea7 	bl	80005a8 <__aeabi_dmul>
 800e85a:	4652      	mov	r2, sl
 800e85c:	465b      	mov	r3, fp
 800e85e:	f7f2 f929 	bl	8000ab4 <__aeabi_dcmpge>
 800e862:	9e03      	ldr	r6, [sp, #12]
 800e864:	4637      	mov	r7, r6
 800e866:	2800      	cmp	r0, #0
 800e868:	f040 8245 	bne.w	800ecf6 <_dtoa_r+0x93e>
 800e86c:	9d01      	ldr	r5, [sp, #4]
 800e86e:	2331      	movs	r3, #49	; 0x31
 800e870:	f805 3b01 	strb.w	r3, [r5], #1
 800e874:	9b00      	ldr	r3, [sp, #0]
 800e876:	3301      	adds	r3, #1
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	e240      	b.n	800ecfe <_dtoa_r+0x946>
 800e87c:	07f2      	lsls	r2, r6, #31
 800e87e:	d505      	bpl.n	800e88c <_dtoa_r+0x4d4>
 800e880:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e884:	f7f1 fe90 	bl	80005a8 <__aeabi_dmul>
 800e888:	3501      	adds	r5, #1
 800e88a:	2301      	movs	r3, #1
 800e88c:	1076      	asrs	r6, r6, #1
 800e88e:	3708      	adds	r7, #8
 800e890:	e777      	b.n	800e782 <_dtoa_r+0x3ca>
 800e892:	2502      	movs	r5, #2
 800e894:	e779      	b.n	800e78a <_dtoa_r+0x3d2>
 800e896:	9f00      	ldr	r7, [sp, #0]
 800e898:	9e03      	ldr	r6, [sp, #12]
 800e89a:	e794      	b.n	800e7c6 <_dtoa_r+0x40e>
 800e89c:	9901      	ldr	r1, [sp, #4]
 800e89e:	4b4c      	ldr	r3, [pc, #304]	; (800e9d0 <_dtoa_r+0x618>)
 800e8a0:	4431      	add	r1, r6
 800e8a2:	910d      	str	r1, [sp, #52]	; 0x34
 800e8a4:	9908      	ldr	r1, [sp, #32]
 800e8a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e8aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e8ae:	2900      	cmp	r1, #0
 800e8b0:	d043      	beq.n	800e93a <_dtoa_r+0x582>
 800e8b2:	494d      	ldr	r1, [pc, #308]	; (800e9e8 <_dtoa_r+0x630>)
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	f7f1 ffa1 	bl	80007fc <__aeabi_ddiv>
 800e8ba:	4652      	mov	r2, sl
 800e8bc:	465b      	mov	r3, fp
 800e8be:	f7f1 fcbb 	bl	8000238 <__aeabi_dsub>
 800e8c2:	9d01      	ldr	r5, [sp, #4]
 800e8c4:	4682      	mov	sl, r0
 800e8c6:	468b      	mov	fp, r1
 800e8c8:	4649      	mov	r1, r9
 800e8ca:	4640      	mov	r0, r8
 800e8cc:	f7f2 f91c 	bl	8000b08 <__aeabi_d2iz>
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	f7f1 fdff 	bl	80004d4 <__aeabi_i2d>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	4640      	mov	r0, r8
 800e8dc:	4649      	mov	r1, r9
 800e8de:	f7f1 fcab 	bl	8000238 <__aeabi_dsub>
 800e8e2:	3630      	adds	r6, #48	; 0x30
 800e8e4:	f805 6b01 	strb.w	r6, [r5], #1
 800e8e8:	4652      	mov	r2, sl
 800e8ea:	465b      	mov	r3, fp
 800e8ec:	4680      	mov	r8, r0
 800e8ee:	4689      	mov	r9, r1
 800e8f0:	f7f2 f8cc 	bl	8000a8c <__aeabi_dcmplt>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d163      	bne.n	800e9c0 <_dtoa_r+0x608>
 800e8f8:	4642      	mov	r2, r8
 800e8fa:	464b      	mov	r3, r9
 800e8fc:	4936      	ldr	r1, [pc, #216]	; (800e9d8 <_dtoa_r+0x620>)
 800e8fe:	2000      	movs	r0, #0
 800e900:	f7f1 fc9a 	bl	8000238 <__aeabi_dsub>
 800e904:	4652      	mov	r2, sl
 800e906:	465b      	mov	r3, fp
 800e908:	f7f2 f8c0 	bl	8000a8c <__aeabi_dcmplt>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	f040 80b5 	bne.w	800ea7c <_dtoa_r+0x6c4>
 800e912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e914:	429d      	cmp	r5, r3
 800e916:	d081      	beq.n	800e81c <_dtoa_r+0x464>
 800e918:	4b30      	ldr	r3, [pc, #192]	; (800e9dc <_dtoa_r+0x624>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	4650      	mov	r0, sl
 800e91e:	4659      	mov	r1, fp
 800e920:	f7f1 fe42 	bl	80005a8 <__aeabi_dmul>
 800e924:	4b2d      	ldr	r3, [pc, #180]	; (800e9dc <_dtoa_r+0x624>)
 800e926:	4682      	mov	sl, r0
 800e928:	468b      	mov	fp, r1
 800e92a:	4640      	mov	r0, r8
 800e92c:	4649      	mov	r1, r9
 800e92e:	2200      	movs	r2, #0
 800e930:	f7f1 fe3a 	bl	80005a8 <__aeabi_dmul>
 800e934:	4680      	mov	r8, r0
 800e936:	4689      	mov	r9, r1
 800e938:	e7c6      	b.n	800e8c8 <_dtoa_r+0x510>
 800e93a:	4650      	mov	r0, sl
 800e93c:	4659      	mov	r1, fp
 800e93e:	f7f1 fe33 	bl	80005a8 <__aeabi_dmul>
 800e942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e944:	9d01      	ldr	r5, [sp, #4]
 800e946:	930f      	str	r3, [sp, #60]	; 0x3c
 800e948:	4682      	mov	sl, r0
 800e94a:	468b      	mov	fp, r1
 800e94c:	4649      	mov	r1, r9
 800e94e:	4640      	mov	r0, r8
 800e950:	f7f2 f8da 	bl	8000b08 <__aeabi_d2iz>
 800e954:	4606      	mov	r6, r0
 800e956:	f7f1 fdbd 	bl	80004d4 <__aeabi_i2d>
 800e95a:	3630      	adds	r6, #48	; 0x30
 800e95c:	4602      	mov	r2, r0
 800e95e:	460b      	mov	r3, r1
 800e960:	4640      	mov	r0, r8
 800e962:	4649      	mov	r1, r9
 800e964:	f7f1 fc68 	bl	8000238 <__aeabi_dsub>
 800e968:	f805 6b01 	strb.w	r6, [r5], #1
 800e96c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e96e:	429d      	cmp	r5, r3
 800e970:	4680      	mov	r8, r0
 800e972:	4689      	mov	r9, r1
 800e974:	f04f 0200 	mov.w	r2, #0
 800e978:	d124      	bne.n	800e9c4 <_dtoa_r+0x60c>
 800e97a:	4b1b      	ldr	r3, [pc, #108]	; (800e9e8 <_dtoa_r+0x630>)
 800e97c:	4650      	mov	r0, sl
 800e97e:	4659      	mov	r1, fp
 800e980:	f7f1 fc5c 	bl	800023c <__adddf3>
 800e984:	4602      	mov	r2, r0
 800e986:	460b      	mov	r3, r1
 800e988:	4640      	mov	r0, r8
 800e98a:	4649      	mov	r1, r9
 800e98c:	f7f2 f89c 	bl	8000ac8 <__aeabi_dcmpgt>
 800e990:	2800      	cmp	r0, #0
 800e992:	d173      	bne.n	800ea7c <_dtoa_r+0x6c4>
 800e994:	4652      	mov	r2, sl
 800e996:	465b      	mov	r3, fp
 800e998:	4913      	ldr	r1, [pc, #76]	; (800e9e8 <_dtoa_r+0x630>)
 800e99a:	2000      	movs	r0, #0
 800e99c:	f7f1 fc4c 	bl	8000238 <__aeabi_dsub>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	4640      	mov	r0, r8
 800e9a6:	4649      	mov	r1, r9
 800e9a8:	f7f2 f870 	bl	8000a8c <__aeabi_dcmplt>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	f43f af35 	beq.w	800e81c <_dtoa_r+0x464>
 800e9b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e9b4:	1e6b      	subs	r3, r5, #1
 800e9b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e9bc:	2b30      	cmp	r3, #48	; 0x30
 800e9be:	d0f8      	beq.n	800e9b2 <_dtoa_r+0x5fa>
 800e9c0:	9700      	str	r7, [sp, #0]
 800e9c2:	e049      	b.n	800ea58 <_dtoa_r+0x6a0>
 800e9c4:	4b05      	ldr	r3, [pc, #20]	; (800e9dc <_dtoa_r+0x624>)
 800e9c6:	f7f1 fdef 	bl	80005a8 <__aeabi_dmul>
 800e9ca:	4680      	mov	r8, r0
 800e9cc:	4689      	mov	r9, r1
 800e9ce:	e7bd      	b.n	800e94c <_dtoa_r+0x594>
 800e9d0:	08011550 	.word	0x08011550
 800e9d4:	08011528 	.word	0x08011528
 800e9d8:	3ff00000 	.word	0x3ff00000
 800e9dc:	40240000 	.word	0x40240000
 800e9e0:	401c0000 	.word	0x401c0000
 800e9e4:	40140000 	.word	0x40140000
 800e9e8:	3fe00000 	.word	0x3fe00000
 800e9ec:	9d01      	ldr	r5, [sp, #4]
 800e9ee:	4656      	mov	r6, sl
 800e9f0:	465f      	mov	r7, fp
 800e9f2:	4642      	mov	r2, r8
 800e9f4:	464b      	mov	r3, r9
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	4639      	mov	r1, r7
 800e9fa:	f7f1 feff 	bl	80007fc <__aeabi_ddiv>
 800e9fe:	f7f2 f883 	bl	8000b08 <__aeabi_d2iz>
 800ea02:	4682      	mov	sl, r0
 800ea04:	f7f1 fd66 	bl	80004d4 <__aeabi_i2d>
 800ea08:	4642      	mov	r2, r8
 800ea0a:	464b      	mov	r3, r9
 800ea0c:	f7f1 fdcc 	bl	80005a8 <__aeabi_dmul>
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	4630      	mov	r0, r6
 800ea16:	4639      	mov	r1, r7
 800ea18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ea1c:	f7f1 fc0c 	bl	8000238 <__aeabi_dsub>
 800ea20:	f805 6b01 	strb.w	r6, [r5], #1
 800ea24:	9e01      	ldr	r6, [sp, #4]
 800ea26:	9f03      	ldr	r7, [sp, #12]
 800ea28:	1bae      	subs	r6, r5, r6
 800ea2a:	42b7      	cmp	r7, r6
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	d135      	bne.n	800ea9e <_dtoa_r+0x6e6>
 800ea32:	f7f1 fc03 	bl	800023c <__adddf3>
 800ea36:	4642      	mov	r2, r8
 800ea38:	464b      	mov	r3, r9
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	460f      	mov	r7, r1
 800ea3e:	f7f2 f843 	bl	8000ac8 <__aeabi_dcmpgt>
 800ea42:	b9d0      	cbnz	r0, 800ea7a <_dtoa_r+0x6c2>
 800ea44:	4642      	mov	r2, r8
 800ea46:	464b      	mov	r3, r9
 800ea48:	4630      	mov	r0, r6
 800ea4a:	4639      	mov	r1, r7
 800ea4c:	f7f2 f814 	bl	8000a78 <__aeabi_dcmpeq>
 800ea50:	b110      	cbz	r0, 800ea58 <_dtoa_r+0x6a0>
 800ea52:	f01a 0f01 	tst.w	sl, #1
 800ea56:	d110      	bne.n	800ea7a <_dtoa_r+0x6c2>
 800ea58:	4620      	mov	r0, r4
 800ea5a:	ee18 1a10 	vmov	r1, s16
 800ea5e:	f000 fe75 	bl	800f74c <_Bfree>
 800ea62:	2300      	movs	r3, #0
 800ea64:	9800      	ldr	r0, [sp, #0]
 800ea66:	702b      	strb	r3, [r5, #0]
 800ea68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea6a:	3001      	adds	r0, #1
 800ea6c:	6018      	str	r0, [r3, #0]
 800ea6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f43f acf1 	beq.w	800e458 <_dtoa_r+0xa0>
 800ea76:	601d      	str	r5, [r3, #0]
 800ea78:	e4ee      	b.n	800e458 <_dtoa_r+0xa0>
 800ea7a:	9f00      	ldr	r7, [sp, #0]
 800ea7c:	462b      	mov	r3, r5
 800ea7e:	461d      	mov	r5, r3
 800ea80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea84:	2a39      	cmp	r2, #57	; 0x39
 800ea86:	d106      	bne.n	800ea96 <_dtoa_r+0x6de>
 800ea88:	9a01      	ldr	r2, [sp, #4]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d1f7      	bne.n	800ea7e <_dtoa_r+0x6c6>
 800ea8e:	9901      	ldr	r1, [sp, #4]
 800ea90:	2230      	movs	r2, #48	; 0x30
 800ea92:	3701      	adds	r7, #1
 800ea94:	700a      	strb	r2, [r1, #0]
 800ea96:	781a      	ldrb	r2, [r3, #0]
 800ea98:	3201      	adds	r2, #1
 800ea9a:	701a      	strb	r2, [r3, #0]
 800ea9c:	e790      	b.n	800e9c0 <_dtoa_r+0x608>
 800ea9e:	4ba6      	ldr	r3, [pc, #664]	; (800ed38 <_dtoa_r+0x980>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f7f1 fd81 	bl	80005a8 <__aeabi_dmul>
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	4606      	mov	r6, r0
 800eaac:	460f      	mov	r7, r1
 800eaae:	f7f1 ffe3 	bl	8000a78 <__aeabi_dcmpeq>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d09d      	beq.n	800e9f2 <_dtoa_r+0x63a>
 800eab6:	e7cf      	b.n	800ea58 <_dtoa_r+0x6a0>
 800eab8:	9a08      	ldr	r2, [sp, #32]
 800eaba:	2a00      	cmp	r2, #0
 800eabc:	f000 80d7 	beq.w	800ec6e <_dtoa_r+0x8b6>
 800eac0:	9a06      	ldr	r2, [sp, #24]
 800eac2:	2a01      	cmp	r2, #1
 800eac4:	f300 80ba 	bgt.w	800ec3c <_dtoa_r+0x884>
 800eac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eaca:	2a00      	cmp	r2, #0
 800eacc:	f000 80b2 	beq.w	800ec34 <_dtoa_r+0x87c>
 800ead0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ead4:	9e07      	ldr	r6, [sp, #28]
 800ead6:	9d04      	ldr	r5, [sp, #16]
 800ead8:	9a04      	ldr	r2, [sp, #16]
 800eada:	441a      	add	r2, r3
 800eadc:	9204      	str	r2, [sp, #16]
 800eade:	9a05      	ldr	r2, [sp, #20]
 800eae0:	2101      	movs	r1, #1
 800eae2:	441a      	add	r2, r3
 800eae4:	4620      	mov	r0, r4
 800eae6:	9205      	str	r2, [sp, #20]
 800eae8:	f000 ff32 	bl	800f950 <__i2b>
 800eaec:	4607      	mov	r7, r0
 800eaee:	2d00      	cmp	r5, #0
 800eaf0:	dd0c      	ble.n	800eb0c <_dtoa_r+0x754>
 800eaf2:	9b05      	ldr	r3, [sp, #20]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	dd09      	ble.n	800eb0c <_dtoa_r+0x754>
 800eaf8:	42ab      	cmp	r3, r5
 800eafa:	9a04      	ldr	r2, [sp, #16]
 800eafc:	bfa8      	it	ge
 800eafe:	462b      	movge	r3, r5
 800eb00:	1ad2      	subs	r2, r2, r3
 800eb02:	9204      	str	r2, [sp, #16]
 800eb04:	9a05      	ldr	r2, [sp, #20]
 800eb06:	1aed      	subs	r5, r5, r3
 800eb08:	1ad3      	subs	r3, r2, r3
 800eb0a:	9305      	str	r3, [sp, #20]
 800eb0c:	9b07      	ldr	r3, [sp, #28]
 800eb0e:	b31b      	cbz	r3, 800eb58 <_dtoa_r+0x7a0>
 800eb10:	9b08      	ldr	r3, [sp, #32]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	f000 80af 	beq.w	800ec76 <_dtoa_r+0x8be>
 800eb18:	2e00      	cmp	r6, #0
 800eb1a:	dd13      	ble.n	800eb44 <_dtoa_r+0x78c>
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	4632      	mov	r2, r6
 800eb20:	4620      	mov	r0, r4
 800eb22:	f000 ffd5 	bl	800fad0 <__pow5mult>
 800eb26:	ee18 2a10 	vmov	r2, s16
 800eb2a:	4601      	mov	r1, r0
 800eb2c:	4607      	mov	r7, r0
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f000 ff24 	bl	800f97c <__multiply>
 800eb34:	ee18 1a10 	vmov	r1, s16
 800eb38:	4680      	mov	r8, r0
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f000 fe06 	bl	800f74c <_Bfree>
 800eb40:	ee08 8a10 	vmov	s16, r8
 800eb44:	9b07      	ldr	r3, [sp, #28]
 800eb46:	1b9a      	subs	r2, r3, r6
 800eb48:	d006      	beq.n	800eb58 <_dtoa_r+0x7a0>
 800eb4a:	ee18 1a10 	vmov	r1, s16
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f000 ffbe 	bl	800fad0 <__pow5mult>
 800eb54:	ee08 0a10 	vmov	s16, r0
 800eb58:	2101      	movs	r1, #1
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f000 fef8 	bl	800f950 <__i2b>
 800eb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	4606      	mov	r6, r0
 800eb66:	f340 8088 	ble.w	800ec7a <_dtoa_r+0x8c2>
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	4601      	mov	r1, r0
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f000 ffae 	bl	800fad0 <__pow5mult>
 800eb74:	9b06      	ldr	r3, [sp, #24]
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	4606      	mov	r6, r0
 800eb7a:	f340 8081 	ble.w	800ec80 <_dtoa_r+0x8c8>
 800eb7e:	f04f 0800 	mov.w	r8, #0
 800eb82:	6933      	ldr	r3, [r6, #16]
 800eb84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eb88:	6918      	ldr	r0, [r3, #16]
 800eb8a:	f000 fe91 	bl	800f8b0 <__hi0bits>
 800eb8e:	f1c0 0020 	rsb	r0, r0, #32
 800eb92:	9b05      	ldr	r3, [sp, #20]
 800eb94:	4418      	add	r0, r3
 800eb96:	f010 001f 	ands.w	r0, r0, #31
 800eb9a:	f000 8092 	beq.w	800ecc2 <_dtoa_r+0x90a>
 800eb9e:	f1c0 0320 	rsb	r3, r0, #32
 800eba2:	2b04      	cmp	r3, #4
 800eba4:	f340 808a 	ble.w	800ecbc <_dtoa_r+0x904>
 800eba8:	f1c0 001c 	rsb	r0, r0, #28
 800ebac:	9b04      	ldr	r3, [sp, #16]
 800ebae:	4403      	add	r3, r0
 800ebb0:	9304      	str	r3, [sp, #16]
 800ebb2:	9b05      	ldr	r3, [sp, #20]
 800ebb4:	4403      	add	r3, r0
 800ebb6:	4405      	add	r5, r0
 800ebb8:	9305      	str	r3, [sp, #20]
 800ebba:	9b04      	ldr	r3, [sp, #16]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	dd07      	ble.n	800ebd0 <_dtoa_r+0x818>
 800ebc0:	ee18 1a10 	vmov	r1, s16
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f000 ffdc 	bl	800fb84 <__lshift>
 800ebcc:	ee08 0a10 	vmov	s16, r0
 800ebd0:	9b05      	ldr	r3, [sp, #20]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	dd05      	ble.n	800ebe2 <_dtoa_r+0x82a>
 800ebd6:	4631      	mov	r1, r6
 800ebd8:	461a      	mov	r2, r3
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 ffd2 	bl	800fb84 <__lshift>
 800ebe0:	4606      	mov	r6, r0
 800ebe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d06e      	beq.n	800ecc6 <_dtoa_r+0x90e>
 800ebe8:	ee18 0a10 	vmov	r0, s16
 800ebec:	4631      	mov	r1, r6
 800ebee:	f001 f839 	bl	800fc64 <__mcmp>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	da67      	bge.n	800ecc6 <_dtoa_r+0x90e>
 800ebf6:	9b00      	ldr	r3, [sp, #0]
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	ee18 1a10 	vmov	r1, s16
 800ebfe:	9300      	str	r3, [sp, #0]
 800ec00:	220a      	movs	r2, #10
 800ec02:	2300      	movs	r3, #0
 800ec04:	4620      	mov	r0, r4
 800ec06:	f000 fdc3 	bl	800f790 <__multadd>
 800ec0a:	9b08      	ldr	r3, [sp, #32]
 800ec0c:	ee08 0a10 	vmov	s16, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f000 81b1 	beq.w	800ef78 <_dtoa_r+0xbc0>
 800ec16:	2300      	movs	r3, #0
 800ec18:	4639      	mov	r1, r7
 800ec1a:	220a      	movs	r2, #10
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f000 fdb7 	bl	800f790 <__multadd>
 800ec22:	9b02      	ldr	r3, [sp, #8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	4607      	mov	r7, r0
 800ec28:	f300 808e 	bgt.w	800ed48 <_dtoa_r+0x990>
 800ec2c:	9b06      	ldr	r3, [sp, #24]
 800ec2e:	2b02      	cmp	r3, #2
 800ec30:	dc51      	bgt.n	800ecd6 <_dtoa_r+0x91e>
 800ec32:	e089      	b.n	800ed48 <_dtoa_r+0x990>
 800ec34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ec3a:	e74b      	b.n	800ead4 <_dtoa_r+0x71c>
 800ec3c:	9b03      	ldr	r3, [sp, #12]
 800ec3e:	1e5e      	subs	r6, r3, #1
 800ec40:	9b07      	ldr	r3, [sp, #28]
 800ec42:	42b3      	cmp	r3, r6
 800ec44:	bfbf      	itttt	lt
 800ec46:	9b07      	ldrlt	r3, [sp, #28]
 800ec48:	9607      	strlt	r6, [sp, #28]
 800ec4a:	1af2      	sublt	r2, r6, r3
 800ec4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ec4e:	bfb6      	itet	lt
 800ec50:	189b      	addlt	r3, r3, r2
 800ec52:	1b9e      	subge	r6, r3, r6
 800ec54:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ec56:	9b03      	ldr	r3, [sp, #12]
 800ec58:	bfb8      	it	lt
 800ec5a:	2600      	movlt	r6, #0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	bfb7      	itett	lt
 800ec60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ec64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ec68:	1a9d      	sublt	r5, r3, r2
 800ec6a:	2300      	movlt	r3, #0
 800ec6c:	e734      	b.n	800ead8 <_dtoa_r+0x720>
 800ec6e:	9e07      	ldr	r6, [sp, #28]
 800ec70:	9d04      	ldr	r5, [sp, #16]
 800ec72:	9f08      	ldr	r7, [sp, #32]
 800ec74:	e73b      	b.n	800eaee <_dtoa_r+0x736>
 800ec76:	9a07      	ldr	r2, [sp, #28]
 800ec78:	e767      	b.n	800eb4a <_dtoa_r+0x792>
 800ec7a:	9b06      	ldr	r3, [sp, #24]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	dc18      	bgt.n	800ecb2 <_dtoa_r+0x8fa>
 800ec80:	f1ba 0f00 	cmp.w	sl, #0
 800ec84:	d115      	bne.n	800ecb2 <_dtoa_r+0x8fa>
 800ec86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec8a:	b993      	cbnz	r3, 800ecb2 <_dtoa_r+0x8fa>
 800ec8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec90:	0d1b      	lsrs	r3, r3, #20
 800ec92:	051b      	lsls	r3, r3, #20
 800ec94:	b183      	cbz	r3, 800ecb8 <_dtoa_r+0x900>
 800ec96:	9b04      	ldr	r3, [sp, #16]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	9304      	str	r3, [sp, #16]
 800ec9c:	9b05      	ldr	r3, [sp, #20]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	9305      	str	r3, [sp, #20]
 800eca2:	f04f 0801 	mov.w	r8, #1
 800eca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f47f af6a 	bne.w	800eb82 <_dtoa_r+0x7ca>
 800ecae:	2001      	movs	r0, #1
 800ecb0:	e76f      	b.n	800eb92 <_dtoa_r+0x7da>
 800ecb2:	f04f 0800 	mov.w	r8, #0
 800ecb6:	e7f6      	b.n	800eca6 <_dtoa_r+0x8ee>
 800ecb8:	4698      	mov	r8, r3
 800ecba:	e7f4      	b.n	800eca6 <_dtoa_r+0x8ee>
 800ecbc:	f43f af7d 	beq.w	800ebba <_dtoa_r+0x802>
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	301c      	adds	r0, #28
 800ecc4:	e772      	b.n	800ebac <_dtoa_r+0x7f4>
 800ecc6:	9b03      	ldr	r3, [sp, #12]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	dc37      	bgt.n	800ed3c <_dtoa_r+0x984>
 800eccc:	9b06      	ldr	r3, [sp, #24]
 800ecce:	2b02      	cmp	r3, #2
 800ecd0:	dd34      	ble.n	800ed3c <_dtoa_r+0x984>
 800ecd2:	9b03      	ldr	r3, [sp, #12]
 800ecd4:	9302      	str	r3, [sp, #8]
 800ecd6:	9b02      	ldr	r3, [sp, #8]
 800ecd8:	b96b      	cbnz	r3, 800ecf6 <_dtoa_r+0x93e>
 800ecda:	4631      	mov	r1, r6
 800ecdc:	2205      	movs	r2, #5
 800ecde:	4620      	mov	r0, r4
 800ece0:	f000 fd56 	bl	800f790 <__multadd>
 800ece4:	4601      	mov	r1, r0
 800ece6:	4606      	mov	r6, r0
 800ece8:	ee18 0a10 	vmov	r0, s16
 800ecec:	f000 ffba 	bl	800fc64 <__mcmp>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	f73f adbb 	bgt.w	800e86c <_dtoa_r+0x4b4>
 800ecf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecf8:	9d01      	ldr	r5, [sp, #4]
 800ecfa:	43db      	mvns	r3, r3
 800ecfc:	9300      	str	r3, [sp, #0]
 800ecfe:	f04f 0800 	mov.w	r8, #0
 800ed02:	4631      	mov	r1, r6
 800ed04:	4620      	mov	r0, r4
 800ed06:	f000 fd21 	bl	800f74c <_Bfree>
 800ed0a:	2f00      	cmp	r7, #0
 800ed0c:	f43f aea4 	beq.w	800ea58 <_dtoa_r+0x6a0>
 800ed10:	f1b8 0f00 	cmp.w	r8, #0
 800ed14:	d005      	beq.n	800ed22 <_dtoa_r+0x96a>
 800ed16:	45b8      	cmp	r8, r7
 800ed18:	d003      	beq.n	800ed22 <_dtoa_r+0x96a>
 800ed1a:	4641      	mov	r1, r8
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 fd15 	bl	800f74c <_Bfree>
 800ed22:	4639      	mov	r1, r7
 800ed24:	4620      	mov	r0, r4
 800ed26:	f000 fd11 	bl	800f74c <_Bfree>
 800ed2a:	e695      	b.n	800ea58 <_dtoa_r+0x6a0>
 800ed2c:	2600      	movs	r6, #0
 800ed2e:	4637      	mov	r7, r6
 800ed30:	e7e1      	b.n	800ecf6 <_dtoa_r+0x93e>
 800ed32:	9700      	str	r7, [sp, #0]
 800ed34:	4637      	mov	r7, r6
 800ed36:	e599      	b.n	800e86c <_dtoa_r+0x4b4>
 800ed38:	40240000 	.word	0x40240000
 800ed3c:	9b08      	ldr	r3, [sp, #32]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f000 80ca 	beq.w	800eed8 <_dtoa_r+0xb20>
 800ed44:	9b03      	ldr	r3, [sp, #12]
 800ed46:	9302      	str	r3, [sp, #8]
 800ed48:	2d00      	cmp	r5, #0
 800ed4a:	dd05      	ble.n	800ed58 <_dtoa_r+0x9a0>
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	462a      	mov	r2, r5
 800ed50:	4620      	mov	r0, r4
 800ed52:	f000 ff17 	bl	800fb84 <__lshift>
 800ed56:	4607      	mov	r7, r0
 800ed58:	f1b8 0f00 	cmp.w	r8, #0
 800ed5c:	d05b      	beq.n	800ee16 <_dtoa_r+0xa5e>
 800ed5e:	6879      	ldr	r1, [r7, #4]
 800ed60:	4620      	mov	r0, r4
 800ed62:	f000 fcb3 	bl	800f6cc <_Balloc>
 800ed66:	4605      	mov	r5, r0
 800ed68:	b928      	cbnz	r0, 800ed76 <_dtoa_r+0x9be>
 800ed6a:	4b87      	ldr	r3, [pc, #540]	; (800ef88 <_dtoa_r+0xbd0>)
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ed72:	f7ff bb3b 	b.w	800e3ec <_dtoa_r+0x34>
 800ed76:	693a      	ldr	r2, [r7, #16]
 800ed78:	3202      	adds	r2, #2
 800ed7a:	0092      	lsls	r2, r2, #2
 800ed7c:	f107 010c 	add.w	r1, r7, #12
 800ed80:	300c      	adds	r0, #12
 800ed82:	f000 fc95 	bl	800f6b0 <memcpy>
 800ed86:	2201      	movs	r2, #1
 800ed88:	4629      	mov	r1, r5
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f000 fefa 	bl	800fb84 <__lshift>
 800ed90:	9b01      	ldr	r3, [sp, #4]
 800ed92:	f103 0901 	add.w	r9, r3, #1
 800ed96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	9305      	str	r3, [sp, #20]
 800ed9e:	f00a 0301 	and.w	r3, sl, #1
 800eda2:	46b8      	mov	r8, r7
 800eda4:	9304      	str	r3, [sp, #16]
 800eda6:	4607      	mov	r7, r0
 800eda8:	4631      	mov	r1, r6
 800edaa:	ee18 0a10 	vmov	r0, s16
 800edae:	f7ff fa75 	bl	800e29c <quorem>
 800edb2:	4641      	mov	r1, r8
 800edb4:	9002      	str	r0, [sp, #8]
 800edb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800edba:	ee18 0a10 	vmov	r0, s16
 800edbe:	f000 ff51 	bl	800fc64 <__mcmp>
 800edc2:	463a      	mov	r2, r7
 800edc4:	9003      	str	r0, [sp, #12]
 800edc6:	4631      	mov	r1, r6
 800edc8:	4620      	mov	r0, r4
 800edca:	f000 ff67 	bl	800fc9c <__mdiff>
 800edce:	68c2      	ldr	r2, [r0, #12]
 800edd0:	f109 3bff 	add.w	fp, r9, #4294967295
 800edd4:	4605      	mov	r5, r0
 800edd6:	bb02      	cbnz	r2, 800ee1a <_dtoa_r+0xa62>
 800edd8:	4601      	mov	r1, r0
 800edda:	ee18 0a10 	vmov	r0, s16
 800edde:	f000 ff41 	bl	800fc64 <__mcmp>
 800ede2:	4602      	mov	r2, r0
 800ede4:	4629      	mov	r1, r5
 800ede6:	4620      	mov	r0, r4
 800ede8:	9207      	str	r2, [sp, #28]
 800edea:	f000 fcaf 	bl	800f74c <_Bfree>
 800edee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800edf2:	ea43 0102 	orr.w	r1, r3, r2
 800edf6:	9b04      	ldr	r3, [sp, #16]
 800edf8:	430b      	orrs	r3, r1
 800edfa:	464d      	mov	r5, r9
 800edfc:	d10f      	bne.n	800ee1e <_dtoa_r+0xa66>
 800edfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee02:	d02a      	beq.n	800ee5a <_dtoa_r+0xaa2>
 800ee04:	9b03      	ldr	r3, [sp, #12]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	dd02      	ble.n	800ee10 <_dtoa_r+0xa58>
 800ee0a:	9b02      	ldr	r3, [sp, #8]
 800ee0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ee10:	f88b a000 	strb.w	sl, [fp]
 800ee14:	e775      	b.n	800ed02 <_dtoa_r+0x94a>
 800ee16:	4638      	mov	r0, r7
 800ee18:	e7ba      	b.n	800ed90 <_dtoa_r+0x9d8>
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	e7e2      	b.n	800ede4 <_dtoa_r+0xa2c>
 800ee1e:	9b03      	ldr	r3, [sp, #12]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	db04      	blt.n	800ee2e <_dtoa_r+0xa76>
 800ee24:	9906      	ldr	r1, [sp, #24]
 800ee26:	430b      	orrs	r3, r1
 800ee28:	9904      	ldr	r1, [sp, #16]
 800ee2a:	430b      	orrs	r3, r1
 800ee2c:	d122      	bne.n	800ee74 <_dtoa_r+0xabc>
 800ee2e:	2a00      	cmp	r2, #0
 800ee30:	ddee      	ble.n	800ee10 <_dtoa_r+0xa58>
 800ee32:	ee18 1a10 	vmov	r1, s16
 800ee36:	2201      	movs	r2, #1
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f000 fea3 	bl	800fb84 <__lshift>
 800ee3e:	4631      	mov	r1, r6
 800ee40:	ee08 0a10 	vmov	s16, r0
 800ee44:	f000 ff0e 	bl	800fc64 <__mcmp>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	dc03      	bgt.n	800ee54 <_dtoa_r+0xa9c>
 800ee4c:	d1e0      	bne.n	800ee10 <_dtoa_r+0xa58>
 800ee4e:	f01a 0f01 	tst.w	sl, #1
 800ee52:	d0dd      	beq.n	800ee10 <_dtoa_r+0xa58>
 800ee54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee58:	d1d7      	bne.n	800ee0a <_dtoa_r+0xa52>
 800ee5a:	2339      	movs	r3, #57	; 0x39
 800ee5c:	f88b 3000 	strb.w	r3, [fp]
 800ee60:	462b      	mov	r3, r5
 800ee62:	461d      	mov	r5, r3
 800ee64:	3b01      	subs	r3, #1
 800ee66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ee6a:	2a39      	cmp	r2, #57	; 0x39
 800ee6c:	d071      	beq.n	800ef52 <_dtoa_r+0xb9a>
 800ee6e:	3201      	adds	r2, #1
 800ee70:	701a      	strb	r2, [r3, #0]
 800ee72:	e746      	b.n	800ed02 <_dtoa_r+0x94a>
 800ee74:	2a00      	cmp	r2, #0
 800ee76:	dd07      	ble.n	800ee88 <_dtoa_r+0xad0>
 800ee78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee7c:	d0ed      	beq.n	800ee5a <_dtoa_r+0xaa2>
 800ee7e:	f10a 0301 	add.w	r3, sl, #1
 800ee82:	f88b 3000 	strb.w	r3, [fp]
 800ee86:	e73c      	b.n	800ed02 <_dtoa_r+0x94a>
 800ee88:	9b05      	ldr	r3, [sp, #20]
 800ee8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ee8e:	4599      	cmp	r9, r3
 800ee90:	d047      	beq.n	800ef22 <_dtoa_r+0xb6a>
 800ee92:	ee18 1a10 	vmov	r1, s16
 800ee96:	2300      	movs	r3, #0
 800ee98:	220a      	movs	r2, #10
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	f000 fc78 	bl	800f790 <__multadd>
 800eea0:	45b8      	cmp	r8, r7
 800eea2:	ee08 0a10 	vmov	s16, r0
 800eea6:	f04f 0300 	mov.w	r3, #0
 800eeaa:	f04f 020a 	mov.w	r2, #10
 800eeae:	4641      	mov	r1, r8
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	d106      	bne.n	800eec2 <_dtoa_r+0xb0a>
 800eeb4:	f000 fc6c 	bl	800f790 <__multadd>
 800eeb8:	4680      	mov	r8, r0
 800eeba:	4607      	mov	r7, r0
 800eebc:	f109 0901 	add.w	r9, r9, #1
 800eec0:	e772      	b.n	800eda8 <_dtoa_r+0x9f0>
 800eec2:	f000 fc65 	bl	800f790 <__multadd>
 800eec6:	4639      	mov	r1, r7
 800eec8:	4680      	mov	r8, r0
 800eeca:	2300      	movs	r3, #0
 800eecc:	220a      	movs	r2, #10
 800eece:	4620      	mov	r0, r4
 800eed0:	f000 fc5e 	bl	800f790 <__multadd>
 800eed4:	4607      	mov	r7, r0
 800eed6:	e7f1      	b.n	800eebc <_dtoa_r+0xb04>
 800eed8:	9b03      	ldr	r3, [sp, #12]
 800eeda:	9302      	str	r3, [sp, #8]
 800eedc:	9d01      	ldr	r5, [sp, #4]
 800eede:	ee18 0a10 	vmov	r0, s16
 800eee2:	4631      	mov	r1, r6
 800eee4:	f7ff f9da 	bl	800e29c <quorem>
 800eee8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eeec:	9b01      	ldr	r3, [sp, #4]
 800eeee:	f805 ab01 	strb.w	sl, [r5], #1
 800eef2:	1aea      	subs	r2, r5, r3
 800eef4:	9b02      	ldr	r3, [sp, #8]
 800eef6:	4293      	cmp	r3, r2
 800eef8:	dd09      	ble.n	800ef0e <_dtoa_r+0xb56>
 800eefa:	ee18 1a10 	vmov	r1, s16
 800eefe:	2300      	movs	r3, #0
 800ef00:	220a      	movs	r2, #10
 800ef02:	4620      	mov	r0, r4
 800ef04:	f000 fc44 	bl	800f790 <__multadd>
 800ef08:	ee08 0a10 	vmov	s16, r0
 800ef0c:	e7e7      	b.n	800eede <_dtoa_r+0xb26>
 800ef0e:	9b02      	ldr	r3, [sp, #8]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	bfc8      	it	gt
 800ef14:	461d      	movgt	r5, r3
 800ef16:	9b01      	ldr	r3, [sp, #4]
 800ef18:	bfd8      	it	le
 800ef1a:	2501      	movle	r5, #1
 800ef1c:	441d      	add	r5, r3
 800ef1e:	f04f 0800 	mov.w	r8, #0
 800ef22:	ee18 1a10 	vmov	r1, s16
 800ef26:	2201      	movs	r2, #1
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f000 fe2b 	bl	800fb84 <__lshift>
 800ef2e:	4631      	mov	r1, r6
 800ef30:	ee08 0a10 	vmov	s16, r0
 800ef34:	f000 fe96 	bl	800fc64 <__mcmp>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	dc91      	bgt.n	800ee60 <_dtoa_r+0xaa8>
 800ef3c:	d102      	bne.n	800ef44 <_dtoa_r+0xb8c>
 800ef3e:	f01a 0f01 	tst.w	sl, #1
 800ef42:	d18d      	bne.n	800ee60 <_dtoa_r+0xaa8>
 800ef44:	462b      	mov	r3, r5
 800ef46:	461d      	mov	r5, r3
 800ef48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef4c:	2a30      	cmp	r2, #48	; 0x30
 800ef4e:	d0fa      	beq.n	800ef46 <_dtoa_r+0xb8e>
 800ef50:	e6d7      	b.n	800ed02 <_dtoa_r+0x94a>
 800ef52:	9a01      	ldr	r2, [sp, #4]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d184      	bne.n	800ee62 <_dtoa_r+0xaaa>
 800ef58:	9b00      	ldr	r3, [sp, #0]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	2331      	movs	r3, #49	; 0x31
 800ef60:	7013      	strb	r3, [r2, #0]
 800ef62:	e6ce      	b.n	800ed02 <_dtoa_r+0x94a>
 800ef64:	4b09      	ldr	r3, [pc, #36]	; (800ef8c <_dtoa_r+0xbd4>)
 800ef66:	f7ff ba95 	b.w	800e494 <_dtoa_r+0xdc>
 800ef6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f47f aa6e 	bne.w	800e44e <_dtoa_r+0x96>
 800ef72:	4b07      	ldr	r3, [pc, #28]	; (800ef90 <_dtoa_r+0xbd8>)
 800ef74:	f7ff ba8e 	b.w	800e494 <_dtoa_r+0xdc>
 800ef78:	9b02      	ldr	r3, [sp, #8]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	dcae      	bgt.n	800eedc <_dtoa_r+0xb24>
 800ef7e:	9b06      	ldr	r3, [sp, #24]
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	f73f aea8 	bgt.w	800ecd6 <_dtoa_r+0x91e>
 800ef86:	e7a9      	b.n	800eedc <_dtoa_r+0xb24>
 800ef88:	08011440 	.word	0x08011440
 800ef8c:	08011240 	.word	0x08011240
 800ef90:	080113c1 	.word	0x080113c1

0800ef94 <rshift>:
 800ef94:	6903      	ldr	r3, [r0, #16]
 800ef96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800efa2:	f100 0414 	add.w	r4, r0, #20
 800efa6:	dd45      	ble.n	800f034 <rshift+0xa0>
 800efa8:	f011 011f 	ands.w	r1, r1, #31
 800efac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800efb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800efb4:	d10c      	bne.n	800efd0 <rshift+0x3c>
 800efb6:	f100 0710 	add.w	r7, r0, #16
 800efba:	4629      	mov	r1, r5
 800efbc:	42b1      	cmp	r1, r6
 800efbe:	d334      	bcc.n	800f02a <rshift+0x96>
 800efc0:	1a9b      	subs	r3, r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	1eea      	subs	r2, r5, #3
 800efc6:	4296      	cmp	r6, r2
 800efc8:	bf38      	it	cc
 800efca:	2300      	movcc	r3, #0
 800efcc:	4423      	add	r3, r4
 800efce:	e015      	b.n	800effc <rshift+0x68>
 800efd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800efd4:	f1c1 0820 	rsb	r8, r1, #32
 800efd8:	40cf      	lsrs	r7, r1
 800efda:	f105 0e04 	add.w	lr, r5, #4
 800efde:	46a1      	mov	r9, r4
 800efe0:	4576      	cmp	r6, lr
 800efe2:	46f4      	mov	ip, lr
 800efe4:	d815      	bhi.n	800f012 <rshift+0x7e>
 800efe6:	1a9a      	subs	r2, r3, r2
 800efe8:	0092      	lsls	r2, r2, #2
 800efea:	3a04      	subs	r2, #4
 800efec:	3501      	adds	r5, #1
 800efee:	42ae      	cmp	r6, r5
 800eff0:	bf38      	it	cc
 800eff2:	2200      	movcc	r2, #0
 800eff4:	18a3      	adds	r3, r4, r2
 800eff6:	50a7      	str	r7, [r4, r2]
 800eff8:	b107      	cbz	r7, 800effc <rshift+0x68>
 800effa:	3304      	adds	r3, #4
 800effc:	1b1a      	subs	r2, r3, r4
 800effe:	42a3      	cmp	r3, r4
 800f000:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f004:	bf08      	it	eq
 800f006:	2300      	moveq	r3, #0
 800f008:	6102      	str	r2, [r0, #16]
 800f00a:	bf08      	it	eq
 800f00c:	6143      	streq	r3, [r0, #20]
 800f00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f012:	f8dc c000 	ldr.w	ip, [ip]
 800f016:	fa0c fc08 	lsl.w	ip, ip, r8
 800f01a:	ea4c 0707 	orr.w	r7, ip, r7
 800f01e:	f849 7b04 	str.w	r7, [r9], #4
 800f022:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f026:	40cf      	lsrs	r7, r1
 800f028:	e7da      	b.n	800efe0 <rshift+0x4c>
 800f02a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f02e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f032:	e7c3      	b.n	800efbc <rshift+0x28>
 800f034:	4623      	mov	r3, r4
 800f036:	e7e1      	b.n	800effc <rshift+0x68>

0800f038 <__hexdig_fun>:
 800f038:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f03c:	2b09      	cmp	r3, #9
 800f03e:	d802      	bhi.n	800f046 <__hexdig_fun+0xe>
 800f040:	3820      	subs	r0, #32
 800f042:	b2c0      	uxtb	r0, r0
 800f044:	4770      	bx	lr
 800f046:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f04a:	2b05      	cmp	r3, #5
 800f04c:	d801      	bhi.n	800f052 <__hexdig_fun+0x1a>
 800f04e:	3847      	subs	r0, #71	; 0x47
 800f050:	e7f7      	b.n	800f042 <__hexdig_fun+0xa>
 800f052:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f056:	2b05      	cmp	r3, #5
 800f058:	d801      	bhi.n	800f05e <__hexdig_fun+0x26>
 800f05a:	3827      	subs	r0, #39	; 0x27
 800f05c:	e7f1      	b.n	800f042 <__hexdig_fun+0xa>
 800f05e:	2000      	movs	r0, #0
 800f060:	4770      	bx	lr
	...

0800f064 <__gethex>:
 800f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f068:	ed2d 8b02 	vpush	{d8}
 800f06c:	b089      	sub	sp, #36	; 0x24
 800f06e:	ee08 0a10 	vmov	s16, r0
 800f072:	9304      	str	r3, [sp, #16]
 800f074:	4bb4      	ldr	r3, [pc, #720]	; (800f348 <__gethex+0x2e4>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	9301      	str	r3, [sp, #4]
 800f07a:	4618      	mov	r0, r3
 800f07c:	468b      	mov	fp, r1
 800f07e:	4690      	mov	r8, r2
 800f080:	f7f1 f87e 	bl	8000180 <strlen>
 800f084:	9b01      	ldr	r3, [sp, #4]
 800f086:	f8db 2000 	ldr.w	r2, [fp]
 800f08a:	4403      	add	r3, r0
 800f08c:	4682      	mov	sl, r0
 800f08e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f092:	9305      	str	r3, [sp, #20]
 800f094:	1c93      	adds	r3, r2, #2
 800f096:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f09a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f09e:	32fe      	adds	r2, #254	; 0xfe
 800f0a0:	18d1      	adds	r1, r2, r3
 800f0a2:	461f      	mov	r7, r3
 800f0a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f0a8:	9100      	str	r1, [sp, #0]
 800f0aa:	2830      	cmp	r0, #48	; 0x30
 800f0ac:	d0f8      	beq.n	800f0a0 <__gethex+0x3c>
 800f0ae:	f7ff ffc3 	bl	800f038 <__hexdig_fun>
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d13a      	bne.n	800f12e <__gethex+0xca>
 800f0b8:	9901      	ldr	r1, [sp, #4]
 800f0ba:	4652      	mov	r2, sl
 800f0bc:	4638      	mov	r0, r7
 800f0be:	f001 fa33 	bl	8010528 <strncmp>
 800f0c2:	4605      	mov	r5, r0
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	d168      	bne.n	800f19a <__gethex+0x136>
 800f0c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f0cc:	eb07 060a 	add.w	r6, r7, sl
 800f0d0:	f7ff ffb2 	bl	800f038 <__hexdig_fun>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d062      	beq.n	800f19e <__gethex+0x13a>
 800f0d8:	4633      	mov	r3, r6
 800f0da:	7818      	ldrb	r0, [r3, #0]
 800f0dc:	2830      	cmp	r0, #48	; 0x30
 800f0de:	461f      	mov	r7, r3
 800f0e0:	f103 0301 	add.w	r3, r3, #1
 800f0e4:	d0f9      	beq.n	800f0da <__gethex+0x76>
 800f0e6:	f7ff ffa7 	bl	800f038 <__hexdig_fun>
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	fab0 f480 	clz	r4, r0
 800f0f0:	0964      	lsrs	r4, r4, #5
 800f0f2:	4635      	mov	r5, r6
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	463a      	mov	r2, r7
 800f0f8:	4616      	mov	r6, r2
 800f0fa:	3201      	adds	r2, #1
 800f0fc:	7830      	ldrb	r0, [r6, #0]
 800f0fe:	f7ff ff9b 	bl	800f038 <__hexdig_fun>
 800f102:	2800      	cmp	r0, #0
 800f104:	d1f8      	bne.n	800f0f8 <__gethex+0x94>
 800f106:	9901      	ldr	r1, [sp, #4]
 800f108:	4652      	mov	r2, sl
 800f10a:	4630      	mov	r0, r6
 800f10c:	f001 fa0c 	bl	8010528 <strncmp>
 800f110:	b980      	cbnz	r0, 800f134 <__gethex+0xd0>
 800f112:	b94d      	cbnz	r5, 800f128 <__gethex+0xc4>
 800f114:	eb06 050a 	add.w	r5, r6, sl
 800f118:	462a      	mov	r2, r5
 800f11a:	4616      	mov	r6, r2
 800f11c:	3201      	adds	r2, #1
 800f11e:	7830      	ldrb	r0, [r6, #0]
 800f120:	f7ff ff8a 	bl	800f038 <__hexdig_fun>
 800f124:	2800      	cmp	r0, #0
 800f126:	d1f8      	bne.n	800f11a <__gethex+0xb6>
 800f128:	1bad      	subs	r5, r5, r6
 800f12a:	00ad      	lsls	r5, r5, #2
 800f12c:	e004      	b.n	800f138 <__gethex+0xd4>
 800f12e:	2400      	movs	r4, #0
 800f130:	4625      	mov	r5, r4
 800f132:	e7e0      	b.n	800f0f6 <__gethex+0x92>
 800f134:	2d00      	cmp	r5, #0
 800f136:	d1f7      	bne.n	800f128 <__gethex+0xc4>
 800f138:	7833      	ldrb	r3, [r6, #0]
 800f13a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f13e:	2b50      	cmp	r3, #80	; 0x50
 800f140:	d13b      	bne.n	800f1ba <__gethex+0x156>
 800f142:	7873      	ldrb	r3, [r6, #1]
 800f144:	2b2b      	cmp	r3, #43	; 0x2b
 800f146:	d02c      	beq.n	800f1a2 <__gethex+0x13e>
 800f148:	2b2d      	cmp	r3, #45	; 0x2d
 800f14a:	d02e      	beq.n	800f1aa <__gethex+0x146>
 800f14c:	1c71      	adds	r1, r6, #1
 800f14e:	f04f 0900 	mov.w	r9, #0
 800f152:	7808      	ldrb	r0, [r1, #0]
 800f154:	f7ff ff70 	bl	800f038 <__hexdig_fun>
 800f158:	1e43      	subs	r3, r0, #1
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	2b18      	cmp	r3, #24
 800f15e:	d82c      	bhi.n	800f1ba <__gethex+0x156>
 800f160:	f1a0 0210 	sub.w	r2, r0, #16
 800f164:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f168:	f7ff ff66 	bl	800f038 <__hexdig_fun>
 800f16c:	1e43      	subs	r3, r0, #1
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	2b18      	cmp	r3, #24
 800f172:	d91d      	bls.n	800f1b0 <__gethex+0x14c>
 800f174:	f1b9 0f00 	cmp.w	r9, #0
 800f178:	d000      	beq.n	800f17c <__gethex+0x118>
 800f17a:	4252      	negs	r2, r2
 800f17c:	4415      	add	r5, r2
 800f17e:	f8cb 1000 	str.w	r1, [fp]
 800f182:	b1e4      	cbz	r4, 800f1be <__gethex+0x15a>
 800f184:	9b00      	ldr	r3, [sp, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	bf14      	ite	ne
 800f18a:	2700      	movne	r7, #0
 800f18c:	2706      	moveq	r7, #6
 800f18e:	4638      	mov	r0, r7
 800f190:	b009      	add	sp, #36	; 0x24
 800f192:	ecbd 8b02 	vpop	{d8}
 800f196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19a:	463e      	mov	r6, r7
 800f19c:	4625      	mov	r5, r4
 800f19e:	2401      	movs	r4, #1
 800f1a0:	e7ca      	b.n	800f138 <__gethex+0xd4>
 800f1a2:	f04f 0900 	mov.w	r9, #0
 800f1a6:	1cb1      	adds	r1, r6, #2
 800f1a8:	e7d3      	b.n	800f152 <__gethex+0xee>
 800f1aa:	f04f 0901 	mov.w	r9, #1
 800f1ae:	e7fa      	b.n	800f1a6 <__gethex+0x142>
 800f1b0:	230a      	movs	r3, #10
 800f1b2:	fb03 0202 	mla	r2, r3, r2, r0
 800f1b6:	3a10      	subs	r2, #16
 800f1b8:	e7d4      	b.n	800f164 <__gethex+0x100>
 800f1ba:	4631      	mov	r1, r6
 800f1bc:	e7df      	b.n	800f17e <__gethex+0x11a>
 800f1be:	1bf3      	subs	r3, r6, r7
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	2b07      	cmp	r3, #7
 800f1c6:	dc0b      	bgt.n	800f1e0 <__gethex+0x17c>
 800f1c8:	ee18 0a10 	vmov	r0, s16
 800f1cc:	f000 fa7e 	bl	800f6cc <_Balloc>
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	b940      	cbnz	r0, 800f1e6 <__gethex+0x182>
 800f1d4:	4b5d      	ldr	r3, [pc, #372]	; (800f34c <__gethex+0x2e8>)
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	21de      	movs	r1, #222	; 0xde
 800f1da:	485d      	ldr	r0, [pc, #372]	; (800f350 <__gethex+0x2ec>)
 800f1dc:	f001 f9c6 	bl	801056c <__assert_func>
 800f1e0:	3101      	adds	r1, #1
 800f1e2:	105b      	asrs	r3, r3, #1
 800f1e4:	e7ee      	b.n	800f1c4 <__gethex+0x160>
 800f1e6:	f100 0914 	add.w	r9, r0, #20
 800f1ea:	f04f 0b00 	mov.w	fp, #0
 800f1ee:	f1ca 0301 	rsb	r3, sl, #1
 800f1f2:	f8cd 9008 	str.w	r9, [sp, #8]
 800f1f6:	f8cd b000 	str.w	fp, [sp]
 800f1fa:	9306      	str	r3, [sp, #24]
 800f1fc:	42b7      	cmp	r7, r6
 800f1fe:	d340      	bcc.n	800f282 <__gethex+0x21e>
 800f200:	9802      	ldr	r0, [sp, #8]
 800f202:	9b00      	ldr	r3, [sp, #0]
 800f204:	f840 3b04 	str.w	r3, [r0], #4
 800f208:	eba0 0009 	sub.w	r0, r0, r9
 800f20c:	1080      	asrs	r0, r0, #2
 800f20e:	0146      	lsls	r6, r0, #5
 800f210:	6120      	str	r0, [r4, #16]
 800f212:	4618      	mov	r0, r3
 800f214:	f000 fb4c 	bl	800f8b0 <__hi0bits>
 800f218:	1a30      	subs	r0, r6, r0
 800f21a:	f8d8 6000 	ldr.w	r6, [r8]
 800f21e:	42b0      	cmp	r0, r6
 800f220:	dd63      	ble.n	800f2ea <__gethex+0x286>
 800f222:	1b87      	subs	r7, r0, r6
 800f224:	4639      	mov	r1, r7
 800f226:	4620      	mov	r0, r4
 800f228:	f000 fef0 	bl	801000c <__any_on>
 800f22c:	4682      	mov	sl, r0
 800f22e:	b1a8      	cbz	r0, 800f25c <__gethex+0x1f8>
 800f230:	1e7b      	subs	r3, r7, #1
 800f232:	1159      	asrs	r1, r3, #5
 800f234:	f003 021f 	and.w	r2, r3, #31
 800f238:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f23c:	f04f 0a01 	mov.w	sl, #1
 800f240:	fa0a f202 	lsl.w	r2, sl, r2
 800f244:	420a      	tst	r2, r1
 800f246:	d009      	beq.n	800f25c <__gethex+0x1f8>
 800f248:	4553      	cmp	r3, sl
 800f24a:	dd05      	ble.n	800f258 <__gethex+0x1f4>
 800f24c:	1eb9      	subs	r1, r7, #2
 800f24e:	4620      	mov	r0, r4
 800f250:	f000 fedc 	bl	801000c <__any_on>
 800f254:	2800      	cmp	r0, #0
 800f256:	d145      	bne.n	800f2e4 <__gethex+0x280>
 800f258:	f04f 0a02 	mov.w	sl, #2
 800f25c:	4639      	mov	r1, r7
 800f25e:	4620      	mov	r0, r4
 800f260:	f7ff fe98 	bl	800ef94 <rshift>
 800f264:	443d      	add	r5, r7
 800f266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f26a:	42ab      	cmp	r3, r5
 800f26c:	da4c      	bge.n	800f308 <__gethex+0x2a4>
 800f26e:	ee18 0a10 	vmov	r0, s16
 800f272:	4621      	mov	r1, r4
 800f274:	f000 fa6a 	bl	800f74c <_Bfree>
 800f278:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f27a:	2300      	movs	r3, #0
 800f27c:	6013      	str	r3, [r2, #0]
 800f27e:	27a3      	movs	r7, #163	; 0xa3
 800f280:	e785      	b.n	800f18e <__gethex+0x12a>
 800f282:	1e73      	subs	r3, r6, #1
 800f284:	9a05      	ldr	r2, [sp, #20]
 800f286:	9303      	str	r3, [sp, #12]
 800f288:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d019      	beq.n	800f2c4 <__gethex+0x260>
 800f290:	f1bb 0f20 	cmp.w	fp, #32
 800f294:	d107      	bne.n	800f2a6 <__gethex+0x242>
 800f296:	9b02      	ldr	r3, [sp, #8]
 800f298:	9a00      	ldr	r2, [sp, #0]
 800f29a:	f843 2b04 	str.w	r2, [r3], #4
 800f29e:	9302      	str	r3, [sp, #8]
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	469b      	mov	fp, r3
 800f2a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f2aa:	f7ff fec5 	bl	800f038 <__hexdig_fun>
 800f2ae:	9b00      	ldr	r3, [sp, #0]
 800f2b0:	f000 000f 	and.w	r0, r0, #15
 800f2b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f2b8:	4303      	orrs	r3, r0
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	f10b 0b04 	add.w	fp, fp, #4
 800f2c0:	9b03      	ldr	r3, [sp, #12]
 800f2c2:	e00d      	b.n	800f2e0 <__gethex+0x27c>
 800f2c4:	9b03      	ldr	r3, [sp, #12]
 800f2c6:	9a06      	ldr	r2, [sp, #24]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	42bb      	cmp	r3, r7
 800f2cc:	d3e0      	bcc.n	800f290 <__gethex+0x22c>
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	9901      	ldr	r1, [sp, #4]
 800f2d2:	9307      	str	r3, [sp, #28]
 800f2d4:	4652      	mov	r2, sl
 800f2d6:	f001 f927 	bl	8010528 <strncmp>
 800f2da:	9b07      	ldr	r3, [sp, #28]
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	d1d7      	bne.n	800f290 <__gethex+0x22c>
 800f2e0:	461e      	mov	r6, r3
 800f2e2:	e78b      	b.n	800f1fc <__gethex+0x198>
 800f2e4:	f04f 0a03 	mov.w	sl, #3
 800f2e8:	e7b8      	b.n	800f25c <__gethex+0x1f8>
 800f2ea:	da0a      	bge.n	800f302 <__gethex+0x29e>
 800f2ec:	1a37      	subs	r7, r6, r0
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	ee18 0a10 	vmov	r0, s16
 800f2f4:	463a      	mov	r2, r7
 800f2f6:	f000 fc45 	bl	800fb84 <__lshift>
 800f2fa:	1bed      	subs	r5, r5, r7
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	f100 0914 	add.w	r9, r0, #20
 800f302:	f04f 0a00 	mov.w	sl, #0
 800f306:	e7ae      	b.n	800f266 <__gethex+0x202>
 800f308:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f30c:	42a8      	cmp	r0, r5
 800f30e:	dd72      	ble.n	800f3f6 <__gethex+0x392>
 800f310:	1b45      	subs	r5, r0, r5
 800f312:	42ae      	cmp	r6, r5
 800f314:	dc36      	bgt.n	800f384 <__gethex+0x320>
 800f316:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f31a:	2b02      	cmp	r3, #2
 800f31c:	d02a      	beq.n	800f374 <__gethex+0x310>
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d02c      	beq.n	800f37c <__gethex+0x318>
 800f322:	2b01      	cmp	r3, #1
 800f324:	d11c      	bne.n	800f360 <__gethex+0x2fc>
 800f326:	42ae      	cmp	r6, r5
 800f328:	d11a      	bne.n	800f360 <__gethex+0x2fc>
 800f32a:	2e01      	cmp	r6, #1
 800f32c:	d112      	bne.n	800f354 <__gethex+0x2f0>
 800f32e:	9a04      	ldr	r2, [sp, #16]
 800f330:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f334:	6013      	str	r3, [r2, #0]
 800f336:	2301      	movs	r3, #1
 800f338:	6123      	str	r3, [r4, #16]
 800f33a:	f8c9 3000 	str.w	r3, [r9]
 800f33e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f340:	2762      	movs	r7, #98	; 0x62
 800f342:	601c      	str	r4, [r3, #0]
 800f344:	e723      	b.n	800f18e <__gethex+0x12a>
 800f346:	bf00      	nop
 800f348:	080114b8 	.word	0x080114b8
 800f34c:	08011440 	.word	0x08011440
 800f350:	08011451 	.word	0x08011451
 800f354:	1e71      	subs	r1, r6, #1
 800f356:	4620      	mov	r0, r4
 800f358:	f000 fe58 	bl	801000c <__any_on>
 800f35c:	2800      	cmp	r0, #0
 800f35e:	d1e6      	bne.n	800f32e <__gethex+0x2ca>
 800f360:	ee18 0a10 	vmov	r0, s16
 800f364:	4621      	mov	r1, r4
 800f366:	f000 f9f1 	bl	800f74c <_Bfree>
 800f36a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f36c:	2300      	movs	r3, #0
 800f36e:	6013      	str	r3, [r2, #0]
 800f370:	2750      	movs	r7, #80	; 0x50
 800f372:	e70c      	b.n	800f18e <__gethex+0x12a>
 800f374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1f2      	bne.n	800f360 <__gethex+0x2fc>
 800f37a:	e7d8      	b.n	800f32e <__gethex+0x2ca>
 800f37c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d1d5      	bne.n	800f32e <__gethex+0x2ca>
 800f382:	e7ed      	b.n	800f360 <__gethex+0x2fc>
 800f384:	1e6f      	subs	r7, r5, #1
 800f386:	f1ba 0f00 	cmp.w	sl, #0
 800f38a:	d131      	bne.n	800f3f0 <__gethex+0x38c>
 800f38c:	b127      	cbz	r7, 800f398 <__gethex+0x334>
 800f38e:	4639      	mov	r1, r7
 800f390:	4620      	mov	r0, r4
 800f392:	f000 fe3b 	bl	801000c <__any_on>
 800f396:	4682      	mov	sl, r0
 800f398:	117b      	asrs	r3, r7, #5
 800f39a:	2101      	movs	r1, #1
 800f39c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f3a0:	f007 071f 	and.w	r7, r7, #31
 800f3a4:	fa01 f707 	lsl.w	r7, r1, r7
 800f3a8:	421f      	tst	r7, r3
 800f3aa:	4629      	mov	r1, r5
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	bf18      	it	ne
 800f3b0:	f04a 0a02 	orrne.w	sl, sl, #2
 800f3b4:	1b76      	subs	r6, r6, r5
 800f3b6:	f7ff fded 	bl	800ef94 <rshift>
 800f3ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f3be:	2702      	movs	r7, #2
 800f3c0:	f1ba 0f00 	cmp.w	sl, #0
 800f3c4:	d048      	beq.n	800f458 <__gethex+0x3f4>
 800f3c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3ca:	2b02      	cmp	r3, #2
 800f3cc:	d015      	beq.n	800f3fa <__gethex+0x396>
 800f3ce:	2b03      	cmp	r3, #3
 800f3d0:	d017      	beq.n	800f402 <__gethex+0x39e>
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d109      	bne.n	800f3ea <__gethex+0x386>
 800f3d6:	f01a 0f02 	tst.w	sl, #2
 800f3da:	d006      	beq.n	800f3ea <__gethex+0x386>
 800f3dc:	f8d9 0000 	ldr.w	r0, [r9]
 800f3e0:	ea4a 0a00 	orr.w	sl, sl, r0
 800f3e4:	f01a 0f01 	tst.w	sl, #1
 800f3e8:	d10e      	bne.n	800f408 <__gethex+0x3a4>
 800f3ea:	f047 0710 	orr.w	r7, r7, #16
 800f3ee:	e033      	b.n	800f458 <__gethex+0x3f4>
 800f3f0:	f04f 0a01 	mov.w	sl, #1
 800f3f4:	e7d0      	b.n	800f398 <__gethex+0x334>
 800f3f6:	2701      	movs	r7, #1
 800f3f8:	e7e2      	b.n	800f3c0 <__gethex+0x35c>
 800f3fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3fc:	f1c3 0301 	rsb	r3, r3, #1
 800f400:	9315      	str	r3, [sp, #84]	; 0x54
 800f402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f404:	2b00      	cmp	r3, #0
 800f406:	d0f0      	beq.n	800f3ea <__gethex+0x386>
 800f408:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f40c:	f104 0314 	add.w	r3, r4, #20
 800f410:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f414:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f418:	f04f 0c00 	mov.w	ip, #0
 800f41c:	4618      	mov	r0, r3
 800f41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f422:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f426:	d01c      	beq.n	800f462 <__gethex+0x3fe>
 800f428:	3201      	adds	r2, #1
 800f42a:	6002      	str	r2, [r0, #0]
 800f42c:	2f02      	cmp	r7, #2
 800f42e:	f104 0314 	add.w	r3, r4, #20
 800f432:	d13f      	bne.n	800f4b4 <__gethex+0x450>
 800f434:	f8d8 2000 	ldr.w	r2, [r8]
 800f438:	3a01      	subs	r2, #1
 800f43a:	42b2      	cmp	r2, r6
 800f43c:	d10a      	bne.n	800f454 <__gethex+0x3f0>
 800f43e:	1171      	asrs	r1, r6, #5
 800f440:	2201      	movs	r2, #1
 800f442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f446:	f006 061f 	and.w	r6, r6, #31
 800f44a:	fa02 f606 	lsl.w	r6, r2, r6
 800f44e:	421e      	tst	r6, r3
 800f450:	bf18      	it	ne
 800f452:	4617      	movne	r7, r2
 800f454:	f047 0720 	orr.w	r7, r7, #32
 800f458:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f45a:	601c      	str	r4, [r3, #0]
 800f45c:	9b04      	ldr	r3, [sp, #16]
 800f45e:	601d      	str	r5, [r3, #0]
 800f460:	e695      	b.n	800f18e <__gethex+0x12a>
 800f462:	4299      	cmp	r1, r3
 800f464:	f843 cc04 	str.w	ip, [r3, #-4]
 800f468:	d8d8      	bhi.n	800f41c <__gethex+0x3b8>
 800f46a:	68a3      	ldr	r3, [r4, #8]
 800f46c:	459b      	cmp	fp, r3
 800f46e:	db19      	blt.n	800f4a4 <__gethex+0x440>
 800f470:	6861      	ldr	r1, [r4, #4]
 800f472:	ee18 0a10 	vmov	r0, s16
 800f476:	3101      	adds	r1, #1
 800f478:	f000 f928 	bl	800f6cc <_Balloc>
 800f47c:	4681      	mov	r9, r0
 800f47e:	b918      	cbnz	r0, 800f488 <__gethex+0x424>
 800f480:	4b1a      	ldr	r3, [pc, #104]	; (800f4ec <__gethex+0x488>)
 800f482:	4602      	mov	r2, r0
 800f484:	2184      	movs	r1, #132	; 0x84
 800f486:	e6a8      	b.n	800f1da <__gethex+0x176>
 800f488:	6922      	ldr	r2, [r4, #16]
 800f48a:	3202      	adds	r2, #2
 800f48c:	f104 010c 	add.w	r1, r4, #12
 800f490:	0092      	lsls	r2, r2, #2
 800f492:	300c      	adds	r0, #12
 800f494:	f000 f90c 	bl	800f6b0 <memcpy>
 800f498:	4621      	mov	r1, r4
 800f49a:	ee18 0a10 	vmov	r0, s16
 800f49e:	f000 f955 	bl	800f74c <_Bfree>
 800f4a2:	464c      	mov	r4, r9
 800f4a4:	6923      	ldr	r3, [r4, #16]
 800f4a6:	1c5a      	adds	r2, r3, #1
 800f4a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f4ac:	6122      	str	r2, [r4, #16]
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	615a      	str	r2, [r3, #20]
 800f4b2:	e7bb      	b.n	800f42c <__gethex+0x3c8>
 800f4b4:	6922      	ldr	r2, [r4, #16]
 800f4b6:	455a      	cmp	r2, fp
 800f4b8:	dd0b      	ble.n	800f4d2 <__gethex+0x46e>
 800f4ba:	2101      	movs	r1, #1
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f7ff fd69 	bl	800ef94 <rshift>
 800f4c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4c6:	3501      	adds	r5, #1
 800f4c8:	42ab      	cmp	r3, r5
 800f4ca:	f6ff aed0 	blt.w	800f26e <__gethex+0x20a>
 800f4ce:	2701      	movs	r7, #1
 800f4d0:	e7c0      	b.n	800f454 <__gethex+0x3f0>
 800f4d2:	f016 061f 	ands.w	r6, r6, #31
 800f4d6:	d0fa      	beq.n	800f4ce <__gethex+0x46a>
 800f4d8:	4453      	add	r3, sl
 800f4da:	f1c6 0620 	rsb	r6, r6, #32
 800f4de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f4e2:	f000 f9e5 	bl	800f8b0 <__hi0bits>
 800f4e6:	42b0      	cmp	r0, r6
 800f4e8:	dbe7      	blt.n	800f4ba <__gethex+0x456>
 800f4ea:	e7f0      	b.n	800f4ce <__gethex+0x46a>
 800f4ec:	08011440 	.word	0x08011440

0800f4f0 <L_shift>:
 800f4f0:	f1c2 0208 	rsb	r2, r2, #8
 800f4f4:	0092      	lsls	r2, r2, #2
 800f4f6:	b570      	push	{r4, r5, r6, lr}
 800f4f8:	f1c2 0620 	rsb	r6, r2, #32
 800f4fc:	6843      	ldr	r3, [r0, #4]
 800f4fe:	6804      	ldr	r4, [r0, #0]
 800f500:	fa03 f506 	lsl.w	r5, r3, r6
 800f504:	432c      	orrs	r4, r5
 800f506:	40d3      	lsrs	r3, r2
 800f508:	6004      	str	r4, [r0, #0]
 800f50a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f50e:	4288      	cmp	r0, r1
 800f510:	d3f4      	bcc.n	800f4fc <L_shift+0xc>
 800f512:	bd70      	pop	{r4, r5, r6, pc}

0800f514 <__match>:
 800f514:	b530      	push	{r4, r5, lr}
 800f516:	6803      	ldr	r3, [r0, #0]
 800f518:	3301      	adds	r3, #1
 800f51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f51e:	b914      	cbnz	r4, 800f526 <__match+0x12>
 800f520:	6003      	str	r3, [r0, #0]
 800f522:	2001      	movs	r0, #1
 800f524:	bd30      	pop	{r4, r5, pc}
 800f526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f52a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f52e:	2d19      	cmp	r5, #25
 800f530:	bf98      	it	ls
 800f532:	3220      	addls	r2, #32
 800f534:	42a2      	cmp	r2, r4
 800f536:	d0f0      	beq.n	800f51a <__match+0x6>
 800f538:	2000      	movs	r0, #0
 800f53a:	e7f3      	b.n	800f524 <__match+0x10>

0800f53c <__hexnan>:
 800f53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f540:	680b      	ldr	r3, [r1, #0]
 800f542:	115e      	asrs	r6, r3, #5
 800f544:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f548:	f013 031f 	ands.w	r3, r3, #31
 800f54c:	b087      	sub	sp, #28
 800f54e:	bf18      	it	ne
 800f550:	3604      	addne	r6, #4
 800f552:	2500      	movs	r5, #0
 800f554:	1f37      	subs	r7, r6, #4
 800f556:	4690      	mov	r8, r2
 800f558:	6802      	ldr	r2, [r0, #0]
 800f55a:	9301      	str	r3, [sp, #4]
 800f55c:	4682      	mov	sl, r0
 800f55e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f562:	46b9      	mov	r9, r7
 800f564:	463c      	mov	r4, r7
 800f566:	9502      	str	r5, [sp, #8]
 800f568:	46ab      	mov	fp, r5
 800f56a:	7851      	ldrb	r1, [r2, #1]
 800f56c:	1c53      	adds	r3, r2, #1
 800f56e:	9303      	str	r3, [sp, #12]
 800f570:	b341      	cbz	r1, 800f5c4 <__hexnan+0x88>
 800f572:	4608      	mov	r0, r1
 800f574:	9205      	str	r2, [sp, #20]
 800f576:	9104      	str	r1, [sp, #16]
 800f578:	f7ff fd5e 	bl	800f038 <__hexdig_fun>
 800f57c:	2800      	cmp	r0, #0
 800f57e:	d14f      	bne.n	800f620 <__hexnan+0xe4>
 800f580:	9904      	ldr	r1, [sp, #16]
 800f582:	9a05      	ldr	r2, [sp, #20]
 800f584:	2920      	cmp	r1, #32
 800f586:	d818      	bhi.n	800f5ba <__hexnan+0x7e>
 800f588:	9b02      	ldr	r3, [sp, #8]
 800f58a:	459b      	cmp	fp, r3
 800f58c:	dd13      	ble.n	800f5b6 <__hexnan+0x7a>
 800f58e:	454c      	cmp	r4, r9
 800f590:	d206      	bcs.n	800f5a0 <__hexnan+0x64>
 800f592:	2d07      	cmp	r5, #7
 800f594:	dc04      	bgt.n	800f5a0 <__hexnan+0x64>
 800f596:	462a      	mov	r2, r5
 800f598:	4649      	mov	r1, r9
 800f59a:	4620      	mov	r0, r4
 800f59c:	f7ff ffa8 	bl	800f4f0 <L_shift>
 800f5a0:	4544      	cmp	r4, r8
 800f5a2:	d950      	bls.n	800f646 <__hexnan+0x10a>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	f1a4 0904 	sub.w	r9, r4, #4
 800f5aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5ae:	f8cd b008 	str.w	fp, [sp, #8]
 800f5b2:	464c      	mov	r4, r9
 800f5b4:	461d      	mov	r5, r3
 800f5b6:	9a03      	ldr	r2, [sp, #12]
 800f5b8:	e7d7      	b.n	800f56a <__hexnan+0x2e>
 800f5ba:	2929      	cmp	r1, #41	; 0x29
 800f5bc:	d156      	bne.n	800f66c <__hexnan+0x130>
 800f5be:	3202      	adds	r2, #2
 800f5c0:	f8ca 2000 	str.w	r2, [sl]
 800f5c4:	f1bb 0f00 	cmp.w	fp, #0
 800f5c8:	d050      	beq.n	800f66c <__hexnan+0x130>
 800f5ca:	454c      	cmp	r4, r9
 800f5cc:	d206      	bcs.n	800f5dc <__hexnan+0xa0>
 800f5ce:	2d07      	cmp	r5, #7
 800f5d0:	dc04      	bgt.n	800f5dc <__hexnan+0xa0>
 800f5d2:	462a      	mov	r2, r5
 800f5d4:	4649      	mov	r1, r9
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	f7ff ff8a 	bl	800f4f0 <L_shift>
 800f5dc:	4544      	cmp	r4, r8
 800f5de:	d934      	bls.n	800f64a <__hexnan+0x10e>
 800f5e0:	f1a8 0204 	sub.w	r2, r8, #4
 800f5e4:	4623      	mov	r3, r4
 800f5e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800f5ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800f5ee:	429f      	cmp	r7, r3
 800f5f0:	d2f9      	bcs.n	800f5e6 <__hexnan+0xaa>
 800f5f2:	1b3b      	subs	r3, r7, r4
 800f5f4:	f023 0303 	bic.w	r3, r3, #3
 800f5f8:	3304      	adds	r3, #4
 800f5fa:	3401      	adds	r4, #1
 800f5fc:	3e03      	subs	r6, #3
 800f5fe:	42b4      	cmp	r4, r6
 800f600:	bf88      	it	hi
 800f602:	2304      	movhi	r3, #4
 800f604:	4443      	add	r3, r8
 800f606:	2200      	movs	r2, #0
 800f608:	f843 2b04 	str.w	r2, [r3], #4
 800f60c:	429f      	cmp	r7, r3
 800f60e:	d2fb      	bcs.n	800f608 <__hexnan+0xcc>
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	b91b      	cbnz	r3, 800f61c <__hexnan+0xe0>
 800f614:	4547      	cmp	r7, r8
 800f616:	d127      	bne.n	800f668 <__hexnan+0x12c>
 800f618:	2301      	movs	r3, #1
 800f61a:	603b      	str	r3, [r7, #0]
 800f61c:	2005      	movs	r0, #5
 800f61e:	e026      	b.n	800f66e <__hexnan+0x132>
 800f620:	3501      	adds	r5, #1
 800f622:	2d08      	cmp	r5, #8
 800f624:	f10b 0b01 	add.w	fp, fp, #1
 800f628:	dd06      	ble.n	800f638 <__hexnan+0xfc>
 800f62a:	4544      	cmp	r4, r8
 800f62c:	d9c3      	bls.n	800f5b6 <__hexnan+0x7a>
 800f62e:	2300      	movs	r3, #0
 800f630:	f844 3c04 	str.w	r3, [r4, #-4]
 800f634:	2501      	movs	r5, #1
 800f636:	3c04      	subs	r4, #4
 800f638:	6822      	ldr	r2, [r4, #0]
 800f63a:	f000 000f 	and.w	r0, r0, #15
 800f63e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f642:	6022      	str	r2, [r4, #0]
 800f644:	e7b7      	b.n	800f5b6 <__hexnan+0x7a>
 800f646:	2508      	movs	r5, #8
 800f648:	e7b5      	b.n	800f5b6 <__hexnan+0x7a>
 800f64a:	9b01      	ldr	r3, [sp, #4]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d0df      	beq.n	800f610 <__hexnan+0xd4>
 800f650:	f04f 32ff 	mov.w	r2, #4294967295
 800f654:	f1c3 0320 	rsb	r3, r3, #32
 800f658:	fa22 f303 	lsr.w	r3, r2, r3
 800f65c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f660:	401a      	ands	r2, r3
 800f662:	f846 2c04 	str.w	r2, [r6, #-4]
 800f666:	e7d3      	b.n	800f610 <__hexnan+0xd4>
 800f668:	3f04      	subs	r7, #4
 800f66a:	e7d1      	b.n	800f610 <__hexnan+0xd4>
 800f66c:	2004      	movs	r0, #4
 800f66e:	b007      	add	sp, #28
 800f670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f674 <_localeconv_r>:
 800f674:	4800      	ldr	r0, [pc, #0]	; (800f678 <_localeconv_r+0x4>)
 800f676:	4770      	bx	lr
 800f678:	200002e8 	.word	0x200002e8

0800f67c <malloc>:
 800f67c:	4b02      	ldr	r3, [pc, #8]	; (800f688 <malloc+0xc>)
 800f67e:	4601      	mov	r1, r0
 800f680:	6818      	ldr	r0, [r3, #0]
 800f682:	f000 bd67 	b.w	8010154 <_malloc_r>
 800f686:	bf00      	nop
 800f688:	20000190 	.word	0x20000190

0800f68c <__ascii_mbtowc>:
 800f68c:	b082      	sub	sp, #8
 800f68e:	b901      	cbnz	r1, 800f692 <__ascii_mbtowc+0x6>
 800f690:	a901      	add	r1, sp, #4
 800f692:	b142      	cbz	r2, 800f6a6 <__ascii_mbtowc+0x1a>
 800f694:	b14b      	cbz	r3, 800f6aa <__ascii_mbtowc+0x1e>
 800f696:	7813      	ldrb	r3, [r2, #0]
 800f698:	600b      	str	r3, [r1, #0]
 800f69a:	7812      	ldrb	r2, [r2, #0]
 800f69c:	1e10      	subs	r0, r2, #0
 800f69e:	bf18      	it	ne
 800f6a0:	2001      	movne	r0, #1
 800f6a2:	b002      	add	sp, #8
 800f6a4:	4770      	bx	lr
 800f6a6:	4610      	mov	r0, r2
 800f6a8:	e7fb      	b.n	800f6a2 <__ascii_mbtowc+0x16>
 800f6aa:	f06f 0001 	mvn.w	r0, #1
 800f6ae:	e7f8      	b.n	800f6a2 <__ascii_mbtowc+0x16>

0800f6b0 <memcpy>:
 800f6b0:	440a      	add	r2, r1
 800f6b2:	4291      	cmp	r1, r2
 800f6b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6b8:	d100      	bne.n	800f6bc <memcpy+0xc>
 800f6ba:	4770      	bx	lr
 800f6bc:	b510      	push	{r4, lr}
 800f6be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6c6:	4291      	cmp	r1, r2
 800f6c8:	d1f9      	bne.n	800f6be <memcpy+0xe>
 800f6ca:	bd10      	pop	{r4, pc}

0800f6cc <_Balloc>:
 800f6cc:	b570      	push	{r4, r5, r6, lr}
 800f6ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	460d      	mov	r5, r1
 800f6d4:	b976      	cbnz	r6, 800f6f4 <_Balloc+0x28>
 800f6d6:	2010      	movs	r0, #16
 800f6d8:	f7ff ffd0 	bl	800f67c <malloc>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	6260      	str	r0, [r4, #36]	; 0x24
 800f6e0:	b920      	cbnz	r0, 800f6ec <_Balloc+0x20>
 800f6e2:	4b18      	ldr	r3, [pc, #96]	; (800f744 <_Balloc+0x78>)
 800f6e4:	4818      	ldr	r0, [pc, #96]	; (800f748 <_Balloc+0x7c>)
 800f6e6:	2166      	movs	r1, #102	; 0x66
 800f6e8:	f000 ff40 	bl	801056c <__assert_func>
 800f6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6f0:	6006      	str	r6, [r0, #0]
 800f6f2:	60c6      	str	r6, [r0, #12]
 800f6f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f6f6:	68f3      	ldr	r3, [r6, #12]
 800f6f8:	b183      	cbz	r3, 800f71c <_Balloc+0x50>
 800f6fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f702:	b9b8      	cbnz	r0, 800f734 <_Balloc+0x68>
 800f704:	2101      	movs	r1, #1
 800f706:	fa01 f605 	lsl.w	r6, r1, r5
 800f70a:	1d72      	adds	r2, r6, #5
 800f70c:	0092      	lsls	r2, r2, #2
 800f70e:	4620      	mov	r0, r4
 800f710:	f000 fc9d 	bl	801004e <_calloc_r>
 800f714:	b160      	cbz	r0, 800f730 <_Balloc+0x64>
 800f716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f71a:	e00e      	b.n	800f73a <_Balloc+0x6e>
 800f71c:	2221      	movs	r2, #33	; 0x21
 800f71e:	2104      	movs	r1, #4
 800f720:	4620      	mov	r0, r4
 800f722:	f000 fc94 	bl	801004e <_calloc_r>
 800f726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f728:	60f0      	str	r0, [r6, #12]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d1e4      	bne.n	800f6fa <_Balloc+0x2e>
 800f730:	2000      	movs	r0, #0
 800f732:	bd70      	pop	{r4, r5, r6, pc}
 800f734:	6802      	ldr	r2, [r0, #0]
 800f736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f73a:	2300      	movs	r3, #0
 800f73c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f740:	e7f7      	b.n	800f732 <_Balloc+0x66>
 800f742:	bf00      	nop
 800f744:	080113ce 	.word	0x080113ce
 800f748:	080114cc 	.word	0x080114cc

0800f74c <_Bfree>:
 800f74c:	b570      	push	{r4, r5, r6, lr}
 800f74e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f750:	4605      	mov	r5, r0
 800f752:	460c      	mov	r4, r1
 800f754:	b976      	cbnz	r6, 800f774 <_Bfree+0x28>
 800f756:	2010      	movs	r0, #16
 800f758:	f7ff ff90 	bl	800f67c <malloc>
 800f75c:	4602      	mov	r2, r0
 800f75e:	6268      	str	r0, [r5, #36]	; 0x24
 800f760:	b920      	cbnz	r0, 800f76c <_Bfree+0x20>
 800f762:	4b09      	ldr	r3, [pc, #36]	; (800f788 <_Bfree+0x3c>)
 800f764:	4809      	ldr	r0, [pc, #36]	; (800f78c <_Bfree+0x40>)
 800f766:	218a      	movs	r1, #138	; 0x8a
 800f768:	f000 ff00 	bl	801056c <__assert_func>
 800f76c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f770:	6006      	str	r6, [r0, #0]
 800f772:	60c6      	str	r6, [r0, #12]
 800f774:	b13c      	cbz	r4, 800f786 <_Bfree+0x3a>
 800f776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f778:	6862      	ldr	r2, [r4, #4]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f780:	6021      	str	r1, [r4, #0]
 800f782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f786:	bd70      	pop	{r4, r5, r6, pc}
 800f788:	080113ce 	.word	0x080113ce
 800f78c:	080114cc 	.word	0x080114cc

0800f790 <__multadd>:
 800f790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f794:	690d      	ldr	r5, [r1, #16]
 800f796:	4607      	mov	r7, r0
 800f798:	460c      	mov	r4, r1
 800f79a:	461e      	mov	r6, r3
 800f79c:	f101 0c14 	add.w	ip, r1, #20
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	f8dc 3000 	ldr.w	r3, [ip]
 800f7a6:	b299      	uxth	r1, r3
 800f7a8:	fb02 6101 	mla	r1, r2, r1, r6
 800f7ac:	0c1e      	lsrs	r6, r3, #16
 800f7ae:	0c0b      	lsrs	r3, r1, #16
 800f7b0:	fb02 3306 	mla	r3, r2, r6, r3
 800f7b4:	b289      	uxth	r1, r1
 800f7b6:	3001      	adds	r0, #1
 800f7b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f7bc:	4285      	cmp	r5, r0
 800f7be:	f84c 1b04 	str.w	r1, [ip], #4
 800f7c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f7c6:	dcec      	bgt.n	800f7a2 <__multadd+0x12>
 800f7c8:	b30e      	cbz	r6, 800f80e <__multadd+0x7e>
 800f7ca:	68a3      	ldr	r3, [r4, #8]
 800f7cc:	42ab      	cmp	r3, r5
 800f7ce:	dc19      	bgt.n	800f804 <__multadd+0x74>
 800f7d0:	6861      	ldr	r1, [r4, #4]
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	3101      	adds	r1, #1
 800f7d6:	f7ff ff79 	bl	800f6cc <_Balloc>
 800f7da:	4680      	mov	r8, r0
 800f7dc:	b928      	cbnz	r0, 800f7ea <__multadd+0x5a>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <__multadd+0x84>)
 800f7e2:	480d      	ldr	r0, [pc, #52]	; (800f818 <__multadd+0x88>)
 800f7e4:	21b5      	movs	r1, #181	; 0xb5
 800f7e6:	f000 fec1 	bl	801056c <__assert_func>
 800f7ea:	6922      	ldr	r2, [r4, #16]
 800f7ec:	3202      	adds	r2, #2
 800f7ee:	f104 010c 	add.w	r1, r4, #12
 800f7f2:	0092      	lsls	r2, r2, #2
 800f7f4:	300c      	adds	r0, #12
 800f7f6:	f7ff ff5b 	bl	800f6b0 <memcpy>
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	4638      	mov	r0, r7
 800f7fe:	f7ff ffa5 	bl	800f74c <_Bfree>
 800f802:	4644      	mov	r4, r8
 800f804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f808:	3501      	adds	r5, #1
 800f80a:	615e      	str	r6, [r3, #20]
 800f80c:	6125      	str	r5, [r4, #16]
 800f80e:	4620      	mov	r0, r4
 800f810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f814:	08011440 	.word	0x08011440
 800f818:	080114cc 	.word	0x080114cc

0800f81c <__s2b>:
 800f81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f820:	460c      	mov	r4, r1
 800f822:	4615      	mov	r5, r2
 800f824:	461f      	mov	r7, r3
 800f826:	2209      	movs	r2, #9
 800f828:	3308      	adds	r3, #8
 800f82a:	4606      	mov	r6, r0
 800f82c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f830:	2100      	movs	r1, #0
 800f832:	2201      	movs	r2, #1
 800f834:	429a      	cmp	r2, r3
 800f836:	db09      	blt.n	800f84c <__s2b+0x30>
 800f838:	4630      	mov	r0, r6
 800f83a:	f7ff ff47 	bl	800f6cc <_Balloc>
 800f83e:	b940      	cbnz	r0, 800f852 <__s2b+0x36>
 800f840:	4602      	mov	r2, r0
 800f842:	4b19      	ldr	r3, [pc, #100]	; (800f8a8 <__s2b+0x8c>)
 800f844:	4819      	ldr	r0, [pc, #100]	; (800f8ac <__s2b+0x90>)
 800f846:	21ce      	movs	r1, #206	; 0xce
 800f848:	f000 fe90 	bl	801056c <__assert_func>
 800f84c:	0052      	lsls	r2, r2, #1
 800f84e:	3101      	adds	r1, #1
 800f850:	e7f0      	b.n	800f834 <__s2b+0x18>
 800f852:	9b08      	ldr	r3, [sp, #32]
 800f854:	6143      	str	r3, [r0, #20]
 800f856:	2d09      	cmp	r5, #9
 800f858:	f04f 0301 	mov.w	r3, #1
 800f85c:	6103      	str	r3, [r0, #16]
 800f85e:	dd16      	ble.n	800f88e <__s2b+0x72>
 800f860:	f104 0909 	add.w	r9, r4, #9
 800f864:	46c8      	mov	r8, r9
 800f866:	442c      	add	r4, r5
 800f868:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f86c:	4601      	mov	r1, r0
 800f86e:	3b30      	subs	r3, #48	; 0x30
 800f870:	220a      	movs	r2, #10
 800f872:	4630      	mov	r0, r6
 800f874:	f7ff ff8c 	bl	800f790 <__multadd>
 800f878:	45a0      	cmp	r8, r4
 800f87a:	d1f5      	bne.n	800f868 <__s2b+0x4c>
 800f87c:	f1a5 0408 	sub.w	r4, r5, #8
 800f880:	444c      	add	r4, r9
 800f882:	1b2d      	subs	r5, r5, r4
 800f884:	1963      	adds	r3, r4, r5
 800f886:	42bb      	cmp	r3, r7
 800f888:	db04      	blt.n	800f894 <__s2b+0x78>
 800f88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f88e:	340a      	adds	r4, #10
 800f890:	2509      	movs	r5, #9
 800f892:	e7f6      	b.n	800f882 <__s2b+0x66>
 800f894:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f898:	4601      	mov	r1, r0
 800f89a:	3b30      	subs	r3, #48	; 0x30
 800f89c:	220a      	movs	r2, #10
 800f89e:	4630      	mov	r0, r6
 800f8a0:	f7ff ff76 	bl	800f790 <__multadd>
 800f8a4:	e7ee      	b.n	800f884 <__s2b+0x68>
 800f8a6:	bf00      	nop
 800f8a8:	08011440 	.word	0x08011440
 800f8ac:	080114cc 	.word	0x080114cc

0800f8b0 <__hi0bits>:
 800f8b0:	0c03      	lsrs	r3, r0, #16
 800f8b2:	041b      	lsls	r3, r3, #16
 800f8b4:	b9d3      	cbnz	r3, 800f8ec <__hi0bits+0x3c>
 800f8b6:	0400      	lsls	r0, r0, #16
 800f8b8:	2310      	movs	r3, #16
 800f8ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f8be:	bf04      	itt	eq
 800f8c0:	0200      	lsleq	r0, r0, #8
 800f8c2:	3308      	addeq	r3, #8
 800f8c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f8c8:	bf04      	itt	eq
 800f8ca:	0100      	lsleq	r0, r0, #4
 800f8cc:	3304      	addeq	r3, #4
 800f8ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f8d2:	bf04      	itt	eq
 800f8d4:	0080      	lsleq	r0, r0, #2
 800f8d6:	3302      	addeq	r3, #2
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	db05      	blt.n	800f8e8 <__hi0bits+0x38>
 800f8dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f8e0:	f103 0301 	add.w	r3, r3, #1
 800f8e4:	bf08      	it	eq
 800f8e6:	2320      	moveq	r3, #32
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	4770      	bx	lr
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	e7e4      	b.n	800f8ba <__hi0bits+0xa>

0800f8f0 <__lo0bits>:
 800f8f0:	6803      	ldr	r3, [r0, #0]
 800f8f2:	f013 0207 	ands.w	r2, r3, #7
 800f8f6:	4601      	mov	r1, r0
 800f8f8:	d00b      	beq.n	800f912 <__lo0bits+0x22>
 800f8fa:	07da      	lsls	r2, r3, #31
 800f8fc:	d423      	bmi.n	800f946 <__lo0bits+0x56>
 800f8fe:	0798      	lsls	r0, r3, #30
 800f900:	bf49      	itett	mi
 800f902:	085b      	lsrmi	r3, r3, #1
 800f904:	089b      	lsrpl	r3, r3, #2
 800f906:	2001      	movmi	r0, #1
 800f908:	600b      	strmi	r3, [r1, #0]
 800f90a:	bf5c      	itt	pl
 800f90c:	600b      	strpl	r3, [r1, #0]
 800f90e:	2002      	movpl	r0, #2
 800f910:	4770      	bx	lr
 800f912:	b298      	uxth	r0, r3
 800f914:	b9a8      	cbnz	r0, 800f942 <__lo0bits+0x52>
 800f916:	0c1b      	lsrs	r3, r3, #16
 800f918:	2010      	movs	r0, #16
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	b90a      	cbnz	r2, 800f922 <__lo0bits+0x32>
 800f91e:	3008      	adds	r0, #8
 800f920:	0a1b      	lsrs	r3, r3, #8
 800f922:	071a      	lsls	r2, r3, #28
 800f924:	bf04      	itt	eq
 800f926:	091b      	lsreq	r3, r3, #4
 800f928:	3004      	addeq	r0, #4
 800f92a:	079a      	lsls	r2, r3, #30
 800f92c:	bf04      	itt	eq
 800f92e:	089b      	lsreq	r3, r3, #2
 800f930:	3002      	addeq	r0, #2
 800f932:	07da      	lsls	r2, r3, #31
 800f934:	d403      	bmi.n	800f93e <__lo0bits+0x4e>
 800f936:	085b      	lsrs	r3, r3, #1
 800f938:	f100 0001 	add.w	r0, r0, #1
 800f93c:	d005      	beq.n	800f94a <__lo0bits+0x5a>
 800f93e:	600b      	str	r3, [r1, #0]
 800f940:	4770      	bx	lr
 800f942:	4610      	mov	r0, r2
 800f944:	e7e9      	b.n	800f91a <__lo0bits+0x2a>
 800f946:	2000      	movs	r0, #0
 800f948:	4770      	bx	lr
 800f94a:	2020      	movs	r0, #32
 800f94c:	4770      	bx	lr
	...

0800f950 <__i2b>:
 800f950:	b510      	push	{r4, lr}
 800f952:	460c      	mov	r4, r1
 800f954:	2101      	movs	r1, #1
 800f956:	f7ff feb9 	bl	800f6cc <_Balloc>
 800f95a:	4602      	mov	r2, r0
 800f95c:	b928      	cbnz	r0, 800f96a <__i2b+0x1a>
 800f95e:	4b05      	ldr	r3, [pc, #20]	; (800f974 <__i2b+0x24>)
 800f960:	4805      	ldr	r0, [pc, #20]	; (800f978 <__i2b+0x28>)
 800f962:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f966:	f000 fe01 	bl	801056c <__assert_func>
 800f96a:	2301      	movs	r3, #1
 800f96c:	6144      	str	r4, [r0, #20]
 800f96e:	6103      	str	r3, [r0, #16]
 800f970:	bd10      	pop	{r4, pc}
 800f972:	bf00      	nop
 800f974:	08011440 	.word	0x08011440
 800f978:	080114cc 	.word	0x080114cc

0800f97c <__multiply>:
 800f97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f980:	4691      	mov	r9, r2
 800f982:	690a      	ldr	r2, [r1, #16]
 800f984:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f988:	429a      	cmp	r2, r3
 800f98a:	bfb8      	it	lt
 800f98c:	460b      	movlt	r3, r1
 800f98e:	460c      	mov	r4, r1
 800f990:	bfbc      	itt	lt
 800f992:	464c      	movlt	r4, r9
 800f994:	4699      	movlt	r9, r3
 800f996:	6927      	ldr	r7, [r4, #16]
 800f998:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f99c:	68a3      	ldr	r3, [r4, #8]
 800f99e:	6861      	ldr	r1, [r4, #4]
 800f9a0:	eb07 060a 	add.w	r6, r7, sl
 800f9a4:	42b3      	cmp	r3, r6
 800f9a6:	b085      	sub	sp, #20
 800f9a8:	bfb8      	it	lt
 800f9aa:	3101      	addlt	r1, #1
 800f9ac:	f7ff fe8e 	bl	800f6cc <_Balloc>
 800f9b0:	b930      	cbnz	r0, 800f9c0 <__multiply+0x44>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	4b44      	ldr	r3, [pc, #272]	; (800fac8 <__multiply+0x14c>)
 800f9b6:	4845      	ldr	r0, [pc, #276]	; (800facc <__multiply+0x150>)
 800f9b8:	f240 115d 	movw	r1, #349	; 0x15d
 800f9bc:	f000 fdd6 	bl	801056c <__assert_func>
 800f9c0:	f100 0514 	add.w	r5, r0, #20
 800f9c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f9c8:	462b      	mov	r3, r5
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	4543      	cmp	r3, r8
 800f9ce:	d321      	bcc.n	800fa14 <__multiply+0x98>
 800f9d0:	f104 0314 	add.w	r3, r4, #20
 800f9d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f9d8:	f109 0314 	add.w	r3, r9, #20
 800f9dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f9e0:	9202      	str	r2, [sp, #8]
 800f9e2:	1b3a      	subs	r2, r7, r4
 800f9e4:	3a15      	subs	r2, #21
 800f9e6:	f022 0203 	bic.w	r2, r2, #3
 800f9ea:	3204      	adds	r2, #4
 800f9ec:	f104 0115 	add.w	r1, r4, #21
 800f9f0:	428f      	cmp	r7, r1
 800f9f2:	bf38      	it	cc
 800f9f4:	2204      	movcc	r2, #4
 800f9f6:	9201      	str	r2, [sp, #4]
 800f9f8:	9a02      	ldr	r2, [sp, #8]
 800f9fa:	9303      	str	r3, [sp, #12]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d80c      	bhi.n	800fa1a <__multiply+0x9e>
 800fa00:	2e00      	cmp	r6, #0
 800fa02:	dd03      	ble.n	800fa0c <__multiply+0x90>
 800fa04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d05a      	beq.n	800fac2 <__multiply+0x146>
 800fa0c:	6106      	str	r6, [r0, #16]
 800fa0e:	b005      	add	sp, #20
 800fa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa14:	f843 2b04 	str.w	r2, [r3], #4
 800fa18:	e7d8      	b.n	800f9cc <__multiply+0x50>
 800fa1a:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa1e:	f1ba 0f00 	cmp.w	sl, #0
 800fa22:	d024      	beq.n	800fa6e <__multiply+0xf2>
 800fa24:	f104 0e14 	add.w	lr, r4, #20
 800fa28:	46a9      	mov	r9, r5
 800fa2a:	f04f 0c00 	mov.w	ip, #0
 800fa2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fa32:	f8d9 1000 	ldr.w	r1, [r9]
 800fa36:	fa1f fb82 	uxth.w	fp, r2
 800fa3a:	b289      	uxth	r1, r1
 800fa3c:	fb0a 110b 	mla	r1, sl, fp, r1
 800fa40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fa44:	f8d9 2000 	ldr.w	r2, [r9]
 800fa48:	4461      	add	r1, ip
 800fa4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa4e:	fb0a c20b 	mla	r2, sl, fp, ip
 800fa52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fa56:	b289      	uxth	r1, r1
 800fa58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fa5c:	4577      	cmp	r7, lr
 800fa5e:	f849 1b04 	str.w	r1, [r9], #4
 800fa62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa66:	d8e2      	bhi.n	800fa2e <__multiply+0xb2>
 800fa68:	9a01      	ldr	r2, [sp, #4]
 800fa6a:	f845 c002 	str.w	ip, [r5, r2]
 800fa6e:	9a03      	ldr	r2, [sp, #12]
 800fa70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fa74:	3304      	adds	r3, #4
 800fa76:	f1b9 0f00 	cmp.w	r9, #0
 800fa7a:	d020      	beq.n	800fabe <__multiply+0x142>
 800fa7c:	6829      	ldr	r1, [r5, #0]
 800fa7e:	f104 0c14 	add.w	ip, r4, #20
 800fa82:	46ae      	mov	lr, r5
 800fa84:	f04f 0a00 	mov.w	sl, #0
 800fa88:	f8bc b000 	ldrh.w	fp, [ip]
 800fa8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fa90:	fb09 220b 	mla	r2, r9, fp, r2
 800fa94:	4492      	add	sl, r2
 800fa96:	b289      	uxth	r1, r1
 800fa98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fa9c:	f84e 1b04 	str.w	r1, [lr], #4
 800faa0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800faa4:	f8be 1000 	ldrh.w	r1, [lr]
 800faa8:	0c12      	lsrs	r2, r2, #16
 800faaa:	fb09 1102 	mla	r1, r9, r2, r1
 800faae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fab2:	4567      	cmp	r7, ip
 800fab4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fab8:	d8e6      	bhi.n	800fa88 <__multiply+0x10c>
 800faba:	9a01      	ldr	r2, [sp, #4]
 800fabc:	50a9      	str	r1, [r5, r2]
 800fabe:	3504      	adds	r5, #4
 800fac0:	e79a      	b.n	800f9f8 <__multiply+0x7c>
 800fac2:	3e01      	subs	r6, #1
 800fac4:	e79c      	b.n	800fa00 <__multiply+0x84>
 800fac6:	bf00      	nop
 800fac8:	08011440 	.word	0x08011440
 800facc:	080114cc 	.word	0x080114cc

0800fad0 <__pow5mult>:
 800fad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fad4:	4615      	mov	r5, r2
 800fad6:	f012 0203 	ands.w	r2, r2, #3
 800fada:	4606      	mov	r6, r0
 800fadc:	460f      	mov	r7, r1
 800fade:	d007      	beq.n	800faf0 <__pow5mult+0x20>
 800fae0:	4c25      	ldr	r4, [pc, #148]	; (800fb78 <__pow5mult+0xa8>)
 800fae2:	3a01      	subs	r2, #1
 800fae4:	2300      	movs	r3, #0
 800fae6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800faea:	f7ff fe51 	bl	800f790 <__multadd>
 800faee:	4607      	mov	r7, r0
 800faf0:	10ad      	asrs	r5, r5, #2
 800faf2:	d03d      	beq.n	800fb70 <__pow5mult+0xa0>
 800faf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800faf6:	b97c      	cbnz	r4, 800fb18 <__pow5mult+0x48>
 800faf8:	2010      	movs	r0, #16
 800fafa:	f7ff fdbf 	bl	800f67c <malloc>
 800fafe:	4602      	mov	r2, r0
 800fb00:	6270      	str	r0, [r6, #36]	; 0x24
 800fb02:	b928      	cbnz	r0, 800fb10 <__pow5mult+0x40>
 800fb04:	4b1d      	ldr	r3, [pc, #116]	; (800fb7c <__pow5mult+0xac>)
 800fb06:	481e      	ldr	r0, [pc, #120]	; (800fb80 <__pow5mult+0xb0>)
 800fb08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb0c:	f000 fd2e 	bl	801056c <__assert_func>
 800fb10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb14:	6004      	str	r4, [r0, #0]
 800fb16:	60c4      	str	r4, [r0, #12]
 800fb18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb20:	b94c      	cbnz	r4, 800fb36 <__pow5mult+0x66>
 800fb22:	f240 2171 	movw	r1, #625	; 0x271
 800fb26:	4630      	mov	r0, r6
 800fb28:	f7ff ff12 	bl	800f950 <__i2b>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb32:	4604      	mov	r4, r0
 800fb34:	6003      	str	r3, [r0, #0]
 800fb36:	f04f 0900 	mov.w	r9, #0
 800fb3a:	07eb      	lsls	r3, r5, #31
 800fb3c:	d50a      	bpl.n	800fb54 <__pow5mult+0x84>
 800fb3e:	4639      	mov	r1, r7
 800fb40:	4622      	mov	r2, r4
 800fb42:	4630      	mov	r0, r6
 800fb44:	f7ff ff1a 	bl	800f97c <__multiply>
 800fb48:	4639      	mov	r1, r7
 800fb4a:	4680      	mov	r8, r0
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	f7ff fdfd 	bl	800f74c <_Bfree>
 800fb52:	4647      	mov	r7, r8
 800fb54:	106d      	asrs	r5, r5, #1
 800fb56:	d00b      	beq.n	800fb70 <__pow5mult+0xa0>
 800fb58:	6820      	ldr	r0, [r4, #0]
 800fb5a:	b938      	cbnz	r0, 800fb6c <__pow5mult+0x9c>
 800fb5c:	4622      	mov	r2, r4
 800fb5e:	4621      	mov	r1, r4
 800fb60:	4630      	mov	r0, r6
 800fb62:	f7ff ff0b 	bl	800f97c <__multiply>
 800fb66:	6020      	str	r0, [r4, #0]
 800fb68:	f8c0 9000 	str.w	r9, [r0]
 800fb6c:	4604      	mov	r4, r0
 800fb6e:	e7e4      	b.n	800fb3a <__pow5mult+0x6a>
 800fb70:	4638      	mov	r0, r7
 800fb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb76:	bf00      	nop
 800fb78:	08011618 	.word	0x08011618
 800fb7c:	080113ce 	.word	0x080113ce
 800fb80:	080114cc 	.word	0x080114cc

0800fb84 <__lshift>:
 800fb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb88:	460c      	mov	r4, r1
 800fb8a:	6849      	ldr	r1, [r1, #4]
 800fb8c:	6923      	ldr	r3, [r4, #16]
 800fb8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb92:	68a3      	ldr	r3, [r4, #8]
 800fb94:	4607      	mov	r7, r0
 800fb96:	4691      	mov	r9, r2
 800fb98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb9c:	f108 0601 	add.w	r6, r8, #1
 800fba0:	42b3      	cmp	r3, r6
 800fba2:	db0b      	blt.n	800fbbc <__lshift+0x38>
 800fba4:	4638      	mov	r0, r7
 800fba6:	f7ff fd91 	bl	800f6cc <_Balloc>
 800fbaa:	4605      	mov	r5, r0
 800fbac:	b948      	cbnz	r0, 800fbc2 <__lshift+0x3e>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	4b2a      	ldr	r3, [pc, #168]	; (800fc5c <__lshift+0xd8>)
 800fbb2:	482b      	ldr	r0, [pc, #172]	; (800fc60 <__lshift+0xdc>)
 800fbb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fbb8:	f000 fcd8 	bl	801056c <__assert_func>
 800fbbc:	3101      	adds	r1, #1
 800fbbe:	005b      	lsls	r3, r3, #1
 800fbc0:	e7ee      	b.n	800fba0 <__lshift+0x1c>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	f100 0114 	add.w	r1, r0, #20
 800fbc8:	f100 0210 	add.w	r2, r0, #16
 800fbcc:	4618      	mov	r0, r3
 800fbce:	4553      	cmp	r3, sl
 800fbd0:	db37      	blt.n	800fc42 <__lshift+0xbe>
 800fbd2:	6920      	ldr	r0, [r4, #16]
 800fbd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fbd8:	f104 0314 	add.w	r3, r4, #20
 800fbdc:	f019 091f 	ands.w	r9, r9, #31
 800fbe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fbe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fbe8:	d02f      	beq.n	800fc4a <__lshift+0xc6>
 800fbea:	f1c9 0e20 	rsb	lr, r9, #32
 800fbee:	468a      	mov	sl, r1
 800fbf0:	f04f 0c00 	mov.w	ip, #0
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	fa02 f209 	lsl.w	r2, r2, r9
 800fbfa:	ea42 020c 	orr.w	r2, r2, ip
 800fbfe:	f84a 2b04 	str.w	r2, [sl], #4
 800fc02:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc06:	4298      	cmp	r0, r3
 800fc08:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fc0c:	d8f2      	bhi.n	800fbf4 <__lshift+0x70>
 800fc0e:	1b03      	subs	r3, r0, r4
 800fc10:	3b15      	subs	r3, #21
 800fc12:	f023 0303 	bic.w	r3, r3, #3
 800fc16:	3304      	adds	r3, #4
 800fc18:	f104 0215 	add.w	r2, r4, #21
 800fc1c:	4290      	cmp	r0, r2
 800fc1e:	bf38      	it	cc
 800fc20:	2304      	movcc	r3, #4
 800fc22:	f841 c003 	str.w	ip, [r1, r3]
 800fc26:	f1bc 0f00 	cmp.w	ip, #0
 800fc2a:	d001      	beq.n	800fc30 <__lshift+0xac>
 800fc2c:	f108 0602 	add.w	r6, r8, #2
 800fc30:	3e01      	subs	r6, #1
 800fc32:	4638      	mov	r0, r7
 800fc34:	612e      	str	r6, [r5, #16]
 800fc36:	4621      	mov	r1, r4
 800fc38:	f7ff fd88 	bl	800f74c <_Bfree>
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc42:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc46:	3301      	adds	r3, #1
 800fc48:	e7c1      	b.n	800fbce <__lshift+0x4a>
 800fc4a:	3904      	subs	r1, #4
 800fc4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc50:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc54:	4298      	cmp	r0, r3
 800fc56:	d8f9      	bhi.n	800fc4c <__lshift+0xc8>
 800fc58:	e7ea      	b.n	800fc30 <__lshift+0xac>
 800fc5a:	bf00      	nop
 800fc5c:	08011440 	.word	0x08011440
 800fc60:	080114cc 	.word	0x080114cc

0800fc64 <__mcmp>:
 800fc64:	b530      	push	{r4, r5, lr}
 800fc66:	6902      	ldr	r2, [r0, #16]
 800fc68:	690c      	ldr	r4, [r1, #16]
 800fc6a:	1b12      	subs	r2, r2, r4
 800fc6c:	d10e      	bne.n	800fc8c <__mcmp+0x28>
 800fc6e:	f100 0314 	add.w	r3, r0, #20
 800fc72:	3114      	adds	r1, #20
 800fc74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fc78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fc7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fc80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fc84:	42a5      	cmp	r5, r4
 800fc86:	d003      	beq.n	800fc90 <__mcmp+0x2c>
 800fc88:	d305      	bcc.n	800fc96 <__mcmp+0x32>
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	bd30      	pop	{r4, r5, pc}
 800fc90:	4283      	cmp	r3, r0
 800fc92:	d3f3      	bcc.n	800fc7c <__mcmp+0x18>
 800fc94:	e7fa      	b.n	800fc8c <__mcmp+0x28>
 800fc96:	f04f 32ff 	mov.w	r2, #4294967295
 800fc9a:	e7f7      	b.n	800fc8c <__mcmp+0x28>

0800fc9c <__mdiff>:
 800fc9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca0:	460c      	mov	r4, r1
 800fca2:	4606      	mov	r6, r0
 800fca4:	4611      	mov	r1, r2
 800fca6:	4620      	mov	r0, r4
 800fca8:	4690      	mov	r8, r2
 800fcaa:	f7ff ffdb 	bl	800fc64 <__mcmp>
 800fcae:	1e05      	subs	r5, r0, #0
 800fcb0:	d110      	bne.n	800fcd4 <__mdiff+0x38>
 800fcb2:	4629      	mov	r1, r5
 800fcb4:	4630      	mov	r0, r6
 800fcb6:	f7ff fd09 	bl	800f6cc <_Balloc>
 800fcba:	b930      	cbnz	r0, 800fcca <__mdiff+0x2e>
 800fcbc:	4b3a      	ldr	r3, [pc, #232]	; (800fda8 <__mdiff+0x10c>)
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	f240 2132 	movw	r1, #562	; 0x232
 800fcc4:	4839      	ldr	r0, [pc, #228]	; (800fdac <__mdiff+0x110>)
 800fcc6:	f000 fc51 	bl	801056c <__assert_func>
 800fcca:	2301      	movs	r3, #1
 800fccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fcd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd4:	bfa4      	itt	ge
 800fcd6:	4643      	movge	r3, r8
 800fcd8:	46a0      	movge	r8, r4
 800fcda:	4630      	mov	r0, r6
 800fcdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fce0:	bfa6      	itte	ge
 800fce2:	461c      	movge	r4, r3
 800fce4:	2500      	movge	r5, #0
 800fce6:	2501      	movlt	r5, #1
 800fce8:	f7ff fcf0 	bl	800f6cc <_Balloc>
 800fcec:	b920      	cbnz	r0, 800fcf8 <__mdiff+0x5c>
 800fcee:	4b2e      	ldr	r3, [pc, #184]	; (800fda8 <__mdiff+0x10c>)
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fcf6:	e7e5      	b.n	800fcc4 <__mdiff+0x28>
 800fcf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fcfc:	6926      	ldr	r6, [r4, #16]
 800fcfe:	60c5      	str	r5, [r0, #12]
 800fd00:	f104 0914 	add.w	r9, r4, #20
 800fd04:	f108 0514 	add.w	r5, r8, #20
 800fd08:	f100 0e14 	add.w	lr, r0, #20
 800fd0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd14:	f108 0210 	add.w	r2, r8, #16
 800fd18:	46f2      	mov	sl, lr
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd24:	fa1f f883 	uxth.w	r8, r3
 800fd28:	fa11 f18b 	uxtah	r1, r1, fp
 800fd2c:	0c1b      	lsrs	r3, r3, #16
 800fd2e:	eba1 0808 	sub.w	r8, r1, r8
 800fd32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fd36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd3a:	fa1f f888 	uxth.w	r8, r8
 800fd3e:	1419      	asrs	r1, r3, #16
 800fd40:	454e      	cmp	r6, r9
 800fd42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd46:	f84a 3b04 	str.w	r3, [sl], #4
 800fd4a:	d8e7      	bhi.n	800fd1c <__mdiff+0x80>
 800fd4c:	1b33      	subs	r3, r6, r4
 800fd4e:	3b15      	subs	r3, #21
 800fd50:	f023 0303 	bic.w	r3, r3, #3
 800fd54:	3304      	adds	r3, #4
 800fd56:	3415      	adds	r4, #21
 800fd58:	42a6      	cmp	r6, r4
 800fd5a:	bf38      	it	cc
 800fd5c:	2304      	movcc	r3, #4
 800fd5e:	441d      	add	r5, r3
 800fd60:	4473      	add	r3, lr
 800fd62:	469e      	mov	lr, r3
 800fd64:	462e      	mov	r6, r5
 800fd66:	4566      	cmp	r6, ip
 800fd68:	d30e      	bcc.n	800fd88 <__mdiff+0xec>
 800fd6a:	f10c 0203 	add.w	r2, ip, #3
 800fd6e:	1b52      	subs	r2, r2, r5
 800fd70:	f022 0203 	bic.w	r2, r2, #3
 800fd74:	3d03      	subs	r5, #3
 800fd76:	45ac      	cmp	ip, r5
 800fd78:	bf38      	it	cc
 800fd7a:	2200      	movcc	r2, #0
 800fd7c:	441a      	add	r2, r3
 800fd7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fd82:	b17b      	cbz	r3, 800fda4 <__mdiff+0x108>
 800fd84:	6107      	str	r7, [r0, #16]
 800fd86:	e7a3      	b.n	800fcd0 <__mdiff+0x34>
 800fd88:	f856 8b04 	ldr.w	r8, [r6], #4
 800fd8c:	fa11 f288 	uxtah	r2, r1, r8
 800fd90:	1414      	asrs	r4, r2, #16
 800fd92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fd96:	b292      	uxth	r2, r2
 800fd98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fd9c:	f84e 2b04 	str.w	r2, [lr], #4
 800fda0:	1421      	asrs	r1, r4, #16
 800fda2:	e7e0      	b.n	800fd66 <__mdiff+0xca>
 800fda4:	3f01      	subs	r7, #1
 800fda6:	e7ea      	b.n	800fd7e <__mdiff+0xe2>
 800fda8:	08011440 	.word	0x08011440
 800fdac:	080114cc 	.word	0x080114cc

0800fdb0 <__ulp>:
 800fdb0:	b082      	sub	sp, #8
 800fdb2:	ed8d 0b00 	vstr	d0, [sp]
 800fdb6:	9b01      	ldr	r3, [sp, #4]
 800fdb8:	4912      	ldr	r1, [pc, #72]	; (800fe04 <__ulp+0x54>)
 800fdba:	4019      	ands	r1, r3
 800fdbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fdc0:	2900      	cmp	r1, #0
 800fdc2:	dd05      	ble.n	800fdd0 <__ulp+0x20>
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	ec43 2b10 	vmov	d0, r2, r3
 800fdcc:	b002      	add	sp, #8
 800fdce:	4770      	bx	lr
 800fdd0:	4249      	negs	r1, r1
 800fdd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fdd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fdda:	f04f 0200 	mov.w	r2, #0
 800fdde:	f04f 0300 	mov.w	r3, #0
 800fde2:	da04      	bge.n	800fdee <__ulp+0x3e>
 800fde4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fde8:	fa41 f300 	asr.w	r3, r1, r0
 800fdec:	e7ec      	b.n	800fdc8 <__ulp+0x18>
 800fdee:	f1a0 0114 	sub.w	r1, r0, #20
 800fdf2:	291e      	cmp	r1, #30
 800fdf4:	bfda      	itte	le
 800fdf6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fdfa:	fa20 f101 	lsrle.w	r1, r0, r1
 800fdfe:	2101      	movgt	r1, #1
 800fe00:	460a      	mov	r2, r1
 800fe02:	e7e1      	b.n	800fdc8 <__ulp+0x18>
 800fe04:	7ff00000 	.word	0x7ff00000

0800fe08 <__b2d>:
 800fe08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0a:	6905      	ldr	r5, [r0, #16]
 800fe0c:	f100 0714 	add.w	r7, r0, #20
 800fe10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fe14:	1f2e      	subs	r6, r5, #4
 800fe16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	f7ff fd48 	bl	800f8b0 <__hi0bits>
 800fe20:	f1c0 0320 	rsb	r3, r0, #32
 800fe24:	280a      	cmp	r0, #10
 800fe26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fea4 <__b2d+0x9c>
 800fe2a:	600b      	str	r3, [r1, #0]
 800fe2c:	dc14      	bgt.n	800fe58 <__b2d+0x50>
 800fe2e:	f1c0 0e0b 	rsb	lr, r0, #11
 800fe32:	fa24 f10e 	lsr.w	r1, r4, lr
 800fe36:	42b7      	cmp	r7, r6
 800fe38:	ea41 030c 	orr.w	r3, r1, ip
 800fe3c:	bf34      	ite	cc
 800fe3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fe42:	2100      	movcs	r1, #0
 800fe44:	3015      	adds	r0, #21
 800fe46:	fa04 f000 	lsl.w	r0, r4, r0
 800fe4a:	fa21 f10e 	lsr.w	r1, r1, lr
 800fe4e:	ea40 0201 	orr.w	r2, r0, r1
 800fe52:	ec43 2b10 	vmov	d0, r2, r3
 800fe56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe58:	42b7      	cmp	r7, r6
 800fe5a:	bf3a      	itte	cc
 800fe5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fe60:	f1a5 0608 	subcc.w	r6, r5, #8
 800fe64:	2100      	movcs	r1, #0
 800fe66:	380b      	subs	r0, #11
 800fe68:	d017      	beq.n	800fe9a <__b2d+0x92>
 800fe6a:	f1c0 0c20 	rsb	ip, r0, #32
 800fe6e:	fa04 f500 	lsl.w	r5, r4, r0
 800fe72:	42be      	cmp	r6, r7
 800fe74:	fa21 f40c 	lsr.w	r4, r1, ip
 800fe78:	ea45 0504 	orr.w	r5, r5, r4
 800fe7c:	bf8c      	ite	hi
 800fe7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fe82:	2400      	movls	r4, #0
 800fe84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fe88:	fa01 f000 	lsl.w	r0, r1, r0
 800fe8c:	fa24 f40c 	lsr.w	r4, r4, ip
 800fe90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe94:	ea40 0204 	orr.w	r2, r0, r4
 800fe98:	e7db      	b.n	800fe52 <__b2d+0x4a>
 800fe9a:	ea44 030c 	orr.w	r3, r4, ip
 800fe9e:	460a      	mov	r2, r1
 800fea0:	e7d7      	b.n	800fe52 <__b2d+0x4a>
 800fea2:	bf00      	nop
 800fea4:	3ff00000 	.word	0x3ff00000

0800fea8 <__d2b>:
 800fea8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800feac:	4689      	mov	r9, r1
 800feae:	2101      	movs	r1, #1
 800feb0:	ec57 6b10 	vmov	r6, r7, d0
 800feb4:	4690      	mov	r8, r2
 800feb6:	f7ff fc09 	bl	800f6cc <_Balloc>
 800feba:	4604      	mov	r4, r0
 800febc:	b930      	cbnz	r0, 800fecc <__d2b+0x24>
 800febe:	4602      	mov	r2, r0
 800fec0:	4b25      	ldr	r3, [pc, #148]	; (800ff58 <__d2b+0xb0>)
 800fec2:	4826      	ldr	r0, [pc, #152]	; (800ff5c <__d2b+0xb4>)
 800fec4:	f240 310a 	movw	r1, #778	; 0x30a
 800fec8:	f000 fb50 	bl	801056c <__assert_func>
 800fecc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fed0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fed4:	bb35      	cbnz	r5, 800ff24 <__d2b+0x7c>
 800fed6:	2e00      	cmp	r6, #0
 800fed8:	9301      	str	r3, [sp, #4]
 800feda:	d028      	beq.n	800ff2e <__d2b+0x86>
 800fedc:	4668      	mov	r0, sp
 800fede:	9600      	str	r6, [sp, #0]
 800fee0:	f7ff fd06 	bl	800f8f0 <__lo0bits>
 800fee4:	9900      	ldr	r1, [sp, #0]
 800fee6:	b300      	cbz	r0, 800ff2a <__d2b+0x82>
 800fee8:	9a01      	ldr	r2, [sp, #4]
 800feea:	f1c0 0320 	rsb	r3, r0, #32
 800feee:	fa02 f303 	lsl.w	r3, r2, r3
 800fef2:	430b      	orrs	r3, r1
 800fef4:	40c2      	lsrs	r2, r0
 800fef6:	6163      	str	r3, [r4, #20]
 800fef8:	9201      	str	r2, [sp, #4]
 800fefa:	9b01      	ldr	r3, [sp, #4]
 800fefc:	61a3      	str	r3, [r4, #24]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	bf14      	ite	ne
 800ff02:	2202      	movne	r2, #2
 800ff04:	2201      	moveq	r2, #1
 800ff06:	6122      	str	r2, [r4, #16]
 800ff08:	b1d5      	cbz	r5, 800ff40 <__d2b+0x98>
 800ff0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff0e:	4405      	add	r5, r0
 800ff10:	f8c9 5000 	str.w	r5, [r9]
 800ff14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff18:	f8c8 0000 	str.w	r0, [r8]
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	b003      	add	sp, #12
 800ff20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff28:	e7d5      	b.n	800fed6 <__d2b+0x2e>
 800ff2a:	6161      	str	r1, [r4, #20]
 800ff2c:	e7e5      	b.n	800fefa <__d2b+0x52>
 800ff2e:	a801      	add	r0, sp, #4
 800ff30:	f7ff fcde 	bl	800f8f0 <__lo0bits>
 800ff34:	9b01      	ldr	r3, [sp, #4]
 800ff36:	6163      	str	r3, [r4, #20]
 800ff38:	2201      	movs	r2, #1
 800ff3a:	6122      	str	r2, [r4, #16]
 800ff3c:	3020      	adds	r0, #32
 800ff3e:	e7e3      	b.n	800ff08 <__d2b+0x60>
 800ff40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ff48:	f8c9 0000 	str.w	r0, [r9]
 800ff4c:	6918      	ldr	r0, [r3, #16]
 800ff4e:	f7ff fcaf 	bl	800f8b0 <__hi0bits>
 800ff52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff56:	e7df      	b.n	800ff18 <__d2b+0x70>
 800ff58:	08011440 	.word	0x08011440
 800ff5c:	080114cc 	.word	0x080114cc

0800ff60 <__ratio>:
 800ff60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	4688      	mov	r8, r1
 800ff66:	4669      	mov	r1, sp
 800ff68:	4681      	mov	r9, r0
 800ff6a:	f7ff ff4d 	bl	800fe08 <__b2d>
 800ff6e:	a901      	add	r1, sp, #4
 800ff70:	4640      	mov	r0, r8
 800ff72:	ec55 4b10 	vmov	r4, r5, d0
 800ff76:	f7ff ff47 	bl	800fe08 <__b2d>
 800ff7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ff82:	eba3 0c02 	sub.w	ip, r3, r2
 800ff86:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ff8a:	1a9b      	subs	r3, r3, r2
 800ff8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ff90:	ec51 0b10 	vmov	r0, r1, d0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	bfd6      	itet	le
 800ff98:	460a      	movle	r2, r1
 800ff9a:	462a      	movgt	r2, r5
 800ff9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ffa0:	468b      	mov	fp, r1
 800ffa2:	462f      	mov	r7, r5
 800ffa4:	bfd4      	ite	le
 800ffa6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ffaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ffae:	4620      	mov	r0, r4
 800ffb0:	ee10 2a10 	vmov	r2, s0
 800ffb4:	465b      	mov	r3, fp
 800ffb6:	4639      	mov	r1, r7
 800ffb8:	f7f0 fc20 	bl	80007fc <__aeabi_ddiv>
 800ffbc:	ec41 0b10 	vmov	d0, r0, r1
 800ffc0:	b003      	add	sp, #12
 800ffc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ffc6 <__copybits>:
 800ffc6:	3901      	subs	r1, #1
 800ffc8:	b570      	push	{r4, r5, r6, lr}
 800ffca:	1149      	asrs	r1, r1, #5
 800ffcc:	6914      	ldr	r4, [r2, #16]
 800ffce:	3101      	adds	r1, #1
 800ffd0:	f102 0314 	add.w	r3, r2, #20
 800ffd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ffd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ffdc:	1f05      	subs	r5, r0, #4
 800ffde:	42a3      	cmp	r3, r4
 800ffe0:	d30c      	bcc.n	800fffc <__copybits+0x36>
 800ffe2:	1aa3      	subs	r3, r4, r2
 800ffe4:	3b11      	subs	r3, #17
 800ffe6:	f023 0303 	bic.w	r3, r3, #3
 800ffea:	3211      	adds	r2, #17
 800ffec:	42a2      	cmp	r2, r4
 800ffee:	bf88      	it	hi
 800fff0:	2300      	movhi	r3, #0
 800fff2:	4418      	add	r0, r3
 800fff4:	2300      	movs	r3, #0
 800fff6:	4288      	cmp	r0, r1
 800fff8:	d305      	bcc.n	8010006 <__copybits+0x40>
 800fffa:	bd70      	pop	{r4, r5, r6, pc}
 800fffc:	f853 6b04 	ldr.w	r6, [r3], #4
 8010000:	f845 6f04 	str.w	r6, [r5, #4]!
 8010004:	e7eb      	b.n	800ffde <__copybits+0x18>
 8010006:	f840 3b04 	str.w	r3, [r0], #4
 801000a:	e7f4      	b.n	800fff6 <__copybits+0x30>

0801000c <__any_on>:
 801000c:	f100 0214 	add.w	r2, r0, #20
 8010010:	6900      	ldr	r0, [r0, #16]
 8010012:	114b      	asrs	r3, r1, #5
 8010014:	4298      	cmp	r0, r3
 8010016:	b510      	push	{r4, lr}
 8010018:	db11      	blt.n	801003e <__any_on+0x32>
 801001a:	dd0a      	ble.n	8010032 <__any_on+0x26>
 801001c:	f011 011f 	ands.w	r1, r1, #31
 8010020:	d007      	beq.n	8010032 <__any_on+0x26>
 8010022:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010026:	fa24 f001 	lsr.w	r0, r4, r1
 801002a:	fa00 f101 	lsl.w	r1, r0, r1
 801002e:	428c      	cmp	r4, r1
 8010030:	d10b      	bne.n	801004a <__any_on+0x3e>
 8010032:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010036:	4293      	cmp	r3, r2
 8010038:	d803      	bhi.n	8010042 <__any_on+0x36>
 801003a:	2000      	movs	r0, #0
 801003c:	bd10      	pop	{r4, pc}
 801003e:	4603      	mov	r3, r0
 8010040:	e7f7      	b.n	8010032 <__any_on+0x26>
 8010042:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010046:	2900      	cmp	r1, #0
 8010048:	d0f5      	beq.n	8010036 <__any_on+0x2a>
 801004a:	2001      	movs	r0, #1
 801004c:	e7f6      	b.n	801003c <__any_on+0x30>

0801004e <_calloc_r>:
 801004e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010050:	fba1 2402 	umull	r2, r4, r1, r2
 8010054:	b94c      	cbnz	r4, 801006a <_calloc_r+0x1c>
 8010056:	4611      	mov	r1, r2
 8010058:	9201      	str	r2, [sp, #4]
 801005a:	f000 f87b 	bl	8010154 <_malloc_r>
 801005e:	9a01      	ldr	r2, [sp, #4]
 8010060:	4605      	mov	r5, r0
 8010062:	b930      	cbnz	r0, 8010072 <_calloc_r+0x24>
 8010064:	4628      	mov	r0, r5
 8010066:	b003      	add	sp, #12
 8010068:	bd30      	pop	{r4, r5, pc}
 801006a:	220c      	movs	r2, #12
 801006c:	6002      	str	r2, [r0, #0]
 801006e:	2500      	movs	r5, #0
 8010070:	e7f8      	b.n	8010064 <_calloc_r+0x16>
 8010072:	4621      	mov	r1, r4
 8010074:	f7fc fbb2 	bl	800c7dc <memset>
 8010078:	e7f4      	b.n	8010064 <_calloc_r+0x16>
	...

0801007c <_free_r>:
 801007c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801007e:	2900      	cmp	r1, #0
 8010080:	d044      	beq.n	801010c <_free_r+0x90>
 8010082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010086:	9001      	str	r0, [sp, #4]
 8010088:	2b00      	cmp	r3, #0
 801008a:	f1a1 0404 	sub.w	r4, r1, #4
 801008e:	bfb8      	it	lt
 8010090:	18e4      	addlt	r4, r4, r3
 8010092:	f000 fab5 	bl	8010600 <__malloc_lock>
 8010096:	4a1e      	ldr	r2, [pc, #120]	; (8010110 <_free_r+0x94>)
 8010098:	9801      	ldr	r0, [sp, #4]
 801009a:	6813      	ldr	r3, [r2, #0]
 801009c:	b933      	cbnz	r3, 80100ac <_free_r+0x30>
 801009e:	6063      	str	r3, [r4, #4]
 80100a0:	6014      	str	r4, [r2, #0]
 80100a2:	b003      	add	sp, #12
 80100a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100a8:	f000 bab0 	b.w	801060c <__malloc_unlock>
 80100ac:	42a3      	cmp	r3, r4
 80100ae:	d908      	bls.n	80100c2 <_free_r+0x46>
 80100b0:	6825      	ldr	r5, [r4, #0]
 80100b2:	1961      	adds	r1, r4, r5
 80100b4:	428b      	cmp	r3, r1
 80100b6:	bf01      	itttt	eq
 80100b8:	6819      	ldreq	r1, [r3, #0]
 80100ba:	685b      	ldreq	r3, [r3, #4]
 80100bc:	1949      	addeq	r1, r1, r5
 80100be:	6021      	streq	r1, [r4, #0]
 80100c0:	e7ed      	b.n	801009e <_free_r+0x22>
 80100c2:	461a      	mov	r2, r3
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	b10b      	cbz	r3, 80100cc <_free_r+0x50>
 80100c8:	42a3      	cmp	r3, r4
 80100ca:	d9fa      	bls.n	80100c2 <_free_r+0x46>
 80100cc:	6811      	ldr	r1, [r2, #0]
 80100ce:	1855      	adds	r5, r2, r1
 80100d0:	42a5      	cmp	r5, r4
 80100d2:	d10b      	bne.n	80100ec <_free_r+0x70>
 80100d4:	6824      	ldr	r4, [r4, #0]
 80100d6:	4421      	add	r1, r4
 80100d8:	1854      	adds	r4, r2, r1
 80100da:	42a3      	cmp	r3, r4
 80100dc:	6011      	str	r1, [r2, #0]
 80100de:	d1e0      	bne.n	80100a2 <_free_r+0x26>
 80100e0:	681c      	ldr	r4, [r3, #0]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	6053      	str	r3, [r2, #4]
 80100e6:	4421      	add	r1, r4
 80100e8:	6011      	str	r1, [r2, #0]
 80100ea:	e7da      	b.n	80100a2 <_free_r+0x26>
 80100ec:	d902      	bls.n	80100f4 <_free_r+0x78>
 80100ee:	230c      	movs	r3, #12
 80100f0:	6003      	str	r3, [r0, #0]
 80100f2:	e7d6      	b.n	80100a2 <_free_r+0x26>
 80100f4:	6825      	ldr	r5, [r4, #0]
 80100f6:	1961      	adds	r1, r4, r5
 80100f8:	428b      	cmp	r3, r1
 80100fa:	bf04      	itt	eq
 80100fc:	6819      	ldreq	r1, [r3, #0]
 80100fe:	685b      	ldreq	r3, [r3, #4]
 8010100:	6063      	str	r3, [r4, #4]
 8010102:	bf04      	itt	eq
 8010104:	1949      	addeq	r1, r1, r5
 8010106:	6021      	streq	r1, [r4, #0]
 8010108:	6054      	str	r4, [r2, #4]
 801010a:	e7ca      	b.n	80100a2 <_free_r+0x26>
 801010c:	b003      	add	sp, #12
 801010e:	bd30      	pop	{r4, r5, pc}
 8010110:	20004534 	.word	0x20004534

08010114 <sbrk_aligned>:
 8010114:	b570      	push	{r4, r5, r6, lr}
 8010116:	4e0e      	ldr	r6, [pc, #56]	; (8010150 <sbrk_aligned+0x3c>)
 8010118:	460c      	mov	r4, r1
 801011a:	6831      	ldr	r1, [r6, #0]
 801011c:	4605      	mov	r5, r0
 801011e:	b911      	cbnz	r1, 8010126 <sbrk_aligned+0x12>
 8010120:	f000 f9f2 	bl	8010508 <_sbrk_r>
 8010124:	6030      	str	r0, [r6, #0]
 8010126:	4621      	mov	r1, r4
 8010128:	4628      	mov	r0, r5
 801012a:	f000 f9ed 	bl	8010508 <_sbrk_r>
 801012e:	1c43      	adds	r3, r0, #1
 8010130:	d00a      	beq.n	8010148 <sbrk_aligned+0x34>
 8010132:	1cc4      	adds	r4, r0, #3
 8010134:	f024 0403 	bic.w	r4, r4, #3
 8010138:	42a0      	cmp	r0, r4
 801013a:	d007      	beq.n	801014c <sbrk_aligned+0x38>
 801013c:	1a21      	subs	r1, r4, r0
 801013e:	4628      	mov	r0, r5
 8010140:	f000 f9e2 	bl	8010508 <_sbrk_r>
 8010144:	3001      	adds	r0, #1
 8010146:	d101      	bne.n	801014c <sbrk_aligned+0x38>
 8010148:	f04f 34ff 	mov.w	r4, #4294967295
 801014c:	4620      	mov	r0, r4
 801014e:	bd70      	pop	{r4, r5, r6, pc}
 8010150:	20004538 	.word	0x20004538

08010154 <_malloc_r>:
 8010154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010158:	1ccd      	adds	r5, r1, #3
 801015a:	f025 0503 	bic.w	r5, r5, #3
 801015e:	3508      	adds	r5, #8
 8010160:	2d0c      	cmp	r5, #12
 8010162:	bf38      	it	cc
 8010164:	250c      	movcc	r5, #12
 8010166:	2d00      	cmp	r5, #0
 8010168:	4607      	mov	r7, r0
 801016a:	db01      	blt.n	8010170 <_malloc_r+0x1c>
 801016c:	42a9      	cmp	r1, r5
 801016e:	d905      	bls.n	801017c <_malloc_r+0x28>
 8010170:	230c      	movs	r3, #12
 8010172:	603b      	str	r3, [r7, #0]
 8010174:	2600      	movs	r6, #0
 8010176:	4630      	mov	r0, r6
 8010178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801017c:	4e2e      	ldr	r6, [pc, #184]	; (8010238 <_malloc_r+0xe4>)
 801017e:	f000 fa3f 	bl	8010600 <__malloc_lock>
 8010182:	6833      	ldr	r3, [r6, #0]
 8010184:	461c      	mov	r4, r3
 8010186:	bb34      	cbnz	r4, 80101d6 <_malloc_r+0x82>
 8010188:	4629      	mov	r1, r5
 801018a:	4638      	mov	r0, r7
 801018c:	f7ff ffc2 	bl	8010114 <sbrk_aligned>
 8010190:	1c43      	adds	r3, r0, #1
 8010192:	4604      	mov	r4, r0
 8010194:	d14d      	bne.n	8010232 <_malloc_r+0xde>
 8010196:	6834      	ldr	r4, [r6, #0]
 8010198:	4626      	mov	r6, r4
 801019a:	2e00      	cmp	r6, #0
 801019c:	d140      	bne.n	8010220 <_malloc_r+0xcc>
 801019e:	6823      	ldr	r3, [r4, #0]
 80101a0:	4631      	mov	r1, r6
 80101a2:	4638      	mov	r0, r7
 80101a4:	eb04 0803 	add.w	r8, r4, r3
 80101a8:	f000 f9ae 	bl	8010508 <_sbrk_r>
 80101ac:	4580      	cmp	r8, r0
 80101ae:	d13a      	bne.n	8010226 <_malloc_r+0xd2>
 80101b0:	6821      	ldr	r1, [r4, #0]
 80101b2:	3503      	adds	r5, #3
 80101b4:	1a6d      	subs	r5, r5, r1
 80101b6:	f025 0503 	bic.w	r5, r5, #3
 80101ba:	3508      	adds	r5, #8
 80101bc:	2d0c      	cmp	r5, #12
 80101be:	bf38      	it	cc
 80101c0:	250c      	movcc	r5, #12
 80101c2:	4629      	mov	r1, r5
 80101c4:	4638      	mov	r0, r7
 80101c6:	f7ff ffa5 	bl	8010114 <sbrk_aligned>
 80101ca:	3001      	adds	r0, #1
 80101cc:	d02b      	beq.n	8010226 <_malloc_r+0xd2>
 80101ce:	6823      	ldr	r3, [r4, #0]
 80101d0:	442b      	add	r3, r5
 80101d2:	6023      	str	r3, [r4, #0]
 80101d4:	e00e      	b.n	80101f4 <_malloc_r+0xa0>
 80101d6:	6822      	ldr	r2, [r4, #0]
 80101d8:	1b52      	subs	r2, r2, r5
 80101da:	d41e      	bmi.n	801021a <_malloc_r+0xc6>
 80101dc:	2a0b      	cmp	r2, #11
 80101de:	d916      	bls.n	801020e <_malloc_r+0xba>
 80101e0:	1961      	adds	r1, r4, r5
 80101e2:	42a3      	cmp	r3, r4
 80101e4:	6025      	str	r5, [r4, #0]
 80101e6:	bf18      	it	ne
 80101e8:	6059      	strne	r1, [r3, #4]
 80101ea:	6863      	ldr	r3, [r4, #4]
 80101ec:	bf08      	it	eq
 80101ee:	6031      	streq	r1, [r6, #0]
 80101f0:	5162      	str	r2, [r4, r5]
 80101f2:	604b      	str	r3, [r1, #4]
 80101f4:	4638      	mov	r0, r7
 80101f6:	f104 060b 	add.w	r6, r4, #11
 80101fa:	f000 fa07 	bl	801060c <__malloc_unlock>
 80101fe:	f026 0607 	bic.w	r6, r6, #7
 8010202:	1d23      	adds	r3, r4, #4
 8010204:	1af2      	subs	r2, r6, r3
 8010206:	d0b6      	beq.n	8010176 <_malloc_r+0x22>
 8010208:	1b9b      	subs	r3, r3, r6
 801020a:	50a3      	str	r3, [r4, r2]
 801020c:	e7b3      	b.n	8010176 <_malloc_r+0x22>
 801020e:	6862      	ldr	r2, [r4, #4]
 8010210:	42a3      	cmp	r3, r4
 8010212:	bf0c      	ite	eq
 8010214:	6032      	streq	r2, [r6, #0]
 8010216:	605a      	strne	r2, [r3, #4]
 8010218:	e7ec      	b.n	80101f4 <_malloc_r+0xa0>
 801021a:	4623      	mov	r3, r4
 801021c:	6864      	ldr	r4, [r4, #4]
 801021e:	e7b2      	b.n	8010186 <_malloc_r+0x32>
 8010220:	4634      	mov	r4, r6
 8010222:	6876      	ldr	r6, [r6, #4]
 8010224:	e7b9      	b.n	801019a <_malloc_r+0x46>
 8010226:	230c      	movs	r3, #12
 8010228:	603b      	str	r3, [r7, #0]
 801022a:	4638      	mov	r0, r7
 801022c:	f000 f9ee 	bl	801060c <__malloc_unlock>
 8010230:	e7a1      	b.n	8010176 <_malloc_r+0x22>
 8010232:	6025      	str	r5, [r4, #0]
 8010234:	e7de      	b.n	80101f4 <_malloc_r+0xa0>
 8010236:	bf00      	nop
 8010238:	20004534 	.word	0x20004534

0801023c <__ssputs_r>:
 801023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010240:	688e      	ldr	r6, [r1, #8]
 8010242:	429e      	cmp	r6, r3
 8010244:	4682      	mov	sl, r0
 8010246:	460c      	mov	r4, r1
 8010248:	4690      	mov	r8, r2
 801024a:	461f      	mov	r7, r3
 801024c:	d838      	bhi.n	80102c0 <__ssputs_r+0x84>
 801024e:	898a      	ldrh	r2, [r1, #12]
 8010250:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010254:	d032      	beq.n	80102bc <__ssputs_r+0x80>
 8010256:	6825      	ldr	r5, [r4, #0]
 8010258:	6909      	ldr	r1, [r1, #16]
 801025a:	eba5 0901 	sub.w	r9, r5, r1
 801025e:	6965      	ldr	r5, [r4, #20]
 8010260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010268:	3301      	adds	r3, #1
 801026a:	444b      	add	r3, r9
 801026c:	106d      	asrs	r5, r5, #1
 801026e:	429d      	cmp	r5, r3
 8010270:	bf38      	it	cc
 8010272:	461d      	movcc	r5, r3
 8010274:	0553      	lsls	r3, r2, #21
 8010276:	d531      	bpl.n	80102dc <__ssputs_r+0xa0>
 8010278:	4629      	mov	r1, r5
 801027a:	f7ff ff6b 	bl	8010154 <_malloc_r>
 801027e:	4606      	mov	r6, r0
 8010280:	b950      	cbnz	r0, 8010298 <__ssputs_r+0x5c>
 8010282:	230c      	movs	r3, #12
 8010284:	f8ca 3000 	str.w	r3, [sl]
 8010288:	89a3      	ldrh	r3, [r4, #12]
 801028a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801028e:	81a3      	strh	r3, [r4, #12]
 8010290:	f04f 30ff 	mov.w	r0, #4294967295
 8010294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010298:	6921      	ldr	r1, [r4, #16]
 801029a:	464a      	mov	r2, r9
 801029c:	f7ff fa08 	bl	800f6b0 <memcpy>
 80102a0:	89a3      	ldrh	r3, [r4, #12]
 80102a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80102a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102aa:	81a3      	strh	r3, [r4, #12]
 80102ac:	6126      	str	r6, [r4, #16]
 80102ae:	6165      	str	r5, [r4, #20]
 80102b0:	444e      	add	r6, r9
 80102b2:	eba5 0509 	sub.w	r5, r5, r9
 80102b6:	6026      	str	r6, [r4, #0]
 80102b8:	60a5      	str	r5, [r4, #8]
 80102ba:	463e      	mov	r6, r7
 80102bc:	42be      	cmp	r6, r7
 80102be:	d900      	bls.n	80102c2 <__ssputs_r+0x86>
 80102c0:	463e      	mov	r6, r7
 80102c2:	6820      	ldr	r0, [r4, #0]
 80102c4:	4632      	mov	r2, r6
 80102c6:	4641      	mov	r1, r8
 80102c8:	f000 f980 	bl	80105cc <memmove>
 80102cc:	68a3      	ldr	r3, [r4, #8]
 80102ce:	1b9b      	subs	r3, r3, r6
 80102d0:	60a3      	str	r3, [r4, #8]
 80102d2:	6823      	ldr	r3, [r4, #0]
 80102d4:	4433      	add	r3, r6
 80102d6:	6023      	str	r3, [r4, #0]
 80102d8:	2000      	movs	r0, #0
 80102da:	e7db      	b.n	8010294 <__ssputs_r+0x58>
 80102dc:	462a      	mov	r2, r5
 80102de:	f000 f99b 	bl	8010618 <_realloc_r>
 80102e2:	4606      	mov	r6, r0
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d1e1      	bne.n	80102ac <__ssputs_r+0x70>
 80102e8:	6921      	ldr	r1, [r4, #16]
 80102ea:	4650      	mov	r0, sl
 80102ec:	f7ff fec6 	bl	801007c <_free_r>
 80102f0:	e7c7      	b.n	8010282 <__ssputs_r+0x46>
	...

080102f4 <_svfiprintf_r>:
 80102f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f8:	4698      	mov	r8, r3
 80102fa:	898b      	ldrh	r3, [r1, #12]
 80102fc:	061b      	lsls	r3, r3, #24
 80102fe:	b09d      	sub	sp, #116	; 0x74
 8010300:	4607      	mov	r7, r0
 8010302:	460d      	mov	r5, r1
 8010304:	4614      	mov	r4, r2
 8010306:	d50e      	bpl.n	8010326 <_svfiprintf_r+0x32>
 8010308:	690b      	ldr	r3, [r1, #16]
 801030a:	b963      	cbnz	r3, 8010326 <_svfiprintf_r+0x32>
 801030c:	2140      	movs	r1, #64	; 0x40
 801030e:	f7ff ff21 	bl	8010154 <_malloc_r>
 8010312:	6028      	str	r0, [r5, #0]
 8010314:	6128      	str	r0, [r5, #16]
 8010316:	b920      	cbnz	r0, 8010322 <_svfiprintf_r+0x2e>
 8010318:	230c      	movs	r3, #12
 801031a:	603b      	str	r3, [r7, #0]
 801031c:	f04f 30ff 	mov.w	r0, #4294967295
 8010320:	e0d1      	b.n	80104c6 <_svfiprintf_r+0x1d2>
 8010322:	2340      	movs	r3, #64	; 0x40
 8010324:	616b      	str	r3, [r5, #20]
 8010326:	2300      	movs	r3, #0
 8010328:	9309      	str	r3, [sp, #36]	; 0x24
 801032a:	2320      	movs	r3, #32
 801032c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010330:	f8cd 800c 	str.w	r8, [sp, #12]
 8010334:	2330      	movs	r3, #48	; 0x30
 8010336:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80104e0 <_svfiprintf_r+0x1ec>
 801033a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801033e:	f04f 0901 	mov.w	r9, #1
 8010342:	4623      	mov	r3, r4
 8010344:	469a      	mov	sl, r3
 8010346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801034a:	b10a      	cbz	r2, 8010350 <_svfiprintf_r+0x5c>
 801034c:	2a25      	cmp	r2, #37	; 0x25
 801034e:	d1f9      	bne.n	8010344 <_svfiprintf_r+0x50>
 8010350:	ebba 0b04 	subs.w	fp, sl, r4
 8010354:	d00b      	beq.n	801036e <_svfiprintf_r+0x7a>
 8010356:	465b      	mov	r3, fp
 8010358:	4622      	mov	r2, r4
 801035a:	4629      	mov	r1, r5
 801035c:	4638      	mov	r0, r7
 801035e:	f7ff ff6d 	bl	801023c <__ssputs_r>
 8010362:	3001      	adds	r0, #1
 8010364:	f000 80aa 	beq.w	80104bc <_svfiprintf_r+0x1c8>
 8010368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801036a:	445a      	add	r2, fp
 801036c:	9209      	str	r2, [sp, #36]	; 0x24
 801036e:	f89a 3000 	ldrb.w	r3, [sl]
 8010372:	2b00      	cmp	r3, #0
 8010374:	f000 80a2 	beq.w	80104bc <_svfiprintf_r+0x1c8>
 8010378:	2300      	movs	r3, #0
 801037a:	f04f 32ff 	mov.w	r2, #4294967295
 801037e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010382:	f10a 0a01 	add.w	sl, sl, #1
 8010386:	9304      	str	r3, [sp, #16]
 8010388:	9307      	str	r3, [sp, #28]
 801038a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801038e:	931a      	str	r3, [sp, #104]	; 0x68
 8010390:	4654      	mov	r4, sl
 8010392:	2205      	movs	r2, #5
 8010394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010398:	4851      	ldr	r0, [pc, #324]	; (80104e0 <_svfiprintf_r+0x1ec>)
 801039a:	f7ef fef9 	bl	8000190 <memchr>
 801039e:	9a04      	ldr	r2, [sp, #16]
 80103a0:	b9d8      	cbnz	r0, 80103da <_svfiprintf_r+0xe6>
 80103a2:	06d0      	lsls	r0, r2, #27
 80103a4:	bf44      	itt	mi
 80103a6:	2320      	movmi	r3, #32
 80103a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103ac:	0711      	lsls	r1, r2, #28
 80103ae:	bf44      	itt	mi
 80103b0:	232b      	movmi	r3, #43	; 0x2b
 80103b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103b6:	f89a 3000 	ldrb.w	r3, [sl]
 80103ba:	2b2a      	cmp	r3, #42	; 0x2a
 80103bc:	d015      	beq.n	80103ea <_svfiprintf_r+0xf6>
 80103be:	9a07      	ldr	r2, [sp, #28]
 80103c0:	4654      	mov	r4, sl
 80103c2:	2000      	movs	r0, #0
 80103c4:	f04f 0c0a 	mov.w	ip, #10
 80103c8:	4621      	mov	r1, r4
 80103ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103ce:	3b30      	subs	r3, #48	; 0x30
 80103d0:	2b09      	cmp	r3, #9
 80103d2:	d94e      	bls.n	8010472 <_svfiprintf_r+0x17e>
 80103d4:	b1b0      	cbz	r0, 8010404 <_svfiprintf_r+0x110>
 80103d6:	9207      	str	r2, [sp, #28]
 80103d8:	e014      	b.n	8010404 <_svfiprintf_r+0x110>
 80103da:	eba0 0308 	sub.w	r3, r0, r8
 80103de:	fa09 f303 	lsl.w	r3, r9, r3
 80103e2:	4313      	orrs	r3, r2
 80103e4:	9304      	str	r3, [sp, #16]
 80103e6:	46a2      	mov	sl, r4
 80103e8:	e7d2      	b.n	8010390 <_svfiprintf_r+0x9c>
 80103ea:	9b03      	ldr	r3, [sp, #12]
 80103ec:	1d19      	adds	r1, r3, #4
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	9103      	str	r1, [sp, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	bfbb      	ittet	lt
 80103f6:	425b      	neglt	r3, r3
 80103f8:	f042 0202 	orrlt.w	r2, r2, #2
 80103fc:	9307      	strge	r3, [sp, #28]
 80103fe:	9307      	strlt	r3, [sp, #28]
 8010400:	bfb8      	it	lt
 8010402:	9204      	strlt	r2, [sp, #16]
 8010404:	7823      	ldrb	r3, [r4, #0]
 8010406:	2b2e      	cmp	r3, #46	; 0x2e
 8010408:	d10c      	bne.n	8010424 <_svfiprintf_r+0x130>
 801040a:	7863      	ldrb	r3, [r4, #1]
 801040c:	2b2a      	cmp	r3, #42	; 0x2a
 801040e:	d135      	bne.n	801047c <_svfiprintf_r+0x188>
 8010410:	9b03      	ldr	r3, [sp, #12]
 8010412:	1d1a      	adds	r2, r3, #4
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	9203      	str	r2, [sp, #12]
 8010418:	2b00      	cmp	r3, #0
 801041a:	bfb8      	it	lt
 801041c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010420:	3402      	adds	r4, #2
 8010422:	9305      	str	r3, [sp, #20]
 8010424:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80104f0 <_svfiprintf_r+0x1fc>
 8010428:	7821      	ldrb	r1, [r4, #0]
 801042a:	2203      	movs	r2, #3
 801042c:	4650      	mov	r0, sl
 801042e:	f7ef feaf 	bl	8000190 <memchr>
 8010432:	b140      	cbz	r0, 8010446 <_svfiprintf_r+0x152>
 8010434:	2340      	movs	r3, #64	; 0x40
 8010436:	eba0 000a 	sub.w	r0, r0, sl
 801043a:	fa03 f000 	lsl.w	r0, r3, r0
 801043e:	9b04      	ldr	r3, [sp, #16]
 8010440:	4303      	orrs	r3, r0
 8010442:	3401      	adds	r4, #1
 8010444:	9304      	str	r3, [sp, #16]
 8010446:	f814 1b01 	ldrb.w	r1, [r4], #1
 801044a:	4826      	ldr	r0, [pc, #152]	; (80104e4 <_svfiprintf_r+0x1f0>)
 801044c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010450:	2206      	movs	r2, #6
 8010452:	f7ef fe9d 	bl	8000190 <memchr>
 8010456:	2800      	cmp	r0, #0
 8010458:	d038      	beq.n	80104cc <_svfiprintf_r+0x1d8>
 801045a:	4b23      	ldr	r3, [pc, #140]	; (80104e8 <_svfiprintf_r+0x1f4>)
 801045c:	bb1b      	cbnz	r3, 80104a6 <_svfiprintf_r+0x1b2>
 801045e:	9b03      	ldr	r3, [sp, #12]
 8010460:	3307      	adds	r3, #7
 8010462:	f023 0307 	bic.w	r3, r3, #7
 8010466:	3308      	adds	r3, #8
 8010468:	9303      	str	r3, [sp, #12]
 801046a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801046c:	4433      	add	r3, r6
 801046e:	9309      	str	r3, [sp, #36]	; 0x24
 8010470:	e767      	b.n	8010342 <_svfiprintf_r+0x4e>
 8010472:	fb0c 3202 	mla	r2, ip, r2, r3
 8010476:	460c      	mov	r4, r1
 8010478:	2001      	movs	r0, #1
 801047a:	e7a5      	b.n	80103c8 <_svfiprintf_r+0xd4>
 801047c:	2300      	movs	r3, #0
 801047e:	3401      	adds	r4, #1
 8010480:	9305      	str	r3, [sp, #20]
 8010482:	4619      	mov	r1, r3
 8010484:	f04f 0c0a 	mov.w	ip, #10
 8010488:	4620      	mov	r0, r4
 801048a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801048e:	3a30      	subs	r2, #48	; 0x30
 8010490:	2a09      	cmp	r2, #9
 8010492:	d903      	bls.n	801049c <_svfiprintf_r+0x1a8>
 8010494:	2b00      	cmp	r3, #0
 8010496:	d0c5      	beq.n	8010424 <_svfiprintf_r+0x130>
 8010498:	9105      	str	r1, [sp, #20]
 801049a:	e7c3      	b.n	8010424 <_svfiprintf_r+0x130>
 801049c:	fb0c 2101 	mla	r1, ip, r1, r2
 80104a0:	4604      	mov	r4, r0
 80104a2:	2301      	movs	r3, #1
 80104a4:	e7f0      	b.n	8010488 <_svfiprintf_r+0x194>
 80104a6:	ab03      	add	r3, sp, #12
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	462a      	mov	r2, r5
 80104ac:	4b0f      	ldr	r3, [pc, #60]	; (80104ec <_svfiprintf_r+0x1f8>)
 80104ae:	a904      	add	r1, sp, #16
 80104b0:	4638      	mov	r0, r7
 80104b2:	f7fc fa3b 	bl	800c92c <_printf_float>
 80104b6:	1c42      	adds	r2, r0, #1
 80104b8:	4606      	mov	r6, r0
 80104ba:	d1d6      	bne.n	801046a <_svfiprintf_r+0x176>
 80104bc:	89ab      	ldrh	r3, [r5, #12]
 80104be:	065b      	lsls	r3, r3, #25
 80104c0:	f53f af2c 	bmi.w	801031c <_svfiprintf_r+0x28>
 80104c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104c6:	b01d      	add	sp, #116	; 0x74
 80104c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104cc:	ab03      	add	r3, sp, #12
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	462a      	mov	r2, r5
 80104d2:	4b06      	ldr	r3, [pc, #24]	; (80104ec <_svfiprintf_r+0x1f8>)
 80104d4:	a904      	add	r1, sp, #16
 80104d6:	4638      	mov	r0, r7
 80104d8:	f7fc fccc 	bl	800ce74 <_printf_i>
 80104dc:	e7eb      	b.n	80104b6 <_svfiprintf_r+0x1c2>
 80104de:	bf00      	nop
 80104e0:	08011624 	.word	0x08011624
 80104e4:	0801162e 	.word	0x0801162e
 80104e8:	0800c92d 	.word	0x0800c92d
 80104ec:	0801023d 	.word	0x0801023d
 80104f0:	0801162a 	.word	0x0801162a
 80104f4:	00000000 	.word	0x00000000

080104f8 <nan>:
 80104f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010500 <nan+0x8>
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop
 8010500:	00000000 	.word	0x00000000
 8010504:	7ff80000 	.word	0x7ff80000

08010508 <_sbrk_r>:
 8010508:	b538      	push	{r3, r4, r5, lr}
 801050a:	4d06      	ldr	r5, [pc, #24]	; (8010524 <_sbrk_r+0x1c>)
 801050c:	2300      	movs	r3, #0
 801050e:	4604      	mov	r4, r0
 8010510:	4608      	mov	r0, r1
 8010512:	602b      	str	r3, [r5, #0]
 8010514:	f7f3 fc7c 	bl	8003e10 <_sbrk>
 8010518:	1c43      	adds	r3, r0, #1
 801051a:	d102      	bne.n	8010522 <_sbrk_r+0x1a>
 801051c:	682b      	ldr	r3, [r5, #0]
 801051e:	b103      	cbz	r3, 8010522 <_sbrk_r+0x1a>
 8010520:	6023      	str	r3, [r4, #0]
 8010522:	bd38      	pop	{r3, r4, r5, pc}
 8010524:	2000453c 	.word	0x2000453c

08010528 <strncmp>:
 8010528:	b510      	push	{r4, lr}
 801052a:	b17a      	cbz	r2, 801054c <strncmp+0x24>
 801052c:	4603      	mov	r3, r0
 801052e:	3901      	subs	r1, #1
 8010530:	1884      	adds	r4, r0, r2
 8010532:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010536:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801053a:	4290      	cmp	r0, r2
 801053c:	d101      	bne.n	8010542 <strncmp+0x1a>
 801053e:	42a3      	cmp	r3, r4
 8010540:	d101      	bne.n	8010546 <strncmp+0x1e>
 8010542:	1a80      	subs	r0, r0, r2
 8010544:	bd10      	pop	{r4, pc}
 8010546:	2800      	cmp	r0, #0
 8010548:	d1f3      	bne.n	8010532 <strncmp+0xa>
 801054a:	e7fa      	b.n	8010542 <strncmp+0x1a>
 801054c:	4610      	mov	r0, r2
 801054e:	e7f9      	b.n	8010544 <strncmp+0x1c>

08010550 <__ascii_wctomb>:
 8010550:	b149      	cbz	r1, 8010566 <__ascii_wctomb+0x16>
 8010552:	2aff      	cmp	r2, #255	; 0xff
 8010554:	bf85      	ittet	hi
 8010556:	238a      	movhi	r3, #138	; 0x8a
 8010558:	6003      	strhi	r3, [r0, #0]
 801055a:	700a      	strbls	r2, [r1, #0]
 801055c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010560:	bf98      	it	ls
 8010562:	2001      	movls	r0, #1
 8010564:	4770      	bx	lr
 8010566:	4608      	mov	r0, r1
 8010568:	4770      	bx	lr
	...

0801056c <__assert_func>:
 801056c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801056e:	4614      	mov	r4, r2
 8010570:	461a      	mov	r2, r3
 8010572:	4b09      	ldr	r3, [pc, #36]	; (8010598 <__assert_func+0x2c>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4605      	mov	r5, r0
 8010578:	68d8      	ldr	r0, [r3, #12]
 801057a:	b14c      	cbz	r4, 8010590 <__assert_func+0x24>
 801057c:	4b07      	ldr	r3, [pc, #28]	; (801059c <__assert_func+0x30>)
 801057e:	9100      	str	r1, [sp, #0]
 8010580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010584:	4906      	ldr	r1, [pc, #24]	; (80105a0 <__assert_func+0x34>)
 8010586:	462b      	mov	r3, r5
 8010588:	f000 f80e 	bl	80105a8 <fiprintf>
 801058c:	f000 fa8c 	bl	8010aa8 <abort>
 8010590:	4b04      	ldr	r3, [pc, #16]	; (80105a4 <__assert_func+0x38>)
 8010592:	461c      	mov	r4, r3
 8010594:	e7f3      	b.n	801057e <__assert_func+0x12>
 8010596:	bf00      	nop
 8010598:	20000190 	.word	0x20000190
 801059c:	08011635 	.word	0x08011635
 80105a0:	08011642 	.word	0x08011642
 80105a4:	08011670 	.word	0x08011670

080105a8 <fiprintf>:
 80105a8:	b40e      	push	{r1, r2, r3}
 80105aa:	b503      	push	{r0, r1, lr}
 80105ac:	4601      	mov	r1, r0
 80105ae:	ab03      	add	r3, sp, #12
 80105b0:	4805      	ldr	r0, [pc, #20]	; (80105c8 <fiprintf+0x20>)
 80105b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105b6:	6800      	ldr	r0, [r0, #0]
 80105b8:	9301      	str	r3, [sp, #4]
 80105ba:	f000 f885 	bl	80106c8 <_vfiprintf_r>
 80105be:	b002      	add	sp, #8
 80105c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80105c4:	b003      	add	sp, #12
 80105c6:	4770      	bx	lr
 80105c8:	20000190 	.word	0x20000190

080105cc <memmove>:
 80105cc:	4288      	cmp	r0, r1
 80105ce:	b510      	push	{r4, lr}
 80105d0:	eb01 0402 	add.w	r4, r1, r2
 80105d4:	d902      	bls.n	80105dc <memmove+0x10>
 80105d6:	4284      	cmp	r4, r0
 80105d8:	4623      	mov	r3, r4
 80105da:	d807      	bhi.n	80105ec <memmove+0x20>
 80105dc:	1e43      	subs	r3, r0, #1
 80105de:	42a1      	cmp	r1, r4
 80105e0:	d008      	beq.n	80105f4 <memmove+0x28>
 80105e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105ea:	e7f8      	b.n	80105de <memmove+0x12>
 80105ec:	4402      	add	r2, r0
 80105ee:	4601      	mov	r1, r0
 80105f0:	428a      	cmp	r2, r1
 80105f2:	d100      	bne.n	80105f6 <memmove+0x2a>
 80105f4:	bd10      	pop	{r4, pc}
 80105f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80105fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80105fe:	e7f7      	b.n	80105f0 <memmove+0x24>

08010600 <__malloc_lock>:
 8010600:	4801      	ldr	r0, [pc, #4]	; (8010608 <__malloc_lock+0x8>)
 8010602:	f000 bc11 	b.w	8010e28 <__retarget_lock_acquire_recursive>
 8010606:	bf00      	nop
 8010608:	20004540 	.word	0x20004540

0801060c <__malloc_unlock>:
 801060c:	4801      	ldr	r0, [pc, #4]	; (8010614 <__malloc_unlock+0x8>)
 801060e:	f000 bc0c 	b.w	8010e2a <__retarget_lock_release_recursive>
 8010612:	bf00      	nop
 8010614:	20004540 	.word	0x20004540

08010618 <_realloc_r>:
 8010618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801061c:	4680      	mov	r8, r0
 801061e:	4614      	mov	r4, r2
 8010620:	460e      	mov	r6, r1
 8010622:	b921      	cbnz	r1, 801062e <_realloc_r+0x16>
 8010624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010628:	4611      	mov	r1, r2
 801062a:	f7ff bd93 	b.w	8010154 <_malloc_r>
 801062e:	b92a      	cbnz	r2, 801063c <_realloc_r+0x24>
 8010630:	f7ff fd24 	bl	801007c <_free_r>
 8010634:	4625      	mov	r5, r4
 8010636:	4628      	mov	r0, r5
 8010638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801063c:	f000 fc5c 	bl	8010ef8 <_malloc_usable_size_r>
 8010640:	4284      	cmp	r4, r0
 8010642:	4607      	mov	r7, r0
 8010644:	d802      	bhi.n	801064c <_realloc_r+0x34>
 8010646:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801064a:	d812      	bhi.n	8010672 <_realloc_r+0x5a>
 801064c:	4621      	mov	r1, r4
 801064e:	4640      	mov	r0, r8
 8010650:	f7ff fd80 	bl	8010154 <_malloc_r>
 8010654:	4605      	mov	r5, r0
 8010656:	2800      	cmp	r0, #0
 8010658:	d0ed      	beq.n	8010636 <_realloc_r+0x1e>
 801065a:	42bc      	cmp	r4, r7
 801065c:	4622      	mov	r2, r4
 801065e:	4631      	mov	r1, r6
 8010660:	bf28      	it	cs
 8010662:	463a      	movcs	r2, r7
 8010664:	f7ff f824 	bl	800f6b0 <memcpy>
 8010668:	4631      	mov	r1, r6
 801066a:	4640      	mov	r0, r8
 801066c:	f7ff fd06 	bl	801007c <_free_r>
 8010670:	e7e1      	b.n	8010636 <_realloc_r+0x1e>
 8010672:	4635      	mov	r5, r6
 8010674:	e7df      	b.n	8010636 <_realloc_r+0x1e>

08010676 <__sfputc_r>:
 8010676:	6893      	ldr	r3, [r2, #8]
 8010678:	3b01      	subs	r3, #1
 801067a:	2b00      	cmp	r3, #0
 801067c:	b410      	push	{r4}
 801067e:	6093      	str	r3, [r2, #8]
 8010680:	da08      	bge.n	8010694 <__sfputc_r+0x1e>
 8010682:	6994      	ldr	r4, [r2, #24]
 8010684:	42a3      	cmp	r3, r4
 8010686:	db01      	blt.n	801068c <__sfputc_r+0x16>
 8010688:	290a      	cmp	r1, #10
 801068a:	d103      	bne.n	8010694 <__sfputc_r+0x1e>
 801068c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010690:	f000 b94a 	b.w	8010928 <__swbuf_r>
 8010694:	6813      	ldr	r3, [r2, #0]
 8010696:	1c58      	adds	r0, r3, #1
 8010698:	6010      	str	r0, [r2, #0]
 801069a:	7019      	strb	r1, [r3, #0]
 801069c:	4608      	mov	r0, r1
 801069e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <__sfputs_r>:
 80106a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a6:	4606      	mov	r6, r0
 80106a8:	460f      	mov	r7, r1
 80106aa:	4614      	mov	r4, r2
 80106ac:	18d5      	adds	r5, r2, r3
 80106ae:	42ac      	cmp	r4, r5
 80106b0:	d101      	bne.n	80106b6 <__sfputs_r+0x12>
 80106b2:	2000      	movs	r0, #0
 80106b4:	e007      	b.n	80106c6 <__sfputs_r+0x22>
 80106b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ba:	463a      	mov	r2, r7
 80106bc:	4630      	mov	r0, r6
 80106be:	f7ff ffda 	bl	8010676 <__sfputc_r>
 80106c2:	1c43      	adds	r3, r0, #1
 80106c4:	d1f3      	bne.n	80106ae <__sfputs_r+0xa>
 80106c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080106c8 <_vfiprintf_r>:
 80106c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106cc:	460d      	mov	r5, r1
 80106ce:	b09d      	sub	sp, #116	; 0x74
 80106d0:	4614      	mov	r4, r2
 80106d2:	4698      	mov	r8, r3
 80106d4:	4606      	mov	r6, r0
 80106d6:	b118      	cbz	r0, 80106e0 <_vfiprintf_r+0x18>
 80106d8:	6983      	ldr	r3, [r0, #24]
 80106da:	b90b      	cbnz	r3, 80106e0 <_vfiprintf_r+0x18>
 80106dc:	f000 fb06 	bl	8010cec <__sinit>
 80106e0:	4b89      	ldr	r3, [pc, #548]	; (8010908 <_vfiprintf_r+0x240>)
 80106e2:	429d      	cmp	r5, r3
 80106e4:	d11b      	bne.n	801071e <_vfiprintf_r+0x56>
 80106e6:	6875      	ldr	r5, [r6, #4]
 80106e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106ea:	07d9      	lsls	r1, r3, #31
 80106ec:	d405      	bmi.n	80106fa <_vfiprintf_r+0x32>
 80106ee:	89ab      	ldrh	r3, [r5, #12]
 80106f0:	059a      	lsls	r2, r3, #22
 80106f2:	d402      	bmi.n	80106fa <_vfiprintf_r+0x32>
 80106f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106f6:	f000 fb97 	bl	8010e28 <__retarget_lock_acquire_recursive>
 80106fa:	89ab      	ldrh	r3, [r5, #12]
 80106fc:	071b      	lsls	r3, r3, #28
 80106fe:	d501      	bpl.n	8010704 <_vfiprintf_r+0x3c>
 8010700:	692b      	ldr	r3, [r5, #16]
 8010702:	b9eb      	cbnz	r3, 8010740 <_vfiprintf_r+0x78>
 8010704:	4629      	mov	r1, r5
 8010706:	4630      	mov	r0, r6
 8010708:	f000 f960 	bl	80109cc <__swsetup_r>
 801070c:	b1c0      	cbz	r0, 8010740 <_vfiprintf_r+0x78>
 801070e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010710:	07dc      	lsls	r4, r3, #31
 8010712:	d50e      	bpl.n	8010732 <_vfiprintf_r+0x6a>
 8010714:	f04f 30ff 	mov.w	r0, #4294967295
 8010718:	b01d      	add	sp, #116	; 0x74
 801071a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071e:	4b7b      	ldr	r3, [pc, #492]	; (801090c <_vfiprintf_r+0x244>)
 8010720:	429d      	cmp	r5, r3
 8010722:	d101      	bne.n	8010728 <_vfiprintf_r+0x60>
 8010724:	68b5      	ldr	r5, [r6, #8]
 8010726:	e7df      	b.n	80106e8 <_vfiprintf_r+0x20>
 8010728:	4b79      	ldr	r3, [pc, #484]	; (8010910 <_vfiprintf_r+0x248>)
 801072a:	429d      	cmp	r5, r3
 801072c:	bf08      	it	eq
 801072e:	68f5      	ldreq	r5, [r6, #12]
 8010730:	e7da      	b.n	80106e8 <_vfiprintf_r+0x20>
 8010732:	89ab      	ldrh	r3, [r5, #12]
 8010734:	0598      	lsls	r0, r3, #22
 8010736:	d4ed      	bmi.n	8010714 <_vfiprintf_r+0x4c>
 8010738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801073a:	f000 fb76 	bl	8010e2a <__retarget_lock_release_recursive>
 801073e:	e7e9      	b.n	8010714 <_vfiprintf_r+0x4c>
 8010740:	2300      	movs	r3, #0
 8010742:	9309      	str	r3, [sp, #36]	; 0x24
 8010744:	2320      	movs	r3, #32
 8010746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801074a:	f8cd 800c 	str.w	r8, [sp, #12]
 801074e:	2330      	movs	r3, #48	; 0x30
 8010750:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010914 <_vfiprintf_r+0x24c>
 8010754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010758:	f04f 0901 	mov.w	r9, #1
 801075c:	4623      	mov	r3, r4
 801075e:	469a      	mov	sl, r3
 8010760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010764:	b10a      	cbz	r2, 801076a <_vfiprintf_r+0xa2>
 8010766:	2a25      	cmp	r2, #37	; 0x25
 8010768:	d1f9      	bne.n	801075e <_vfiprintf_r+0x96>
 801076a:	ebba 0b04 	subs.w	fp, sl, r4
 801076e:	d00b      	beq.n	8010788 <_vfiprintf_r+0xc0>
 8010770:	465b      	mov	r3, fp
 8010772:	4622      	mov	r2, r4
 8010774:	4629      	mov	r1, r5
 8010776:	4630      	mov	r0, r6
 8010778:	f7ff ff94 	bl	80106a4 <__sfputs_r>
 801077c:	3001      	adds	r0, #1
 801077e:	f000 80aa 	beq.w	80108d6 <_vfiprintf_r+0x20e>
 8010782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010784:	445a      	add	r2, fp
 8010786:	9209      	str	r2, [sp, #36]	; 0x24
 8010788:	f89a 3000 	ldrb.w	r3, [sl]
 801078c:	2b00      	cmp	r3, #0
 801078e:	f000 80a2 	beq.w	80108d6 <_vfiprintf_r+0x20e>
 8010792:	2300      	movs	r3, #0
 8010794:	f04f 32ff 	mov.w	r2, #4294967295
 8010798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801079c:	f10a 0a01 	add.w	sl, sl, #1
 80107a0:	9304      	str	r3, [sp, #16]
 80107a2:	9307      	str	r3, [sp, #28]
 80107a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107a8:	931a      	str	r3, [sp, #104]	; 0x68
 80107aa:	4654      	mov	r4, sl
 80107ac:	2205      	movs	r2, #5
 80107ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107b2:	4858      	ldr	r0, [pc, #352]	; (8010914 <_vfiprintf_r+0x24c>)
 80107b4:	f7ef fcec 	bl	8000190 <memchr>
 80107b8:	9a04      	ldr	r2, [sp, #16]
 80107ba:	b9d8      	cbnz	r0, 80107f4 <_vfiprintf_r+0x12c>
 80107bc:	06d1      	lsls	r1, r2, #27
 80107be:	bf44      	itt	mi
 80107c0:	2320      	movmi	r3, #32
 80107c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107c6:	0713      	lsls	r3, r2, #28
 80107c8:	bf44      	itt	mi
 80107ca:	232b      	movmi	r3, #43	; 0x2b
 80107cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107d0:	f89a 3000 	ldrb.w	r3, [sl]
 80107d4:	2b2a      	cmp	r3, #42	; 0x2a
 80107d6:	d015      	beq.n	8010804 <_vfiprintf_r+0x13c>
 80107d8:	9a07      	ldr	r2, [sp, #28]
 80107da:	4654      	mov	r4, sl
 80107dc:	2000      	movs	r0, #0
 80107de:	f04f 0c0a 	mov.w	ip, #10
 80107e2:	4621      	mov	r1, r4
 80107e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107e8:	3b30      	subs	r3, #48	; 0x30
 80107ea:	2b09      	cmp	r3, #9
 80107ec:	d94e      	bls.n	801088c <_vfiprintf_r+0x1c4>
 80107ee:	b1b0      	cbz	r0, 801081e <_vfiprintf_r+0x156>
 80107f0:	9207      	str	r2, [sp, #28]
 80107f2:	e014      	b.n	801081e <_vfiprintf_r+0x156>
 80107f4:	eba0 0308 	sub.w	r3, r0, r8
 80107f8:	fa09 f303 	lsl.w	r3, r9, r3
 80107fc:	4313      	orrs	r3, r2
 80107fe:	9304      	str	r3, [sp, #16]
 8010800:	46a2      	mov	sl, r4
 8010802:	e7d2      	b.n	80107aa <_vfiprintf_r+0xe2>
 8010804:	9b03      	ldr	r3, [sp, #12]
 8010806:	1d19      	adds	r1, r3, #4
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	9103      	str	r1, [sp, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	bfbb      	ittet	lt
 8010810:	425b      	neglt	r3, r3
 8010812:	f042 0202 	orrlt.w	r2, r2, #2
 8010816:	9307      	strge	r3, [sp, #28]
 8010818:	9307      	strlt	r3, [sp, #28]
 801081a:	bfb8      	it	lt
 801081c:	9204      	strlt	r2, [sp, #16]
 801081e:	7823      	ldrb	r3, [r4, #0]
 8010820:	2b2e      	cmp	r3, #46	; 0x2e
 8010822:	d10c      	bne.n	801083e <_vfiprintf_r+0x176>
 8010824:	7863      	ldrb	r3, [r4, #1]
 8010826:	2b2a      	cmp	r3, #42	; 0x2a
 8010828:	d135      	bne.n	8010896 <_vfiprintf_r+0x1ce>
 801082a:	9b03      	ldr	r3, [sp, #12]
 801082c:	1d1a      	adds	r2, r3, #4
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	9203      	str	r2, [sp, #12]
 8010832:	2b00      	cmp	r3, #0
 8010834:	bfb8      	it	lt
 8010836:	f04f 33ff 	movlt.w	r3, #4294967295
 801083a:	3402      	adds	r4, #2
 801083c:	9305      	str	r3, [sp, #20]
 801083e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010924 <_vfiprintf_r+0x25c>
 8010842:	7821      	ldrb	r1, [r4, #0]
 8010844:	2203      	movs	r2, #3
 8010846:	4650      	mov	r0, sl
 8010848:	f7ef fca2 	bl	8000190 <memchr>
 801084c:	b140      	cbz	r0, 8010860 <_vfiprintf_r+0x198>
 801084e:	2340      	movs	r3, #64	; 0x40
 8010850:	eba0 000a 	sub.w	r0, r0, sl
 8010854:	fa03 f000 	lsl.w	r0, r3, r0
 8010858:	9b04      	ldr	r3, [sp, #16]
 801085a:	4303      	orrs	r3, r0
 801085c:	3401      	adds	r4, #1
 801085e:	9304      	str	r3, [sp, #16]
 8010860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010864:	482c      	ldr	r0, [pc, #176]	; (8010918 <_vfiprintf_r+0x250>)
 8010866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801086a:	2206      	movs	r2, #6
 801086c:	f7ef fc90 	bl	8000190 <memchr>
 8010870:	2800      	cmp	r0, #0
 8010872:	d03f      	beq.n	80108f4 <_vfiprintf_r+0x22c>
 8010874:	4b29      	ldr	r3, [pc, #164]	; (801091c <_vfiprintf_r+0x254>)
 8010876:	bb1b      	cbnz	r3, 80108c0 <_vfiprintf_r+0x1f8>
 8010878:	9b03      	ldr	r3, [sp, #12]
 801087a:	3307      	adds	r3, #7
 801087c:	f023 0307 	bic.w	r3, r3, #7
 8010880:	3308      	adds	r3, #8
 8010882:	9303      	str	r3, [sp, #12]
 8010884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010886:	443b      	add	r3, r7
 8010888:	9309      	str	r3, [sp, #36]	; 0x24
 801088a:	e767      	b.n	801075c <_vfiprintf_r+0x94>
 801088c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010890:	460c      	mov	r4, r1
 8010892:	2001      	movs	r0, #1
 8010894:	e7a5      	b.n	80107e2 <_vfiprintf_r+0x11a>
 8010896:	2300      	movs	r3, #0
 8010898:	3401      	adds	r4, #1
 801089a:	9305      	str	r3, [sp, #20]
 801089c:	4619      	mov	r1, r3
 801089e:	f04f 0c0a 	mov.w	ip, #10
 80108a2:	4620      	mov	r0, r4
 80108a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108a8:	3a30      	subs	r2, #48	; 0x30
 80108aa:	2a09      	cmp	r2, #9
 80108ac:	d903      	bls.n	80108b6 <_vfiprintf_r+0x1ee>
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d0c5      	beq.n	801083e <_vfiprintf_r+0x176>
 80108b2:	9105      	str	r1, [sp, #20]
 80108b4:	e7c3      	b.n	801083e <_vfiprintf_r+0x176>
 80108b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80108ba:	4604      	mov	r4, r0
 80108bc:	2301      	movs	r3, #1
 80108be:	e7f0      	b.n	80108a2 <_vfiprintf_r+0x1da>
 80108c0:	ab03      	add	r3, sp, #12
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	462a      	mov	r2, r5
 80108c6:	4b16      	ldr	r3, [pc, #88]	; (8010920 <_vfiprintf_r+0x258>)
 80108c8:	a904      	add	r1, sp, #16
 80108ca:	4630      	mov	r0, r6
 80108cc:	f7fc f82e 	bl	800c92c <_printf_float>
 80108d0:	4607      	mov	r7, r0
 80108d2:	1c78      	adds	r0, r7, #1
 80108d4:	d1d6      	bne.n	8010884 <_vfiprintf_r+0x1bc>
 80108d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108d8:	07d9      	lsls	r1, r3, #31
 80108da:	d405      	bmi.n	80108e8 <_vfiprintf_r+0x220>
 80108dc:	89ab      	ldrh	r3, [r5, #12]
 80108de:	059a      	lsls	r2, r3, #22
 80108e0:	d402      	bmi.n	80108e8 <_vfiprintf_r+0x220>
 80108e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108e4:	f000 faa1 	bl	8010e2a <__retarget_lock_release_recursive>
 80108e8:	89ab      	ldrh	r3, [r5, #12]
 80108ea:	065b      	lsls	r3, r3, #25
 80108ec:	f53f af12 	bmi.w	8010714 <_vfiprintf_r+0x4c>
 80108f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108f2:	e711      	b.n	8010718 <_vfiprintf_r+0x50>
 80108f4:	ab03      	add	r3, sp, #12
 80108f6:	9300      	str	r3, [sp, #0]
 80108f8:	462a      	mov	r2, r5
 80108fa:	4b09      	ldr	r3, [pc, #36]	; (8010920 <_vfiprintf_r+0x258>)
 80108fc:	a904      	add	r1, sp, #16
 80108fe:	4630      	mov	r0, r6
 8010900:	f7fc fab8 	bl	800ce74 <_printf_i>
 8010904:	e7e4      	b.n	80108d0 <_vfiprintf_r+0x208>
 8010906:	bf00      	nop
 8010908:	08011694 	.word	0x08011694
 801090c:	080116b4 	.word	0x080116b4
 8010910:	08011674 	.word	0x08011674
 8010914:	08011624 	.word	0x08011624
 8010918:	0801162e 	.word	0x0801162e
 801091c:	0800c92d 	.word	0x0800c92d
 8010920:	080106a5 	.word	0x080106a5
 8010924:	0801162a 	.word	0x0801162a

08010928 <__swbuf_r>:
 8010928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801092a:	460e      	mov	r6, r1
 801092c:	4614      	mov	r4, r2
 801092e:	4605      	mov	r5, r0
 8010930:	b118      	cbz	r0, 801093a <__swbuf_r+0x12>
 8010932:	6983      	ldr	r3, [r0, #24]
 8010934:	b90b      	cbnz	r3, 801093a <__swbuf_r+0x12>
 8010936:	f000 f9d9 	bl	8010cec <__sinit>
 801093a:	4b21      	ldr	r3, [pc, #132]	; (80109c0 <__swbuf_r+0x98>)
 801093c:	429c      	cmp	r4, r3
 801093e:	d12b      	bne.n	8010998 <__swbuf_r+0x70>
 8010940:	686c      	ldr	r4, [r5, #4]
 8010942:	69a3      	ldr	r3, [r4, #24]
 8010944:	60a3      	str	r3, [r4, #8]
 8010946:	89a3      	ldrh	r3, [r4, #12]
 8010948:	071a      	lsls	r2, r3, #28
 801094a:	d52f      	bpl.n	80109ac <__swbuf_r+0x84>
 801094c:	6923      	ldr	r3, [r4, #16]
 801094e:	b36b      	cbz	r3, 80109ac <__swbuf_r+0x84>
 8010950:	6923      	ldr	r3, [r4, #16]
 8010952:	6820      	ldr	r0, [r4, #0]
 8010954:	1ac0      	subs	r0, r0, r3
 8010956:	6963      	ldr	r3, [r4, #20]
 8010958:	b2f6      	uxtb	r6, r6
 801095a:	4283      	cmp	r3, r0
 801095c:	4637      	mov	r7, r6
 801095e:	dc04      	bgt.n	801096a <__swbuf_r+0x42>
 8010960:	4621      	mov	r1, r4
 8010962:	4628      	mov	r0, r5
 8010964:	f000 f92e 	bl	8010bc4 <_fflush_r>
 8010968:	bb30      	cbnz	r0, 80109b8 <__swbuf_r+0x90>
 801096a:	68a3      	ldr	r3, [r4, #8]
 801096c:	3b01      	subs	r3, #1
 801096e:	60a3      	str	r3, [r4, #8]
 8010970:	6823      	ldr	r3, [r4, #0]
 8010972:	1c5a      	adds	r2, r3, #1
 8010974:	6022      	str	r2, [r4, #0]
 8010976:	701e      	strb	r6, [r3, #0]
 8010978:	6963      	ldr	r3, [r4, #20]
 801097a:	3001      	adds	r0, #1
 801097c:	4283      	cmp	r3, r0
 801097e:	d004      	beq.n	801098a <__swbuf_r+0x62>
 8010980:	89a3      	ldrh	r3, [r4, #12]
 8010982:	07db      	lsls	r3, r3, #31
 8010984:	d506      	bpl.n	8010994 <__swbuf_r+0x6c>
 8010986:	2e0a      	cmp	r6, #10
 8010988:	d104      	bne.n	8010994 <__swbuf_r+0x6c>
 801098a:	4621      	mov	r1, r4
 801098c:	4628      	mov	r0, r5
 801098e:	f000 f919 	bl	8010bc4 <_fflush_r>
 8010992:	b988      	cbnz	r0, 80109b8 <__swbuf_r+0x90>
 8010994:	4638      	mov	r0, r7
 8010996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010998:	4b0a      	ldr	r3, [pc, #40]	; (80109c4 <__swbuf_r+0x9c>)
 801099a:	429c      	cmp	r4, r3
 801099c:	d101      	bne.n	80109a2 <__swbuf_r+0x7a>
 801099e:	68ac      	ldr	r4, [r5, #8]
 80109a0:	e7cf      	b.n	8010942 <__swbuf_r+0x1a>
 80109a2:	4b09      	ldr	r3, [pc, #36]	; (80109c8 <__swbuf_r+0xa0>)
 80109a4:	429c      	cmp	r4, r3
 80109a6:	bf08      	it	eq
 80109a8:	68ec      	ldreq	r4, [r5, #12]
 80109aa:	e7ca      	b.n	8010942 <__swbuf_r+0x1a>
 80109ac:	4621      	mov	r1, r4
 80109ae:	4628      	mov	r0, r5
 80109b0:	f000 f80c 	bl	80109cc <__swsetup_r>
 80109b4:	2800      	cmp	r0, #0
 80109b6:	d0cb      	beq.n	8010950 <__swbuf_r+0x28>
 80109b8:	f04f 37ff 	mov.w	r7, #4294967295
 80109bc:	e7ea      	b.n	8010994 <__swbuf_r+0x6c>
 80109be:	bf00      	nop
 80109c0:	08011694 	.word	0x08011694
 80109c4:	080116b4 	.word	0x080116b4
 80109c8:	08011674 	.word	0x08011674

080109cc <__swsetup_r>:
 80109cc:	4b32      	ldr	r3, [pc, #200]	; (8010a98 <__swsetup_r+0xcc>)
 80109ce:	b570      	push	{r4, r5, r6, lr}
 80109d0:	681d      	ldr	r5, [r3, #0]
 80109d2:	4606      	mov	r6, r0
 80109d4:	460c      	mov	r4, r1
 80109d6:	b125      	cbz	r5, 80109e2 <__swsetup_r+0x16>
 80109d8:	69ab      	ldr	r3, [r5, #24]
 80109da:	b913      	cbnz	r3, 80109e2 <__swsetup_r+0x16>
 80109dc:	4628      	mov	r0, r5
 80109de:	f000 f985 	bl	8010cec <__sinit>
 80109e2:	4b2e      	ldr	r3, [pc, #184]	; (8010a9c <__swsetup_r+0xd0>)
 80109e4:	429c      	cmp	r4, r3
 80109e6:	d10f      	bne.n	8010a08 <__swsetup_r+0x3c>
 80109e8:	686c      	ldr	r4, [r5, #4]
 80109ea:	89a3      	ldrh	r3, [r4, #12]
 80109ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109f0:	0719      	lsls	r1, r3, #28
 80109f2:	d42c      	bmi.n	8010a4e <__swsetup_r+0x82>
 80109f4:	06dd      	lsls	r5, r3, #27
 80109f6:	d411      	bmi.n	8010a1c <__swsetup_r+0x50>
 80109f8:	2309      	movs	r3, #9
 80109fa:	6033      	str	r3, [r6, #0]
 80109fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a00:	81a3      	strh	r3, [r4, #12]
 8010a02:	f04f 30ff 	mov.w	r0, #4294967295
 8010a06:	e03e      	b.n	8010a86 <__swsetup_r+0xba>
 8010a08:	4b25      	ldr	r3, [pc, #148]	; (8010aa0 <__swsetup_r+0xd4>)
 8010a0a:	429c      	cmp	r4, r3
 8010a0c:	d101      	bne.n	8010a12 <__swsetup_r+0x46>
 8010a0e:	68ac      	ldr	r4, [r5, #8]
 8010a10:	e7eb      	b.n	80109ea <__swsetup_r+0x1e>
 8010a12:	4b24      	ldr	r3, [pc, #144]	; (8010aa4 <__swsetup_r+0xd8>)
 8010a14:	429c      	cmp	r4, r3
 8010a16:	bf08      	it	eq
 8010a18:	68ec      	ldreq	r4, [r5, #12]
 8010a1a:	e7e6      	b.n	80109ea <__swsetup_r+0x1e>
 8010a1c:	0758      	lsls	r0, r3, #29
 8010a1e:	d512      	bpl.n	8010a46 <__swsetup_r+0x7a>
 8010a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a22:	b141      	cbz	r1, 8010a36 <__swsetup_r+0x6a>
 8010a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a28:	4299      	cmp	r1, r3
 8010a2a:	d002      	beq.n	8010a32 <__swsetup_r+0x66>
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	f7ff fb25 	bl	801007c <_free_r>
 8010a32:	2300      	movs	r3, #0
 8010a34:	6363      	str	r3, [r4, #52]	; 0x34
 8010a36:	89a3      	ldrh	r3, [r4, #12]
 8010a38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a3c:	81a3      	strh	r3, [r4, #12]
 8010a3e:	2300      	movs	r3, #0
 8010a40:	6063      	str	r3, [r4, #4]
 8010a42:	6923      	ldr	r3, [r4, #16]
 8010a44:	6023      	str	r3, [r4, #0]
 8010a46:	89a3      	ldrh	r3, [r4, #12]
 8010a48:	f043 0308 	orr.w	r3, r3, #8
 8010a4c:	81a3      	strh	r3, [r4, #12]
 8010a4e:	6923      	ldr	r3, [r4, #16]
 8010a50:	b94b      	cbnz	r3, 8010a66 <__swsetup_r+0x9a>
 8010a52:	89a3      	ldrh	r3, [r4, #12]
 8010a54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a5c:	d003      	beq.n	8010a66 <__swsetup_r+0x9a>
 8010a5e:	4621      	mov	r1, r4
 8010a60:	4630      	mov	r0, r6
 8010a62:	f000 fa09 	bl	8010e78 <__smakebuf_r>
 8010a66:	89a0      	ldrh	r0, [r4, #12]
 8010a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a6c:	f010 0301 	ands.w	r3, r0, #1
 8010a70:	d00a      	beq.n	8010a88 <__swsetup_r+0xbc>
 8010a72:	2300      	movs	r3, #0
 8010a74:	60a3      	str	r3, [r4, #8]
 8010a76:	6963      	ldr	r3, [r4, #20]
 8010a78:	425b      	negs	r3, r3
 8010a7a:	61a3      	str	r3, [r4, #24]
 8010a7c:	6923      	ldr	r3, [r4, #16]
 8010a7e:	b943      	cbnz	r3, 8010a92 <__swsetup_r+0xc6>
 8010a80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a84:	d1ba      	bne.n	80109fc <__swsetup_r+0x30>
 8010a86:	bd70      	pop	{r4, r5, r6, pc}
 8010a88:	0781      	lsls	r1, r0, #30
 8010a8a:	bf58      	it	pl
 8010a8c:	6963      	ldrpl	r3, [r4, #20]
 8010a8e:	60a3      	str	r3, [r4, #8]
 8010a90:	e7f4      	b.n	8010a7c <__swsetup_r+0xb0>
 8010a92:	2000      	movs	r0, #0
 8010a94:	e7f7      	b.n	8010a86 <__swsetup_r+0xba>
 8010a96:	bf00      	nop
 8010a98:	20000190 	.word	0x20000190
 8010a9c:	08011694 	.word	0x08011694
 8010aa0:	080116b4 	.word	0x080116b4
 8010aa4:	08011674 	.word	0x08011674

08010aa8 <abort>:
 8010aa8:	b508      	push	{r3, lr}
 8010aaa:	2006      	movs	r0, #6
 8010aac:	f000 fa54 	bl	8010f58 <raise>
 8010ab0:	2001      	movs	r0, #1
 8010ab2:	f7f3 f935 	bl	8003d20 <_exit>
	...

08010ab8 <__sflush_r>:
 8010ab8:	898a      	ldrh	r2, [r1, #12]
 8010aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010abe:	4605      	mov	r5, r0
 8010ac0:	0710      	lsls	r0, r2, #28
 8010ac2:	460c      	mov	r4, r1
 8010ac4:	d458      	bmi.n	8010b78 <__sflush_r+0xc0>
 8010ac6:	684b      	ldr	r3, [r1, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	dc05      	bgt.n	8010ad8 <__sflush_r+0x20>
 8010acc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	dc02      	bgt.n	8010ad8 <__sflush_r+0x20>
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ada:	2e00      	cmp	r6, #0
 8010adc:	d0f9      	beq.n	8010ad2 <__sflush_r+0x1a>
 8010ade:	2300      	movs	r3, #0
 8010ae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ae4:	682f      	ldr	r7, [r5, #0]
 8010ae6:	602b      	str	r3, [r5, #0]
 8010ae8:	d032      	beq.n	8010b50 <__sflush_r+0x98>
 8010aea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010aec:	89a3      	ldrh	r3, [r4, #12]
 8010aee:	075a      	lsls	r2, r3, #29
 8010af0:	d505      	bpl.n	8010afe <__sflush_r+0x46>
 8010af2:	6863      	ldr	r3, [r4, #4]
 8010af4:	1ac0      	subs	r0, r0, r3
 8010af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010af8:	b10b      	cbz	r3, 8010afe <__sflush_r+0x46>
 8010afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010afc:	1ac0      	subs	r0, r0, r3
 8010afe:	2300      	movs	r3, #0
 8010b00:	4602      	mov	r2, r0
 8010b02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b04:	6a21      	ldr	r1, [r4, #32]
 8010b06:	4628      	mov	r0, r5
 8010b08:	47b0      	blx	r6
 8010b0a:	1c43      	adds	r3, r0, #1
 8010b0c:	89a3      	ldrh	r3, [r4, #12]
 8010b0e:	d106      	bne.n	8010b1e <__sflush_r+0x66>
 8010b10:	6829      	ldr	r1, [r5, #0]
 8010b12:	291d      	cmp	r1, #29
 8010b14:	d82c      	bhi.n	8010b70 <__sflush_r+0xb8>
 8010b16:	4a2a      	ldr	r2, [pc, #168]	; (8010bc0 <__sflush_r+0x108>)
 8010b18:	40ca      	lsrs	r2, r1
 8010b1a:	07d6      	lsls	r6, r2, #31
 8010b1c:	d528      	bpl.n	8010b70 <__sflush_r+0xb8>
 8010b1e:	2200      	movs	r2, #0
 8010b20:	6062      	str	r2, [r4, #4]
 8010b22:	04d9      	lsls	r1, r3, #19
 8010b24:	6922      	ldr	r2, [r4, #16]
 8010b26:	6022      	str	r2, [r4, #0]
 8010b28:	d504      	bpl.n	8010b34 <__sflush_r+0x7c>
 8010b2a:	1c42      	adds	r2, r0, #1
 8010b2c:	d101      	bne.n	8010b32 <__sflush_r+0x7a>
 8010b2e:	682b      	ldr	r3, [r5, #0]
 8010b30:	b903      	cbnz	r3, 8010b34 <__sflush_r+0x7c>
 8010b32:	6560      	str	r0, [r4, #84]	; 0x54
 8010b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b36:	602f      	str	r7, [r5, #0]
 8010b38:	2900      	cmp	r1, #0
 8010b3a:	d0ca      	beq.n	8010ad2 <__sflush_r+0x1a>
 8010b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b40:	4299      	cmp	r1, r3
 8010b42:	d002      	beq.n	8010b4a <__sflush_r+0x92>
 8010b44:	4628      	mov	r0, r5
 8010b46:	f7ff fa99 	bl	801007c <_free_r>
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8010b4e:	e7c1      	b.n	8010ad4 <__sflush_r+0x1c>
 8010b50:	6a21      	ldr	r1, [r4, #32]
 8010b52:	2301      	movs	r3, #1
 8010b54:	4628      	mov	r0, r5
 8010b56:	47b0      	blx	r6
 8010b58:	1c41      	adds	r1, r0, #1
 8010b5a:	d1c7      	bne.n	8010aec <__sflush_r+0x34>
 8010b5c:	682b      	ldr	r3, [r5, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d0c4      	beq.n	8010aec <__sflush_r+0x34>
 8010b62:	2b1d      	cmp	r3, #29
 8010b64:	d001      	beq.n	8010b6a <__sflush_r+0xb2>
 8010b66:	2b16      	cmp	r3, #22
 8010b68:	d101      	bne.n	8010b6e <__sflush_r+0xb6>
 8010b6a:	602f      	str	r7, [r5, #0]
 8010b6c:	e7b1      	b.n	8010ad2 <__sflush_r+0x1a>
 8010b6e:	89a3      	ldrh	r3, [r4, #12]
 8010b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b74:	81a3      	strh	r3, [r4, #12]
 8010b76:	e7ad      	b.n	8010ad4 <__sflush_r+0x1c>
 8010b78:	690f      	ldr	r7, [r1, #16]
 8010b7a:	2f00      	cmp	r7, #0
 8010b7c:	d0a9      	beq.n	8010ad2 <__sflush_r+0x1a>
 8010b7e:	0793      	lsls	r3, r2, #30
 8010b80:	680e      	ldr	r6, [r1, #0]
 8010b82:	bf08      	it	eq
 8010b84:	694b      	ldreq	r3, [r1, #20]
 8010b86:	600f      	str	r7, [r1, #0]
 8010b88:	bf18      	it	ne
 8010b8a:	2300      	movne	r3, #0
 8010b8c:	eba6 0807 	sub.w	r8, r6, r7
 8010b90:	608b      	str	r3, [r1, #8]
 8010b92:	f1b8 0f00 	cmp.w	r8, #0
 8010b96:	dd9c      	ble.n	8010ad2 <__sflush_r+0x1a>
 8010b98:	6a21      	ldr	r1, [r4, #32]
 8010b9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b9c:	4643      	mov	r3, r8
 8010b9e:	463a      	mov	r2, r7
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	47b0      	blx	r6
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	dc06      	bgt.n	8010bb6 <__sflush_r+0xfe>
 8010ba8:	89a3      	ldrh	r3, [r4, #12]
 8010baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bae:	81a3      	strh	r3, [r4, #12]
 8010bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8010bb4:	e78e      	b.n	8010ad4 <__sflush_r+0x1c>
 8010bb6:	4407      	add	r7, r0
 8010bb8:	eba8 0800 	sub.w	r8, r8, r0
 8010bbc:	e7e9      	b.n	8010b92 <__sflush_r+0xda>
 8010bbe:	bf00      	nop
 8010bc0:	20400001 	.word	0x20400001

08010bc4 <_fflush_r>:
 8010bc4:	b538      	push	{r3, r4, r5, lr}
 8010bc6:	690b      	ldr	r3, [r1, #16]
 8010bc8:	4605      	mov	r5, r0
 8010bca:	460c      	mov	r4, r1
 8010bcc:	b913      	cbnz	r3, 8010bd4 <_fflush_r+0x10>
 8010bce:	2500      	movs	r5, #0
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	bd38      	pop	{r3, r4, r5, pc}
 8010bd4:	b118      	cbz	r0, 8010bde <_fflush_r+0x1a>
 8010bd6:	6983      	ldr	r3, [r0, #24]
 8010bd8:	b90b      	cbnz	r3, 8010bde <_fflush_r+0x1a>
 8010bda:	f000 f887 	bl	8010cec <__sinit>
 8010bde:	4b14      	ldr	r3, [pc, #80]	; (8010c30 <_fflush_r+0x6c>)
 8010be0:	429c      	cmp	r4, r3
 8010be2:	d11b      	bne.n	8010c1c <_fflush_r+0x58>
 8010be4:	686c      	ldr	r4, [r5, #4]
 8010be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d0ef      	beq.n	8010bce <_fflush_r+0xa>
 8010bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010bf0:	07d0      	lsls	r0, r2, #31
 8010bf2:	d404      	bmi.n	8010bfe <_fflush_r+0x3a>
 8010bf4:	0599      	lsls	r1, r3, #22
 8010bf6:	d402      	bmi.n	8010bfe <_fflush_r+0x3a>
 8010bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bfa:	f000 f915 	bl	8010e28 <__retarget_lock_acquire_recursive>
 8010bfe:	4628      	mov	r0, r5
 8010c00:	4621      	mov	r1, r4
 8010c02:	f7ff ff59 	bl	8010ab8 <__sflush_r>
 8010c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c08:	07da      	lsls	r2, r3, #31
 8010c0a:	4605      	mov	r5, r0
 8010c0c:	d4e0      	bmi.n	8010bd0 <_fflush_r+0xc>
 8010c0e:	89a3      	ldrh	r3, [r4, #12]
 8010c10:	059b      	lsls	r3, r3, #22
 8010c12:	d4dd      	bmi.n	8010bd0 <_fflush_r+0xc>
 8010c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c16:	f000 f908 	bl	8010e2a <__retarget_lock_release_recursive>
 8010c1a:	e7d9      	b.n	8010bd0 <_fflush_r+0xc>
 8010c1c:	4b05      	ldr	r3, [pc, #20]	; (8010c34 <_fflush_r+0x70>)
 8010c1e:	429c      	cmp	r4, r3
 8010c20:	d101      	bne.n	8010c26 <_fflush_r+0x62>
 8010c22:	68ac      	ldr	r4, [r5, #8]
 8010c24:	e7df      	b.n	8010be6 <_fflush_r+0x22>
 8010c26:	4b04      	ldr	r3, [pc, #16]	; (8010c38 <_fflush_r+0x74>)
 8010c28:	429c      	cmp	r4, r3
 8010c2a:	bf08      	it	eq
 8010c2c:	68ec      	ldreq	r4, [r5, #12]
 8010c2e:	e7da      	b.n	8010be6 <_fflush_r+0x22>
 8010c30:	08011694 	.word	0x08011694
 8010c34:	080116b4 	.word	0x080116b4
 8010c38:	08011674 	.word	0x08011674

08010c3c <std>:
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	b510      	push	{r4, lr}
 8010c40:	4604      	mov	r4, r0
 8010c42:	e9c0 3300 	strd	r3, r3, [r0]
 8010c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c4a:	6083      	str	r3, [r0, #8]
 8010c4c:	8181      	strh	r1, [r0, #12]
 8010c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8010c50:	81c2      	strh	r2, [r0, #14]
 8010c52:	6183      	str	r3, [r0, #24]
 8010c54:	4619      	mov	r1, r3
 8010c56:	2208      	movs	r2, #8
 8010c58:	305c      	adds	r0, #92	; 0x5c
 8010c5a:	f7fb fdbf 	bl	800c7dc <memset>
 8010c5e:	4b05      	ldr	r3, [pc, #20]	; (8010c74 <std+0x38>)
 8010c60:	6263      	str	r3, [r4, #36]	; 0x24
 8010c62:	4b05      	ldr	r3, [pc, #20]	; (8010c78 <std+0x3c>)
 8010c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c66:	4b05      	ldr	r3, [pc, #20]	; (8010c7c <std+0x40>)
 8010c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c6a:	4b05      	ldr	r3, [pc, #20]	; (8010c80 <std+0x44>)
 8010c6c:	6224      	str	r4, [r4, #32]
 8010c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8010c70:	bd10      	pop	{r4, pc}
 8010c72:	bf00      	nop
 8010c74:	08010f91 	.word	0x08010f91
 8010c78:	08010fb3 	.word	0x08010fb3
 8010c7c:	08010feb 	.word	0x08010feb
 8010c80:	0801100f 	.word	0x0801100f

08010c84 <_cleanup_r>:
 8010c84:	4901      	ldr	r1, [pc, #4]	; (8010c8c <_cleanup_r+0x8>)
 8010c86:	f000 b8af 	b.w	8010de8 <_fwalk_reent>
 8010c8a:	bf00      	nop
 8010c8c:	08010bc5 	.word	0x08010bc5

08010c90 <__sfmoreglue>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	2268      	movs	r2, #104	; 0x68
 8010c94:	1e4d      	subs	r5, r1, #1
 8010c96:	4355      	muls	r5, r2
 8010c98:	460e      	mov	r6, r1
 8010c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010c9e:	f7ff fa59 	bl	8010154 <_malloc_r>
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	b140      	cbz	r0, 8010cb8 <__sfmoreglue+0x28>
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8010cac:	300c      	adds	r0, #12
 8010cae:	60a0      	str	r0, [r4, #8]
 8010cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010cb4:	f7fb fd92 	bl	800c7dc <memset>
 8010cb8:	4620      	mov	r0, r4
 8010cba:	bd70      	pop	{r4, r5, r6, pc}

08010cbc <__sfp_lock_acquire>:
 8010cbc:	4801      	ldr	r0, [pc, #4]	; (8010cc4 <__sfp_lock_acquire+0x8>)
 8010cbe:	f000 b8b3 	b.w	8010e28 <__retarget_lock_acquire_recursive>
 8010cc2:	bf00      	nop
 8010cc4:	20004541 	.word	0x20004541

08010cc8 <__sfp_lock_release>:
 8010cc8:	4801      	ldr	r0, [pc, #4]	; (8010cd0 <__sfp_lock_release+0x8>)
 8010cca:	f000 b8ae 	b.w	8010e2a <__retarget_lock_release_recursive>
 8010cce:	bf00      	nop
 8010cd0:	20004541 	.word	0x20004541

08010cd4 <__sinit_lock_acquire>:
 8010cd4:	4801      	ldr	r0, [pc, #4]	; (8010cdc <__sinit_lock_acquire+0x8>)
 8010cd6:	f000 b8a7 	b.w	8010e28 <__retarget_lock_acquire_recursive>
 8010cda:	bf00      	nop
 8010cdc:	20004542 	.word	0x20004542

08010ce0 <__sinit_lock_release>:
 8010ce0:	4801      	ldr	r0, [pc, #4]	; (8010ce8 <__sinit_lock_release+0x8>)
 8010ce2:	f000 b8a2 	b.w	8010e2a <__retarget_lock_release_recursive>
 8010ce6:	bf00      	nop
 8010ce8:	20004542 	.word	0x20004542

08010cec <__sinit>:
 8010cec:	b510      	push	{r4, lr}
 8010cee:	4604      	mov	r4, r0
 8010cf0:	f7ff fff0 	bl	8010cd4 <__sinit_lock_acquire>
 8010cf4:	69a3      	ldr	r3, [r4, #24]
 8010cf6:	b11b      	cbz	r3, 8010d00 <__sinit+0x14>
 8010cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cfc:	f7ff bff0 	b.w	8010ce0 <__sinit_lock_release>
 8010d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010d04:	6523      	str	r3, [r4, #80]	; 0x50
 8010d06:	4b13      	ldr	r3, [pc, #76]	; (8010d54 <__sinit+0x68>)
 8010d08:	4a13      	ldr	r2, [pc, #76]	; (8010d58 <__sinit+0x6c>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010d0e:	42a3      	cmp	r3, r4
 8010d10:	bf04      	itt	eq
 8010d12:	2301      	moveq	r3, #1
 8010d14:	61a3      	streq	r3, [r4, #24]
 8010d16:	4620      	mov	r0, r4
 8010d18:	f000 f820 	bl	8010d5c <__sfp>
 8010d1c:	6060      	str	r0, [r4, #4]
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f000 f81c 	bl	8010d5c <__sfp>
 8010d24:	60a0      	str	r0, [r4, #8]
 8010d26:	4620      	mov	r0, r4
 8010d28:	f000 f818 	bl	8010d5c <__sfp>
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	60e0      	str	r0, [r4, #12]
 8010d30:	2104      	movs	r1, #4
 8010d32:	6860      	ldr	r0, [r4, #4]
 8010d34:	f7ff ff82 	bl	8010c3c <std>
 8010d38:	68a0      	ldr	r0, [r4, #8]
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	2109      	movs	r1, #9
 8010d3e:	f7ff ff7d 	bl	8010c3c <std>
 8010d42:	68e0      	ldr	r0, [r4, #12]
 8010d44:	2202      	movs	r2, #2
 8010d46:	2112      	movs	r1, #18
 8010d48:	f7ff ff78 	bl	8010c3c <std>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	61a3      	str	r3, [r4, #24]
 8010d50:	e7d2      	b.n	8010cf8 <__sinit+0xc>
 8010d52:	bf00      	nop
 8010d54:	0801122c 	.word	0x0801122c
 8010d58:	08010c85 	.word	0x08010c85

08010d5c <__sfp>:
 8010d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d5e:	4607      	mov	r7, r0
 8010d60:	f7ff ffac 	bl	8010cbc <__sfp_lock_acquire>
 8010d64:	4b1e      	ldr	r3, [pc, #120]	; (8010de0 <__sfp+0x84>)
 8010d66:	681e      	ldr	r6, [r3, #0]
 8010d68:	69b3      	ldr	r3, [r6, #24]
 8010d6a:	b913      	cbnz	r3, 8010d72 <__sfp+0x16>
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f7ff ffbd 	bl	8010cec <__sinit>
 8010d72:	3648      	adds	r6, #72	; 0x48
 8010d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	d503      	bpl.n	8010d84 <__sfp+0x28>
 8010d7c:	6833      	ldr	r3, [r6, #0]
 8010d7e:	b30b      	cbz	r3, 8010dc4 <__sfp+0x68>
 8010d80:	6836      	ldr	r6, [r6, #0]
 8010d82:	e7f7      	b.n	8010d74 <__sfp+0x18>
 8010d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010d88:	b9d5      	cbnz	r5, 8010dc0 <__sfp+0x64>
 8010d8a:	4b16      	ldr	r3, [pc, #88]	; (8010de4 <__sfp+0x88>)
 8010d8c:	60e3      	str	r3, [r4, #12]
 8010d8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010d92:	6665      	str	r5, [r4, #100]	; 0x64
 8010d94:	f000 f847 	bl	8010e26 <__retarget_lock_init_recursive>
 8010d98:	f7ff ff96 	bl	8010cc8 <__sfp_lock_release>
 8010d9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010da0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010da4:	6025      	str	r5, [r4, #0]
 8010da6:	61a5      	str	r5, [r4, #24]
 8010da8:	2208      	movs	r2, #8
 8010daa:	4629      	mov	r1, r5
 8010dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010db0:	f7fb fd14 	bl	800c7dc <memset>
 8010db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dc0:	3468      	adds	r4, #104	; 0x68
 8010dc2:	e7d9      	b.n	8010d78 <__sfp+0x1c>
 8010dc4:	2104      	movs	r1, #4
 8010dc6:	4638      	mov	r0, r7
 8010dc8:	f7ff ff62 	bl	8010c90 <__sfmoreglue>
 8010dcc:	4604      	mov	r4, r0
 8010dce:	6030      	str	r0, [r6, #0]
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d1d5      	bne.n	8010d80 <__sfp+0x24>
 8010dd4:	f7ff ff78 	bl	8010cc8 <__sfp_lock_release>
 8010dd8:	230c      	movs	r3, #12
 8010dda:	603b      	str	r3, [r7, #0]
 8010ddc:	e7ee      	b.n	8010dbc <__sfp+0x60>
 8010dde:	bf00      	nop
 8010de0:	0801122c 	.word	0x0801122c
 8010de4:	ffff0001 	.word	0xffff0001

08010de8 <_fwalk_reent>:
 8010de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dec:	4606      	mov	r6, r0
 8010dee:	4688      	mov	r8, r1
 8010df0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010df4:	2700      	movs	r7, #0
 8010df6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010dfa:	f1b9 0901 	subs.w	r9, r9, #1
 8010dfe:	d505      	bpl.n	8010e0c <_fwalk_reent+0x24>
 8010e00:	6824      	ldr	r4, [r4, #0]
 8010e02:	2c00      	cmp	r4, #0
 8010e04:	d1f7      	bne.n	8010df6 <_fwalk_reent+0xe>
 8010e06:	4638      	mov	r0, r7
 8010e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e0c:	89ab      	ldrh	r3, [r5, #12]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d907      	bls.n	8010e22 <_fwalk_reent+0x3a>
 8010e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e16:	3301      	adds	r3, #1
 8010e18:	d003      	beq.n	8010e22 <_fwalk_reent+0x3a>
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	47c0      	blx	r8
 8010e20:	4307      	orrs	r7, r0
 8010e22:	3568      	adds	r5, #104	; 0x68
 8010e24:	e7e9      	b.n	8010dfa <_fwalk_reent+0x12>

08010e26 <__retarget_lock_init_recursive>:
 8010e26:	4770      	bx	lr

08010e28 <__retarget_lock_acquire_recursive>:
 8010e28:	4770      	bx	lr

08010e2a <__retarget_lock_release_recursive>:
 8010e2a:	4770      	bx	lr

08010e2c <__swhatbuf_r>:
 8010e2c:	b570      	push	{r4, r5, r6, lr}
 8010e2e:	460e      	mov	r6, r1
 8010e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e34:	2900      	cmp	r1, #0
 8010e36:	b096      	sub	sp, #88	; 0x58
 8010e38:	4614      	mov	r4, r2
 8010e3a:	461d      	mov	r5, r3
 8010e3c:	da08      	bge.n	8010e50 <__swhatbuf_r+0x24>
 8010e3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010e42:	2200      	movs	r2, #0
 8010e44:	602a      	str	r2, [r5, #0]
 8010e46:	061a      	lsls	r2, r3, #24
 8010e48:	d410      	bmi.n	8010e6c <__swhatbuf_r+0x40>
 8010e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e4e:	e00e      	b.n	8010e6e <__swhatbuf_r+0x42>
 8010e50:	466a      	mov	r2, sp
 8010e52:	f000 f903 	bl	801105c <_fstat_r>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	dbf1      	blt.n	8010e3e <__swhatbuf_r+0x12>
 8010e5a:	9a01      	ldr	r2, [sp, #4]
 8010e5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e64:	425a      	negs	r2, r3
 8010e66:	415a      	adcs	r2, r3
 8010e68:	602a      	str	r2, [r5, #0]
 8010e6a:	e7ee      	b.n	8010e4a <__swhatbuf_r+0x1e>
 8010e6c:	2340      	movs	r3, #64	; 0x40
 8010e6e:	2000      	movs	r0, #0
 8010e70:	6023      	str	r3, [r4, #0]
 8010e72:	b016      	add	sp, #88	; 0x58
 8010e74:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e78 <__smakebuf_r>:
 8010e78:	898b      	ldrh	r3, [r1, #12]
 8010e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e7c:	079d      	lsls	r5, r3, #30
 8010e7e:	4606      	mov	r6, r0
 8010e80:	460c      	mov	r4, r1
 8010e82:	d507      	bpl.n	8010e94 <__smakebuf_r+0x1c>
 8010e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e88:	6023      	str	r3, [r4, #0]
 8010e8a:	6123      	str	r3, [r4, #16]
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	6163      	str	r3, [r4, #20]
 8010e90:	b002      	add	sp, #8
 8010e92:	bd70      	pop	{r4, r5, r6, pc}
 8010e94:	ab01      	add	r3, sp, #4
 8010e96:	466a      	mov	r2, sp
 8010e98:	f7ff ffc8 	bl	8010e2c <__swhatbuf_r>
 8010e9c:	9900      	ldr	r1, [sp, #0]
 8010e9e:	4605      	mov	r5, r0
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	f7ff f957 	bl	8010154 <_malloc_r>
 8010ea6:	b948      	cbnz	r0, 8010ebc <__smakebuf_r+0x44>
 8010ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eac:	059a      	lsls	r2, r3, #22
 8010eae:	d4ef      	bmi.n	8010e90 <__smakebuf_r+0x18>
 8010eb0:	f023 0303 	bic.w	r3, r3, #3
 8010eb4:	f043 0302 	orr.w	r3, r3, #2
 8010eb8:	81a3      	strh	r3, [r4, #12]
 8010eba:	e7e3      	b.n	8010e84 <__smakebuf_r+0xc>
 8010ebc:	4b0d      	ldr	r3, [pc, #52]	; (8010ef4 <__smakebuf_r+0x7c>)
 8010ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ec0:	89a3      	ldrh	r3, [r4, #12]
 8010ec2:	6020      	str	r0, [r4, #0]
 8010ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ec8:	81a3      	strh	r3, [r4, #12]
 8010eca:	9b00      	ldr	r3, [sp, #0]
 8010ecc:	6163      	str	r3, [r4, #20]
 8010ece:	9b01      	ldr	r3, [sp, #4]
 8010ed0:	6120      	str	r0, [r4, #16]
 8010ed2:	b15b      	cbz	r3, 8010eec <__smakebuf_r+0x74>
 8010ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ed8:	4630      	mov	r0, r6
 8010eda:	f000 f8d1 	bl	8011080 <_isatty_r>
 8010ede:	b128      	cbz	r0, 8010eec <__smakebuf_r+0x74>
 8010ee0:	89a3      	ldrh	r3, [r4, #12]
 8010ee2:	f023 0303 	bic.w	r3, r3, #3
 8010ee6:	f043 0301 	orr.w	r3, r3, #1
 8010eea:	81a3      	strh	r3, [r4, #12]
 8010eec:	89a0      	ldrh	r0, [r4, #12]
 8010eee:	4305      	orrs	r5, r0
 8010ef0:	81a5      	strh	r5, [r4, #12]
 8010ef2:	e7cd      	b.n	8010e90 <__smakebuf_r+0x18>
 8010ef4:	08010c85 	.word	0x08010c85

08010ef8 <_malloc_usable_size_r>:
 8010ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010efc:	1f18      	subs	r0, r3, #4
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	bfbc      	itt	lt
 8010f02:	580b      	ldrlt	r3, [r1, r0]
 8010f04:	18c0      	addlt	r0, r0, r3
 8010f06:	4770      	bx	lr

08010f08 <_raise_r>:
 8010f08:	291f      	cmp	r1, #31
 8010f0a:	b538      	push	{r3, r4, r5, lr}
 8010f0c:	4604      	mov	r4, r0
 8010f0e:	460d      	mov	r5, r1
 8010f10:	d904      	bls.n	8010f1c <_raise_r+0x14>
 8010f12:	2316      	movs	r3, #22
 8010f14:	6003      	str	r3, [r0, #0]
 8010f16:	f04f 30ff 	mov.w	r0, #4294967295
 8010f1a:	bd38      	pop	{r3, r4, r5, pc}
 8010f1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f1e:	b112      	cbz	r2, 8010f26 <_raise_r+0x1e>
 8010f20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f24:	b94b      	cbnz	r3, 8010f3a <_raise_r+0x32>
 8010f26:	4620      	mov	r0, r4
 8010f28:	f000 f830 	bl	8010f8c <_getpid_r>
 8010f2c:	462a      	mov	r2, r5
 8010f2e:	4601      	mov	r1, r0
 8010f30:	4620      	mov	r0, r4
 8010f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f36:	f000 b817 	b.w	8010f68 <_kill_r>
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d00a      	beq.n	8010f54 <_raise_r+0x4c>
 8010f3e:	1c59      	adds	r1, r3, #1
 8010f40:	d103      	bne.n	8010f4a <_raise_r+0x42>
 8010f42:	2316      	movs	r3, #22
 8010f44:	6003      	str	r3, [r0, #0]
 8010f46:	2001      	movs	r0, #1
 8010f48:	e7e7      	b.n	8010f1a <_raise_r+0x12>
 8010f4a:	2400      	movs	r4, #0
 8010f4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f50:	4628      	mov	r0, r5
 8010f52:	4798      	blx	r3
 8010f54:	2000      	movs	r0, #0
 8010f56:	e7e0      	b.n	8010f1a <_raise_r+0x12>

08010f58 <raise>:
 8010f58:	4b02      	ldr	r3, [pc, #8]	; (8010f64 <raise+0xc>)
 8010f5a:	4601      	mov	r1, r0
 8010f5c:	6818      	ldr	r0, [r3, #0]
 8010f5e:	f7ff bfd3 	b.w	8010f08 <_raise_r>
 8010f62:	bf00      	nop
 8010f64:	20000190 	.word	0x20000190

08010f68 <_kill_r>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	4d07      	ldr	r5, [pc, #28]	; (8010f88 <_kill_r+0x20>)
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	4604      	mov	r4, r0
 8010f70:	4608      	mov	r0, r1
 8010f72:	4611      	mov	r1, r2
 8010f74:	602b      	str	r3, [r5, #0]
 8010f76:	f7f2 fec3 	bl	8003d00 <_kill>
 8010f7a:	1c43      	adds	r3, r0, #1
 8010f7c:	d102      	bne.n	8010f84 <_kill_r+0x1c>
 8010f7e:	682b      	ldr	r3, [r5, #0]
 8010f80:	b103      	cbz	r3, 8010f84 <_kill_r+0x1c>
 8010f82:	6023      	str	r3, [r4, #0]
 8010f84:	bd38      	pop	{r3, r4, r5, pc}
 8010f86:	bf00      	nop
 8010f88:	2000453c 	.word	0x2000453c

08010f8c <_getpid_r>:
 8010f8c:	f7f2 beb0 	b.w	8003cf0 <_getpid>

08010f90 <__sread>:
 8010f90:	b510      	push	{r4, lr}
 8010f92:	460c      	mov	r4, r1
 8010f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f98:	f000 f894 	bl	80110c4 <_read_r>
 8010f9c:	2800      	cmp	r0, #0
 8010f9e:	bfab      	itete	ge
 8010fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8010fa4:	181b      	addge	r3, r3, r0
 8010fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010faa:	bfac      	ite	ge
 8010fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8010fae:	81a3      	strhlt	r3, [r4, #12]
 8010fb0:	bd10      	pop	{r4, pc}

08010fb2 <__swrite>:
 8010fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb6:	461f      	mov	r7, r3
 8010fb8:	898b      	ldrh	r3, [r1, #12]
 8010fba:	05db      	lsls	r3, r3, #23
 8010fbc:	4605      	mov	r5, r0
 8010fbe:	460c      	mov	r4, r1
 8010fc0:	4616      	mov	r6, r2
 8010fc2:	d505      	bpl.n	8010fd0 <__swrite+0x1e>
 8010fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc8:	2302      	movs	r3, #2
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f000 f868 	bl	80110a0 <_lseek_r>
 8010fd0:	89a3      	ldrh	r3, [r4, #12]
 8010fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010fda:	81a3      	strh	r3, [r4, #12]
 8010fdc:	4632      	mov	r2, r6
 8010fde:	463b      	mov	r3, r7
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe6:	f000 b817 	b.w	8011018 <_write_r>

08010fea <__sseek>:
 8010fea:	b510      	push	{r4, lr}
 8010fec:	460c      	mov	r4, r1
 8010fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ff2:	f000 f855 	bl	80110a0 <_lseek_r>
 8010ff6:	1c43      	adds	r3, r0, #1
 8010ff8:	89a3      	ldrh	r3, [r4, #12]
 8010ffa:	bf15      	itete	ne
 8010ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011006:	81a3      	strheq	r3, [r4, #12]
 8011008:	bf18      	it	ne
 801100a:	81a3      	strhne	r3, [r4, #12]
 801100c:	bd10      	pop	{r4, pc}

0801100e <__sclose>:
 801100e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011012:	f000 b813 	b.w	801103c <_close_r>
	...

08011018 <_write_r>:
 8011018:	b538      	push	{r3, r4, r5, lr}
 801101a:	4d07      	ldr	r5, [pc, #28]	; (8011038 <_write_r+0x20>)
 801101c:	4604      	mov	r4, r0
 801101e:	4608      	mov	r0, r1
 8011020:	4611      	mov	r1, r2
 8011022:	2200      	movs	r2, #0
 8011024:	602a      	str	r2, [r5, #0]
 8011026:	461a      	mov	r2, r3
 8011028:	f7f2 fea1 	bl	8003d6e <_write>
 801102c:	1c43      	adds	r3, r0, #1
 801102e:	d102      	bne.n	8011036 <_write_r+0x1e>
 8011030:	682b      	ldr	r3, [r5, #0]
 8011032:	b103      	cbz	r3, 8011036 <_write_r+0x1e>
 8011034:	6023      	str	r3, [r4, #0]
 8011036:	bd38      	pop	{r3, r4, r5, pc}
 8011038:	2000453c 	.word	0x2000453c

0801103c <_close_r>:
 801103c:	b538      	push	{r3, r4, r5, lr}
 801103e:	4d06      	ldr	r5, [pc, #24]	; (8011058 <_close_r+0x1c>)
 8011040:	2300      	movs	r3, #0
 8011042:	4604      	mov	r4, r0
 8011044:	4608      	mov	r0, r1
 8011046:	602b      	str	r3, [r5, #0]
 8011048:	f7f2 fead 	bl	8003da6 <_close>
 801104c:	1c43      	adds	r3, r0, #1
 801104e:	d102      	bne.n	8011056 <_close_r+0x1a>
 8011050:	682b      	ldr	r3, [r5, #0]
 8011052:	b103      	cbz	r3, 8011056 <_close_r+0x1a>
 8011054:	6023      	str	r3, [r4, #0]
 8011056:	bd38      	pop	{r3, r4, r5, pc}
 8011058:	2000453c 	.word	0x2000453c

0801105c <_fstat_r>:
 801105c:	b538      	push	{r3, r4, r5, lr}
 801105e:	4d07      	ldr	r5, [pc, #28]	; (801107c <_fstat_r+0x20>)
 8011060:	2300      	movs	r3, #0
 8011062:	4604      	mov	r4, r0
 8011064:	4608      	mov	r0, r1
 8011066:	4611      	mov	r1, r2
 8011068:	602b      	str	r3, [r5, #0]
 801106a:	f7f2 fea8 	bl	8003dbe <_fstat>
 801106e:	1c43      	adds	r3, r0, #1
 8011070:	d102      	bne.n	8011078 <_fstat_r+0x1c>
 8011072:	682b      	ldr	r3, [r5, #0]
 8011074:	b103      	cbz	r3, 8011078 <_fstat_r+0x1c>
 8011076:	6023      	str	r3, [r4, #0]
 8011078:	bd38      	pop	{r3, r4, r5, pc}
 801107a:	bf00      	nop
 801107c:	2000453c 	.word	0x2000453c

08011080 <_isatty_r>:
 8011080:	b538      	push	{r3, r4, r5, lr}
 8011082:	4d06      	ldr	r5, [pc, #24]	; (801109c <_isatty_r+0x1c>)
 8011084:	2300      	movs	r3, #0
 8011086:	4604      	mov	r4, r0
 8011088:	4608      	mov	r0, r1
 801108a:	602b      	str	r3, [r5, #0]
 801108c:	f7f2 fea7 	bl	8003dde <_isatty>
 8011090:	1c43      	adds	r3, r0, #1
 8011092:	d102      	bne.n	801109a <_isatty_r+0x1a>
 8011094:	682b      	ldr	r3, [r5, #0]
 8011096:	b103      	cbz	r3, 801109a <_isatty_r+0x1a>
 8011098:	6023      	str	r3, [r4, #0]
 801109a:	bd38      	pop	{r3, r4, r5, pc}
 801109c:	2000453c 	.word	0x2000453c

080110a0 <_lseek_r>:
 80110a0:	b538      	push	{r3, r4, r5, lr}
 80110a2:	4d07      	ldr	r5, [pc, #28]	; (80110c0 <_lseek_r+0x20>)
 80110a4:	4604      	mov	r4, r0
 80110a6:	4608      	mov	r0, r1
 80110a8:	4611      	mov	r1, r2
 80110aa:	2200      	movs	r2, #0
 80110ac:	602a      	str	r2, [r5, #0]
 80110ae:	461a      	mov	r2, r3
 80110b0:	f7f2 fea0 	bl	8003df4 <_lseek>
 80110b4:	1c43      	adds	r3, r0, #1
 80110b6:	d102      	bne.n	80110be <_lseek_r+0x1e>
 80110b8:	682b      	ldr	r3, [r5, #0]
 80110ba:	b103      	cbz	r3, 80110be <_lseek_r+0x1e>
 80110bc:	6023      	str	r3, [r4, #0]
 80110be:	bd38      	pop	{r3, r4, r5, pc}
 80110c0:	2000453c 	.word	0x2000453c

080110c4 <_read_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	4d07      	ldr	r5, [pc, #28]	; (80110e4 <_read_r+0x20>)
 80110c8:	4604      	mov	r4, r0
 80110ca:	4608      	mov	r0, r1
 80110cc:	4611      	mov	r1, r2
 80110ce:	2200      	movs	r2, #0
 80110d0:	602a      	str	r2, [r5, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	f7f2 fe2e 	bl	8003d34 <_read>
 80110d8:	1c43      	adds	r3, r0, #1
 80110da:	d102      	bne.n	80110e2 <_read_r+0x1e>
 80110dc:	682b      	ldr	r3, [r5, #0]
 80110de:	b103      	cbz	r3, 80110e2 <_read_r+0x1e>
 80110e0:	6023      	str	r3, [r4, #0]
 80110e2:	bd38      	pop	{r3, r4, r5, pc}
 80110e4:	2000453c 	.word	0x2000453c

080110e8 <_init>:
 80110e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ea:	bf00      	nop
 80110ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ee:	bc08      	pop	{r3}
 80110f0:	469e      	mov	lr, r3
 80110f2:	4770      	bx	lr

080110f4 <_fini>:
 80110f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110f6:	bf00      	nop
 80110f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110fa:	bc08      	pop	{r3}
 80110fc:	469e      	mov	lr, r3
 80110fe:	4770      	bx	lr
