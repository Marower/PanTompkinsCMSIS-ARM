
PanTompkins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e368  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800e4a8  0800e4a8  0001e4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ea44  0800ea44  0001ea44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ea48  0800ea48  0001ea48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000035c  20000004  0800ea4c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a78  20000360  0800eda8  00020360  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001dd8  0800eda8  00021dd8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
  9 .debug_info   000176cc  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b42  00000000  00000000  00037a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018e0  00000000  00000000  0003b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001738  00000000  00000000  0003ce80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00025088  00000000  00000000  0003e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00018441  00000000  00000000  00063640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d8c5e  00000000  00000000  0007ba81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001546df  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007bd0  00000000  00000000  00154730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000360 	.word	0x20000360
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e490 	.word	0x0800e490

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000364 	.word	0x20000364
 800017c:	0800e490 	.word	0x0800e490

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff23 	bl	8000a8c <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc99 	bl	80005a8 <__aeabi_dmul>
 8000c76:	f7ff ff6f 	bl	8000b58 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc1a 	bl	80004b4 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fc90 	bl	80005a8 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fad2 	bl	8000238 <__aeabi_dsub>
 8000c94:	f7ff ff60 	bl	8000b58 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <parseLine>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void parseLine (uint8_t* Buf, uint32_t Len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
	uint8_t b = Buf[0];
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	73fb      	strb	r3, [r7, #15]
	while (CDC_Transmit_FS(Buf, Len)!=USBD_OK)
 8000ce6:	e002      	b.n	8000cee <parseLine+0x18>
	{
		  HAL_Delay(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fbbd 	bl	8001468 <HAL_Delay>
	while (CDC_Transmit_FS(Buf, Len)!=USBD_OK)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f008 fa85 	bl	8009204 <CDC_Transmit_FS>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f3      	bne.n	8000ce8 <parseLine+0x12>
	};
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f000 fb23 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 f843 	bl	8000da0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d1a:	f000 f8ad 	bl	8000e78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1e:	f000 f909 	bl	8000f34 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000d22:	f008 f9a9 	bl	8009078 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8000d26:	f000 f8c5 	bl	8000eb4 <MX_I2C1_Init>
  extern uint32_t byteInBuffer;
  extern uint8_t* bufferPointer;
  while (1)
  {
    /* USER CODE END WHILE */
	  if (byteInBuffer>0)
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <main+0x8c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d02e      	beq.n	8000d90 <main+0x84>
	  {
		  uint32_t index = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
		  uint32_t count = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
		  uint32_t i = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]

		  do
		  {
			  i++;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3301      	adds	r3, #1
 8000d42:	607b      	str	r3, [r7, #4]
			  count++;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
			  if (*(bufferPointer+i)=='\n')
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <main+0x90>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b0a      	cmp	r3, #10
 8000d56:	d113      	bne.n	8000d80 <main+0x74>
			  {
				 count++;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
				 parseLine (bufferPointer +index, count);
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <main+0x90>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ffb4 	bl	8000cd6 <parseLine>
				 index += count;
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
				 i++;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	607b      	str	r3, [r7, #4]
				 count = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
			  }
		  }while (i<byteInBuffer);
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <main+0x8c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3d9      	bcc.n	8000d3e <main+0x32>
		  byteInBuffer = 0;
 8000d8a:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <main+0x8c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(5);
 8000d90:	2005      	movs	r0, #5
 8000d92:	f000 fb69 	bl	8001468 <HAL_Delay>
	  if (byteInBuffer>0)
 8000d96:	e7c8      	b.n	8000d2a <main+0x1e>
 8000d98:	200016ac 	.word	0x200016ac
 8000d9c:	20000120 	.word	0x20000120

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09a      	sub	sp, #104	; 0x68
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	2248      	movs	r2, #72	; 0x48
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f008 fef6 	bl	8009ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <SystemClock_Config+0xd4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dce:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <SystemClock_Config+0xd4>)
 8000dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <SystemClock_Config+0xd4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000de2:	2326      	movs	r3, #38	; 0x26
 8000de4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dfc:	2360      	movs	r3, #96	; 0x60
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e04:	2301      	movs	r3, #1
 8000e06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e14:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e20:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 ffc6 	bl	8003db8 <HAL_RCC_OscConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e32:	f000 f889 	bl	8000f48 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000e36:	236f      	movs	r3, #111	; 0x6f
 8000e38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2103      	movs	r1, #3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fb22 	bl	80044a0 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e62:	f000 f871 	bl	8000f48 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e66:	f004 f8b3 	bl	8004fd0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e6a:	bf00      	nop
 8000e6c:	3768      	adds	r7, #104	; 0x68
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	58000400 	.word	0x58000400

08000e78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	; 0x50
 8000e7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2250      	movs	r2, #80	; 0x50
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f008 fe8b 	bl	8009ba0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000e90:	2300      	movs	r3, #0
 8000e92:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000e94:	2310      	movs	r3, #16
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 ff22 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000ea6:	f000 f84f 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000eaa:	bf00      	nop
 8000eac:	3750      	adds	r7, #80	; 0x50
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000eba:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <MX_I2C1_Init+0x78>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <MX_I2C1_Init+0x7c>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ef0:	f000 fd5e 	bl	80019b0 <HAL_I2C_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efa:	f000 f825 	bl	8000f48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000f02:	f000 fde4 	bl	8001ace <HAL_I2CEx_ConfigAnalogFilter>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f0c:	f000 f81c 	bl	8000f48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000f14:	f000 fe26 	bl	8001b64 <HAL_I2CEx_ConfigDigitalFilter>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 f813 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000037c 	.word	0x2000037c
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	10707dbc 	.word	0x10707dbc

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f7ff feb3 	bl	8000ca4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff feb0 	bl	8000ca4 <LL_AHB2_GRP1_EnableClock>

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>

08000f52 <LL_AHB2_GRP1_EnableClock>:
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4013      	ands	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b09c      	sub	sp, #112	; 0x70
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2250      	movs	r2, #80	; 0x50
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f008 fddb 	bl	8009ba0 <memset>
  if(hi2c->Instance==I2C1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_I2C_MspInit+0x88>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d126      	bne.n	8001042 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ff8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fe6e 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800100e:	f7ff ff9b 	bl	8000f48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2002      	movs	r0, #2
 8001014:	f7ff ff9d 	bl	8000f52 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001018:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102a:	2304      	movs	r3, #4
 800102c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001032:	4619      	mov	r1, r3
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_I2C_MspInit+0x8c>)
 8001036:	f000 fb4b 	bl	80016d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800103e:	f7ff ffa1 	bl	8000f84 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3770      	adds	r7, #112	; 0x70
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40005400 	.word	0x40005400
 8001050:	48000400 	.word	0x48000400

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f9b6 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <USB_LP_IRQHandler+0x10>)
 80010ae:	f000 feb2 	bl	8001e16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200018b0 	.word	0x200018b0

080010bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_kill>:

int _kill(int pid, int sig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010d6:	f008 fd39 	bl	8009b4c <__errno>
 80010da:	4603      	mov	r3, r0
 80010dc:	2216      	movs	r2, #22
 80010de:	601a      	str	r2, [r3, #0]
	return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_exit>:

void _exit (int status)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe7 	bl	80010cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80010fe:	e7fe      	b.n	80010fe <_exit+0x12>

08001100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e00a      	b.n	8001128 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001112:	f3af 8000 	nop.w
 8001116:	4601      	mov	r1, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf0      	blt.n	8001112 <_read+0x12>
	}

return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e009      	b.n	8001160 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf1      	blt.n	800114c <_write+0x12>
	}
	return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_close>:

int _close(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119a:	605a      	str	r2, [r3, #4]
	return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_isatty>:

int _isatty(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
	return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f008 fc9e 	bl	8009b4c <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20030000 	.word	0x20030000
 800123c:	00000400 	.word	0x00000400
 8001240:	200003d0 	.word	0x200003d0
 8001244:	20001dd8 	.word	0x20001dd8

08001248 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <SystemInit+0x98>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <SystemInit+0x98>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800125c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800126c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001270:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001274:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <SystemInit+0x9c>)
 8001282:	4013      	ands	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001292:	f023 0305 	bic.w	r3, r3, #5
 8001296:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b2:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <SystemInit+0xa0>)
 80012b4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <SystemInit+0xa0>)
 80012bc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	faf6fefb 	.word	0xfaf6fefb
 80012e8:	22041000 	.word	0x22041000

080012ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80012ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f0:	3304      	adds	r3, #4

080012f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80012f6:	d3f9      	bcc.n	80012ec <CopyDataInit>
  bx lr
 80012f8:	4770      	bx	lr

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80012fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80012fc:	3004      	adds	r0, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80012fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>
  bx lr
 8001302:	4770      	bx	lr

08001304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001308:	f7ff ff9e 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <LoopForever+0x8>)
 800130e:	490c      	ldr	r1, [pc, #48]	; (8001340 <LoopForever+0xc>)
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <LoopForever+0x10>)
 8001312:	2300      	movs	r3, #0
 8001314:	f7ff ffed 	bl	80012f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <LoopForever+0x14>)
 800131a:	490c      	ldr	r1, [pc, #48]	; (800134c <LoopForever+0x18>)
 800131c:	2300      	movs	r3, #0
 800131e:	f7ff ffee 	bl	80012fe <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <LoopForever+0x1c>)
 8001324:	490b      	ldr	r1, [pc, #44]	; (8001354 <LoopForever+0x20>)
 8001326:	2300      	movs	r3, #0
 8001328:	f7ff ffe9 	bl	80012fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800132c:	f008 fc14 	bl	8009b58 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001330:	f7ff fcec 	bl	8000d0c <main>

08001334 <LoopForever>:

LoopForever:
  b LoopForever
 8001334:	e7fe      	b.n	8001334 <LoopForever>
 8001336:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001338:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800133c:	20000004 	.word	0x20000004
 8001340:	20000360 	.word	0x20000360
 8001344:	0800ea4c 	.word	0x0800ea4c
  INIT_BSS _sbss, _ebss
 8001348:	20000360 	.word	0x20000360
 800134c:	20001dd8 	.word	0x20001dd8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001350:	20030000 	.word	0x20030000
 8001354:	20030000 	.word	0x20030000

08001358 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_Init+0x3c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_Init+0x3c>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001372:	2003      	movs	r0, #3
 8001374:	f000 f96c 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001378:	200f      	movs	r0, #15
 800137a:	f000 f80f 	bl	800139c <HAL_InitTick>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	e001      	b.n	800138e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800138a:	f7ff fe14 	bl	8000fb6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800138e:	79fb      	ldrb	r3, [r7, #7]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	58004000 	.word	0x58004000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_InitTick+0x6c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d024      	beq.n	80013fa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013b0:	f003 fa24 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_InitTick+0x6c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f974 	bl	80016b6 <HAL_SYSTICK_Config>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10f      	bne.n	80013f4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	d809      	bhi.n	80013ee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013da:	2200      	movs	r2, #0
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	f04f 30ff 	mov.w	r0, #4294967295
 80013e2:	f000 f940 	bl	8001666 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_InitTick+0x70>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e007      	b.n	80013fe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	e004      	b.n	80013fe <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	e001      	b.n	80013fe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000000c 	.word	0x2000000c
 800140c:	20000008 	.word	0x20000008

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2000000c 	.word	0x2000000c
 8001434:	200003d4 	.word	0x200003d4

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200003d4 	.word	0x200003d4

08001450 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTickPrio+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffe2 	bl	8001438 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffd2 	bl	8001438 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
    {
    }
  }
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000000c 	.word	0x2000000c

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff29 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff40 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff90 	bl	80015a4 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5f 	bl	8001550 <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff33 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa4 	bl	800160c <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	e14c      	b.n	800197a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 813e 	beq.w	8001974 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d005      	beq.n	8001710 <HAL_GPIO_Init+0x40>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 0201 	and.w	r2, r3, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b03      	cmp	r3, #3
 800177c:	d017      	beq.n	80017ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d123      	bne.n	8001802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	6939      	ldr	r1, [r7, #16]
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0203 	and.w	r2, r3, #3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8098 	beq.w	8001974 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001844:	4a54      	ldr	r2, [pc, #336]	; (8001998 <HAL_GPIO_Init+0x2c8>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800186e:	d019      	beq.n	80018a4 <HAL_GPIO_Init+0x1d4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a4a      	ldr	r2, [pc, #296]	; (800199c <HAL_GPIO_Init+0x2cc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d013      	beq.n	80018a0 <HAL_GPIO_Init+0x1d0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_GPIO_Init+0x2d0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00d      	beq.n	800189c <HAL_GPIO_Init+0x1cc>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_GPIO_Init+0x2d4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d007      	beq.n	8001898 <HAL_GPIO_Init+0x1c8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <HAL_GPIO_Init+0x2d8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_GPIO_Init+0x1c4>
 8001890:	2304      	movs	r3, #4
 8001892:	e008      	b.n	80018a6 <HAL_GPIO_Init+0x1d6>
 8001894:	2307      	movs	r3, #7
 8001896:	e006      	b.n	80018a6 <HAL_GPIO_Init+0x1d6>
 8001898:	2303      	movs	r3, #3
 800189a:	e004      	b.n	80018a6 <HAL_GPIO_Init+0x1d6>
 800189c:	2302      	movs	r3, #2
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x1d6>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_GPIO_Init+0x1d6>
 80018a4:	2300      	movs	r3, #0
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	f002 0203 	and.w	r2, r2, #3
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	4093      	lsls	r3, r2
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b6:	4938      	ldr	r1, [pc, #224]	; (8001998 <HAL_GPIO_Init+0x2c8>)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c4:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_GPIO_Init+0x2dc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e8:	4a30      	ldr	r2, [pc, #192]	; (80019ac <HAL_GPIO_Init+0x2dc>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_GPIO_Init+0x2dc>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001912:	4a26      	ldr	r2, [pc, #152]	; (80019ac <HAL_GPIO_Init+0x2dc>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_GPIO_Init+0x2dc>)
 800191a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800193e:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_GPIO_Init+0x2dc>)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_GPIO_Init+0x2dc>)
 8001948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196c:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <HAL_GPIO_Init+0x2dc>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	f47f aeab 	bne.w	80016e0 <HAL_GPIO_Init+0x10>
  }
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40010000 	.word	0x40010000
 800199c:	48000400 	.word	0x48000400
 80019a0:	48000800 	.word	0x48000800
 80019a4:	48000c00 	.word	0x48000c00
 80019a8:	48001000 	.word	0x48001000
 80019ac:	58000800 	.word	0x58000800

080019b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e081      	b.n	8001ac6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d106      	bne.n	80019dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff faf4 	bl	8000fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d107      	bne.n	8001a2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	e006      	b.n	8001a38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d104      	bne.n	8001a4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69d9      	ldr	r1, [r3, #28]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1a      	ldr	r2, [r3, #32]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d138      	bne.n	8001b56 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e032      	b.n	8001b58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2224      	movs	r2, #36	; 0x24
 8001afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b20:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	d139      	bne.n	8001bee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e033      	b.n	8001bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2224      	movs	r2, #36	; 0x24
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bee:	2302      	movs	r3, #2
  }
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af06      	add	r7, sp, #24
 8001c02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0dd      	b.n	8001dca <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f007 fc68 	bl	80094f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 faf6 	bl	800522c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e04d      	b.n	8001ce2 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	3305      	adds	r3, #5
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	b298      	uxth	r0, r3
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	333a      	adds	r3, #58	; 0x3a
 8001c86:	4602      	mov	r2, r0
 8001c88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3307      	adds	r3, #7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	333c      	adds	r3, #60	; 0x3c
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3340      	adds	r3, #64	; 0x40
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3344      	adds	r3, #68	; 0x44
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d3ac      	bcc.n	8001c46 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e044      	b.n	8001d7c <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d3b5      	bcc.n	8001cf2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	687e      	ldr	r6, [r7, #4]
 8001d8e:	466d      	mov	r5, sp
 8001d90:	f106 0410 	add.w	r4, r6, #16
 8001d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da0:	1d33      	adds	r3, r6, #4
 8001da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da4:	6838      	ldr	r0, [r7, #0]
 8001da6:	f003 fa5c 	bl	8005262 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f001 fc42 	bl	800364c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_Start+0x16>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e012      	b.n	8001e0e <HAL_PCD_Start+0x3c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 fa02 	bl	80051fe <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 fc40 	bl	8007684 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f005 fc45 	bl	80076b2 <USB_ReadInterrupts>
 8001e28:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fb30 	bl	800249a <PCD_EP_ISR_Handler>

    return;
 8001e3a:	e110      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d013      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f007 fbfd 	bl	800965e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e64:	2100      	movs	r1, #0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8fc 	bl	8002064 <HAL_PCD_SetAddress>

    return;
 8001e6c:	e0f7      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00c      	beq.n	8001e92 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e90:	e0e5      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00c      	beq.n	8001eb6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001eb4:	e0d3      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d034      	beq.n	8001f2a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0204 	bic.w	r2, r2, #4
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0208 	bic.w	r2, r2, #8
 8001eea:	b292      	uxth	r2, r2
 8001eec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f02:	2100      	movs	r1, #0
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f007 fda1 	bl	8009a4c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f007 fbe0 	bl	80096d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f22:	b292      	uxth	r2, r2
 8001f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f28:	e099      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d027      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0208 	orr.w	r2, r2, #8
 8001f46:	b292      	uxth	r2, r2
 8001f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0204 	orr.w	r2, r2, #4
 8001f76:	b292      	uxth	r2, r2
 8001f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f007 fb8d 	bl	800969c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f82:	e06c      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d040      	beq.n	8002010 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d12b      	bne.n	8002008 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0204 	orr.w	r2, r2, #4
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0208 	orr.w	r2, r2, #8
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ffe:	2101      	movs	r1, #1
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f007 fd23 	bl	8009a4c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002006:	e02a      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f007 fb47 	bl	800969c <HAL_PCD_SuspendCallback>
    return;
 800200e:	e026      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00f      	beq.n	800203a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800202c:	b292      	uxth	r2, r2
 800202e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f007 fb05 	bl	8009642 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002038:	e011      	b.n	800205e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00c      	beq.n	800205e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002056:	b292      	uxth	r2, r2
 8002058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800205c:	bf00      	nop
  }
}
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_PCD_SetAddress+0x1a>
 800207a:	2302      	movs	r3, #2
 800207c:	e013      	b.n	80020a6 <HAL_PCD_SetAddress+0x42>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f005 fae0 	bl	800765c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	4608      	mov	r0, r1
 80020b8:	4611      	mov	r1, r2
 80020ba:	461a      	mov	r2, r3
 80020bc:	4603      	mov	r3, r0
 80020be:	70fb      	strb	r3, [r7, #3]
 80020c0:	460b      	mov	r3, r1
 80020c2:	803b      	strh	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da0f      	bge.n	80020f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	3304      	adds	r3, #4
 80020ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	705a      	strb	r2, [r3, #1]
 80020f2:	e00f      	b.n	8002114 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 0207 	and.w	r2, r3, #7
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	3304      	adds	r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	b2da      	uxtb	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002120:	883a      	ldrh	r2, [r7, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	78ba      	ldrb	r2, [r7, #2]
 800212a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800213e:	78bb      	ldrb	r3, [r7, #2]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d102      	bne.n	800214a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_EP_Open+0xaa>
 8002154:	2302      	movs	r3, #2
 8002156:	e00e      	b.n	8002176 <HAL_PCD_EP_Open+0xc8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f003 f89c 	bl	80052a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8002174:	7afb      	ldrb	r3, [r7, #11]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800218a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	da0f      	bge.n	80021b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	3304      	adds	r3, #4
 80021a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	705a      	strb	r2, [r3, #1]
 80021b0:	e00f      	b.n	80021d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 0207 	and.w	r2, r3, #7
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	3304      	adds	r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_PCD_EP_Close+0x6e>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e00e      	b.n	800220a <HAL_PCD_EP_Close+0x8c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68f9      	ldr	r1, [r7, #12]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 fc0c 	bl	8005a18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	460b      	mov	r3, r1
 8002220:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	f003 0207 	and.w	r2, r3, #7
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2200      	movs	r2, #0
 8002252:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	b2da      	uxtb	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002260:	7afb      	ldrb	r3, [r7, #11]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6979      	ldr	r1, [r7, #20]
 8002270:	4618      	mov	r0, r3
 8002272:	f003 fdbe 	bl	8005df2 <USB_EPStartXfer>
 8002276:	e005      	b.n	8002284 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6979      	ldr	r1, [r7, #20]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fdb7 	bl	8005df2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 0207 	and.w	r2, r3, #7
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022b0:	681b      	ldr	r3, [r3, #0]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	460b      	mov	r3, r1
 80022cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ce:	7afb      	ldrb	r3, [r7, #11]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4413      	add	r3, r2
 80022e2:	3304      	adds	r3, #4
 80022e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2201      	movs	r2, #1
 800230a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800230c:	7afb      	ldrb	r3, [r7, #11]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	b2da      	uxtb	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002318:	7afb      	ldrb	r3, [r7, #11]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6979      	ldr	r1, [r7, #20]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fd62 	bl	8005df2 <USB_EPStartXfer>
 800232e:	e005      	b.n	800233c <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6979      	ldr	r1, [r7, #20]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fd5b 	bl	8005df2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 0207 	and.w	r2, r3, #7
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	d901      	bls.n	8002364 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e040      	b.n	80023e6 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da0f      	bge.n	800238c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	3304      	adds	r3, #4
 8002382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	705a      	strb	r2, [r3, #1]
 800238a:	e00d      	b.n	80023a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	3304      	adds	r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_PCD_EP_SetStall+0x82>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e00e      	b.n	80023e6 <HAL_PCD_EP_SetStall+0xa0>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 f841 	bl	800745e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	d901      	bls.n	800240c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e042      	b.n	8002492 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800240c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da0f      	bge.n	8002434 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	3304      	adds	r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	705a      	strb	r2, [r3, #1]
 8002432:	e00f      	b.n	8002454 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	f003 0207 	and.w	r2, r3, #7
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_PCD_EP_ClrStall+0x86>
 8002470:	2302      	movs	r3, #2
 8002472:	e00e      	b.n	8002492 <HAL_PCD_EP_ClrStall+0xa4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68f9      	ldr	r1, [r7, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	f005 f83c 	bl	8007500 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b096      	sub	sp, #88	; 0x58
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024a2:	e3a9      	b.n	8002bf8 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80024be:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 8169 	bne.w	800279a <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d150      	bne.n	8002576 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e4:	81fb      	strh	r3, [r7, #14]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	332c      	adds	r3, #44	; 0x2c
 80024fc:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	4413      	add	r3, r2
 8002518:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	441a      	add	r2, r3
 8002530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002532:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002534:	2100      	movs	r1, #0
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f007 f869 	bl	800960e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8357 	beq.w	8002bf8 <PCD_EP_ISR_Handler+0x75e>
 800254a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8352 	bne.w	8002bf8 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002560:	b2da      	uxtb	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b292      	uxth	r2, r2
 8002568:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002574:	e340      	b.n	8002bf8 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800257c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002588:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800258c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002590:	2b00      	cmp	r3, #0
 8002592:	d032      	beq.n	80025fa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	4413      	add	r3, r2
 80025ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80025c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025cc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f005 f8c1 	bl	8007756 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025e0:	4013      	ands	r3, r2
 80025e2:	823b      	strh	r3, [r7, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	8a3a      	ldrh	r2, [r7, #16]
 80025ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ee:	b292      	uxth	r2, r2
 80025f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f006 ffde 	bl	80095b4 <HAL_PCD_SetupStageCallback>
 80025f8:	e2fe      	b.n	8002bf8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025fa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f280 82fa 	bge.w	8002bf8 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29a      	uxth	r2, r3
 800260c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002610:	4013      	ands	r3, r2
 8002612:	83fb      	strh	r3, [r7, #30]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	8bfa      	ldrh	r2, [r7, #30]
 800261a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800261e:	b292      	uxth	r2, r2
 8002620:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	4413      	add	r3, r2
 800263c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002648:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800264a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d019      	beq.n	8002686 <PCD_EP_ISR_Handler+0x1ec>
 8002652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d015      	beq.n	8002686 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002660:	6959      	ldr	r1, [r3, #20]
 8002662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002664:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002668:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800266a:	b29b      	uxth	r3, r3
 800266c:	f005 f873 	bl	8007756 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	441a      	add	r2, r3
 800267a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800267e:	2100      	movs	r1, #0
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f006 ffa9 	bl	80095d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002690:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 82ad 	bne.w	8002bf8 <PCD_EP_ISR_Handler+0x75e>
 800269e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80026a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026aa:	f000 82a5 	beq.w	8002bf8 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026bc:	b29b      	uxth	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b3e      	cmp	r3, #62	; 0x3e
 80026d4:	d918      	bls.n	8002708 <PCD_EP_ISR_Handler+0x26e>
 80026d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	647b      	str	r3, [r7, #68]	; 0x44
 80026de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <PCD_EP_ISR_Handler+0x256>
 80026ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ec:	3b01      	subs	r3, #1
 80026ee:	647b      	str	r3, [r7, #68]	; 0x44
 80026f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	029b      	lsls	r3, r3, #10
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002700:	b29a      	uxth	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	801a      	strh	r2, [r3, #0]
 8002706:	e029      	b.n	800275c <PCD_EP_ISR_Handler+0x2c2>
 8002708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d112      	bne.n	8002736 <PCD_EP_ISR_Handler+0x29c>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800271a:	b29a      	uxth	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800272a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800272e:	b29a      	uxth	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	801a      	strh	r2, [r3, #0]
 8002734:	e012      	b.n	800275c <PCD_EP_ISR_Handler+0x2c2>
 8002736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	647b      	str	r3, [r7, #68]	; 0x44
 800273e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <PCD_EP_ISR_Handler+0x2b6>
 800274a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274c:	3301      	adds	r3, #1
 800274e:	647b      	str	r3, [r7, #68]	; 0x44
 8002750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002752:	b29b      	uxth	r3, r3
 8002754:	029b      	lsls	r3, r3, #10
 8002756:	b29a      	uxth	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276c:	827b      	strh	r3, [r7, #18]
 800276e:	8a7b      	ldrh	r3, [r7, #18]
 8002770:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002774:	827b      	strh	r3, [r7, #18]
 8002776:	8a7b      	ldrh	r3, [r7, #18]
 8002778:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800277c:	827b      	strh	r3, [r7, #18]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	8a7b      	ldrh	r3, [r7, #18]
 8002784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800278c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002794:	b29b      	uxth	r3, r3
 8002796:	8013      	strh	r3, [r2, #0]
 8002798:	e22e      	b.n	8002bf8 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027ae:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f280 80f7 	bge.w	80029a6 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027ce:	4013      	ands	r3, r2
 80027d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80027e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027ea:	b292      	uxth	r2, r2
 80027ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027ee:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002808:	7b1b      	ldrb	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d123      	bne.n	8002856 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	4413      	add	r3, r2
 8002828:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002832:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002836:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 808e 	beq.w	800295c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002846:	6959      	ldr	r1, [r3, #20]
 8002848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284a:	88da      	ldrh	r2, [r3, #6]
 800284c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002850:	f004 ff81 	bl	8007756 <USB_ReadPMA>
 8002854:	e082      	b.n	800295c <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002858:	78db      	ldrb	r3, [r3, #3]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d10a      	bne.n	8002874 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800285e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002862:	461a      	mov	r2, r3
 8002864:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9d4 	bl	8002c14 <HAL_PCD_EP_DB_Receive>
 800286c:	4603      	mov	r3, r0
 800286e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002872:	e073      	b.n	800295c <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d022      	beq.n	8002918 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80028fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d02c      	beq.n	800295c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002908:	6959      	ldr	r1, [r3, #20]
 800290a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290c:	891a      	ldrh	r2, [r3, #8]
 800290e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002912:	f004 ff20 	bl	8007756 <USB_ReadPMA>
 8002916:	e021      	b.n	800295c <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	4413      	add	r3, r2
 8002932:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002940:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294e:	6959      	ldr	r1, [r3, #20]
 8002950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002952:	895a      	ldrh	r2, [r3, #10]
 8002954:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002958:	f004 fefd 	bl	8007756 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800295c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002964:	441a      	add	r2, r3
 8002966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002968:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800296a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002972:	441a      	add	r2, r3
 8002974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002976:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <PCD_EP_ISR_Handler+0x4f2>
 8002980:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	429a      	cmp	r2, r3
 800298a:	d206      	bcs.n	800299a <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800298c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f006 fe20 	bl	80095d8 <HAL_PCD_DataOutStageCallback>
 8002998:	e005      	b.n	80029a6 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80029a0:	4618      	mov	r0, r3
 80029a2:	f003 fa26 	bl	8005df2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8122 	beq.w	8002bf8 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80029b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	3304      	adds	r3, #4
 80029c8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	441a      	add	r2, r3
 80029f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80029fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a08:	78db      	ldrb	r3, [r3, #3]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	f040 80a2 	bne.w	8002b54 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8002a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a18:	7b1b      	ldrb	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8093 	beq.w	8002b46 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a20:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d046      	beq.n	8002aba <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d126      	bne.n	8002a82 <PCD_EP_ISR_Handler+0x5e8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	4413      	add	r3, r2
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	00da      	lsls	r2, r3, #3
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	4413      	add	r3, r2
 8002a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	801a      	strh	r2, [r3, #0]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	801a      	strh	r2, [r3, #0]
 8002a80:	e061      	b.n	8002b46 <PCD_EP_ISR_Handler+0x6ac>
 8002a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d15d      	bne.n	8002b46 <PCD_EP_ISR_Handler+0x6ac>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	4413      	add	r3, r2
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	00da      	lsls	r2, r3, #3
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	4413      	add	r3, r2
 8002aac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	801a      	strh	r2, [r3, #0]
 8002ab8:	e045      	b.n	8002b46 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d126      	bne.n	8002b16 <PCD_EP_ISR_Handler+0x67c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002adc:	4413      	add	r3, r2
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	00da      	lsls	r2, r3, #3
 8002ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae8:	4413      	add	r3, r2
 8002aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	801a      	strh	r2, [r3, #0]
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	e017      	b.n	8002b46 <PCD_EP_ISR_Handler+0x6ac>
 8002b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d113      	bne.n	8002b46 <PCD_EP_ISR_Handler+0x6ac>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2c:	4413      	add	r3, r2
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	00da      	lsls	r2, r3, #3
 8002b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b38:	4413      	add	r3, r2
 8002b3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	2200      	movs	r2, #0
 8002b44:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f006 fd5e 	bl	800960e <HAL_PCD_DataInStageCallback>
 8002b52:	e051      	b.n	8002bf8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002b54:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d144      	bne.n	8002bea <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d907      	bls.n	8002ba4 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8002b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b9c:	1ad2      	subs	r2, r2, r3
 8002b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba0:	619a      	str	r2, [r3, #24]
 8002ba2:	e002      	b.n	8002baa <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f006 fd28 	bl	800960e <HAL_PCD_DataInStageCallback>
 8002bbe:	e01b      	b.n	8002bf8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bc8:	441a      	add	r2, r3
 8002bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bcc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bd6:	441a      	add	r2, r3
 8002bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bda:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 f905 	bl	8005df2 <USB_EPStartXfer>
 8002be8:	e006      	b.n	8002bf8 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002bea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f917 	bl	8002e26 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f6ff ac4d 	blt.w	80024a4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3758      	adds	r7, #88	; 0x58
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d07c      	beq.n	8002d26 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	8b7b      	ldrh	r3, [r7, #26]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d306      	bcc.n	8002c6a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	8b7b      	ldrh	r3, [r7, #26]
 8002c62:	1ad2      	subs	r2, r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	619a      	str	r2, [r3, #24]
 8002c68:	e002      	b.n	8002c70 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d123      	bne.n	8002cc0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c92:	833b      	strh	r3, [r7, #24]
 8002c94:	8b3b      	ldrh	r3, [r7, #24]
 8002c96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c9a:	833b      	strh	r3, [r7, #24]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	441a      	add	r2, r3
 8002caa:	8b3b      	ldrh	r3, [r7, #24]
 8002cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01f      	beq.n	8002d0a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce4:	82fb      	strh	r3, [r7, #22]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	441a      	add	r2, r3
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d0a:	8b7b      	ldrh	r3, [r7, #26]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8085 	beq.w	8002e1c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6959      	ldr	r1, [r3, #20]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	891a      	ldrh	r2, [r3, #8]
 8002d1e:	8b7b      	ldrh	r3, [r7, #26]
 8002d20:	f004 fd19 	bl	8007756 <USB_ReadPMA>
 8002d24:	e07a      	b.n	8002e1c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	8b7b      	ldrh	r3, [r7, #26]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d306      	bcc.n	8002d64 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	8b7b      	ldrh	r3, [r7, #26]
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	619a      	str	r2, [r3, #24]
 8002d62:	e002      	b.n	8002d6a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d123      	bne.n	8002dba <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8c:	83fb      	strh	r3, [r7, #30]
 8002d8e:	8bfb      	ldrh	r3, [r7, #30]
 8002d90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d94:	83fb      	strh	r3, [r7, #30]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	441a      	add	r2, r3
 8002da4:	8bfb      	ldrh	r3, [r7, #30]
 8002da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d11f      	bne.n	8002e04 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	83bb      	strh	r3, [r7, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	8bbb      	ldrh	r3, [r7, #28]
 8002df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e04:	8b7b      	ldrh	r3, [r7, #26]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6959      	ldr	r1, [r3, #20]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	895a      	ldrh	r2, [r3, #10]
 8002e16:	8b7b      	ldrh	r3, [r7, #26]
 8002e18:	f004 fc9d 	bl	8007756 <USB_ReadPMA>
    }
  }

  return count;
 8002e1c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b0a2      	sub	sp, #136	; 0x88
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	4613      	mov	r3, r2
 8002e32:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 81c5 	beq.w	80031ca <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d907      	bls.n	8002e84 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e7c:	1ad2      	subs	r2, r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	619a      	str	r2, [r3, #24]
 8002e82:	e002      	b.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f040 80b9 	bne.w	8003006 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d126      	bne.n	8002eea <HAL_PCD_EP_DB_Transmit+0xc4>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	4413      	add	r3, r2
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	00da      	lsls	r2, r3, #3
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	801a      	strh	r2, [r3, #0]
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	801a      	strh	r2, [r3, #0]
 8002ee8:	e01a      	b.n	8002f20 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d116      	bne.n	8002f20 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	4413      	add	r3, r2
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	00da      	lsls	r2, r3, #3
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	4413      	add	r3, r2
 8002f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d126      	bne.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x156>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	4413      	add	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	801a      	strh	r2, [r3, #0]
 8002f7a:	e017      	b.n	8002fac <HAL_PCD_EP_DB_Transmit+0x186>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d113      	bne.n	8002fac <HAL_PCD_EP_DB_Transmit+0x186>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	4413      	add	r3, r2
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	00da      	lsls	r2, r3, #3
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f006 fb2b 	bl	800960e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 82d2 	beq.w	8003568 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	827b      	strh	r3, [r7, #18]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	8a7b      	ldrh	r3, [r7, #18]
 8002ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003000:	b29b      	uxth	r3, r3
 8003002:	8013      	strh	r3, [r2, #0]
 8003004:	e2b0      	b.n	8003568 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d021      	beq.n	8003054 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	441a      	add	r2, r3
 800303c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800304c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003050:	b29b      	uxth	r3, r3
 8003052:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800305a:	2b01      	cmp	r3, #1
 800305c:	f040 8284 	bne.w	8003568 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003068:	441a      	add	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003076:	441a      	add	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6a1a      	ldr	r2, [r3, #32]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	429a      	cmp	r2, r3
 8003086:	d309      	bcc.n	800309c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	621a      	str	r2, [r3, #32]
 800309a:	e015      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d107      	bne.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80030a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030b2:	e009      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2200      	movs	r2, #0
 80030c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d155      	bne.n	800317c <HAL_PCD_EP_DB_Transmit+0x356>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	4413      	add	r3, r2
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	00da      	lsls	r2, r3, #3
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	4413      	add	r3, r2
 80030f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
 80030f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fa:	2b3e      	cmp	r3, #62	; 0x3e
 80030fc:	d916      	bls.n	800312c <HAL_PCD_EP_DB_Transmit+0x306>
 80030fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	64bb      	str	r3, [r7, #72]	; 0x48
 8003104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	3b01      	subs	r3, #1
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
 8003114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003116:	b29b      	uxth	r3, r3
 8003118:	029b      	lsls	r3, r3, #10
 800311a:	b29b      	uxth	r3, r3
 800311c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003124:	b29a      	uxth	r2, r3
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	e043      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800312c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312e:	2b00      	cmp	r3, #0
 8003130:	d112      	bne.n	8003158 <HAL_PCD_EP_DB_Transmit+0x332>
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800313c:	b29a      	uxth	r2, r3
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	801a      	strh	r2, [r3, #0]
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003150:	b29a      	uxth	r2, r3
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003154:	801a      	strh	r2, [r3, #0]
 8003156:	e02d      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	64bb      	str	r3, [r7, #72]	; 0x48
 800315e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_PCD_EP_DB_Transmit+0x348>
 8003168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800316a:	3301      	adds	r3, #1
 800316c:	64bb      	str	r3, [r7, #72]	; 0x48
 800316e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003170:	b29b      	uxth	r3, r3
 8003172:	029b      	lsls	r3, r3, #10
 8003174:	b29a      	uxth	r2, r3
 8003176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	e01b      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	785b      	ldrb	r3, [r3, #1]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d117      	bne.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	643b      	str	r3, [r7, #64]	; 0x40
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003198:	4413      	add	r3, r2
 800319a:	643b      	str	r3, [r7, #64]	; 0x40
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	00da      	lsls	r2, r3, #3
 80031a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a4:	4413      	add	r3, r2
 80031a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6959      	ldr	r1, [r3, #20]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	891a      	ldrh	r2, [r3, #8]
 80031c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f004 fa85 	bl	80076d2 <USB_WritePMA>
 80031c8:	e1ce      	b.n	8003568 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d307      	bcc.n	800320e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	619a      	str	r2, [r3, #24]
 800320c:	e002      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f040 80c4 	bne.w	80033a6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d126      	bne.n	8003274 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	66bb      	str	r3, [r7, #104]	; 0x68
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003234:	b29b      	uxth	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323a:	4413      	add	r3, r2
 800323c:	66bb      	str	r3, [r7, #104]	; 0x68
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	00da      	lsls	r2, r3, #3
 8003244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003246:	4413      	add	r3, r2
 8003248:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800324c:	667b      	str	r3, [r7, #100]	; 0x64
 800324e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003258:	b29a      	uxth	r2, r3
 800325a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326c:	b29a      	uxth	r2, r3
 800326e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	e01a      	b.n	80032aa <HAL_PCD_EP_DB_Transmit+0x484>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d116      	bne.n	80032aa <HAL_PCD_EP_DB_Transmit+0x484>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	673b      	str	r3, [r7, #112]	; 0x70
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003290:	4413      	add	r3, r2
 8003292:	673b      	str	r3, [r7, #112]	; 0x70
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	00da      	lsls	r2, r3, #3
 800329a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329c:	4413      	add	r3, r2
 800329e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	2200      	movs	r2, #0
 80032a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	785b      	ldrb	r3, [r3, #1]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d12f      	bne.n	8003318 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032d0:	4413      	add	r3, r2
 80032d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	00da      	lsls	r2, r3, #3
 80032dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e0:	4413      	add	r3, r2
 80032e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800330a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330e:	b29a      	uxth	r2, r3
 8003310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	e017      	b.n	8003348 <HAL_PCD_EP_DB_Transmit+0x522>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	785b      	ldrb	r3, [r3, #1]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d113      	bne.n	8003348 <HAL_PCD_EP_DB_Transmit+0x522>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003328:	b29b      	uxth	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800332e:	4413      	add	r3, r2
 8003330:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	00da      	lsls	r2, r3, #3
 8003338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800333a:	4413      	add	r3, r2
 800333c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003340:	67bb      	str	r3, [r7, #120]	; 0x78
 8003342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003344:	2200      	movs	r2, #0
 8003346:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4619      	mov	r1, r3
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f006 f95d 	bl	800960e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 8104 	bne.w	8003568 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	441a      	add	r2, r3
 800338c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800339c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	8013      	strh	r3, [r2, #0]
 80033a4:	e0e0      	b.n	8003568 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d121      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	441a      	add	r2, r3
 80033dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80033e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	f040 80b4 	bne.w	8003568 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003408:	441a      	add	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003416:	441a      	add	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	429a      	cmp	r2, r3
 8003426:	d309      	bcc.n	800343c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	6a1a      	ldr	r2, [r3, #32]
 8003432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003434:	1ad2      	subs	r2, r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	621a      	str	r2, [r3, #32]
 800343a:	e015      	b.n	8003468 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003444:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003448:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003452:	e009      	b.n	8003468 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	663b      	str	r3, [r7, #96]	; 0x60
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	785b      	ldrb	r3, [r3, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d155      	bne.n	8003522 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	65bb      	str	r3, [r7, #88]	; 0x58
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003484:	b29b      	uxth	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800348a:	4413      	add	r3, r2
 800348c:	65bb      	str	r3, [r7, #88]	; 0x58
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	00da      	lsls	r2, r3, #3
 8003494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003496:	4413      	add	r3, r2
 8003498:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800349c:	657b      	str	r3, [r7, #84]	; 0x54
 800349e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a0:	2b3e      	cmp	r3, #62	; 0x3e
 80034a2:	d916      	bls.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80034a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	677b      	str	r3, [r7, #116]	; 0x74
 80034aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_PCD_EP_DB_Transmit+0x694>
 80034b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b6:	3b01      	subs	r3, #1
 80034b8:	677b      	str	r3, [r7, #116]	; 0x74
 80034ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034bc:	b29b      	uxth	r3, r3
 80034be:	029b      	lsls	r3, r3, #10
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	e040      	b.n	8003554 <HAL_PCD_EP_DB_Transmit+0x72e>
 80034d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d112      	bne.n	80034fe <HAL_PCD_EP_DB_Transmit+0x6d8>
 80034d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e6:	801a      	strh	r2, [r3, #0]
 80034e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034fa:	801a      	strh	r2, [r3, #0]
 80034fc:	e02a      	b.n	8003554 <HAL_PCD_EP_DB_Transmit+0x72e>
 80034fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	677b      	str	r3, [r7, #116]	; 0x74
 8003504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800350e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003510:	3301      	adds	r3, #1
 8003512:	677b      	str	r3, [r7, #116]	; 0x74
 8003514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003516:	b29b      	uxth	r3, r3
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	b29a      	uxth	r2, r3
 800351c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351e:	801a      	strh	r2, [r3, #0]
 8003520:	e018      	b.n	8003554 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	785b      	ldrb	r3, [r3, #1]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d114      	bne.n	8003554 <HAL_PCD_EP_DB_Transmit+0x72e>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003532:	b29b      	uxth	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003538:	4413      	add	r3, r2
 800353a:	663b      	str	r3, [r7, #96]	; 0x60
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	00da      	lsls	r2, r3, #3
 8003542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003544:	4413      	add	r3, r2
 8003546:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800354a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354e:	b29a      	uxth	r2, r3
 8003550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003552:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6959      	ldr	r1, [r3, #20]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	895a      	ldrh	r2, [r3, #10]
 8003560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003562:	b29b      	uxth	r3, r3
 8003564:	f004 f8b5 	bl	80076d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003582:	823b      	strh	r3, [r7, #16]
 8003584:	8a3b      	ldrh	r3, [r7, #16]
 8003586:	f083 0310 	eor.w	r3, r3, #16
 800358a:	823b      	strh	r3, [r7, #16]
 800358c:	8a3b      	ldrh	r3, [r7, #16]
 800358e:	f083 0320 	eor.w	r3, r3, #32
 8003592:	823b      	strh	r3, [r7, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	8a3b      	ldrh	r3, [r7, #16]
 80035a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3788      	adds	r7, #136	; 0x88
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b087      	sub	sp, #28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	817b      	strh	r3, [r7, #10]
 80035d0:	4613      	mov	r3, r2
 80035d2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80035d4:	897b      	ldrh	r3, [r7, #10]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00c      	beq.n	80035fa <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e0:	897b      	ldrh	r3, [r7, #10]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	3304      	adds	r3, #4
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e00a      	b.n	8003610 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035fa:	897a      	ldrh	r2, [r7, #10]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	b29a      	uxth	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	80da      	strh	r2, [r3, #6]
 8003624:	e00b      	b.n	800363e <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2201      	movs	r2, #1
 800362a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	b29a      	uxth	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0c1b      	lsrs	r3, r3, #16
 8003638:	b29a      	uxth	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003670:	b29b      	uxth	r3, r3
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003684:	b29b      	uxth	r3, r3
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ae:	6013      	str	r3, [r2, #0]
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	58000400 	.word	0x58000400

080036c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	58000400 	.word	0x58000400

080036dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ea:	6053      	str	r3, [r2, #4]
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	58000400 	.word	0x58000400

080036fc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370e:	d101      	bne.n	8003714 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800372e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800373e:	b480      	push	{r7}
 8003740:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800374c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003750:	6013      	str	r3, [r2, #0]
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800376e:	d101      	bne.n	8003774 <LL_RCC_HSE_IsReady+0x18>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <LL_RCC_HSE_IsReady+0x1a>
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80037a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ce:	d101      	bne.n	80037d4 <LL_RCC_HSI_IsReady+0x18>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <LL_RCC_HSI_IsReady+0x1a>
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800380e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d101      	bne.n	8003866 <LL_RCC_HSI48_IsReady+0x18>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <LL_RCC_HSI48_IsReady+0x1a>
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003872:	b480      	push	{r7}
 8003874:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800388a:	bf00      	nop
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d101      	bne.n	8003912 <LL_RCC_LSE_IsReady+0x18>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <LL_RCC_LSE_IsReady+0x1a>
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003962:	b480      	push	{r7}
 8003964:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d101      	bne.n	800397a <LL_RCC_LSI1_IsReady+0x18>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <LL_RCC_LSI1_IsReady+0x1a>
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800399e:	bf00      	nop
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b8:	f023 0304 	bic.w	r3, r3, #4
 80039bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d101      	bne.n	80039e2 <LL_RCC_LSI2_IsReady+0x18>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <LL_RCC_LSI2_IsReady+0x1a>
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6013      	str	r3, [r2, #0]
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6013      	str	r3, [r2, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d101      	bne.n	8003a6e <LL_RCC_MSI_IsReady+0x16>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <LL_RCC_MSI_IsReady+0x18>
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2bb0      	cmp	r3, #176	; 0xb0
 8003ab8:	d901      	bls.n	8003abe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003aba:	23b0      	movs	r3, #176	; 0xb0
 8003abc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003abe:	687b      	ldr	r3, [r7, #4]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 0203 	bic.w	r2, r3, #3
 8003b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 030c 	and.w	r3, r3, #12
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b9a:	f023 020f 	bic.w	r2, r3, #15
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	608b      	str	r3, [r1, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	6013      	str	r3, [r2, #0]
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	6013      	str	r3, [r2, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c8a:	d101      	bne.n	8003c90 <LL_RCC_PLL_IsReady+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_RCC_PLL_IsReady+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d101      	bne.n	8003d16 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003d22:	b480      	push	{r7}
 8003d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d36:	d101      	bne.n	8003d3c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d101      	bne.n	8003d62 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d80:	d101      	bne.n	8003d86 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003da4:	d101      	bne.n	8003daa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b08d      	sub	sp, #52	; 0x34
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e363      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 808d 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd8:	f7ff fea1 	bl	8003b1e <LL_RCC_GetSysClkSource>
 8003ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dde:	f7ff ff82 	bl	8003ce6 <LL_RCC_PLL_GetMainSource>
 8003de2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x3e>
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	d147      	bne.n	8003e80 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d144      	bne.n	8003e80 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e347      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003e06:	f7ff fe4c 	bl	8003aa2 <LL_RCC_MSI_GetRange>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	429c      	cmp	r4, r3
 8003e0e:	d914      	bls.n	8003e3a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fd05 	bl	8004824 <RCC_SetFlashLatencyFromMSIRange>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e336      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fe26 	bl	8003a7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fe4a 	bl	8003acc <LL_RCC_MSI_SetCalibTrimming>
 8003e38:	e013      	b.n	8003e62 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fe1b 	bl	8003a7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fe3f 	bl	8003acc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fce6 	bl	8004824 <RCC_SetFlashLatencyFromMSIRange>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e317      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003e62:	f000 fccb 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8003e66:	4603      	mov	r3, r0
 8003e68:	4aa4      	ldr	r2, [pc, #656]	; (80040fc <HAL_RCC_OscConfig+0x344>)
 8003e6a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e6c:	4ba4      	ldr	r3, [pc, #656]	; (8004100 <HAL_RCC_OscConfig+0x348>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fd fa93 	bl	800139c <HAL_InitTick>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d039      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e308      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01e      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e88:	f7ff fdc8 	bl	8003a1c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fad4 	bl	8001438 <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e94:	f7fd fad0 	bl	8001438 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e2f5      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ea6:	f7ff fdd7 	bl	8003a58 <LL_RCC_MSI_IsReady>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f1      	beq.n	8003e94 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fde0 	bl	8003a7a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fe04 	bl	8003acc <LL_RCC_MSI_SetCalibTrimming>
 8003ec4:	e015      	b.n	8003ef2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ec6:	f7ff fdb8 	bl	8003a3a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eca:	f7fd fab5 	bl	8001438 <HAL_GetTick>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed2:	f7fd fab1 	bl	8001438 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e2d6      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003ee4:	f7ff fdb8 	bl	8003a58 <LL_RCC_MSI_IsReady>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f1      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x11a>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003ef0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d047      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003efe:	f7ff fe0e 	bl	8003b1e <LL_RCC_GetSysClkSource>
 8003f02:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f04:	f7ff feef 	bl	8003ce6 <LL_RCC_PLL_GetMainSource>
 8003f08:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_OscConfig+0x164>
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	2b0c      	cmp	r3, #12
 8003f14:	d108      	bne.n	8003f28 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d134      	bne.n	8003f8e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e2b4      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f30:	d102      	bne.n	8003f38 <HAL_RCC_OscConfig+0x180>
 8003f32:	f7ff fbf5 	bl	8003720 <LL_RCC_HSE_Enable>
 8003f36:	e001      	b.n	8003f3c <HAL_RCC_OscConfig+0x184>
 8003f38:	f7ff fc01 	bl	800373e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d012      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fa78 	bl	8001438 <HAL_GetTick>
 8003f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fd fa74 	bl	8001438 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e299      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003f5e:	f7ff fbfd 	bl	800375c <LL_RCC_HSE_IsReady>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f1      	beq.n	8003f4c <HAL_RCC_OscConfig+0x194>
 8003f68:	e011      	b.n	8003f8e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fd fa65 	bl	8001438 <HAL_GetTick>
 8003f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f72:	f7fd fa61 	bl	8001438 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b64      	cmp	r3, #100	; 0x64
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e286      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f84:	f7ff fbea 	bl	800375c <LL_RCC_HSE_IsReady>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f1      	bne.n	8003f72 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04c      	beq.n	8004034 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f9a:	f7ff fdc0 	bl	8003b1e <LL_RCC_GetSysClkSource>
 8003f9e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fa0:	f7ff fea1 	bl	8003ce6 <LL_RCC_PLL_GetMainSource>
 8003fa4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x200>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e266      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fc09 	bl	80037e0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003fce:	e031      	b.n	8004034 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d019      	beq.n	800400c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd8:	f7ff fbd2 	bl	8003780 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd fa2c 	bl	8001438 <HAL_GetTick>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe4:	f7fd fa28 	bl	8001438 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e24d      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003ff6:	f7ff fbe1 	bl	80037bc <LL_RCC_HSI_IsReady>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f1      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fbeb 	bl	80037e0 <LL_RCC_HSI_SetCalibTrimming>
 800400a:	e013      	b.n	8004034 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400c:	f7ff fbc7 	bl	800379e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fd fa12 	bl	8001438 <HAL_GetTick>
 8004014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004018:	f7fd fa0e 	bl	8001438 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e233      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800402a:	f7ff fbc7 	bl	80037bc <LL_RCC_HSI_IsReady>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f1      	bne.n	8004018 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80a3 	beq.w	8004194 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d076      	beq.n	8004144 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	d046      	beq.n	80040f0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004062:	f7ff fc7e 	bl	8003962 <LL_RCC_LSI1_IsReady>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d113      	bne.n	8004094 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800406c:	f7ff fc57 	bl	800391e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004070:	f7fd f9e2 	bl	8001438 <HAL_GetTick>
 8004074:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004078:	f7fd f9de 	bl	8001438 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e203      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800408a:	f7ff fc6a 	bl	8003962 <LL_RCC_LSI1_IsReady>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f1      	beq.n	8004078 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004094:	f7ff fc77 	bl	8003986 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fd f9ce 	bl	8001438 <HAL_GetTick>
 800409c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80040a0:	f7fd f9ca 	bl	8001438 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e1ef      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80040b2:	f7ff fc8a 	bl	80039ca <LL_RCC_LSI2_IsReady>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f1      	beq.n	80040a0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fc94 	bl	80039ee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80040c6:	f7ff fc3b 	bl	8003940 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fd f9b5 	bl	8001438 <HAL_GetTick>
 80040ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040d2:	f7fd f9b1 	bl	8001438 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e1d6      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80040e4:	f7ff fc3d 	bl	8003962 <LL_RCC_LSI1_IsReady>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f1      	bne.n	80040d2 <HAL_RCC_OscConfig+0x31a>
 80040ee:	e051      	b.n	8004194 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80040f0:	f7ff fc15 	bl	800391e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd f9a0 	bl	8001438 <HAL_GetTick>
 80040f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80040fa:	e00c      	b.n	8004116 <HAL_RCC_OscConfig+0x35e>
 80040fc:	20000004 	.word	0x20000004
 8004100:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004104:	f7fd f998 	bl	8001438 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e1bd      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004116:	f7ff fc24 	bl	8003962 <LL_RCC_LSI1_IsReady>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f1      	beq.n	8004104 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004120:	f7ff fc42 	bl	80039a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004126:	f7fd f987 	bl	8001438 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b03      	cmp	r3, #3
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e1ac      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004138:	f7ff fc47 	bl	80039ca <LL_RCC_LSI2_IsReady>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f1      	bne.n	8004126 <HAL_RCC_OscConfig+0x36e>
 8004142:	e027      	b.n	8004194 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004144:	f7ff fc30 	bl	80039a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd f976 	bl	8001438 <HAL_GetTick>
 800414c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004150:	f7fd f972 	bl	8001438 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b03      	cmp	r3, #3
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e197      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004162:	f7ff fc32 	bl	80039ca <LL_RCC_LSI2_IsReady>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f1      	bne.n	8004150 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800416c:	f7ff fbe8 	bl	8003940 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fd f962 	bl	8001438 <HAL_GetTick>
 8004174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004178:	f7fd f95e 	bl	8001438 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e183      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800418a:	f7ff fbea 	bl	8003962 <LL_RCC_LSI1_IsReady>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f1      	bne.n	8004178 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d05b      	beq.n	8004258 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a0:	4ba7      	ldr	r3, [pc, #668]	; (8004440 <HAL_RCC_OscConfig+0x688>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d114      	bne.n	80041d6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80041ac:	f7ff fa78 	bl	80036a0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b0:	f7fd f942 	bl	8001438 <HAL_GetTick>
 80041b4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b8:	f7fd f93e 	bl	8001438 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e163      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ca:	4b9d      	ldr	r3, [pc, #628]	; (8004440 <HAL_RCC_OscConfig+0x688>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d102      	bne.n	80041e4 <HAL_RCC_OscConfig+0x42c>
 80041de:	f7ff fb48 	bl	8003872 <LL_RCC_LSE_Enable>
 80041e2:	e00c      	b.n	80041fe <HAL_RCC_OscConfig+0x446>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d104      	bne.n	80041f6 <HAL_RCC_OscConfig+0x43e>
 80041ec:	f7ff fb63 	bl	80038b6 <LL_RCC_LSE_EnableBypass>
 80041f0:	f7ff fb3f 	bl	8003872 <LL_RCC_LSE_Enable>
 80041f4:	e003      	b.n	80041fe <HAL_RCC_OscConfig+0x446>
 80041f6:	f7ff fb4d 	bl	8003894 <LL_RCC_LSE_Disable>
 80041fa:	f7ff fb6d 	bl	80038d8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d014      	beq.n	8004230 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004206:	f7fd f917 	bl	8001438 <HAL_GetTick>
 800420a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800420c:	e00a      	b.n	8004224 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420e:	f7fd f913 	bl	8001438 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	f241 3288 	movw	r2, #5000	; 0x1388
 800421c:	4293      	cmp	r3, r2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e136      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004224:	f7ff fb69 	bl	80038fa <LL_RCC_LSE_IsReady>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0ef      	beq.n	800420e <HAL_RCC_OscConfig+0x456>
 800422e:	e013      	b.n	8004258 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fd f902 	bl	8001438 <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004236:	e00a      	b.n	800424e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fd f8fe 	bl	8001438 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e121      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800424e:	f7ff fb54 	bl	80038fa <LL_RCC_LSE_IsReady>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ef      	bne.n	8004238 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d02c      	beq.n	80042be <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	2b00      	cmp	r3, #0
 800426a:	d014      	beq.n	8004296 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800426c:	f7ff facd 	bl	800380a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fd f8e2 	bl	8001438 <HAL_GetTick>
 8004274:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004278:	f7fd f8de 	bl	8001438 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e103      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800428a:	f7ff fae0 	bl	800384e <LL_RCC_HSI48_IsReady>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f1      	beq.n	8004278 <HAL_RCC_OscConfig+0x4c0>
 8004294:	e013      	b.n	80042be <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004296:	f7ff fac9 	bl	800382c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fd f8cd 	bl	8001438 <HAL_GetTick>
 800429e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a2:	f7fd f8c9 	bl	8001438 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0ee      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80042b4:	f7ff facb 	bl	800384e <LL_RCC_HSI48_IsReady>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f1      	bne.n	80042a2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80e4 	beq.w	8004490 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c8:	f7ff fc29 	bl	8003b1e <LL_RCC_GetSysClkSource>
 80042cc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	2b02      	cmp	r3, #2
 80042dc:	f040 80b4 	bne.w	8004448 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0203 	and.w	r2, r3, #3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d123      	bne.n	8004336 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d11c      	bne.n	8004336 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d114      	bne.n	8004336 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d10d      	bne.n	8004336 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004332:	429a      	cmp	r2, r3
 8004334:	d05d      	beq.n	80043f2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b0c      	cmp	r3, #12
 800433a:	d058      	beq.n	80043ee <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0a1      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800434e:	f7ff fc84 	bl	8003c5a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004352:	f7fd f871 	bl	8001438 <HAL_GetTick>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435a:	f7fd f86d 	bl	8001438 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e092      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ef      	bne.n	800435a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	4b30      	ldr	r3, [pc, #192]	; (8004444 <HAL_RCC_OscConfig+0x68c>)
 8004382:	4013      	ands	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438c:	4311      	orrs	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004392:	0212      	lsls	r2, r2, #8
 8004394:	4311      	orrs	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800439a:	4311      	orrs	r1, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043a0:	4311      	orrs	r1, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043a6:	430a      	orrs	r2, r1
 80043a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043b0:	f7ff fc44 	bl	8003c3c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043c4:	f7fd f838 	bl	8001438 <HAL_GetTick>
 80043c8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fd f834 	bl	8001438 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e059      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ef      	beq.n	80043cc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ec:	e050      	b.n	8004490 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e04f      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d147      	bne.n	8004490 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004400:	f7ff fc1c 	bl	8003c3c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800440e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004412:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004414:	f7fd f810 	bl	8001438 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fd f80c 	bl	8001438 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e031      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ef      	beq.n	800441c <HAL_RCC_OscConfig+0x664>
 800443c:	e028      	b.n	8004490 <HAL_RCC_OscConfig+0x6d8>
 800443e:	bf00      	nop
 8004440:	58000400 	.word	0x58000400
 8004444:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d01e      	beq.n	800448c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	f7ff fc04 	bl	8003c5a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fc fff1 	bl	8001438 <HAL_GetTick>
 8004456:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445a:	f7fc ffed 	bl	8001438 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e012      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ef      	bne.n	800445a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800447a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_OscConfig+0x6e4>)
 8004486:	4013      	ands	r3, r2
 8004488:	60cb      	str	r3, [r1, #12]
 800448a:	e001      	b.n	8004490 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3734      	adds	r7, #52	; 0x34
 8004496:	46bd      	mov	sp, r7
 8004498:	bd90      	pop	{r4, r7, pc}
 800449a:	bf00      	nop
 800449c:	eefefffc 	.word	0xeefefffc

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e12d      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b4:	4b98      	ldr	r3, [pc, #608]	; (8004718 <HAL_RCC_ClockConfig+0x278>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d91b      	bls.n	80044fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b95      	ldr	r3, [pc, #596]	; (8004718 <HAL_RCC_ClockConfig+0x278>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 0207 	bic.w	r2, r3, #7
 80044ca:	4993      	ldr	r1, [pc, #588]	; (8004718 <HAL_RCC_ClockConfig+0x278>)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d2:	f7fc ffb1 	bl	8001438 <HAL_GetTick>
 80044d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80044da:	f7fc ffad 	bl	8001438 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e111      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ec:	4b8a      	ldr	r3, [pc, #552]	; (8004718 <HAL_RCC_ClockConfig+0x278>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d1ef      	bne.n	80044da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fb13 	bl	8003b36 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004510:	f7fc ff92 	bl	8001438 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004518:	f7fc ff8e 	bl	8001438 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0f2      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800452a:	f7ff fbe8 	bl	8003cfe <LL_RCC_IsActiveFlag_HPRE>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f1      	beq.n	8004518 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fb0a 	bl	8003b5e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800454a:	f7fc ff75 	bl	8001438 <HAL_GetTick>
 800454e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004552:	f7fc ff71 	bl	8001438 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e0d5      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004564:	f7ff fbdd 	bl	8003d22 <LL_RCC_IsActiveFlag_C2HPRE>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f1      	beq.n	8004552 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fb03 	bl	8003b8a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004584:	f7fc ff58 	bl	8001438 <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800458c:	f7fc ff54 	bl	8001438 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e0b8      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800459e:	f7ff fbd3 	bl	8003d48 <LL_RCC_IsActiveFlag_SHDHPRE>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f1      	beq.n	800458c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d016      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fafd 	bl	8003bb8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045be:	f7fc ff3b 	bl	8001438 <HAL_GetTick>
 80045c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045c6:	f7fc ff37 	bl	8001438 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e09b      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80045d8:	f7ff fbc9 	bl	8003d6e <LL_RCC_IsActiveFlag_PPRE1>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f1      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d017      	beq.n	800461e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff faf3 	bl	8003be0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045fa:	f7fc ff1d 	bl	8001438 <HAL_GetTick>
 80045fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004600:	e008      	b.n	8004614 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004602:	f7fc ff19 	bl	8001438 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e07d      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004614:	f7ff fbbd 	bl	8003d92 <LL_RCC_IsActiveFlag_PPRE2>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f1      	beq.n	8004602 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d043      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d106      	bne.n	8004640 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004632:	f7ff f893 	bl	800375c <LL_RCC_HSE_IsReady>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11e      	bne.n	800467a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e067      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d106      	bne.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004648:	f7ff fb16 	bl	8003c78 <LL_RCC_PLL_IsReady>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d113      	bne.n	800467a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e05c      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800465e:	f7ff f9fb 	bl	8003a58 <LL_RCC_MSI_IsReady>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d108      	bne.n	800467a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e051      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800466c:	f7ff f8a6 	bl	80037bc <LL_RCC_HSI_IsReady>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e04a      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fa39 	bl	8003af6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004684:	f7fc fed8 	bl	8001438 <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468c:	f7fc fed4 	bl	8001438 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e036      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	f7ff fa3c 	bl	8003b1e <LL_RCC_GetSysClkSource>
 80046a6:	4602      	mov	r2, r0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d1ec      	bne.n	800468c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046b2:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_RCC_ClockConfig+0x278>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d21b      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c0:	4b15      	ldr	r3, [pc, #84]	; (8004718 <HAL_RCC_ClockConfig+0x278>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f023 0207 	bic.w	r2, r3, #7
 80046c8:	4913      	ldr	r1, [pc, #76]	; (8004718 <HAL_RCC_ClockConfig+0x278>)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d0:	f7fc feb2 	bl	8001438 <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80046d8:	f7fc feae 	bl	8001438 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e012      	b.n	8004710 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_ClockConfig+0x278>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1ef      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046f8:	f000 f880 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 80046fc:	4603      	mov	r3, r0
 80046fe:	4a07      	ldr	r2, [pc, #28]	; (800471c <HAL_RCC_ClockConfig+0x27c>)
 8004700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004702:	f7fc fea5 	bl	8001450 <HAL_GetTickPrio>
 8004706:	4603      	mov	r3, r0
 8004708:	4618      	mov	r0, r3
 800470a:	f7fc fe47 	bl	800139c <HAL_InitTick>
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	58004000 	.word	0x58004000
 800471c:	20000004 	.word	0x20000004

08004720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004726:	f7ff f9fa 	bl	8003b1e <LL_RCC_GetSysClkSource>
 800472a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004732:	f7ff f9b6 	bl	8003aa2 <LL_RCC_MSI_GetRange>
 8004736:	4603      	mov	r3, r0
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	4a2b      	ldr	r2, [pc, #172]	; (80047ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e04b      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b04      	cmp	r3, #4
 800474c:	d102      	bne.n	8004754 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800474e:	4b28      	ldr	r3, [pc, #160]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	e045      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b08      	cmp	r3, #8
 8004758:	d10a      	bne.n	8004770 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800475a:	f7fe ffcf 	bl	80036fc <LL_RCC_HSE_IsEnabledDiv2>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d102      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004764:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e03a      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	e037      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004770:	f7ff fab9 	bl	8003ce6 <LL_RCC_PLL_GetMainSource>
 8004774:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d003      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0x64>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d003      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0x6a>
 8004782:	e00d      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004784:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004786:	60bb      	str	r3, [r7, #8]
        break;
 8004788:	e015      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800478a:	f7fe ffb7 	bl	80036fc <LL_RCC_HSE_IsEnabledDiv2>
 800478e:	4603      	mov	r3, r0
 8004790:	2b01      	cmp	r3, #1
 8004792:	d102      	bne.n	800479a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004794:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004796:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004798:	e00d      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800479c:	60bb      	str	r3, [r7, #8]
        break;
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80047a0:	f7ff f97f 	bl	8003aa2 <LL_RCC_MSI_GetRange>
 80047a4:	4603      	mov	r3, r0
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	4a0f      	ldr	r2, [pc, #60]	; (80047ec <HAL_RCC_GetSysClockFreq+0xcc>)
 80047ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b2:	60bb      	str	r3, [r7, #8]
        break;
 80047b4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80047b6:	f7ff fa71 	bl	8003c9c <LL_RCC_PLL_GetN>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	fb03 f402 	mul.w	r4, r3, r2
 80047c2:	f7ff fa84 	bl	8003cce <LL_RCC_PLL_GetDivider>
 80047c6:	4603      	mov	r3, r0
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	3301      	adds	r3, #1
 80047cc:	fbb4 f4f3 	udiv	r4, r4, r3
 80047d0:	f7ff fa71 	bl	8003cb6 <LL_RCC_PLL_GetR>
 80047d4:	4603      	mov	r3, r0
 80047d6:	0f5b      	lsrs	r3, r3, #29
 80047d8:	3301      	adds	r3, #1
 80047da:	fbb4 f3f3 	udiv	r3, r4, r3
 80047de:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80047e0:	68fb      	ldr	r3, [r7, #12]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd90      	pop	{r4, r7, pc}
 80047ea:	bf00      	nop
 80047ec:	0800e55c 	.word	0x0800e55c
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	003d0900 	.word	0x003d0900
 80047f8:	007a1200 	.word	0x007a1200

080047fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047fc:	b598      	push	{r3, r4, r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004800:	f7ff ff8e 	bl	8004720 <HAL_RCC_GetSysClockFreq>
 8004804:	4604      	mov	r4, r0
 8004806:	f7ff f9ff 	bl	8003c08 <LL_RCC_GetAHBPrescaler>
 800480a:	4603      	mov	r3, r0
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	4a03      	ldr	r2, [pc, #12]	; (8004820 <HAL_RCC_GetHCLKFreq+0x24>)
 8004814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004818:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd98      	pop	{r3, r4, r7, pc}
 8004820:	0800e51c 	.word	0x0800e51c

08004824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2bb0      	cmp	r3, #176	; 0xb0
 8004830:	d903      	bls.n	800483a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e007      	b.n	800484a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	4a11      	ldr	r2, [pc, #68]	; (8004888 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004848:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800484a:	f7ff f9e9 	bl	8003c20 <LL_RCC_GetAHB4Prescaler>
 800484e:	4603      	mov	r3, r0
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	4a0d      	ldr	r2, [pc, #52]	; (800488c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	0c9c      	lsrs	r4, r3, #18
 800486e:	f7fe ff27 	bl	80036c0 <HAL_PWREx_GetVoltageRange>
 8004872:	4603      	mov	r3, r0
 8004874:	4619      	mov	r1, r3
 8004876:	4620      	mov	r0, r4
 8004878:	f000 f80c 	bl	8004894 <RCC_SetFlashLatency>
 800487c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bd90      	pop	{r4, r7, pc}
 8004886:	bf00      	nop
 8004888:	0800e55c 	.word	0x0800e55c
 800488c:	0800e51c 	.word	0x0800e51c
 8004890:	431bde83 	.word	0x431bde83

08004894 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b093      	sub	sp, #76	; 0x4c
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800489e:	4b37      	ldr	r3, [pc, #220]	; (800497c <RCC_SetFlashLatency+0xe8>)
 80048a0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80048a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80048aa:	4a35      	ldr	r2, [pc, #212]	; (8004980 <RCC_SetFlashLatency+0xec>)
 80048ac:	f107 031c 	add.w	r3, r7, #28
 80048b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80048b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80048b6:	4b33      	ldr	r3, [pc, #204]	; (8004984 <RCC_SetFlashLatency+0xf0>)
 80048b8:	f107 040c 	add.w	r4, r7, #12
 80048bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80048c2:	2300      	movs	r3, #0
 80048c4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048cc:	d11a      	bne.n	8004904 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	643b      	str	r3, [r7, #64]	; 0x40
 80048d2:	e013      	b.n	80048fc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80048d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	3348      	adds	r3, #72	; 0x48
 80048da:	443b      	add	r3, r7
 80048dc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d807      	bhi.n	80048f6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80048e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	3348      	adds	r3, #72	; 0x48
 80048ec:	443b      	add	r3, r7
 80048ee:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048f2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048f4:	e020      	b.n	8004938 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80048f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f8:	3301      	adds	r3, #1
 80048fa:	643b      	str	r3, [r7, #64]	; 0x40
 80048fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d9e8      	bls.n	80048d4 <RCC_SetFlashLatency+0x40>
 8004902:	e019      	b.n	8004938 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004904:	2300      	movs	r3, #0
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004908:	e013      	b.n	8004932 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800490a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	3348      	adds	r3, #72	; 0x48
 8004910:	443b      	add	r3, r7
 8004912:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d807      	bhi.n	800492c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	3348      	adds	r3, #72	; 0x48
 8004922:	443b      	add	r3, r7
 8004924:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004928:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800492a:	e005      	b.n	8004938 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492e:	3301      	adds	r3, #1
 8004930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004934:	2b02      	cmp	r3, #2
 8004936:	d9e8      	bls.n	800490a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <RCC_SetFlashLatency+0xf4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 0207 	bic.w	r2, r3, #7
 8004940:	4911      	ldr	r1, [pc, #68]	; (8004988 <RCC_SetFlashLatency+0xf4>)
 8004942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004944:	4313      	orrs	r3, r2
 8004946:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004948:	f7fc fd76 	bl	8001438 <HAL_GetTick>
 800494c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800494e:	e008      	b.n	8004962 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004950:	f7fc fd72 	bl	8001438 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e007      	b.n	8004972 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <RCC_SetFlashLatency+0xf4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800496c:	429a      	cmp	r2, r3
 800496e:	d1ef      	bne.n	8004950 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	374c      	adds	r7, #76	; 0x4c
 8004976:	46bd      	mov	sp, r7
 8004978:	bd90      	pop	{r4, r7, pc}
 800497a:	bf00      	nop
 800497c:	0800e4a8 	.word	0x0800e4a8
 8004980:	0800e4b8 	.word	0x0800e4b8
 8004984:	0800e4c4 	.word	0x0800e4c4
 8004988:	58004000 	.word	0x58004000

0800498c <LL_RCC_LSE_IsEnabled>:
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <LL_RCC_LSE_IsEnabled+0x18>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_RCC_LSE_IsReady>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d101      	bne.n	80049c8 <LL_RCC_LSE_IsReady+0x18>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <LL_RCC_LSE_IsReady+0x1a>
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_RCC_MSI_EnablePLLMode>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <LL_RCC_SetRFWKPClockSource>:
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <LL_RCC_SetSMPSClockSource>:
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f023 0203 	bic.w	r2, r3, #3
 8004a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <LL_RCC_SetSMPSPrescaler>:
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <LL_RCC_SetUSARTClockSource>:
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f023 0203 	bic.w	r2, r3, #3
 8004a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <LL_RCC_SetLPUARTClockSource>:
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <LL_RCC_SetI2CClockSource>:
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	401a      	ands	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <LL_RCC_SetLPTIMClockSource>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0c1b      	lsrs	r3, r3, #16
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	43db      	mvns	r3, r3
 8004b18:	401a      	ands	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	041b      	lsls	r3, r3, #16
 8004b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_RCC_SetSAIClockSource>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_RCC_SetRNGClockSource>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_RCC_SetCLK48ClockSource>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_RCC_SetUSBClockSource>:
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff ffe3 	bl	8004b8c <LL_RCC_SetCLK48ClockSource>
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <LL_RCC_SetADCClockSource>:
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_SetRTCClockSource>:
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_RCC_GetRTCClockSource>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_RCC_ForceBackupDomainReset>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c7a:	bf00      	nop
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <LL_RCC_PLLSAI1_Enable>:
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <LL_RCC_PLLSAI1_Disable>:
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cb4:	6013      	str	r3, [r2, #0]
}
 8004cb6:	bf00      	nop
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <LL_RCC_PLLSAI1_IsReady>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd2:	d101      	bne.n	8004cd8 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e000      	b.n	8004cda <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004cec:	2300      	movs	r3, #0
 8004cee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d034      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d08:	d021      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004d0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d0e:	d81b      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d14:	d01d      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d1a:	d815      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d24:	d110      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d34:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d36:	e00d      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f94d 	bl	8004fdc <RCCEx_PLLSAI1_ConfigNP>
 8004d42:	4603      	mov	r3, r0
 8004d44:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d46:	e005      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	77fb      	strb	r3, [r7, #31]
        break;
 8004d4c:	e002      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d54:	7ffb      	ldrb	r3, [r7, #31]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fee8 	bl	8004b34 <LL_RCC_SetSAIClockSource>
 8004d64:	e001      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	7ffb      	ldrb	r3, [r7, #31]
 8004d68:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d046      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004d76:	f7ff ff56 	bl	8004c26 <LL_RCC_GetRTCClockSource>
 8004d7a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d03c      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d86:	f7fe fc8b 	bl	80036a0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff30 	bl	8004bfa <LL_RCC_SetRTCClockSource>
 8004d9a:	e02e      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004da6:	f7ff ff4b 	bl	8004c40 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004daa:	f7ff ff5a 	bl	8004c62 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004dc6:	f7ff fde1 	bl	800498c <LL_RCC_LSE_IsEnabled>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d114      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dd0:	f7fc fb32 	bl	8001438 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd8:	f7fc fb2e 	bl	8001438 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d902      	bls.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	77fb      	strb	r3, [r7, #31]
              break;
 8004dee:	e004      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004df0:	f7ff fdde 	bl	80049b0 <LL_RCC_LSE_IsReady>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d1ee      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004dfa:	7ffb      	ldrb	r3, [r7, #31]
 8004dfc:	77bb      	strb	r3, [r7, #30]
 8004dfe:	e001      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
 8004e02:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fe2a 	bl	8004a6e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d004      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fe35 	bl	8004a9a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff fe5d 	bl	8004b00 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fe52 	bl	8004b00 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d004      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fe2a 	bl	8004ac6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d004      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fe1f 	bl	8004ac6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d022      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fe8d 	bl	8004bb8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eb6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec0:	d10b      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f8e3 	bl	8005092 <RCCEx_PLLSAI1_ConfigNQ>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004ed0:	7ffb      	ldrb	r3, [r7, #31]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004ed6:	7ffb      	ldrb	r3, [r7, #31]
 8004ed8:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02b      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eee:	d008      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef8:	d003      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d105      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fe2a 	bl	8004b60 <LL_RCC_SetRNGClockSource>
 8004f0c:	e00a      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f7ff fe21 	bl	8004b60 <LL_RCC_SetRNGClockSource>
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7ff fe34 	bl	8004b8c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d022      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fe3d 	bl	8004bce <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f5c:	d107      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f76:	d10b      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f8e3 	bl	8005148 <RCCEx_PLLSAI1_ConfigNR>
 8004f82:	4603      	mov	r3, r0
 8004f84:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004f86:	7ffb      	ldrb	r3, [r7, #31]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
 8004f8e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fd26 	bl	80049f2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fd45 	bl	8004a46 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fd2c 	bl	8004a1e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004fc6:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004fd4:	f7ff fcfe 	bl	80049d4 <LL_RCC_MSI_EnablePLLMode>
}
 8004fd8:	bf00      	nop
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004fe8:	f7ff fe5b 	bl	8004ca2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fec:	f7fc fa24 	bl	8001438 <HAL_GetTick>
 8004ff0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ff2:	e009      	b.n	8005008 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ff4:	f7fc fa20 	bl	8001438 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d902      	bls.n	8005008 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	73fb      	strb	r3, [r7, #15]
      break;
 8005006:	e004      	b.n	8005012 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005008:	f7ff fe5a 	bl	8004cc0 <LL_RCC_PLLSAI1_IsReady>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d137      	bne.n	8005088 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800502c:	4313      	orrs	r3, r2
 800502e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005042:	4313      	orrs	r3, r2
 8005044:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005046:	f7ff fe1d 	bl	8004c84 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504a:	f7fc f9f5 	bl	8001438 <HAL_GetTick>
 800504e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005050:	e009      	b.n	8005066 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005052:	f7fc f9f1 	bl	8001438 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d902      	bls.n	8005066 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	73fb      	strb	r3, [r7, #15]
        break;
 8005064:	e004      	b.n	8005070 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005066:	f7ff fe2b 	bl	8004cc0 <LL_RCC_PLLSAI1_IsReady>
 800506a:	4603      	mov	r3, r0
 800506c:	2b01      	cmp	r3, #1
 800506e:	d1f0      	bne.n	8005052 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d108      	bne.n	8005088 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005084:	4313      	orrs	r3, r2
 8005086:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005088:	7bfb      	ldrb	r3, [r7, #15]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800509e:	f7ff fe00 	bl	8004ca2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050a2:	f7fc f9c9 	bl	8001438 <HAL_GetTick>
 80050a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050a8:	e009      	b.n	80050be <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050aa:	f7fc f9c5 	bl	8001438 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d902      	bls.n	80050be <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e004      	b.n	80050c8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050be:	f7ff fdff 	bl	8004cc0 <LL_RCC_PLLSAI1_IsReady>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d137      	bne.n	800513e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050e2:	4313      	orrs	r3, r2
 80050e4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80050e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f8:	4313      	orrs	r3, r2
 80050fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80050fc:	f7ff fdc2 	bl	8004c84 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005100:	f7fc f99a 	bl	8001438 <HAL_GetTick>
 8005104:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005106:	e009      	b.n	800511c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005108:	f7fc f996 	bl	8001438 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d902      	bls.n	800511c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	73fb      	strb	r3, [r7, #15]
        break;
 800511a:	e004      	b.n	8005126 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800511c:	f7ff fdd0 	bl	8004cc0 <LL_RCC_PLLSAI1_IsReady>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d1f0      	bne.n	8005108 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d108      	bne.n	800513e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800512c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800513a:	4313      	orrs	r3, r2
 800513c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005154:	f7ff fda5 	bl	8004ca2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005158:	f7fc f96e 	bl	8001438 <HAL_GetTick>
 800515c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800515e:	e009      	b.n	8005174 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005160:	f7fc f96a 	bl	8001438 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d902      	bls.n	8005174 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	73fb      	strb	r3, [r7, #15]
      break;
 8005172:	e004      	b.n	800517e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005174:	f7ff fda4 	bl	8004cc0 <LL_RCC_PLLSAI1_IsReady>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d137      	bne.n	80051f4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005198:	4313      	orrs	r3, r2
 800519a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ae:	4313      	orrs	r3, r2
 80051b0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80051b2:	f7ff fd67 	bl	8004c84 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b6:	f7fc f93f 	bl	8001438 <HAL_GetTick>
 80051ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051bc:	e009      	b.n	80051d2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051be:	f7fc f93b 	bl	8001438 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d902      	bls.n	80051d2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	73fb      	strb	r3, [r7, #15]
        break;
 80051d0:	e004      	b.n	80051dc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051d2:	f7ff fd75 	bl	8004cc0 <LL_RCC_PLLSAI1_IsReady>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d1f0      	bne.n	80051be <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d108      	bne.n	80051f4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80051e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051f0:	4313      	orrs	r3, r2
 80051f2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800520e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005212:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	b29a      	uxth	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005234:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005238:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	b29b      	uxth	r3, r3
 8005246:	43db      	mvns	r3, r3
 8005248:	b29b      	uxth	r3, r3
 800524a:	4013      	ands	r3, r2
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005262:	b084      	sub	sp, #16
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	f107 0014 	add.w	r0, r7, #20
 8005270:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	b004      	add	sp, #16
 80052a2:	4770      	bx	lr

080052a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b09d      	sub	sp, #116	; 0x74
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	78db      	ldrb	r3, [r3, #3]
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d81f      	bhi.n	8005316 <USB_ActivateEndpoint+0x72>
 80052d6:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <USB_ActivateEndpoint+0x38>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	080052ed 	.word	0x080052ed
 80052e0:	08005309 	.word	0x08005309
 80052e4:	0800531f 	.word	0x0800531f
 80052e8:	080052fb 	.word	0x080052fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80052ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80052f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80052f8:	e012      	b.n	8005320 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80052fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80052fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005302:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005306:	e00b      	b.n	8005320 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005308:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800530c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005310:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005314:	e004      	b.n	8005320 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800531c:	e000      	b.n	8005320 <USB_ActivateEndpoint+0x7c>
      break;
 800531e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800532e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533e:	b29b      	uxth	r3, r3
 8005340:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	b21b      	sxth	r3, r3
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	b21a      	sxth	r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	b21b      	sxth	r3, r3
 8005362:	4313      	orrs	r3, r2
 8005364:	b21b      	sxth	r3, r3
 8005366:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	441a      	add	r2, r3
 8005374:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005388:	b29b      	uxth	r3, r3
 800538a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	7b1b      	ldrb	r3, [r3, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f040 816e 	bne.w	8005672 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 8084 	beq.w	80054a8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	4413      	add	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	00da      	lsls	r2, r3, #3
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	88db      	ldrh	r3, [r3, #6]
 80053c8:	085b      	lsrs	r3, r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	827b      	strh	r3, [r7, #18]
 80053e2:	8a7b      	ldrh	r3, [r7, #18]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01b      	beq.n	8005424 <USB_ActivateEndpoint+0x180>
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	823b      	strh	r3, [r7, #16]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	8a3b      	ldrh	r3, [r7, #16]
 8005410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005420:	b29b      	uxth	r3, r3
 8005422:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	78db      	ldrb	r3, [r3, #3]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d020      	beq.n	800546e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005442:	81bb      	strh	r3, [r7, #12]
 8005444:	89bb      	ldrh	r3, [r7, #12]
 8005446:	f083 0320 	eor.w	r3, r3, #32
 800544a:	81bb      	strh	r3, [r7, #12]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	441a      	add	r2, r3
 8005456:	89bb      	ldrh	r3, [r7, #12]
 8005458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005468:	b29b      	uxth	r3, r3
 800546a:	8013      	strh	r3, [r2, #0]
 800546c:	e2cb      	b.n	8005a06 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005484:	81fb      	strh	r3, [r7, #14]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	441a      	add	r2, r3
 8005490:	89fb      	ldrh	r3, [r7, #14]
 8005492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	8013      	strh	r3, [r2, #0]
 80054a6:	e2ae      	b.n	8005a06 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	4413      	add	r3, r2
 80054ba:	633b      	str	r3, [r7, #48]	; 0x30
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	00da      	lsls	r2, r3, #3
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	4413      	add	r3, r2
 80054c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	88db      	ldrh	r3, [r3, #6]
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	4413      	add	r3, r2
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	00da      	lsls	r2, r3, #3
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	4413      	add	r3, r2
 80054fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b3e      	cmp	r3, #62	; 0x3e
 8005506:	d918      	bls.n	800553a <USB_ActivateEndpoint+0x296>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <USB_ActivateEndpoint+0x27e>
 800551c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800551e:	3b01      	subs	r3, #1
 8005520:	66bb      	str	r3, [r7, #104]	; 0x68
 8005522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005524:	b29b      	uxth	r3, r3
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e029      	b.n	800558e <USB_ActivateEndpoint+0x2ea>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d112      	bne.n	8005568 <USB_ActivateEndpoint+0x2c4>
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800554c:	b29a      	uxth	r2, r3
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	801a      	strh	r2, [r3, #0]
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800555c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005560:	b29a      	uxth	r2, r3
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	e012      	b.n	800558e <USB_ActivateEndpoint+0x2ea>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	085b      	lsrs	r3, r3, #1
 800556e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <USB_ActivateEndpoint+0x2de>
 800557c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800557e:	3301      	adds	r3, #1
 8005580:	66bb      	str	r3, [r7, #104]	; 0x68
 8005582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005584:	b29b      	uxth	r3, r3
 8005586:	029b      	lsls	r3, r3, #10
 8005588:	b29a      	uxth	r2, r3
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	847b      	strh	r3, [r7, #34]	; 0x22
 800559c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800559e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01b      	beq.n	80055de <USB_ActivateEndpoint+0x33a>
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055bc:	843b      	strh	r3, [r7, #32]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	441a      	add	r2, r3
 80055c8:	8c3b      	ldrh	r3, [r7, #32]
 80055ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055da:	b29b      	uxth	r3, r3
 80055dc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d124      	bne.n	8005630 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fc:	83bb      	strh	r3, [r7, #28]
 80055fe:	8bbb      	ldrh	r3, [r7, #28]
 8005600:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005604:	83bb      	strh	r3, [r7, #28]
 8005606:	8bbb      	ldrh	r3, [r7, #28]
 8005608:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800560c:	83bb      	strh	r3, [r7, #28]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	441a      	add	r2, r3
 8005618:	8bbb      	ldrh	r3, [r7, #28]
 800561a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562a:	b29b      	uxth	r3, r3
 800562c:	8013      	strh	r3, [r2, #0]
 800562e:	e1ea      	b.n	8005a06 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	83fb      	strh	r3, [r7, #30]
 8005648:	8bfb      	ldrh	r3, [r7, #30]
 800564a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800564e:	83fb      	strh	r3, [r7, #30]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	8bfb      	ldrh	r3, [r7, #30]
 800565c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566c:	b29b      	uxth	r3, r3
 800566e:	8013      	strh	r3, [r2, #0]
 8005670:	e1c9      	b.n	8005a06 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	78db      	ldrb	r3, [r3, #3]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d11e      	bne.n	80056b8 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29b      	uxth	r3, r3
 8005688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005690:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]
 80056b6:	e01d      	b.n	80056f4 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005704:	4413      	add	r3, r2
 8005706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	00da      	lsls	r2, r3, #3
 800570e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005710:	4413      	add	r3, r2
 8005712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005716:	65bb      	str	r3, [r7, #88]	; 0x58
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	891b      	ldrh	r3, [r3, #8]
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	b29b      	uxth	r3, r3
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005726:	801a      	strh	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	657b      	str	r3, [r7, #84]	; 0x54
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005738:	4413      	add	r3, r2
 800573a:	657b      	str	r3, [r7, #84]	; 0x54
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	00da      	lsls	r2, r3, #3
 8005742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005744:	4413      	add	r3, r2
 8005746:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800574a:	653b      	str	r3, [r7, #80]	; 0x50
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	895b      	ldrh	r3, [r3, #10]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	b29b      	uxth	r3, r3
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	785b      	ldrb	r3, [r3, #1]
 8005760:	2b00      	cmp	r3, #0
 8005762:	f040 8093 	bne.w	800588c <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800577a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01b      	beq.n	80057ba <USB_ActivateEndpoint+0x516>
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005798:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	441a      	add	r2, r3
 80057a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80057c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01b      	beq.n	800580a <USB_ActivateEndpoint+0x566>
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80057f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005806:	b29b      	uxth	r3, r3
 8005808:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005820:	873b      	strh	r3, [r7, #56]	; 0x38
 8005822:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005824:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005828:	873b      	strh	r3, [r7, #56]	; 0x38
 800582a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800582c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005830:	873b      	strh	r3, [r7, #56]	; 0x38
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	441a      	add	r2, r3
 800583c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800583e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584e:	b29b      	uxth	r3, r3
 8005850:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005868:	86fb      	strh	r3, [r7, #54]	; 0x36
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800587a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005886:	b29b      	uxth	r3, r3
 8005888:	8013      	strh	r3, [r2, #0]
 800588a:	e0bc      	b.n	8005a06 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800589c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01d      	beq.n	80058e4 <USB_ActivateEndpoint+0x640>
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	441a      	add	r2, r3
 80058cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80058d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80058f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01d      	beq.n	800593c <USB_ActivateEndpoint+0x698>
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	441a      	add	r2, r3
 8005924:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005938:	b29b      	uxth	r3, r3
 800593a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	78db      	ldrb	r3, [r3, #3]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d024      	beq.n	800598e <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800595a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800595e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005962:	f083 0320 	eor.w	r3, r3, #32
 8005966:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	441a      	add	r2, r3
 8005974:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005988:	b29b      	uxth	r3, r3
 800598a:	8013      	strh	r3, [r2, #0]
 800598c:	e01d      	b.n	80059ca <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80059b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80059f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005a06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3774      	adds	r7, #116	; 0x74
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop

08005a18 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b08d      	sub	sp, #52	; 0x34
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	7b1b      	ldrb	r3, [r3, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 808e 	bne.w	8005b48 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d044      	beq.n	8005abe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	81bb      	strh	r3, [r7, #12]
 8005a42:	89bb      	ldrh	r3, [r7, #12]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <USB_DeactivateEndpoint+0x6c>
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	817b      	strh	r3, [r7, #10]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	441a      	add	r2, r3
 8005a6e:	897b      	ldrh	r3, [r7, #10]
 8005a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9a:	813b      	strh	r3, [r7, #8]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	893b      	ldrh	r3, [r7, #8]
 8005aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	8013      	strh	r3, [r2, #0]
 8005abc:	e192      	b.n	8005de4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	827b      	strh	r3, [r7, #18]
 8005acc:	8a7b      	ldrh	r3, [r7, #18]
 8005ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01b      	beq.n	8005b0e <USB_DeactivateEndpoint+0xf6>
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aec:	823b      	strh	r3, [r7, #16]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	441a      	add	r2, r3
 8005af8:	8a3b      	ldrh	r3, [r7, #16]
 8005afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b24:	81fb      	strh	r3, [r7, #14]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	441a      	add	r2, r3
 8005b30:	89fb      	ldrh	r3, [r7, #14]
 8005b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	8013      	strh	r3, [r2, #0]
 8005b46:	e14d      	b.n	8005de4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 80a5 	bne.w	8005c9c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	843b      	strh	r3, [r7, #32]
 8005b60:	8c3b      	ldrh	r3, [r7, #32]
 8005b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01b      	beq.n	8005ba2 <USB_DeactivateEndpoint+0x18a>
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b80:	83fb      	strh	r3, [r7, #30]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8bfb      	ldrh	r3, [r7, #30]
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	83bb      	strh	r3, [r7, #28]
 8005bb0:	8bbb      	ldrh	r3, [r7, #28]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01b      	beq.n	8005bf2 <USB_DeactivateEndpoint+0x1da>
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd0:	837b      	strh	r3, [r7, #26]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	441a      	add	r2, r3
 8005bdc:	8b7b      	ldrh	r3, [r7, #26]
 8005bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c08:	833b      	strh	r3, [r7, #24]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	441a      	add	r2, r3
 8005c14:	8b3b      	ldrh	r3, [r7, #24]
 8005c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	82fb      	strh	r3, [r7, #22]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	8afb      	ldrh	r3, [r7, #22]
 8005c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c78:	82bb      	strh	r3, [r7, #20]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	8abb      	ldrh	r3, [r7, #20]
 8005c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	8013      	strh	r3, [r2, #0]
 8005c9a:	e0a3      	b.n	8005de4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005caa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01b      	beq.n	8005cec <USB_DeactivateEndpoint+0x2d4>
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005cfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01b      	beq.n	8005d3c <USB_DeactivateEndpoint+0x324>
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	441a      	add	r2, r3
 8005d26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	441a      	add	r2, r3
 8005d5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3734      	adds	r7, #52	; 0x34
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b0c2      	sub	sp, #264	; 0x108
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e00:	6018      	str	r0, [r3, #0]
 8005e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	f040 867b 	bne.w	8006b14 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d908      	bls.n	8005e4c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e4a:	e007      	b.n	8005e5c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	7b1b      	ldrb	r3, [r3, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d13a      	bne.n	8005ee2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6959      	ldr	r1, [r3, #20]
 8005e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	88da      	ldrh	r2, [r3, #6]
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e92:	6800      	ldr	r0, [r0, #0]
 8005e94:	f001 fc1d 	bl	80076d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4413      	add	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	00da      	lsls	r2, r3, #3
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	f000 bde3 	b.w	8006aa8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	78db      	ldrb	r3, [r3, #3]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	f040 843a 	bne.w	8006768 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	f240 83b7 	bls.w	8006680 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f62:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a1a      	ldr	r2, [r3, #32]
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	1ad2      	subs	r2, r2, r3
 8005f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 81b3 	beq.w	800631a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d16d      	bne.n	80060ac <USB_EPStartXfer+0x2ba>
 8005fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	4413      	add	r3, r2
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	00da      	lsls	r2, r3, #3
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	4413      	add	r3, r2
 8006006:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
 800600c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006010:	2b3e      	cmp	r3, #62	; 0x3e
 8006012:	d91c      	bls.n	800604e <USB_EPStartXfer+0x25c>
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	2b00      	cmp	r3, #0
 8006028:	d104      	bne.n	8006034 <USB_EPStartXfer+0x242>
 800602a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800602e:	3b01      	subs	r3, #1
 8006030:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006034:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006038:	b29b      	uxth	r3, r3
 800603a:	029b      	lsls	r3, r3, #10
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e053      	b.n	80060f6 <USB_EPStartXfer+0x304>
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006052:	2b00      	cmp	r3, #0
 8006054:	d112      	bne.n	800607c <USB_EPStartXfer+0x28a>
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006060:	b29a      	uxth	r2, r3
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006074:	b29a      	uxth	r2, r3
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e03c      	b.n	80060f6 <USB_EPStartXfer+0x304>
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <USB_EPStartXfer+0x2aa>
 8006092:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006096:	3301      	adds	r3, #1
 8006098:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800609c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e024      	b.n	80060f6 <USB_EPStartXfer+0x304>
 80060ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d11c      	bne.n	80060f6 <USB_EPStartXfer+0x304>
 80060bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	4413      	add	r3, r2
 80060d2:	633b      	str	r3, [r7, #48]	; 0x30
 80060d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00da      	lsls	r2, r3, #3
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	4413      	add	r3, r2
 80060e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	895b      	ldrh	r3, [r3, #10]
 8006102:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6959      	ldr	r1, [r3, #20]
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006116:	b29b      	uxth	r3, r3
 8006118:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800611c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006120:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006124:	6800      	ldr	r0, [r0, #0]
 8006126:	f001 fad4 	bl	80076d2 <USB_WritePMA>
            ep->xfer_buff += len;
 800612a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613a:	441a      	add	r2, r3
 800613c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	d90f      	bls.n	8006184 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006174:	1ad2      	subs	r2, r2, r3
 8006176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	621a      	str	r2, [r3, #32]
 8006182:	e00e      	b.n	80061a2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d16d      	bne.n	800628e <USB_EPStartXfer+0x49c>
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	4413      	add	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	00da      	lsls	r2, r3, #3
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	4413      	add	r3, r2
 80061e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f2:	2b3e      	cmp	r3, #62	; 0x3e
 80061f4:	d91c      	bls.n	8006230 <USB_EPStartXfer+0x43e>
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <USB_EPStartXfer+0x424>
 800620c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006210:	3b01      	subs	r3, #1
 8006212:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800621a:	b29b      	uxth	r3, r3
 800621c:	029b      	lsls	r3, r3, #10
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006228:	b29a      	uxth	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e059      	b.n	80062e4 <USB_EPStartXfer+0x4f2>
 8006230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006234:	2b00      	cmp	r3, #0
 8006236:	d112      	bne.n	800625e <USB_EPStartXfer+0x46c>
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006242:	b29a      	uxth	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006256:	b29a      	uxth	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e042      	b.n	80062e4 <USB_EPStartXfer+0x4f2>
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <USB_EPStartXfer+0x48c>
 8006274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006278:	3301      	adds	r3, #1
 800627a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800627e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006282:	b29b      	uxth	r3, r3
 8006284:	029b      	lsls	r3, r3, #10
 8006286:	b29a      	uxth	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	e02a      	b.n	80062e4 <USB_EPStartXfer+0x4f2>
 800628e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d122      	bne.n	80062e4 <USB_EPStartXfer+0x4f2>
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	4413      	add	r3, r2
 80062c0:	623b      	str	r3, [r7, #32]
 80062c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	00da      	lsls	r2, r3, #3
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	4413      	add	r3, r2
 80062d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062de:	b29a      	uxth	r2, r3
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80062e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	891b      	ldrh	r3, [r3, #8]
 80062f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6959      	ldr	r1, [r3, #20]
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006304:	b29b      	uxth	r3, r3
 8006306:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800630a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800630e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006312:	6800      	ldr	r0, [r0, #0]
 8006314:	f001 f9dd 	bl	80076d2 <USB_WritePMA>
 8006318:	e3c6      	b.n	8006aa8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d16d      	bne.n	8006406 <USB_EPStartXfer+0x614>
 800632a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	64bb      	str	r3, [r7, #72]	; 0x48
 8006336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006344:	b29b      	uxth	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800634a:	4413      	add	r3, r2
 800634c:	64bb      	str	r3, [r7, #72]	; 0x48
 800634e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	00da      	lsls	r2, r3, #3
 800635c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800635e:	4413      	add	r3, r2
 8006360:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006364:	647b      	str	r3, [r7, #68]	; 0x44
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636a:	2b3e      	cmp	r3, #62	; 0x3e
 800636c:	d91c      	bls.n	80063a8 <USB_EPStartXfer+0x5b6>
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <USB_EPStartXfer+0x59c>
 8006384:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006388:	3b01      	subs	r3, #1
 800638a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800638e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006392:	b29b      	uxth	r3, r3
 8006394:	029b      	lsls	r3, r3, #10
 8006396:	b29b      	uxth	r3, r3
 8006398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	e059      	b.n	800645c <USB_EPStartXfer+0x66a>
 80063a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d112      	bne.n	80063d6 <USB_EPStartXfer+0x5e4>
 80063b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e042      	b.n	800645c <USB_EPStartXfer+0x66a>
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063da:	085b      	lsrs	r3, r3, #1
 80063dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <USB_EPStartXfer+0x604>
 80063ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063f0:	3301      	adds	r3, #1
 80063f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	029b      	lsls	r3, r3, #10
 80063fe:	b29a      	uxth	r2, r3
 8006400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e02a      	b.n	800645c <USB_EPStartXfer+0x66a>
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d122      	bne.n	800645c <USB_EPStartXfer+0x66a>
 8006416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	653b      	str	r3, [r7, #80]	; 0x50
 8006422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006430:	b29b      	uxth	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006436:	4413      	add	r3, r2
 8006438:	653b      	str	r3, [r7, #80]	; 0x50
 800643a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	00da      	lsls	r2, r3, #3
 8006448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800644a:	4413      	add	r3, r2
 800644c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006456:	b29a      	uxth	r2, r3
 8006458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800645c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	891b      	ldrh	r3, [r3, #8]
 8006468:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800646c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6959      	ldr	r1, [r3, #20]
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	b29b      	uxth	r3, r3
 800647e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006482:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006486:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800648a:	6800      	ldr	r0, [r0, #0]
 800648c:	f001 f921 	bl	80076d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a0:	441a      	add	r2, r3
 80064a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6a1a      	ldr	r2, [r3, #32]
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d90f      	bls.n	80064ea <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80064ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6a1a      	ldr	r2, [r3, #32]
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	621a      	str	r2, [r3, #32]
 80064e8:	e00e      	b.n	8006508 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80064ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80064fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2200      	movs	r2, #0
 8006506:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	643b      	str	r3, [r7, #64]	; 0x40
 8006514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d16d      	bne.n	8006600 <USB_EPStartXfer+0x80e>
 8006524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653e:	b29b      	uxth	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	4413      	add	r3, r2
 8006546:	63bb      	str	r3, [r7, #56]	; 0x38
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	00da      	lsls	r2, r3, #3
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	4413      	add	r3, r2
 800655a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800655e:	637b      	str	r3, [r7, #52]	; 0x34
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006564:	2b3e      	cmp	r3, #62	; 0x3e
 8006566:	d91c      	bls.n	80065a2 <USB_EPStartXfer+0x7b0>
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656c:	095b      	lsrs	r3, r3, #5
 800656e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <USB_EPStartXfer+0x796>
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	3b01      	subs	r3, #1
 8006584:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658c:	b29b      	uxth	r3, r3
 800658e:	029b      	lsls	r3, r3, #10
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29a      	uxth	r2, r3
 800659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	e053      	b.n	800664a <USB_EPStartXfer+0x858>
 80065a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d112      	bne.n	80065d0 <USB_EPStartXfer+0x7de>
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e03c      	b.n	800664a <USB_EPStartXfer+0x858>
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <USB_EPStartXfer+0x7fe>
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ea:	3301      	adds	r3, #1
 80065ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	029b      	lsls	r3, r3, #10
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	e024      	b.n	800664a <USB_EPStartXfer+0x858>
 8006600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d11c      	bne.n	800664a <USB_EPStartXfer+0x858>
 8006610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006624:	4413      	add	r3, r2
 8006626:	643b      	str	r3, [r7, #64]	; 0x40
 8006628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	00da      	lsls	r2, r3, #3
 8006636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006638:	4413      	add	r3, r2
 800663a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006644:	b29a      	uxth	r2, r3
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800664a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	895b      	ldrh	r3, [r3, #10]
 8006656:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800665a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6959      	ldr	r1, [r3, #20]
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666a:	b29b      	uxth	r3, r3
 800666c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006670:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006674:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006678:	6800      	ldr	r0, [r0, #0]
 800667a:	f001 f82a 	bl	80076d2 <USB_WritePMA>
 800667e:	e213      	b.n	8006aa8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80066ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	441a      	add	r2, r3
 80066d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80066d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006706:	b29b      	uxth	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800670c:	4413      	add	r3, r2
 800670e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	00da      	lsls	r2, r3, #3
 800671e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006720:	4413      	add	r3, r2
 8006722:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006726:	65bb      	str	r3, [r7, #88]	; 0x58
 8006728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672c:	b29a      	uxth	r2, r3
 800672e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006730:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	891b      	ldrh	r3, [r3, #8]
 800673e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6959      	ldr	r1, [r3, #20]
 800674e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006752:	b29b      	uxth	r3, r3
 8006754:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006758:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800675c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006760:	6800      	ldr	r0, [r0, #0]
 8006762:	f000 ffb6 	bl	80076d2 <USB_WritePMA>
 8006766:	e19f      	b.n	8006aa8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a1a      	ldr	r2, [r3, #32]
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 80bc 	beq.w	8006926 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	673b      	str	r3, [r7, #112]	; 0x70
 80067ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d16d      	bne.n	80068a6 <USB_EPStartXfer+0xab4>
 80067ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80067d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067ea:	4413      	add	r3, r2
 80067ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	00da      	lsls	r2, r3, #3
 80067fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067fe:	4413      	add	r3, r2
 8006800:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006804:	667b      	str	r3, [r7, #100]	; 0x64
 8006806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680a:	2b3e      	cmp	r3, #62	; 0x3e
 800680c:	d91c      	bls.n	8006848 <USB_EPStartXfer+0xa56>
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <USB_EPStartXfer+0xa3c>
 8006824:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006828:	3b01      	subs	r3, #1
 800682a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800682e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006832:	b29b      	uxth	r3, r3
 8006834:	029b      	lsls	r3, r3, #10
 8006836:	b29b      	uxth	r3, r3
 8006838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006840:	b29a      	uxth	r2, r3
 8006842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	e053      	b.n	80068f0 <USB_EPStartXfer+0xafe>
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684c:	2b00      	cmp	r3, #0
 800684e:	d112      	bne.n	8006876 <USB_EPStartXfer+0xa84>
 8006850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800685a:	b29a      	uxth	r2, r3
 800685c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686e:	b29a      	uxth	r2, r3
 8006870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	e03c      	b.n	80068f0 <USB_EPStartXfer+0xafe>
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <USB_EPStartXfer+0xaa4>
 800688c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006890:	3301      	adds	r3, #1
 8006892:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006896:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800689a:	b29b      	uxth	r3, r3
 800689c:	029b      	lsls	r3, r3, #10
 800689e:	b29a      	uxth	r2, r3
 80068a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a2:	801a      	strh	r2, [r3, #0]
 80068a4:	e024      	b.n	80068f0 <USB_EPStartXfer+0xafe>
 80068a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d11c      	bne.n	80068f0 <USB_EPStartXfer+0xafe>
 80068b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ca:	4413      	add	r3, r2
 80068cc:	673b      	str	r3, [r7, #112]	; 0x70
 80068ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	00da      	lsls	r2, r3, #3
 80068dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068de:	4413      	add	r3, r2
 80068e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	895b      	ldrh	r3, [r3, #10]
 80068fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6959      	ldr	r1, [r3, #20]
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006910:	b29b      	uxth	r3, r3
 8006912:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006916:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800691a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800691e:	6800      	ldr	r0, [r0, #0]
 8006920:	f000 fed7 	bl	80076d2 <USB_WritePMA>
 8006924:	e0c0      	b.n	8006aa8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	785b      	ldrb	r3, [r3, #1]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d16d      	bne.n	8006a12 <USB_EPStartXfer+0xc20>
 8006936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006950:	b29b      	uxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006956:	4413      	add	r3, r2
 8006958:	67fb      	str	r3, [r7, #124]	; 0x7c
 800695a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	00da      	lsls	r2, r3, #3
 8006968:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800696a:	4413      	add	r3, r2
 800696c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006970:	67bb      	str	r3, [r7, #120]	; 0x78
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006976:	2b3e      	cmp	r3, #62	; 0x3e
 8006978:	d91c      	bls.n	80069b4 <USB_EPStartXfer+0xbc2>
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <USB_EPStartXfer+0xba8>
 8006990:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006994:	3b01      	subs	r3, #1
 8006996:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800699a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800699e:	b29b      	uxth	r3, r3
 80069a0:	029b      	lsls	r3, r3, #10
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	e05f      	b.n	8006a74 <USB_EPStartXfer+0xc82>
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d112      	bne.n	80069e2 <USB_EPStartXfer+0xbf0>
 80069bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069da:	b29a      	uxth	r2, r3
 80069dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	e048      	b.n	8006a74 <USB_EPStartXfer+0xc82>
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <USB_EPStartXfer+0xc10>
 80069f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069fc:	3301      	adds	r3, #1
 80069fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	029b      	lsls	r3, r3, #10
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e030      	b.n	8006a74 <USB_EPStartXfer+0xc82>
 8006a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d128      	bne.n	8006a74 <USB_EPStartXfer+0xc82>
 8006a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a46:	4413      	add	r3, r2
 8006a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	00da      	lsls	r2, r3, #3
 8006a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a5e:	4413      	add	r3, r2
 8006a60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	891b      	ldrh	r3, [r3, #8]
 8006a80:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6959      	ldr	r1, [r3, #20]
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006aa2:	6800      	ldr	r0, [r0, #0]
 8006aa4:	f000 fe15 	bl	80076d2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ace:	817b      	strh	r3, [r7, #10]
 8006ad0:	897b      	ldrh	r3, [r7, #10]
 8006ad2:	f083 0310 	eor.w	r3, r3, #16
 8006ad6:	817b      	strh	r3, [r7, #10]
 8006ad8:	897b      	ldrh	r3, [r7, #10]
 8006ada:	f083 0320 	eor.w	r3, r3, #32
 8006ade:	817b      	strh	r3, [r7, #10]
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	897b      	ldrh	r3, [r7, #10]
 8006afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]
 8006b10:	f000 bc9f 	b.w	8007452 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	7b1b      	ldrb	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f040 80ae 	bne.w	8006c82 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d917      	bls.n	8006b72 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	619a      	str	r2, [r3, #24]
 8006b70:	e00e      	b.n	8006b90 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	00da      	lsls	r2, r3, #3
 8006bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bcc:	4413      	add	r3, r2
 8006bce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bda:	2b3e      	cmp	r3, #62	; 0x3e
 8006bdc:	d91d      	bls.n	8006c1a <USB_EPStartXfer+0xe28>
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <USB_EPStartXfer+0xe0c>
 8006bf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	029b      	lsls	r3, r3, #10
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	e3e1      	b.n	80073de <USB_EPStartXfer+0x15ec>
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d116      	bne.n	8006c50 <USB_EPStartXfer+0xe5e>
 8006c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c4c:	801a      	strh	r2, [r3, #0]
 8006c4e:	e3c6      	b.n	80073de <USB_EPStartXfer+0x15ec>
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c54:	085b      	lsrs	r3, r3, #1
 8006c56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d004      	beq.n	8006c70 <USB_EPStartXfer+0xe7e>
 8006c66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	029b      	lsls	r3, r3, #10
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c7e:	801a      	strh	r2, [r3, #0]
 8006c80:	e3ad      	b.n	80073de <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	78db      	ldrb	r3, [r3, #3]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	f040 8200 	bne.w	8007094 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 8091 	bne.w	8006dc8 <USB_EPStartXfer+0xfd6>
 8006ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cca:	4413      	add	r3, r2
 8006ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	00da      	lsls	r2, r3, #3
 8006cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cfa:	d925      	bls.n	8006d48 <USB_EPStartXfer+0xf56>
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <USB_EPStartXfer+0xf3a>
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	3b01      	subs	r3, #1
 8006d28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	029b      	lsls	r3, r3, #10
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	e074      	b.n	8006e32 <USB_EPStartXfer+0x1040>
 8006d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d116      	bne.n	8006d86 <USB_EPStartXfer+0xf94>
 8006d58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e055      	b.n	8006e32 <USB_EPStartXfer+0x1040>
 8006d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d004      	beq.n	8006db6 <USB_EPStartXfer+0xfc4>
 8006dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db0:	3301      	adds	r3, #1
 8006db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	029b      	lsls	r3, r3, #10
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	e034      	b.n	8006e32 <USB_EPStartXfer+0x1040>
 8006dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d12c      	bne.n	8006e32 <USB_EPStartXfer+0x1040>
 8006dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ddc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	00da      	lsls	r2, r3, #3
 8006e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 8091 	bne.w	8006f74 <USB_EPStartXfer+0x1182>
 8006e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e76:	4413      	add	r3, r2
 8006e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	00da      	lsls	r2, r3, #3
 8006e8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e8e:	4413      	add	r3, r2
 8006e90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ea6:	d925      	bls.n	8006ef4 <USB_EPStartXfer+0x1102>
 8006ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <USB_EPStartXfer+0x10e6>
 8006ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	029b      	lsls	r3, r3, #10
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	e06d      	b.n	8006fd0 <USB_EPStartXfer+0x11de>
 8006ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d116      	bne.n	8006f32 <USB_EPStartXfer+0x1140>
 8006f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f2e:	801a      	strh	r2, [r3, #0]
 8006f30:	e04e      	b.n	8006fd0 <USB_EPStartXfer+0x11de>
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <USB_EPStartXfer+0x1170>
 8006f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	029b      	lsls	r3, r3, #10
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	e02d      	b.n	8006fd0 <USB_EPStartXfer+0x11de>
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d125      	bne.n	8006fd0 <USB_EPStartXfer+0x11de>
 8006f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	00da      	lsls	r2, r3, #3
 8006fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 81fe 	beq.w	80073de <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007002:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <USB_EPStartXfer+0x1228>
 800700e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10d      	bne.n	8007036 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800701a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800701e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 81db 	bne.w	80073de <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007028:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800702c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	f040 81d4 	bne.w	80073de <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	441a      	add	r2, r3
 800707a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800707e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800708a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800708e:	b29b      	uxth	r3, r3
 8007090:	8013      	strh	r3, [r2, #0]
 8007092:	e1a4      	b.n	80073de <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	78db      	ldrb	r3, [r3, #3]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	f040 819a 	bne.w	80073da <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699a      	ldr	r2, [r3, #24]
 80070b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d917      	bls.n	80070f2 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80070c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80070d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	619a      	str	r2, [r3, #24]
 80070f0:	e00e      	b.n	8007110 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80070f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2200      	movs	r2, #0
 800710e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d178      	bne.n	8007212 <USB_EPStartXfer+0x1420>
 8007120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800712e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713c:	b29b      	uxth	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007144:	4413      	add	r3, r2
 8007146:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800714a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	00da      	lsls	r2, r3, #3
 8007158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800715c:	4413      	add	r3, r2
 800715e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007162:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716a:	2b3e      	cmp	r3, #62	; 0x3e
 800716c:	d91d      	bls.n	80071aa <USB_EPStartXfer+0x13b8>
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <USB_EPStartXfer+0x139c>
 8007184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007188:	3b01      	subs	r3, #1
 800718a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800718e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007192:	b29b      	uxth	r3, r3
 8007194:	029b      	lsls	r3, r3, #10
 8007196:	b29b      	uxth	r3, r3
 8007198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	e064      	b.n	8007274 <USB_EPStartXfer+0x1482>
 80071aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d116      	bne.n	80071e0 <USB_EPStartXfer+0x13ee>
 80071b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071dc:	801a      	strh	r2, [r3, #0]
 80071de:	e049      	b.n	8007274 <USB_EPStartXfer+0x1482>
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e4:	085b      	lsrs	r3, r3, #1
 80071e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d004      	beq.n	8007200 <USB_EPStartXfer+0x140e>
 80071f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071fa:	3301      	adds	r3, #1
 80071fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007204:	b29b      	uxth	r3, r3
 8007206:	029b      	lsls	r3, r3, #10
 8007208:	b29a      	uxth	r2, r3
 800720a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	e030      	b.n	8007274 <USB_EPStartXfer+0x1482>
 8007212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d128      	bne.n	8007274 <USB_EPStartXfer+0x1482>
 8007222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007246:	4413      	add	r3, r2
 8007248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800724c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	00da      	lsls	r2, r3, #3
 800725a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800725e:	4413      	add	r3, r2
 8007260:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d178      	bne.n	8007384 <USB_EPStartXfer+0x1592>
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072b6:	4413      	add	r3, r2
 80072b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	00da      	lsls	r2, r3, #3
 80072ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072ce:	4413      	add	r3, r2
 80072d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072dc:	2b3e      	cmp	r3, #62	; 0x3e
 80072de:	d91d      	bls.n	800731c <USB_EPStartXfer+0x152a>
 80072e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e4:	095b      	lsrs	r3, r3, #5
 80072e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d104      	bne.n	8007300 <USB_EPStartXfer+0x150e>
 80072f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072fa:	3b01      	subs	r3, #1
 80072fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007304:	b29b      	uxth	r3, r3
 8007306:	029b      	lsls	r3, r3, #10
 8007308:	b29b      	uxth	r3, r3
 800730a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007312:	b29a      	uxth	r2, r3
 8007314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007318:	801a      	strh	r2, [r3, #0]
 800731a:	e060      	b.n	80073de <USB_EPStartXfer+0x15ec>
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007320:	2b00      	cmp	r3, #0
 8007322:	d116      	bne.n	8007352 <USB_EPStartXfer+0x1560>
 8007324:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007330:	b29a      	uxth	r2, r3
 8007332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007336:	801a      	strh	r2, [r3, #0]
 8007338:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007348:	b29a      	uxth	r2, r3
 800734a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e045      	b.n	80073de <USB_EPStartXfer+0x15ec>
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800735c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d004      	beq.n	8007372 <USB_EPStartXfer+0x1580>
 8007368:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800736c:	3301      	adds	r3, #1
 800736e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007376:	b29b      	uxth	r3, r3
 8007378:	029b      	lsls	r3, r3, #10
 800737a:	b29a      	uxth	r2, r3
 800737c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007380:	801a      	strh	r2, [r3, #0]
 8007382:	e02c      	b.n	80073de <USB_EPStartXfer+0x15ec>
 8007384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d124      	bne.n	80073de <USB_EPStartXfer+0x15ec>
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073aa:	4413      	add	r3, r2
 80073ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	00da      	lsls	r2, r3, #3
 80073be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073c2:	4413      	add	r3, r2
 80073c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	e001      	b.n	80073de <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e03a      	b.n	8007454 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007404:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007408:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800740c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007410:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007414:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007418:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800741c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	441a      	add	r2, r3
 800743a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800743e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800744a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d020      	beq.n	80074b2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007486:	81bb      	strh	r3, [r7, #12]
 8007488:	89bb      	ldrh	r3, [r7, #12]
 800748a:	f083 0310 	eor.w	r3, r3, #16
 800748e:	81bb      	strh	r3, [r7, #12]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	441a      	add	r2, r3
 800749a:	89bb      	ldrh	r3, [r7, #12]
 800749c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	8013      	strh	r3, [r2, #0]
 80074b0:	e01f      	b.n	80074f2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c8:	81fb      	strh	r3, [r7, #14]
 80074ca:	89fb      	ldrh	r3, [r7, #14]
 80074cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074d0:	81fb      	strh	r3, [r7, #14]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	441a      	add	r2, r3
 80074dc:	89fb      	ldrh	r3, [r7, #14]
 80074de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	7b1b      	ldrb	r3, [r3, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f040 809d 	bne.w	800764e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d04c      	beq.n	80075b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	823b      	strh	r3, [r7, #16]
 800752a:	8a3b      	ldrh	r3, [r7, #16]
 800752c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d01b      	beq.n	800756c <USB_EPClearStall+0x6c>
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754a:	81fb      	strh	r3, [r7, #14]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	441a      	add	r2, r3
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007564:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007568:	b29b      	uxth	r3, r3
 800756a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	78db      	ldrb	r3, [r3, #3]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d06c      	beq.n	800764e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800758a:	81bb      	strh	r3, [r7, #12]
 800758c:	89bb      	ldrh	r3, [r7, #12]
 800758e:	f083 0320 	eor.w	r3, r3, #32
 8007592:	81bb      	strh	r3, [r7, #12]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	441a      	add	r2, r3
 800759e:	89bb      	ldrh	r3, [r7, #12]
 80075a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	8013      	strh	r3, [r2, #0]
 80075b4:	e04b      	b.n	800764e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	82fb      	strh	r3, [r7, #22]
 80075c4:	8afb      	ldrh	r3, [r7, #22]
 80075c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d01b      	beq.n	8007606 <USB_EPClearStall+0x106>
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e4:	82bb      	strh	r3, [r7, #20]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	441a      	add	r2, r3
 80075f0:	8abb      	ldrh	r3, [r7, #20]
 80075f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007602:	b29b      	uxth	r3, r3
 8007604:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761c:	827b      	strh	r3, [r7, #18]
 800761e:	8a7b      	ldrh	r3, [r7, #18]
 8007620:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007624:	827b      	strh	r3, [r7, #18]
 8007626:	8a7b      	ldrh	r3, [r7, #18]
 8007628:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800762c:	827b      	strh	r3, [r7, #18]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	441a      	add	r2, r3
 8007638:	8a7b      	ldrh	r3, [r7, #18]
 800763a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800763e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764a:	b29b      	uxth	r3, r3
 800764c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	371c      	adds	r7, #28
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2280      	movs	r2, #128	; 0x80
 8007672:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007692:	b29b      	uxth	r3, r3
 8007694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769c:	b29a      	uxth	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076c4:	68fb      	ldr	r3, [r7, #12]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b08b      	sub	sp, #44	; 0x2c
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	4611      	mov	r1, r2
 80076de:	461a      	mov	r2, r3
 80076e0:	460b      	mov	r3, r1
 80076e2:	80fb      	strh	r3, [r7, #6]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076e8:	88bb      	ldrh	r3, [r7, #4]
 80076ea:	3301      	adds	r3, #1
 80076ec:	085b      	lsrs	r3, r3, #1
 80076ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076f8:	88fa      	ldrh	r2, [r7, #6]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007702:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
 8007708:	e01b      	b.n	8007742 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	3301      	adds	r3, #1
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	b21a      	sxth	r2, r3
 800771a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800771e:	4313      	orrs	r3, r2
 8007720:	b21b      	sxth	r3, r3
 8007722:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	8a7a      	ldrh	r2, [r7, #18]
 8007728:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	3302      	adds	r3, #2
 800772e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	3301      	adds	r3, #1
 8007734:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	3301      	adds	r3, #1
 800773a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	3b01      	subs	r3, #1
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e0      	bne.n	800770a <USB_WritePMA+0x38>
  }
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	372c      	adds	r7, #44	; 0x2c
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007756:	b480      	push	{r7}
 8007758:	b08b      	sub	sp, #44	; 0x2c
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	4611      	mov	r1, r2
 8007762:	461a      	mov	r2, r3
 8007764:	460b      	mov	r3, r1
 8007766:	80fb      	strh	r3, [r7, #6]
 8007768:	4613      	mov	r3, r2
 800776a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800776c:	88bb      	ldrh	r3, [r7, #4]
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	b29b      	uxth	r3, r3
 8007772:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800777c:	88fa      	ldrh	r2, [r7, #6]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007786:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
 800778c:	e018      	b.n	80077c0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	3302      	adds	r3, #2
 800779a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	0a1b      	lsrs	r3, r3, #8
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	3301      	adds	r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	3b01      	subs	r3, #1
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e3      	bne.n	800778e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80077c6:	88bb      	ldrh	r3, [r7, #4]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d007      	beq.n	80077e2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	701a      	strb	r2, [r3, #0]
  }
}
 80077e2:	bf00      	nop
 80077e4:	372c      	adds	r7, #44	; 0x2c
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077fa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077fe:	f002 f95b 	bl	8009ab8 <USBD_static_malloc>
 8007802:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d105      	bne.n	8007816 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007812:	2302      	movs	r3, #2
 8007814:	e066      	b.n	80078e4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7c1b      	ldrb	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d119      	bne.n	800785a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800782a:	2202      	movs	r2, #2
 800782c:	2181      	movs	r1, #129	; 0x81
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 ffe7 	bl	8009802 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800783a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800783e:	2202      	movs	r2, #2
 8007840:	2101      	movs	r1, #1
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 ffdd 	bl	8009802 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2210      	movs	r2, #16
 8007854:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007858:	e016      	b.n	8007888 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800785a:	2340      	movs	r3, #64	; 0x40
 800785c:	2202      	movs	r2, #2
 800785e:	2181      	movs	r1, #129	; 0x81
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 ffce 	bl	8009802 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800786c:	2340      	movs	r3, #64	; 0x40
 800786e:	2202      	movs	r2, #2
 8007870:	2101      	movs	r1, #1
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 ffc5 	bl	8009802 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2210      	movs	r2, #16
 8007884:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007888:	2308      	movs	r3, #8
 800788a:	2203      	movs	r2, #3
 800788c:	2182      	movs	r1, #130	; 0x82
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 ffb7 	bl	8009802 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7c1b      	ldrb	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d109      	bne.n	80078d2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078c8:	2101      	movs	r1, #1
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f002 f889 	bl	80099e2 <USBD_LL_PrepareReceive>
 80078d0:	e007      	b.n	80078e2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078d8:	2340      	movs	r3, #64	; 0x40
 80078da:	2101      	movs	r1, #1
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f002 f880 	bl	80099e2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078f8:	2181      	movs	r1, #129	; 0x81
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 ffa7 	bl	800984e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007906:	2101      	movs	r1, #1
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 ffa0 	bl	800984e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007916:	2182      	movs	r1, #130	; 0x82
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 ff98 	bl	800984e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00e      	beq.n	8007956 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007948:	4618      	mov	r0, r3
 800794a:	f002 f8c3 	bl	8009ad4 <USBD_static_free>
    pdev->pClassData = NULL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007970:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e0af      	b.n	8007ae8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007990:	2b00      	cmp	r3, #0
 8007992:	d03f      	beq.n	8007a14 <USBD_CDC_Setup+0xb4>
 8007994:	2b20      	cmp	r3, #32
 8007996:	f040 809f 	bne.w	8007ad8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d02e      	beq.n	8007a00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	b25b      	sxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da16      	bge.n	80079da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80079b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	88d2      	ldrh	r2, [r2, #6]
 80079be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	88db      	ldrh	r3, [r3, #6]
 80079c4:	2b07      	cmp	r3, #7
 80079c6:	bf28      	it	cs
 80079c8:	2307      	movcs	r3, #7
 80079ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	89fa      	ldrh	r2, [r7, #14]
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 facf 	bl	8008f76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80079d8:	e085      	b.n	8007ae6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	785a      	ldrb	r2, [r3, #1]
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	88db      	ldrh	r3, [r3, #6]
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079f0:	6939      	ldr	r1, [r7, #16]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	88db      	ldrh	r3, [r3, #6]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 fae8 	bl	8008fce <USBD_CtlPrepareRx>
      break;
 80079fe:	e072      	b.n	8007ae6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	7850      	ldrb	r0, [r2, #1]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	4798      	blx	r3
      break;
 8007a12:	e068      	b.n	8007ae6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b0b      	cmp	r3, #11
 8007a1a:	d852      	bhi.n	8007ac2 <USBD_CDC_Setup+0x162>
 8007a1c:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <USBD_CDC_Setup+0xc4>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a55 	.word	0x08007a55
 8007a28:	08007ad1 	.word	0x08007ad1
 8007a2c:	08007ac3 	.word	0x08007ac3
 8007a30:	08007ac3 	.word	0x08007ac3
 8007a34:	08007ac3 	.word	0x08007ac3
 8007a38:	08007ac3 	.word	0x08007ac3
 8007a3c:	08007ac3 	.word	0x08007ac3
 8007a40:	08007ac3 	.word	0x08007ac3
 8007a44:	08007ac3 	.word	0x08007ac3
 8007a48:	08007ac3 	.word	0x08007ac3
 8007a4c:	08007a7f 	.word	0x08007a7f
 8007a50:	08007aa9 	.word	0x08007aa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d107      	bne.n	8007a70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a60:	f107 030a 	add.w	r3, r7, #10
 8007a64:	2202      	movs	r2, #2
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fa84 	bl	8008f76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a6e:	e032      	b.n	8007ad6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fa0e 	bl	8008e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7c:	e02b      	b.n	8007ad6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d107      	bne.n	8007a9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a8a:	f107 030d 	add.w	r3, r7, #13
 8007a8e:	2201      	movs	r2, #1
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fa6f 	bl	8008f76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a98:	e01d      	b.n	8007ad6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f9f9 	bl	8008e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8007aa6:	e016      	b.n	8007ad6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d00f      	beq.n	8007ad4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 f9ec 	bl	8008e94 <USBD_CtlError>
            ret = USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ac0:	e008      	b.n	8007ad4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 f9e5 	bl	8008e94 <USBD_CtlError>
          ret = USBD_FAIL;
 8007aca:	2303      	movs	r3, #3
 8007acc:	75fb      	strb	r3, [r7, #23]
          break;
 8007ace:	e002      	b.n	8007ad6 <USBD_CDC_Setup+0x176>
          break;
 8007ad0:	bf00      	nop
 8007ad2:	e008      	b.n	8007ae6 <USBD_CDC_Setup+0x186>
          break;
 8007ad4:	bf00      	nop
      }
      break;
 8007ad6:	e006      	b.n	8007ae6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 f9da 	bl	8008e94 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e04f      	b.n	8007bb2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	3318      	adds	r3, #24
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d029      	beq.n	8007b84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	3318      	adds	r3, #24
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	78f9      	ldrb	r1, [r7, #3]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	460b      	mov	r3, r1
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4403      	add	r3, r0
 8007b50:	333c      	adds	r3, #60	; 0x3c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b58:	fb01 f303 	mul.w	r3, r1, r3
 8007b5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d110      	bne.n	8007b84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	3318      	adds	r3, #24
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b76:	78f9      	ldrb	r1, [r7, #3]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 ff0f 	bl	80099a0 <USBD_LL_Transmit>
 8007b82:	e015      	b.n	8007bb0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007bac:	78fa      	ldrb	r2, [r7, #3]
 8007bae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e015      	b.n	8007c08 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 ff1f 	bl	8009a24 <USBD_LL_GetRxDataSize>
 8007be6:	4602      	mov	r2, r0
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c02:	4611      	mov	r1, r2
 8007c04:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e01b      	b.n	8007c62 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d015      	beq.n	8007c60 <USBD_CDC_EP0_RxReady+0x50>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c3a:	2bff      	cmp	r3, #255	; 0xff
 8007c3c:	d010      	beq.n	8007c60 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007c4c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c54:	b292      	uxth	r2, r2
 8007c56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	22ff      	movs	r2, #255	; 0xff
 8007c5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2243      	movs	r2, #67	; 0x43
 8007c78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c7a:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	20000098 	.word	0x20000098

08007c8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2243      	movs	r2, #67	; 0x43
 8007c98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c9a:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	20000054 	.word	0x20000054

08007cac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2243      	movs	r2, #67	; 0x43
 8007cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007cba:	4b03      	ldr	r3, [pc, #12]	; (8007cc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	200000dc 	.word	0x200000dc

08007ccc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	220a      	movs	r2, #10
 8007cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007cda:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	20000010 	.word	0x20000010

08007cec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e004      	b.n	8007d0a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b087      	sub	sp, #28
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d28:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e008      	b.n	8007d46 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b085      	sub	sp, #20
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e004      	b.n	8007d78 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d92:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e01a      	b.n	8007ddc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d114      	bne.n	8007dda <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007dce:	2181      	movs	r1, #129	; 0x81
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fde5 	bl	80099a0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e016      	b.n	8007e30 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7c1b      	ldrb	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d109      	bne.n	8007e1e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e14:	2101      	movs	r1, #1
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fde3 	bl	80099e2 <USBD_LL_PrepareReceive>
 8007e1c:	e007      	b.n	8007e2e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e24:	2340      	movs	r3, #64	; 0x40
 8007e26:	2101      	movs	r1, #1
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 fdda 	bl	80099e2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4613      	mov	r3, r2
 8007e44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e01f      	b.n	8007e90 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	79fa      	ldrb	r2, [r7, #7]
 8007e82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f001 fc3f 	bl	8009708 <USBD_LL_Init>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e016      	b.n	8007ede <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00b      	beq.n	8007edc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	f107 020e 	add.w	r2, r7, #14
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fc6c 	bl	80097cc <USBD_LL_Start>
 8007ef4:	4603      	mov	r3, r0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f20:	2303      	movs	r3, #3
 8007f22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d009      	beq.n	8007f42 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	4611      	mov	r1, r2
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	4798      	blx	r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d007      	beq.n	8007f72 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	78fa      	ldrb	r2, [r7, #3]
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
  }

  return USBD_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 ff46 	bl	8008e20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d01a      	beq.n	8007fee <USBD_LL_SetupStage+0x72>
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d822      	bhi.n	8008002 <USBD_LL_SetupStage+0x86>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <USBD_LL_SetupStage+0x4a>
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d00a      	beq.n	8007fda <USBD_LL_SetupStage+0x5e>
 8007fc4:	e01d      	b.n	8008002 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f9ee 	bl	80083b0 <USBD_StdDevReq>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd8:	e020      	b.n	800801c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa52 	bl	800848c <USBD_StdItfReq>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
      break;
 8007fec:	e016      	b.n	800801c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fa91 	bl	800851e <USBD_StdEPReq>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8008000:	e00c      	b.n	800801c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800800c:	b2db      	uxtb	r3, r3
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 fc3b 	bl	800988c <USBD_LL_StallEP>
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]
      break;
 800801a:	bf00      	nop
  }

  return ret;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b086      	sub	sp, #24
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	460b      	mov	r3, r1
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d138      	bne.n	80080ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008040:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008048:	2b03      	cmp	r3, #3
 800804a:	d14a      	bne.n	80080e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	429a      	cmp	r2, r3
 8008056:	d913      	bls.n	8008080 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	1ad2      	subs	r2, r2, r3
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	4293      	cmp	r3, r2
 8008070:	bf28      	it	cs
 8008072:	4613      	movcs	r3, r2
 8008074:	461a      	mov	r2, r3
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 ffc5 	bl	8009008 <USBD_CtlContinueRx>
 800807e:	e030      	b.n	80080e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b03      	cmp	r3, #3
 800808a:	d10b      	bne.n	80080a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 ffc0 	bl	800902a <USBD_CtlSendStatus>
 80080aa:	e01a      	b.n	80080e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d114      	bne.n	80080e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00e      	beq.n	80080e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	7afa      	ldrb	r2, [r7, #11]
 80080ce:	4611      	mov	r1, r2
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	4798      	blx	r3
 80080d4:	4603      	mov	r3, r0
 80080d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	e000      	b.n	80080e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	460b      	mov	r3, r1
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d16b      	bne.n	80081d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3314      	adds	r3, #20
 8008104:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800810c:	2b02      	cmp	r3, #2
 800810e:	d156      	bne.n	80081be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	429a      	cmp	r2, r3
 800811a:	d914      	bls.n	8008146 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	1ad2      	subs	r2, r2, r3
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	461a      	mov	r2, r3
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 ff3a 	bl	8008fac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008138:	2300      	movs	r3, #0
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f001 fc4f 	bl	80099e2 <USBD_LL_PrepareReceive>
 8008144:	e03b      	b.n	80081be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	429a      	cmp	r2, r3
 8008150:	d11c      	bne.n	800818c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800815a:	429a      	cmp	r2, r3
 800815c:	d316      	bcc.n	800818c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008168:	429a      	cmp	r2, r3
 800816a:	d20f      	bcs.n	800818c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800816c:	2200      	movs	r2, #0
 800816e:	2100      	movs	r1, #0
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 ff1b 	bl	8008fac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800817e:	2300      	movs	r3, #0
 8008180:	2200      	movs	r2, #0
 8008182:	2100      	movs	r1, #0
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f001 fc2c 	bl	80099e2 <USBD_LL_PrepareReceive>
 800818a:	e018      	b.n	80081be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b03      	cmp	r3, #3
 8008196:	d10b      	bne.n	80081b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081b0:	2180      	movs	r1, #128	; 0x80
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f001 fb6a 	bl	800988c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 ff49 	bl	8009050 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d122      	bne.n	800820e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7ff fe98 	bl	8007efe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081d6:	e01a      	b.n	800820e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d114      	bne.n	800820e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00e      	beq.n	800820e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	7afa      	ldrb	r2, [r7, #11]
 80081fa:	4611      	mov	r1, r2
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	4798      	blx	r3
 8008200:	4603      	mov	r3, r0
 8008202:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	e000      	b.n	8008210 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008248:	2303      	movs	r3, #3
 800824a:	e02f      	b.n	80082ac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00f      	beq.n	8008276 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d009      	beq.n	8008276 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6852      	ldr	r2, [r2, #4]
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	4611      	mov	r1, r2
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008276:	2340      	movs	r3, #64	; 0x40
 8008278:	2200      	movs	r2, #0
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 fac0 	bl	8009802 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2240      	movs	r2, #64	; 0x40
 800828e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008292:	2340      	movs	r3, #64	; 0x40
 8008294:	2200      	movs	r2, #0
 8008296:	2180      	movs	r1, #128	; 0x80
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 fab2 	bl	8009802 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2240      	movs	r2, #64	; 0x40
 80082a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2204      	movs	r2, #4
 80082ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b04      	cmp	r3, #4
 8008312:	d106      	bne.n	8008322 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800831a:	b2da      	uxtb	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008342:	2303      	movs	r3, #3
 8008344:	e012      	b.n	800836c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b03      	cmp	r3, #3
 8008350:	d10b      	bne.n	800836a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	3301      	adds	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008392:	8a3b      	ldrh	r3, [r7, #16]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	b21a      	sxth	r2, r3
 8008398:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800839c:	4313      	orrs	r3, r2
 800839e:	b21b      	sxth	r3, r3
 80083a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083a2:	89fb      	ldrh	r3, [r7, #14]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	d005      	beq.n	80083d6 <USBD_StdDevReq+0x26>
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	d853      	bhi.n	8008476 <USBD_StdDevReq+0xc6>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00b      	beq.n	80083ea <USBD_StdDevReq+0x3a>
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	d14f      	bne.n	8008476 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	4798      	blx	r3
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]
      break;
 80083e8:	e04a      	b.n	8008480 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	2b09      	cmp	r3, #9
 80083f0:	d83b      	bhi.n	800846a <USBD_StdDevReq+0xba>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <USBD_StdDevReq+0x48>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	0800844d 	.word	0x0800844d
 80083fc:	08008461 	.word	0x08008461
 8008400:	0800846b 	.word	0x0800846b
 8008404:	08008457 	.word	0x08008457
 8008408:	0800846b 	.word	0x0800846b
 800840c:	0800842b 	.word	0x0800842b
 8008410:	08008421 	.word	0x08008421
 8008414:	0800846b 	.word	0x0800846b
 8008418:	08008443 	.word	0x08008443
 800841c:	08008435 	.word	0x08008435
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f9de 	bl	80087e4 <USBD_GetDescriptor>
          break;
 8008428:	e024      	b.n	8008474 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fb6d 	bl	8008b0c <USBD_SetAddress>
          break;
 8008432:	e01f      	b.n	8008474 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fbac 	bl	8008b94 <USBD_SetConfig>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
          break;
 8008440:	e018      	b.n	8008474 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fc4b 	bl	8008ce0 <USBD_GetConfig>
          break;
 800844a:	e013      	b.n	8008474 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fc7c 	bl	8008d4c <USBD_GetStatus>
          break;
 8008454:	e00e      	b.n	8008474 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fcab 	bl	8008db4 <USBD_SetFeature>
          break;
 800845e:	e009      	b.n	8008474 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fcba 	bl	8008ddc <USBD_ClrFeature>
          break;
 8008468:	e004      	b.n	8008474 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fd11 	bl	8008e94 <USBD_CtlError>
          break;
 8008472:	bf00      	nop
      }
      break;
 8008474:	e004      	b.n	8008480 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fd0b 	bl	8008e94 <USBD_CtlError>
      break;
 800847e:	bf00      	nop
  }

  return ret;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop

0800848c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084a2:	2b40      	cmp	r3, #64	; 0x40
 80084a4:	d005      	beq.n	80084b2 <USBD_StdItfReq+0x26>
 80084a6:	2b40      	cmp	r3, #64	; 0x40
 80084a8:	d82f      	bhi.n	800850a <USBD_StdItfReq+0x7e>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <USBD_StdItfReq+0x26>
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d12b      	bne.n	800850a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d81d      	bhi.n	80084fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	889b      	ldrh	r3, [r3, #4]
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d813      	bhi.n	80084f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	4798      	blx	r3
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	88db      	ldrh	r3, [r3, #6]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d110      	bne.n	8008506 <USBD_StdItfReq+0x7a>
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10d      	bne.n	8008506 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fd9d 	bl	800902a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084f0:	e009      	b.n	8008506 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fccd 	bl	8008e94 <USBD_CtlError>
          break;
 80084fa:	e004      	b.n	8008506 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fcc8 	bl	8008e94 <USBD_CtlError>
          break;
 8008504:	e000      	b.n	8008508 <USBD_StdItfReq+0x7c>
          break;
 8008506:	bf00      	nop
      }
      break;
 8008508:	e004      	b.n	8008514 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fcc1 	bl	8008e94 <USBD_CtlError>
      break;
 8008512:	bf00      	nop
  }

  return ret;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	889b      	ldrh	r3, [r3, #4]
 8008530:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d007      	beq.n	800854e <USBD_StdEPReq+0x30>
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	f200 8145 	bhi.w	80087ce <USBD_StdEPReq+0x2b0>
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00c      	beq.n	8008562 <USBD_StdEPReq+0x44>
 8008548:	2b20      	cmp	r3, #32
 800854a:	f040 8140 	bne.w	80087ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
      break;
 8008560:	e13a      	b.n	80087d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	785b      	ldrb	r3, [r3, #1]
 8008566:	2b03      	cmp	r3, #3
 8008568:	d007      	beq.n	800857a <USBD_StdEPReq+0x5c>
 800856a:	2b03      	cmp	r3, #3
 800856c:	f300 8129 	bgt.w	80087c2 <USBD_StdEPReq+0x2a4>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d07f      	beq.n	8008674 <USBD_StdEPReq+0x156>
 8008574:	2b01      	cmp	r3, #1
 8008576:	d03c      	beq.n	80085f2 <USBD_StdEPReq+0xd4>
 8008578:	e123      	b.n	80087c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d002      	beq.n	800858c <USBD_StdEPReq+0x6e>
 8008586:	2b03      	cmp	r3, #3
 8008588:	d016      	beq.n	80085b8 <USBD_StdEPReq+0x9a>
 800858a:	e02c      	b.n	80085e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800858c:	7bbb      	ldrb	r3, [r7, #14]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00d      	beq.n	80085ae <USBD_StdEPReq+0x90>
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b80      	cmp	r3, #128	; 0x80
 8008596:	d00a      	beq.n	80085ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 f975 	bl	800988c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085a2:	2180      	movs	r1, #128	; 0x80
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 f971 	bl	800988c <USBD_LL_StallEP>
 80085aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085ac:	e020      	b.n	80085f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fc6f 	bl	8008e94 <USBD_CtlError>
              break;
 80085b6:	e01b      	b.n	80085f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	885b      	ldrh	r3, [r3, #2]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10e      	bne.n	80085de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00b      	beq.n	80085de <USBD_StdEPReq+0xc0>
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b80      	cmp	r3, #128	; 0x80
 80085ca:	d008      	beq.n	80085de <USBD_StdEPReq+0xc0>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	88db      	ldrh	r3, [r3, #6]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d104      	bne.n	80085de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f001 f957 	bl	800988c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fd23 	bl	800902a <USBD_CtlSendStatus>

              break;
 80085e4:	e004      	b.n	80085f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fc53 	bl	8008e94 <USBD_CtlError>
              break;
 80085ee:	bf00      	nop
          }
          break;
 80085f0:	e0ec      	b.n	80087cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d002      	beq.n	8008604 <USBD_StdEPReq+0xe6>
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d016      	beq.n	8008630 <USBD_StdEPReq+0x112>
 8008602:	e030      	b.n	8008666 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00d      	beq.n	8008626 <USBD_StdEPReq+0x108>
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d00a      	beq.n	8008626 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f939 	bl	800988c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800861a:	2180      	movs	r1, #128	; 0x80
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 f935 	bl	800988c <USBD_LL_StallEP>
 8008622:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008624:	e025      	b.n	8008672 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fc33 	bl	8008e94 <USBD_CtlError>
              break;
 800862e:	e020      	b.n	8008672 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	885b      	ldrh	r3, [r3, #2]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d11b      	bne.n	8008670 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863e:	2b00      	cmp	r3, #0
 8008640:	d004      	beq.n	800864c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 f93f 	bl	80098ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fcec 	bl	800902a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008664:	e004      	b.n	8008670 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc13 	bl	8008e94 <USBD_CtlError>
              break;
 800866e:	e000      	b.n	8008672 <USBD_StdEPReq+0x154>
              break;
 8008670:	bf00      	nop
          }
          break;
 8008672:	e0ab      	b.n	80087cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d002      	beq.n	8008686 <USBD_StdEPReq+0x168>
 8008680:	2b03      	cmp	r3, #3
 8008682:	d032      	beq.n	80086ea <USBD_StdEPReq+0x1cc>
 8008684:	e097      	b.n	80087b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d007      	beq.n	800869c <USBD_StdEPReq+0x17e>
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b80      	cmp	r3, #128	; 0x80
 8008690:	d004      	beq.n	800869c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fbfd 	bl	8008e94 <USBD_CtlError>
                break;
 800869a:	e091      	b.n	80087c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800869c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	da0b      	bge.n	80086bc <USBD_StdEPReq+0x19e>
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	3310      	adds	r3, #16
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	4413      	add	r3, r2
 80086b8:	3304      	adds	r3, #4
 80086ba:	e00b      	b.n	80086d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	4413      	add	r3, r2
 80086d2:	3304      	adds	r3, #4
 80086d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2202      	movs	r2, #2
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fc47 	bl	8008f76 <USBD_CtlSendData>
              break;
 80086e8:	e06a      	b.n	80087c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	da11      	bge.n	8008716 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	f003 020f 	and.w	r2, r3, #15
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	440b      	add	r3, r1
 8008704:	3324      	adds	r3, #36	; 0x24
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d117      	bne.n	800873c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fbc0 	bl	8008e94 <USBD_CtlError>
                  break;
 8008714:	e054      	b.n	80087c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	f003 020f 	and.w	r2, r3, #15
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d104      	bne.n	800873c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fbad 	bl	8008e94 <USBD_CtlError>
                  break;
 800873a:	e041      	b.n	80087c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da0b      	bge.n	800875c <USBD_StdEPReq+0x23e>
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	3310      	adds	r3, #16
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	4413      	add	r3, r2
 8008758:	3304      	adds	r3, #4
 800875a:	e00b      	b.n	8008774 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	4413      	add	r3, r2
 8008772:	3304      	adds	r3, #4
 8008774:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <USBD_StdEPReq+0x264>
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	2b80      	cmp	r3, #128	; 0x80
 8008780:	d103      	bne.n	800878a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e00e      	b.n	80087a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 f8ba 	bl	8009908 <USBD_LL_IsStallEP>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2201      	movs	r2, #1
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	e002      	b.n	80087a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2202      	movs	r2, #2
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fbe1 	bl	8008f76 <USBD_CtlSendData>
              break;
 80087b4:	e004      	b.n	80087c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fb6b 	bl	8008e94 <USBD_CtlError>
              break;
 80087be:	bf00      	nop
          }
          break;
 80087c0:	e004      	b.n	80087cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb65 	bl	8008e94 <USBD_CtlError>
          break;
 80087ca:	bf00      	nop
      }
      break;
 80087cc:	e004      	b.n	80087d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fb5f 	bl	8008e94 <USBD_CtlError>
      break;
 80087d6:	bf00      	nop
  }

  return ret;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	885b      	ldrh	r3, [r3, #2]
 80087fe:	0a1b      	lsrs	r3, r3, #8
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	2b0e      	cmp	r3, #14
 8008806:	f200 8152 	bhi.w	8008aae <USBD_GetDescriptor+0x2ca>
 800880a:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <USBD_GetDescriptor+0x2c>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	08008881 	.word	0x08008881
 8008814:	08008899 	.word	0x08008899
 8008818:	080088d9 	.word	0x080088d9
 800881c:	08008aaf 	.word	0x08008aaf
 8008820:	08008aaf 	.word	0x08008aaf
 8008824:	08008a4f 	.word	0x08008a4f
 8008828:	08008a7b 	.word	0x08008a7b
 800882c:	08008aaf 	.word	0x08008aaf
 8008830:	08008aaf 	.word	0x08008aaf
 8008834:	08008aaf 	.word	0x08008aaf
 8008838:	08008aaf 	.word	0x08008aaf
 800883c:	08008aaf 	.word	0x08008aaf
 8008840:	08008aaf 	.word	0x08008aaf
 8008844:	08008aaf 	.word	0x08008aaf
 8008848:	0800884d 	.word	0x0800884d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00b      	beq.n	8008870 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	7c12      	ldrb	r2, [r2, #16]
 8008864:	f107 0108 	add.w	r1, r7, #8
 8008868:	4610      	mov	r0, r2
 800886a:	4798      	blx	r3
 800886c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800886e:	e126      	b.n	8008abe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fb0e 	bl	8008e94 <USBD_CtlError>
        err++;
 8008878:	7afb      	ldrb	r3, [r7, #11]
 800887a:	3301      	adds	r3, #1
 800887c:	72fb      	strb	r3, [r7, #11]
      break;
 800887e:	e11e      	b.n	8008abe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	7c12      	ldrb	r2, [r2, #16]
 800888c:	f107 0108 	add.w	r1, r7, #8
 8008890:	4610      	mov	r0, r2
 8008892:	4798      	blx	r3
 8008894:	60f8      	str	r0, [r7, #12]
      break;
 8008896:	e112      	b.n	8008abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7c1b      	ldrb	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10d      	bne.n	80088bc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	f107 0208 	add.w	r2, r7, #8
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
 80088b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	2202      	movs	r2, #2
 80088b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088ba:	e100      	b.n	8008abe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	f107 0208 	add.w	r2, r7, #8
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	2202      	movs	r2, #2
 80088d4:	701a      	strb	r2, [r3, #0]
      break;
 80088d6:	e0f2      	b.n	8008abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	885b      	ldrh	r3, [r3, #2]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b05      	cmp	r3, #5
 80088e0:	f200 80ac 	bhi.w	8008a3c <USBD_GetDescriptor+0x258>
 80088e4:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <USBD_GetDescriptor+0x108>)
 80088e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ea:	bf00      	nop
 80088ec:	08008905 	.word	0x08008905
 80088f0:	08008939 	.word	0x08008939
 80088f4:	0800896d 	.word	0x0800896d
 80088f8:	080089a1 	.word	0x080089a1
 80088fc:	080089d5 	.word	0x080089d5
 8008900:	08008a09 	.word	0x08008a09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00b      	beq.n	8008928 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	7c12      	ldrb	r2, [r2, #16]
 800891c:	f107 0108 	add.w	r1, r7, #8
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008926:	e091      	b.n	8008a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fab2 	bl	8008e94 <USBD_CtlError>
            err++;
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	3301      	adds	r3, #1
 8008934:	72fb      	strb	r3, [r7, #11]
          break;
 8008936:	e089      	b.n	8008a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00b      	beq.n	800895c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7c12      	ldrb	r2, [r2, #16]
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895a:	e077      	b.n	8008a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa98 	bl	8008e94 <USBD_CtlError>
            err++;
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	3301      	adds	r3, #1
 8008968:	72fb      	strb	r3, [r7, #11]
          break;
 800896a:	e06f      	b.n	8008a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7c12      	ldrb	r2, [r2, #16]
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898e:	e05d      	b.n	8008a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa7e 	bl	8008e94 <USBD_CtlError>
            err++;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	3301      	adds	r3, #1
 800899c:	72fb      	strb	r3, [r7, #11]
          break;
 800899e:	e055      	b.n	8008a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00b      	beq.n	80089c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	7c12      	ldrb	r2, [r2, #16]
 80089b8:	f107 0108 	add.w	r1, r7, #8
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
 80089c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c2:	e043      	b.n	8008a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa64 	bl	8008e94 <USBD_CtlError>
            err++;
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	3301      	adds	r3, #1
 80089d0:	72fb      	strb	r3, [r7, #11]
          break;
 80089d2:	e03b      	b.n	8008a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	7c12      	ldrb	r2, [r2, #16]
 80089ec:	f107 0108 	add.w	r1, r7, #8
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f6:	e029      	b.n	8008a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa4a 	bl	8008e94 <USBD_CtlError>
            err++;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	3301      	adds	r3, #1
 8008a04:	72fb      	strb	r3, [r7, #11]
          break;
 8008a06:	e021      	b.n	8008a4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7c12      	ldrb	r2, [r2, #16]
 8008a20:	f107 0108 	add.w	r1, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2a:	e00f      	b.n	8008a4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa30 	bl	8008e94 <USBD_CtlError>
            err++;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	3301      	adds	r3, #1
 8008a38:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3a:	e007      	b.n	8008a4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fa28 	bl	8008e94 <USBD_CtlError>
          err++;
 8008a44:	7afb      	ldrb	r3, [r7, #11]
 8008a46:	3301      	adds	r3, #1
 8008a48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008a4a:	bf00      	nop
      }
      break;
 8008a4c:	e037      	b.n	8008abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7c1b      	ldrb	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d109      	bne.n	8008a6a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5e:	f107 0208 	add.w	r2, r7, #8
 8008a62:	4610      	mov	r0, r2
 8008a64:	4798      	blx	r3
 8008a66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a68:	e029      	b.n	8008abe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fa11 	bl	8008e94 <USBD_CtlError>
        err++;
 8008a72:	7afb      	ldrb	r3, [r7, #11]
 8008a74:	3301      	adds	r3, #1
 8008a76:	72fb      	strb	r3, [r7, #11]
      break;
 8008a78:	e021      	b.n	8008abe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	7c1b      	ldrb	r3, [r3, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10d      	bne.n	8008a9e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	f107 0208 	add.w	r2, r7, #8
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4798      	blx	r3
 8008a92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3301      	adds	r3, #1
 8008a98:	2207      	movs	r2, #7
 8008a9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a9c:	e00f      	b.n	8008abe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f9f7 	bl	8008e94 <USBD_CtlError>
        err++;
 8008aa6:	7afb      	ldrb	r3, [r7, #11]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8008aac:	e007      	b.n	8008abe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f9ef 	bl	8008e94 <USBD_CtlError>
      err++;
 8008ab6:	7afb      	ldrb	r3, [r7, #11]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	72fb      	strb	r3, [r7, #11]
      break;
 8008abc:	bf00      	nop
  }

  if (err != 0U)
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d11e      	bne.n	8008b02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	88db      	ldrh	r3, [r3, #6]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d016      	beq.n	8008afa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008acc:	893b      	ldrh	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00e      	beq.n	8008af0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	88da      	ldrh	r2, [r3, #6]
 8008ad6:	893b      	ldrh	r3, [r7, #8]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	bf28      	it	cs
 8008adc:	4613      	movcs	r3, r2
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ae2:	893b      	ldrh	r3, [r7, #8]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	68f9      	ldr	r1, [r7, #12]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fa44 	bl	8008f76 <USBD_CtlSendData>
 8008aee:	e009      	b.n	8008b04 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f9ce 	bl	8008e94 <USBD_CtlError>
 8008af8:	e004      	b.n	8008b04 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa95 	bl	800902a <USBD_CtlSendStatus>
 8008b00:	e000      	b.n	8008b04 <USBD_GetDescriptor+0x320>
    return;
 8008b02:	bf00      	nop
  }
}
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop

08008b0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	889b      	ldrh	r3, [r3, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d131      	bne.n	8008b82 <USBD_SetAddress+0x76>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88db      	ldrh	r3, [r3, #6]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d12d      	bne.n	8008b82 <USBD_SetAddress+0x76>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	885b      	ldrh	r3, [r3, #2]
 8008b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b2c:	d829      	bhi.n	8008b82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	885b      	ldrh	r3, [r3, #2]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d104      	bne.n	8008b50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f9a3 	bl	8008e94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4e:	e01d      	b.n	8008b8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	7bfa      	ldrb	r2, [r7, #15]
 8008b54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 ff00 	bl	8009962 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa61 	bl	800902a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2202      	movs	r2, #2
 8008b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b76:	e009      	b.n	8008b8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b80:	e004      	b.n	8008b8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f985 	bl	8008e94 <USBD_CtlError>
  }
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	885b      	ldrh	r3, [r3, #2]
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	4b4c      	ldr	r3, [pc, #304]	; (8008cdc <USBD_SetConfig+0x148>)
 8008baa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bac:	4b4b      	ldr	r3, [pc, #300]	; (8008cdc <USBD_SetConfig+0x148>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d905      	bls.n	8008bc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f96c 	bl	8008e94 <USBD_CtlError>
    return USBD_FAIL;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e088      	b.n	8008cd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d002      	beq.n	8008bd2 <USBD_SetConfig+0x3e>
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d025      	beq.n	8008c1c <USBD_SetConfig+0x88>
 8008bd0:	e071      	b.n	8008cb6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bd2:	4b42      	ldr	r3, [pc, #264]	; (8008cdc <USBD_SetConfig+0x148>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d01c      	beq.n	8008c14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008bda:	4b40      	ldr	r3, [pc, #256]	; (8008cdc <USBD_SetConfig+0x148>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008be4:	4b3d      	ldr	r3, [pc, #244]	; (8008cdc <USBD_SetConfig+0x148>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff f992 	bl	8007f14 <USBD_SetClassConfig>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d004      	beq.n	8008c04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f949 	bl	8008e94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c02:	e065      	b.n	8008cd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fa10 	bl	800902a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c12:	e05d      	b.n	8008cd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fa08 	bl	800902a <USBD_CtlSendStatus>
      break;
 8008c1a:	e059      	b.n	8008cd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c1c:	4b2f      	ldr	r3, [pc, #188]	; (8008cdc <USBD_SetConfig+0x148>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d112      	bne.n	8008c4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c2c:	4b2b      	ldr	r3, [pc, #172]	; (8008cdc <USBD_SetConfig+0x148>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c36:	4b29      	ldr	r3, [pc, #164]	; (8008cdc <USBD_SetConfig+0x148>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff f985 	bl	8007f4c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f9f1 	bl	800902a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c48:	e042      	b.n	8008cd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c4a:	4b24      	ldr	r3, [pc, #144]	; (8008cdc <USBD_SetConfig+0x148>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d02a      	beq.n	8008cae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff f973 	bl	8007f4c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c66:	4b1d      	ldr	r3, [pc, #116]	; (8008cdc <USBD_SetConfig+0x148>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c70:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <USBD_SetConfig+0x148>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7ff f94c 	bl	8007f14 <USBD_SetClassConfig>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00f      	beq.n	8008ca6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f903 	bl	8008e94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff f958 	bl	8007f4c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ca4:	e014      	b.n	8008cd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f9bf 	bl	800902a <USBD_CtlSendStatus>
      break;
 8008cac:	e010      	b.n	8008cd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f9bb 	bl	800902a <USBD_CtlSendStatus>
      break;
 8008cb4:	e00c      	b.n	8008cd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f8eb 	bl	8008e94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cbe:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <USBD_SetConfig+0x148>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff f941 	bl	8007f4c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8008cce:	bf00      	nop
  }

  return ret;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	200003d8 	.word	0x200003d8

08008ce0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	88db      	ldrh	r3, [r3, #6]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d004      	beq.n	8008cfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f8cd 	bl	8008e94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cfa:	e023      	b.n	8008d44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	dc02      	bgt.n	8008d0e <USBD_GetConfig+0x2e>
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	dc03      	bgt.n	8008d14 <USBD_GetConfig+0x34>
 8008d0c:	e015      	b.n	8008d3a <USBD_GetConfig+0x5a>
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d00b      	beq.n	8008d2a <USBD_GetConfig+0x4a>
 8008d12:	e012      	b.n	8008d3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f927 	bl	8008f76 <USBD_CtlSendData>
        break;
 8008d28:	e00c      	b.n	8008d44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f91f 	bl	8008f76 <USBD_CtlSendData>
        break;
 8008d38:	e004      	b.n	8008d44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f8a9 	bl	8008e94 <USBD_CtlError>
        break;
 8008d42:	bf00      	nop
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d81e      	bhi.n	8008da2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	88db      	ldrh	r3, [r3, #6]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d004      	beq.n	8008d76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f890 	bl	8008e94 <USBD_CtlError>
        break;
 8008d74:	e01a      	b.n	8008dac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d005      	beq.n	8008d92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f043 0202 	orr.w	r2, r3, #2
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	330c      	adds	r3, #12
 8008d96:	2202      	movs	r2, #2
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8eb 	bl	8008f76 <USBD_CtlSendData>
      break;
 8008da0:	e004      	b.n	8008dac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f875 	bl	8008e94 <USBD_CtlError>
      break;
 8008daa:	bf00      	nop
  }
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d106      	bne.n	8008dd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f92b 	bl	800902a <USBD_CtlSendStatus>
  }
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d80b      	bhi.n	8008e0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	885b      	ldrh	r3, [r3, #2]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d10c      	bne.n	8008e16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f910 	bl	800902a <USBD_CtlSendStatus>
      }
      break;
 8008e0a:	e004      	b.n	8008e16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f840 	bl	8008e94 <USBD_CtlError>
      break;
 8008e14:	e000      	b.n	8008e18 <USBD_ClrFeature+0x3c>
      break;
 8008e16:	bf00      	nop
  }
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f7ff fa92 	bl	8008374 <SWAPBYTE>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3301      	adds	r3, #1
 8008e62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7ff fa85 	bl	8008374 <SWAPBYTE>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7ff fa78 	bl	8008374 <SWAPBYTE>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461a      	mov	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	80da      	strh	r2, [r3, #6]
}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e9e:	2180      	movs	r1, #128	; 0x80
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fcf3 	bl	800988c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fcef 	bl	800988c <USBD_LL_StallEP>
}
 8008eae:	bf00      	nop
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b086      	sub	sp, #24
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d036      	beq.n	8008f3a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ed0:	6938      	ldr	r0, [r7, #16]
 8008ed2:	f000 f836 	bl	8008f42 <USBD_GetLen>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	3301      	adds	r3, #1
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	4413      	add	r3, r2
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	7812      	ldrb	r2, [r2, #0]
 8008eee:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	4413      	add	r3, r2
 8008efc:	2203      	movs	r2, #3
 8008efe:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	3301      	adds	r3, #1
 8008f04:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f06:	e013      	b.n	8008f30 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	7812      	ldrb	r2, [r2, #0]
 8008f12:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	3301      	adds	r3, #1
 8008f18:	613b      	str	r3, [r7, #16]
    idx++;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	4413      	add	r3, r2
 8008f26:	2200      	movs	r2, #0
 8008f28:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e7      	bne.n	8008f08 <USBD_GetString+0x52>
 8008f38:	e000      	b.n	8008f3c <USBD_GetString+0x86>
    return;
 8008f3a:	bf00      	nop
  }
}
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f52:	e005      	b.n	8008f60 <USBD_GetLen+0x1e>
  {
    len++;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	3301      	adds	r3, #1
 8008f58:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1f5      	bne.n	8008f54 <USBD_GetLen+0x12>
  }

  return len;
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fcff 	bl	80099a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 fcee 	bl	80099a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2203      	movs	r2, #3
 8008fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fcf2 	bl	80099e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	2100      	movs	r1, #0
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 fce1 	bl	80099e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2204      	movs	r2, #4
 8009036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800903a:	2300      	movs	r3, #0
 800903c:	2200      	movs	r2, #0
 800903e:	2100      	movs	r1, #0
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fcad 	bl	80099a0 <USBD_LL_Transmit>

  return USBD_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2205      	movs	r2, #5
 800905c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009060:	2300      	movs	r3, #0
 8009062:	2200      	movs	r2, #0
 8009064:	2100      	movs	r1, #0
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fcbb 	bl	80099e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800907c:	2200      	movs	r2, #0
 800907e:	4912      	ldr	r1, [pc, #72]	; (80090c8 <MX_USB_Device_Init+0x50>)
 8009080:	4812      	ldr	r0, [pc, #72]	; (80090cc <MX_USB_Device_Init+0x54>)
 8009082:	f7fe fed9 	bl	8007e38 <USBD_Init>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800908c:	f7f7 ff5c 	bl	8000f48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009090:	490f      	ldr	r1, [pc, #60]	; (80090d0 <MX_USB_Device_Init+0x58>)
 8009092:	480e      	ldr	r0, [pc, #56]	; (80090cc <MX_USB_Device_Init+0x54>)
 8009094:	f7fe ff00 	bl	8007e98 <USBD_RegisterClass>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800909e:	f7f7 ff53 	bl	8000f48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80090a2:	490c      	ldr	r1, [pc, #48]	; (80090d4 <MX_USB_Device_Init+0x5c>)
 80090a4:	4809      	ldr	r0, [pc, #36]	; (80090cc <MX_USB_Device_Init+0x54>)
 80090a6:	f7fe fe21 	bl	8007cec <USBD_CDC_RegisterInterface>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80090b0:	f7f7 ff4a 	bl	8000f48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80090b4:	4805      	ldr	r0, [pc, #20]	; (80090cc <MX_USB_Device_Init+0x54>)
 80090b6:	f7fe ff16 	bl	8007ee6 <USBD_Start>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80090c0:	f7f7 ff42 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80090c4:	bf00      	nop
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20000138 	.word	0x20000138
 80090cc:	200003dc 	.word	0x200003dc
 80090d0:	2000001c 	.word	0x2000001c
 80090d4:	20000124 	.word	0x20000124

080090d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090dc:	2200      	movs	r2, #0
 80090de:	4905      	ldr	r1, [pc, #20]	; (80090f4 <CDC_Init_FS+0x1c>)
 80090e0:	4805      	ldr	r0, [pc, #20]	; (80090f8 <CDC_Init_FS+0x20>)
 80090e2:	f7fe fe18 	bl	8007d16 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090e6:	4905      	ldr	r1, [pc, #20]	; (80090fc <CDC_Init_FS+0x24>)
 80090e8:	4803      	ldr	r0, [pc, #12]	; (80090f8 <CDC_Init_FS+0x20>)
 80090ea:	f7fe fe32 	bl	8007d52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20000eac 	.word	0x20000eac
 80090f8:	200003dc 	.word	0x200003dc
 80090fc:	200006ac 	.word	0x200006ac

08009100 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009100:	b480      	push	{r7}
 8009102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009104:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009106:	4618      	mov	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	6039      	str	r1, [r7, #0]
 800911a:	71fb      	strb	r3, [r7, #7]
 800911c:	4613      	mov	r3, r2
 800911e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	2b23      	cmp	r3, #35	; 0x23
 8009124:	d84a      	bhi.n	80091bc <CDC_Control_FS+0xac>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <CDC_Control_FS+0x1c>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	080091bd 	.word	0x080091bd
 8009130:	080091bd 	.word	0x080091bd
 8009134:	080091bd 	.word	0x080091bd
 8009138:	080091bd 	.word	0x080091bd
 800913c:	080091bd 	.word	0x080091bd
 8009140:	080091bd 	.word	0x080091bd
 8009144:	080091bd 	.word	0x080091bd
 8009148:	080091bd 	.word	0x080091bd
 800914c:	080091bd 	.word	0x080091bd
 8009150:	080091bd 	.word	0x080091bd
 8009154:	080091bd 	.word	0x080091bd
 8009158:	080091bd 	.word	0x080091bd
 800915c:	080091bd 	.word	0x080091bd
 8009160:	080091bd 	.word	0x080091bd
 8009164:	080091bd 	.word	0x080091bd
 8009168:	080091bd 	.word	0x080091bd
 800916c:	080091bd 	.word	0x080091bd
 8009170:	080091bd 	.word	0x080091bd
 8009174:	080091bd 	.word	0x080091bd
 8009178:	080091bd 	.word	0x080091bd
 800917c:	080091bd 	.word	0x080091bd
 8009180:	080091bd 	.word	0x080091bd
 8009184:	080091bd 	.word	0x080091bd
 8009188:	080091bd 	.word	0x080091bd
 800918c:	080091bd 	.word	0x080091bd
 8009190:	080091bd 	.word	0x080091bd
 8009194:	080091bd 	.word	0x080091bd
 8009198:	080091bd 	.word	0x080091bd
 800919c:	080091bd 	.word	0x080091bd
 80091a0:	080091bd 	.word	0x080091bd
 80091a4:	080091bd 	.word	0x080091bd
 80091a8:	080091bd 	.word	0x080091bd
 80091ac:	080091bd 	.word	0x080091bd
 80091b0:	080091bd 	.word	0x080091bd
 80091b4:	080091bd 	.word	0x080091bd
 80091b8:	080091bd 	.word	0x080091bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091bc:	bf00      	nop
  }

  return (USBD_OK);
 80091be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <CDC_Receive_FS+0x30>)
 80091da:	f7fe fdba 	bl	8007d52 <USBD_CDC_SetRxBuffer>
  byteInBuffer += *Len;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	4b07      	ldr	r3, [pc, #28]	; (8009200 <CDC_Receive_FS+0x34>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4413      	add	r3, r2
 80091e8:	4a05      	ldr	r2, [pc, #20]	; (8009200 <CDC_Receive_FS+0x34>)
 80091ea:	6013      	str	r3, [r2, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091ec:	4803      	ldr	r0, [pc, #12]	; (80091fc <CDC_Receive_FS+0x30>)
 80091ee:	f7fe fdf9 	bl	8007de4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	200003dc 	.word	0x200003dc
 8009200:	200016ac 	.word	0x200016ac

08009204 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009214:	4b0d      	ldr	r3, [pc, #52]	; (800924c <CDC_Transmit_FS+0x48>)
 8009216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800921a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009226:	2301      	movs	r3, #1
 8009228:	e00b      	b.n	8009242 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800922a:	887b      	ldrh	r3, [r7, #2]
 800922c:	461a      	mov	r2, r3
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4806      	ldr	r0, [pc, #24]	; (800924c <CDC_Transmit_FS+0x48>)
 8009232:	f7fe fd70 	bl	8007d16 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009236:	4805      	ldr	r0, [pc, #20]	; (800924c <CDC_Transmit_FS+0x48>)
 8009238:	f7fe fda4 	bl	8007d84 <USBD_CDC_TransmitPacket>
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	200003dc 	.word	0x200003dc

08009250 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	4613      	mov	r3, r2
 800925c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009262:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009266:	4618      	mov	r0, r3
 8009268:	371c      	adds	r7, #28
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
	...

08009274 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	6039      	str	r1, [r7, #0]
 800927e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2212      	movs	r2, #18
 8009284:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009286:	4b03      	ldr	r3, [pc, #12]	; (8009294 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	20000158 	.word	0x20000158

08009298 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2204      	movs	r2, #4
 80092a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092aa:	4b03      	ldr	r3, [pc, #12]	; (80092b8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	2000016c 	.word	0x2000016c

080092bc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	6039      	str	r1, [r7, #0]
 80092c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d105      	bne.n	80092da <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4907      	ldr	r1, [pc, #28]	; (80092f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092d2:	4808      	ldr	r0, [pc, #32]	; (80092f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80092d4:	f7ff fdef 	bl	8008eb6 <USBD_GetString>
 80092d8:	e004      	b.n	80092e4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4904      	ldr	r1, [pc, #16]	; (80092f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092de:	4805      	ldr	r0, [pc, #20]	; (80092f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80092e0:	f7ff fde9 	bl	8008eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e4:	4b02      	ldr	r3, [pc, #8]	; (80092f0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	200016b0 	.word	0x200016b0
 80092f4:	0800e4d4 	.word	0x0800e4d4

080092f8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	6039      	str	r1, [r7, #0]
 8009302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	4904      	ldr	r1, [pc, #16]	; (8009318 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009308:	4804      	ldr	r0, [pc, #16]	; (800931c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800930a:	f7ff fdd4 	bl	8008eb6 <USBD_GetString>
  return USBD_StrDesc;
 800930e:	4b02      	ldr	r3, [pc, #8]	; (8009318 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	200016b0 	.word	0x200016b0
 800931c:	0800e4ec 	.word	0x0800e4ec

08009320 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	221a      	movs	r2, #26
 8009330:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009332:	f000 f843 	bl	80093bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009336:	4b02      	ldr	r3, [pc, #8]	; (8009340 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000170 	.word	0x20000170

08009344 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	6039      	str	r1, [r7, #0]
 800934e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d105      	bne.n	8009362 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4907      	ldr	r1, [pc, #28]	; (8009378 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800935a:	4808      	ldr	r0, [pc, #32]	; (800937c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800935c:	f7ff fdab 	bl	8008eb6 <USBD_GetString>
 8009360:	e004      	b.n	800936c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	4904      	ldr	r1, [pc, #16]	; (8009378 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009366:	4805      	ldr	r0, [pc, #20]	; (800937c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009368:	f7ff fda5 	bl	8008eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800936c:	4b02      	ldr	r3, [pc, #8]	; (8009378 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	200016b0 	.word	0x200016b0
 800937c:	0800e500 	.word	0x0800e500

08009380 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d105      	bne.n	800939e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4907      	ldr	r1, [pc, #28]	; (80093b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009396:	4808      	ldr	r0, [pc, #32]	; (80093b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009398:	f7ff fd8d 	bl	8008eb6 <USBD_GetString>
 800939c:	e004      	b.n	80093a8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	4904      	ldr	r1, [pc, #16]	; (80093b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093a2:	4805      	ldr	r0, [pc, #20]	; (80093b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093a4:	f7ff fd87 	bl	8008eb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a8:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	200016b0 	.word	0x200016b0
 80093b8:	0800e50c 	.word	0x0800e50c

080093bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093c2:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <Get_SerialNum+0x44>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093c8:	4b0e      	ldr	r3, [pc, #56]	; (8009404 <Get_SerialNum+0x48>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093ce:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <Get_SerialNum+0x4c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4413      	add	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093e2:	2208      	movs	r2, #8
 80093e4:	4909      	ldr	r1, [pc, #36]	; (800940c <Get_SerialNum+0x50>)
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f814 	bl	8009414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093ec:	2204      	movs	r2, #4
 80093ee:	4908      	ldr	r1, [pc, #32]	; (8009410 <Get_SerialNum+0x54>)
 80093f0:	68b8      	ldr	r0, [r7, #8]
 80093f2:	f000 f80f 	bl	8009414 <IntToUnicode>
  }
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	1fff7590 	.word	0x1fff7590
 8009404:	1fff7594 	.word	0x1fff7594
 8009408:	1fff7598 	.word	0x1fff7598
 800940c:	20000172 	.word	0x20000172
 8009410:	20000182 	.word	0x20000182

08009414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009426:	2300      	movs	r3, #0
 8009428:	75fb      	strb	r3, [r7, #23]
 800942a:	e027      	b.n	800947c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	0f1b      	lsrs	r3, r3, #28
 8009430:	2b09      	cmp	r3, #9
 8009432:	d80b      	bhi.n	800944c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	0f1b      	lsrs	r3, r3, #28
 8009438:	b2da      	uxtb	r2, r3
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	4619      	mov	r1, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	440b      	add	r3, r1
 8009444:	3230      	adds	r2, #48	; 0x30
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	e00a      	b.n	8009462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	0f1b      	lsrs	r3, r3, #28
 8009450:	b2da      	uxtb	r2, r3
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	4619      	mov	r1, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	440b      	add	r3, r1
 800945c:	3237      	adds	r2, #55	; 0x37
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	3301      	adds	r3, #1
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4413      	add	r3, r2
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	3301      	adds	r3, #1
 800947a:	75fb      	strb	r3, [r7, #23]
 800947c:	7dfa      	ldrb	r2, [r7, #23]
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	429a      	cmp	r2, r3
 8009482:	d3d3      	bcc.n	800942c <IntToUnicode+0x18>
  }
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <LL_AHB2_GRP1_EnableClock>:
{
 8009492:	b480      	push	{r7}
 8009494:	b085      	sub	sp, #20
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800949a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800949e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80094aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4013      	ands	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80094b6:	68fb      	ldr	r3, [r7, #12]
}
 80094b8:	bf00      	nop
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <LL_APB1_GRP1_EnableClock>:
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80094cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4313      	orrs	r3, r2
 80094da:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80094dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4013      	ands	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80094e8:	68fb      	ldr	r3, [r7, #12]
}
 80094ea:	bf00      	nop
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
	...

080094f8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b09c      	sub	sp, #112	; 0x70
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009500:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	605a      	str	r2, [r3, #4]
 800950a:	609a      	str	r2, [r3, #8]
 800950c:	60da      	str	r2, [r3, #12]
 800950e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009510:	f107 030c 	add.w	r3, r7, #12
 8009514:	2250      	movs	r2, #80	; 0x50
 8009516:	2100      	movs	r1, #0
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fb41 	bl	8009ba0 <memset>
  if(pcdHandle->Instance==USB)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a23      	ldr	r2, [pc, #140]	; (80095b0 <HAL_PCD_MspInit+0xb8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d13e      	bne.n	80095a6 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800952c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800952e:	2318      	movs	r3, #24
 8009530:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009536:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800953c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800953e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009542:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8009544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009548:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800954a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800954e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009550:	f107 030c 	add.w	r3, r7, #12
 8009554:	4618      	mov	r0, r3
 8009556:	f7fb fbc5 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8009560:	f7f7 fcf2 	bl	8000f48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009564:	2001      	movs	r0, #1
 8009566:	f7ff ff94 	bl	8009492 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800956a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800956e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009570:	2302      	movs	r3, #2
 8009572:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009574:	2300      	movs	r3, #0
 8009576:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009578:	2300      	movs	r3, #0
 800957a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800957c:	230a      	movs	r3, #10
 800957e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009580:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009584:	4619      	mov	r1, r3
 8009586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800958a:	f7f8 f8a1 	bl	80016d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800958e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009592:	f7ff ff97 	bl	80094c4 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009596:	2200      	movs	r2, #0
 8009598:	2100      	movs	r1, #0
 800959a:	2014      	movs	r0, #20
 800959c:	f7f8 f863 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80095a0:	2014      	movs	r0, #20
 80095a2:	f7f8 f87a 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80095a6:	bf00      	nop
 80095a8:	3770      	adds	r7, #112	; 0x70
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	40006800 	.word	0x40006800

080095b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80095c8:	4619      	mov	r1, r3
 80095ca:	4610      	mov	r0, r2
 80095cc:	f7fe fcd6 	bl	8007f7c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	440b      	add	r3, r1
 80095f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	78fb      	ldrb	r3, [r7, #3]
 8009600:	4619      	mov	r1, r3
 8009602:	f7fe fd10 	bl	8008026 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	460b      	mov	r3, r1
 8009618:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8009620:	78fa      	ldrb	r2, [r7, #3]
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	440b      	add	r3, r1
 800962e:	3340      	adds	r3, #64	; 0x40
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	4619      	mov	r1, r3
 8009636:	f7fe fd59 	bl	80080ec <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe fe6d 	bl	8008330 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009656:	bf00      	nop
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009666:	2301      	movs	r3, #1
 8009668:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d001      	beq.n	8009676 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009672:	f7f7 fc69 	bl	8000f48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800967c:	7bfa      	ldrb	r2, [r7, #15]
 800967e:	4611      	mov	r1, r2
 8009680:	4618      	mov	r0, r3
 8009682:	f7fe fe17 	bl	80082b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fdc3 	bl	8008218 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe fe12 	bl	80082d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096b8:	4b04      	ldr	r3, [pc, #16]	; (80096cc <HAL_PCD_SuspendCallback+0x30>)
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	4a03      	ldr	r2, [pc, #12]	; (80096cc <HAL_PCD_SuspendCallback+0x30>)
 80096be:	f043 0306 	orr.w	r3, r3, #6
 80096c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	e000ed00 	.word	0xe000ed00

080096d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d007      	beq.n	80096f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <HAL_PCD_ResumeCallback+0x34>)
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	4a07      	ldr	r2, [pc, #28]	; (8009704 <HAL_PCD_ResumeCallback+0x34>)
 80096e6:	f023 0306 	bic.w	r3, r3, #6
 80096ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80096ec:	f000 f9fc 	bl	8009ae8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fe02 	bl	8008300 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	e000ed00 	.word	0xe000ed00

08009708 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009710:	4a2c      	ldr	r2, [pc, #176]	; (80097c4 <USBD_LL_Init+0xbc>)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a2a      	ldr	r2, [pc, #168]	; (80097c4 <USBD_LL_Init+0xbc>)
 800971c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009720:	f7f9 ffdc 	bl	80036dc <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009724:	4b27      	ldr	r3, [pc, #156]	; (80097c4 <USBD_LL_Init+0xbc>)
 8009726:	4a28      	ldr	r2, [pc, #160]	; (80097c8 <USBD_LL_Init+0xc0>)
 8009728:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800972a:	4b26      	ldr	r3, [pc, #152]	; (80097c4 <USBD_LL_Init+0xbc>)
 800972c:	2208      	movs	r2, #8
 800972e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009730:	4b24      	ldr	r3, [pc, #144]	; (80097c4 <USBD_LL_Init+0xbc>)
 8009732:	2202      	movs	r2, #2
 8009734:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009736:	4b23      	ldr	r3, [pc, #140]	; (80097c4 <USBD_LL_Init+0xbc>)
 8009738:	2202      	movs	r2, #2
 800973a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800973c:	4b21      	ldr	r3, [pc, #132]	; (80097c4 <USBD_LL_Init+0xbc>)
 800973e:	2200      	movs	r2, #0
 8009740:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009742:	4b20      	ldr	r3, [pc, #128]	; (80097c4 <USBD_LL_Init+0xbc>)
 8009744:	2200      	movs	r2, #0
 8009746:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009748:	4b1e      	ldr	r3, [pc, #120]	; (80097c4 <USBD_LL_Init+0xbc>)
 800974a:	2200      	movs	r2, #0
 800974c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800974e:	4b1d      	ldr	r3, [pc, #116]	; (80097c4 <USBD_LL_Init+0xbc>)
 8009750:	2200      	movs	r2, #0
 8009752:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009754:	481b      	ldr	r0, [pc, #108]	; (80097c4 <USBD_LL_Init+0xbc>)
 8009756:	f7f8 fa51 	bl	8001bfc <HAL_PCD_Init>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009760:	f7f7 fbf2 	bl	8000f48 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800976a:	2318      	movs	r3, #24
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	f7f9 ff27 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800977a:	2358      	movs	r3, #88	; 0x58
 800977c:	2200      	movs	r2, #0
 800977e:	2180      	movs	r1, #128	; 0x80
 8009780:	f7f9 ff1f 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800978a:	23c0      	movs	r3, #192	; 0xc0
 800978c:	2200      	movs	r2, #0
 800978e:	2181      	movs	r1, #129	; 0x81
 8009790:	f7f9 ff17 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800979a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800979e:	2200      	movs	r2, #0
 80097a0:	2101      	movs	r1, #1
 80097a2:	f7f9 ff0e 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b0:	2200      	movs	r2, #0
 80097b2:	2182      	movs	r1, #130	; 0x82
 80097b4:	f7f9 ff05 	bl	80035c2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	200018b0 	.word	0x200018b0
 80097c8:	40006800 	.word	0x40006800

080097cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7f8 faf5 	bl	8001dd2 <HAL_PCD_Start>
 80097e8:	4603      	mov	r3, r0
 80097ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 f980 	bl	8009af4 <USBD_Get_USB_Status>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	4608      	mov	r0, r1
 800980c:	4611      	mov	r1, r2
 800980e:	461a      	mov	r2, r3
 8009810:	4603      	mov	r3, r0
 8009812:	70fb      	strb	r3, [r7, #3]
 8009814:	460b      	mov	r3, r1
 8009816:	70bb      	strb	r3, [r7, #2]
 8009818:	4613      	mov	r3, r2
 800981a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800982a:	78bb      	ldrb	r3, [r7, #2]
 800982c:	883a      	ldrh	r2, [r7, #0]
 800982e:	78f9      	ldrb	r1, [r7, #3]
 8009830:	f7f8 fc3d 	bl	80020ae <HAL_PCD_EP_Open>
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	4618      	mov	r0, r3
 800983c:	f000 f95a 	bl	8009af4 <USBD_Get_USB_Status>
 8009840:	4603      	mov	r3, r0
 8009842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009844:	7bbb      	ldrb	r3, [r7, #14]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f7f8 fc86 	bl	800217e <HAL_PCD_EP_Close>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f93b 	bl	8009af4 <USBD_Get_USB_Status>
 800987e:	4603      	mov	r3, r0
 8009880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009882:	7bbb      	ldrb	r3, [r7, #14]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a6:	78fa      	ldrb	r2, [r7, #3]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f8 fd4b 	bl	8002346 <HAL_PCD_EP_SetStall>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f91c 	bl	8009af4 <USBD_Get_USB_Status>
 80098bc:	4603      	mov	r3, r0
 80098be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	460b      	mov	r3, r1
 80098d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098e4:	78fa      	ldrb	r2, [r7, #3]
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7f8 fd80 	bl	80023ee <HAL_PCD_EP_ClrStall>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 f8fd 	bl	8009af4 <USBD_Get_USB_Status>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800991a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800991c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009920:	2b00      	cmp	r3, #0
 8009922:	da0c      	bge.n	800993e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800992a:	68f9      	ldr	r1, [r7, #12]
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	4613      	mov	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	440b      	add	r3, r1
 8009938:	3306      	adds	r3, #6
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	e00b      	b.n	8009956 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009944:	68f9      	ldr	r1, [r7, #12]
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	00db      	lsls	r3, r3, #3
 800994e:	440b      	add	r3, r1
 8009950:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8009954:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009956:	4618      	mov	r0, r3
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	4611      	mov	r1, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f7f8 fb6f 	bl	8002064 <HAL_PCD_SetAddress>
 8009986:	4603      	mov	r3, r0
 8009988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 f8b1 	bl	8009af4 <USBD_Get_USB_Status>
 8009992:	4603      	mov	r3, r0
 8009994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009996:	7bbb      	ldrb	r3, [r7, #14]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	607a      	str	r2, [r7, #4]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	460b      	mov	r3, r1
 80099ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099be:	7af9      	ldrb	r1, [r7, #11]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	f7f8 fc7b 	bl	80022be <HAL_PCD_EP_Transmit>
 80099c8:	4603      	mov	r3, r0
 80099ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f890 	bl	8009af4 <USBD_Get_USB_Status>
 80099d4:	4603      	mov	r3, r0
 80099d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b086      	sub	sp, #24
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
 80099ee:	460b      	mov	r3, r1
 80099f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a00:	7af9      	ldrb	r1, [r7, #11]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	f7f8 fc04 	bl	8002212 <HAL_PCD_EP_Receive>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 f86f 	bl	8009af4 <USBD_Get_USB_Status>
 8009a16:	4603      	mov	r3, r0
 8009a18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a36:	78fa      	ldrb	r2, [r7, #3]
 8009a38:	4611      	mov	r1, r2
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7f8 fc27 	bl	800228e <HAL_PCD_EP_GetRxCount>
 8009a40:	4603      	mov	r3, r0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <HAL_PCDEx_LPM_Callback+0x18>
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d013      	beq.n	8009a8a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009a62:	e023      	b.n	8009aac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a6c:	f000 f83c 	bl	8009ae8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a70:	4b10      	ldr	r3, [pc, #64]	; (8009ab4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	4a0f      	ldr	r2, [pc, #60]	; (8009ab4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a76:	f023 0306 	bic.w	r3, r3, #6
 8009a7a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fc3c 	bl	8008300 <USBD_LL_Resume>
    break;
 8009a88:	e010      	b.n	8009aac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fc1f 	bl	80082d4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d005      	beq.n	8009aaa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a9e:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	4a04      	ldr	r2, [pc, #16]	; (8009ab4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009aa4:	f043 0306 	orr.w	r3, r3, #6
 8009aa8:	6113      	str	r3, [r2, #16]
    break;
 8009aaa:	bf00      	nop
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	e000ed00 	.word	0xe000ed00

08009ab8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <USBD_static_malloc+0x18>)
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	20001ba8 	.word	0x20001ba8

08009ad4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]

}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009aec:	f7f7 f958 	bl	8000da0 <SystemClock_Config>
}
 8009af0:	bf00      	nop
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b02:	79fb      	ldrb	r3, [r7, #7]
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d817      	bhi.n	8009b38 <USBD_Get_USB_Status+0x44>
 8009b08:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <USBD_Get_USB_Status+0x1c>)
 8009b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0e:	bf00      	nop
 8009b10:	08009b21 	.word	0x08009b21
 8009b14:	08009b27 	.word	0x08009b27
 8009b18:	08009b2d 	.word	0x08009b2d
 8009b1c:	08009b33 	.word	0x08009b33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
    break;
 8009b24:	e00b      	b.n	8009b3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b26:	2303      	movs	r3, #3
 8009b28:	73fb      	strb	r3, [r7, #15]
    break;
 8009b2a:	e008      	b.n	8009b3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b30:	e005      	b.n	8009b3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b32:	2303      	movs	r3, #3
 8009b34:	73fb      	strb	r3, [r7, #15]
    break;
 8009b36:	e002      	b.n	8009b3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3c:	bf00      	nop
  }
  return usb_status;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <__errno>:
 8009b4c:	4b01      	ldr	r3, [pc, #4]	; (8009b54 <__errno+0x8>)
 8009b4e:	6818      	ldr	r0, [r3, #0]
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	2000018c 	.word	0x2000018c

08009b58 <__libc_init_array>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	4d0d      	ldr	r5, [pc, #52]	; (8009b90 <__libc_init_array+0x38>)
 8009b5c:	4c0d      	ldr	r4, [pc, #52]	; (8009b94 <__libc_init_array+0x3c>)
 8009b5e:	1b64      	subs	r4, r4, r5
 8009b60:	10a4      	asrs	r4, r4, #2
 8009b62:	2600      	movs	r6, #0
 8009b64:	42a6      	cmp	r6, r4
 8009b66:	d109      	bne.n	8009b7c <__libc_init_array+0x24>
 8009b68:	4d0b      	ldr	r5, [pc, #44]	; (8009b98 <__libc_init_array+0x40>)
 8009b6a:	4c0c      	ldr	r4, [pc, #48]	; (8009b9c <__libc_init_array+0x44>)
 8009b6c:	f004 fc90 	bl	800e490 <_init>
 8009b70:	1b64      	subs	r4, r4, r5
 8009b72:	10a4      	asrs	r4, r4, #2
 8009b74:	2600      	movs	r6, #0
 8009b76:	42a6      	cmp	r6, r4
 8009b78:	d105      	bne.n	8009b86 <__libc_init_array+0x2e>
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b80:	4798      	blx	r3
 8009b82:	3601      	adds	r6, #1
 8009b84:	e7ee      	b.n	8009b64 <__libc_init_array+0xc>
 8009b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b8a:	4798      	blx	r3
 8009b8c:	3601      	adds	r6, #1
 8009b8e:	e7f2      	b.n	8009b76 <__libc_init_array+0x1e>
 8009b90:	0800ea44 	.word	0x0800ea44
 8009b94:	0800ea44 	.word	0x0800ea44
 8009b98:	0800ea44 	.word	0x0800ea44
 8009b9c:	0800ea48 	.word	0x0800ea48

08009ba0 <memset>:
 8009ba0:	4402      	add	r2, r0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d100      	bne.n	8009baa <memset+0xa>
 8009ba8:	4770      	bx	lr
 8009baa:	f803 1b01 	strb.w	r1, [r3], #1
 8009bae:	e7f9      	b.n	8009ba4 <memset+0x4>

08009bb0 <__cvt>:
 8009bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb4:	ec55 4b10 	vmov	r4, r5, d0
 8009bb8:	2d00      	cmp	r5, #0
 8009bba:	460e      	mov	r6, r1
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	462b      	mov	r3, r5
 8009bc0:	bfbb      	ittet	lt
 8009bc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009bc6:	461d      	movlt	r5, r3
 8009bc8:	2300      	movge	r3, #0
 8009bca:	232d      	movlt	r3, #45	; 0x2d
 8009bcc:	700b      	strb	r3, [r1, #0]
 8009bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bd4:	4691      	mov	r9, r2
 8009bd6:	f023 0820 	bic.w	r8, r3, #32
 8009bda:	bfbc      	itt	lt
 8009bdc:	4622      	movlt	r2, r4
 8009bde:	4614      	movlt	r4, r2
 8009be0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009be4:	d005      	beq.n	8009bf2 <__cvt+0x42>
 8009be6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bea:	d100      	bne.n	8009bee <__cvt+0x3e>
 8009bec:	3601      	adds	r6, #1
 8009bee:	2102      	movs	r1, #2
 8009bf0:	e000      	b.n	8009bf4 <__cvt+0x44>
 8009bf2:	2103      	movs	r1, #3
 8009bf4:	ab03      	add	r3, sp, #12
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	ab02      	add	r3, sp, #8
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	ec45 4b10 	vmov	d0, r4, r5
 8009c00:	4653      	mov	r3, sl
 8009c02:	4632      	mov	r2, r6
 8009c04:	f001 fdac 	bl	800b760 <_dtoa_r>
 8009c08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	d102      	bne.n	8009c16 <__cvt+0x66>
 8009c10:	f019 0f01 	tst.w	r9, #1
 8009c14:	d022      	beq.n	8009c5c <__cvt+0xac>
 8009c16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c1a:	eb07 0906 	add.w	r9, r7, r6
 8009c1e:	d110      	bne.n	8009c42 <__cvt+0x92>
 8009c20:	783b      	ldrb	r3, [r7, #0]
 8009c22:	2b30      	cmp	r3, #48	; 0x30
 8009c24:	d10a      	bne.n	8009c3c <__cvt+0x8c>
 8009c26:	2200      	movs	r2, #0
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	f7f6 ff23 	bl	8000a78 <__aeabi_dcmpeq>
 8009c32:	b918      	cbnz	r0, 8009c3c <__cvt+0x8c>
 8009c34:	f1c6 0601 	rsb	r6, r6, #1
 8009c38:	f8ca 6000 	str.w	r6, [sl]
 8009c3c:	f8da 3000 	ldr.w	r3, [sl]
 8009c40:	4499      	add	r9, r3
 8009c42:	2200      	movs	r2, #0
 8009c44:	2300      	movs	r3, #0
 8009c46:	4620      	mov	r0, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f7f6 ff15 	bl	8000a78 <__aeabi_dcmpeq>
 8009c4e:	b108      	cbz	r0, 8009c54 <__cvt+0xa4>
 8009c50:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c54:	2230      	movs	r2, #48	; 0x30
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	454b      	cmp	r3, r9
 8009c5a:	d307      	bcc.n	8009c6c <__cvt+0xbc>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c60:	1bdb      	subs	r3, r3, r7
 8009c62:	4638      	mov	r0, r7
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	b004      	add	sp, #16
 8009c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6c:	1c59      	adds	r1, r3, #1
 8009c6e:	9103      	str	r1, [sp, #12]
 8009c70:	701a      	strb	r2, [r3, #0]
 8009c72:	e7f0      	b.n	8009c56 <__cvt+0xa6>

08009c74 <__exponent>:
 8009c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c76:	4603      	mov	r3, r0
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	bfb8      	it	lt
 8009c7c:	4249      	neglt	r1, r1
 8009c7e:	f803 2b02 	strb.w	r2, [r3], #2
 8009c82:	bfb4      	ite	lt
 8009c84:	222d      	movlt	r2, #45	; 0x2d
 8009c86:	222b      	movge	r2, #43	; 0x2b
 8009c88:	2909      	cmp	r1, #9
 8009c8a:	7042      	strb	r2, [r0, #1]
 8009c8c:	dd2a      	ble.n	8009ce4 <__exponent+0x70>
 8009c8e:	f10d 0407 	add.w	r4, sp, #7
 8009c92:	46a4      	mov	ip, r4
 8009c94:	270a      	movs	r7, #10
 8009c96:	46a6      	mov	lr, r4
 8009c98:	460a      	mov	r2, r1
 8009c9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c9e:	fb07 1516 	mls	r5, r7, r6, r1
 8009ca2:	3530      	adds	r5, #48	; 0x30
 8009ca4:	2a63      	cmp	r2, #99	; 0x63
 8009ca6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009caa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009cae:	4631      	mov	r1, r6
 8009cb0:	dcf1      	bgt.n	8009c96 <__exponent+0x22>
 8009cb2:	3130      	adds	r1, #48	; 0x30
 8009cb4:	f1ae 0502 	sub.w	r5, lr, #2
 8009cb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009cbc:	1c44      	adds	r4, r0, #1
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4561      	cmp	r1, ip
 8009cc2:	d30a      	bcc.n	8009cda <__exponent+0x66>
 8009cc4:	f10d 0209 	add.w	r2, sp, #9
 8009cc8:	eba2 020e 	sub.w	r2, r2, lr
 8009ccc:	4565      	cmp	r5, ip
 8009cce:	bf88      	it	hi
 8009cd0:	2200      	movhi	r2, #0
 8009cd2:	4413      	add	r3, r2
 8009cd4:	1a18      	subs	r0, r3, r0
 8009cd6:	b003      	add	sp, #12
 8009cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ce2:	e7ed      	b.n	8009cc0 <__exponent+0x4c>
 8009ce4:	2330      	movs	r3, #48	; 0x30
 8009ce6:	3130      	adds	r1, #48	; 0x30
 8009ce8:	7083      	strb	r3, [r0, #2]
 8009cea:	70c1      	strb	r1, [r0, #3]
 8009cec:	1d03      	adds	r3, r0, #4
 8009cee:	e7f1      	b.n	8009cd4 <__exponent+0x60>

08009cf0 <_printf_float>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	ed2d 8b02 	vpush	{d8}
 8009cf8:	b08d      	sub	sp, #52	; 0x34
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d00:	4616      	mov	r6, r2
 8009d02:	461f      	mov	r7, r3
 8009d04:	4605      	mov	r5, r0
 8009d06:	f002 fe89 	bl	800ca1c <_localeconv_r>
 8009d0a:	f8d0 a000 	ldr.w	sl, [r0]
 8009d0e:	4650      	mov	r0, sl
 8009d10:	f7f6 fa36 	bl	8000180 <strlen>
 8009d14:	2300      	movs	r3, #0
 8009d16:	930a      	str	r3, [sp, #40]	; 0x28
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	9305      	str	r3, [sp, #20]
 8009d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d24:	3307      	adds	r3, #7
 8009d26:	f023 0307 	bic.w	r3, r3, #7
 8009d2a:	f103 0208 	add.w	r2, r3, #8
 8009d2e:	f8c8 2000 	str.w	r2, [r8]
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d42:	9307      	str	r3, [sp, #28]
 8009d44:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d48:	ee08 0a10 	vmov	s16, r0
 8009d4c:	4b9f      	ldr	r3, [pc, #636]	; (8009fcc <_printf_float+0x2dc>)
 8009d4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295
 8009d56:	f7f6 fec1 	bl	8000adc <__aeabi_dcmpun>
 8009d5a:	bb88      	cbnz	r0, 8009dc0 <_printf_float+0xd0>
 8009d5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d60:	4b9a      	ldr	r3, [pc, #616]	; (8009fcc <_printf_float+0x2dc>)
 8009d62:	f04f 32ff 	mov.w	r2, #4294967295
 8009d66:	f7f6 fe9b 	bl	8000aa0 <__aeabi_dcmple>
 8009d6a:	bb48      	cbnz	r0, 8009dc0 <_printf_float+0xd0>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2300      	movs	r3, #0
 8009d70:	4640      	mov	r0, r8
 8009d72:	4649      	mov	r1, r9
 8009d74:	f7f6 fe8a 	bl	8000a8c <__aeabi_dcmplt>
 8009d78:	b110      	cbz	r0, 8009d80 <_printf_float+0x90>
 8009d7a:	232d      	movs	r3, #45	; 0x2d
 8009d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d80:	4b93      	ldr	r3, [pc, #588]	; (8009fd0 <_printf_float+0x2e0>)
 8009d82:	4894      	ldr	r0, [pc, #592]	; (8009fd4 <_printf_float+0x2e4>)
 8009d84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d88:	bf94      	ite	ls
 8009d8a:	4698      	movls	r8, r3
 8009d8c:	4680      	movhi	r8, r0
 8009d8e:	2303      	movs	r3, #3
 8009d90:	6123      	str	r3, [r4, #16]
 8009d92:	9b05      	ldr	r3, [sp, #20]
 8009d94:	f023 0204 	bic.w	r2, r3, #4
 8009d98:	6022      	str	r2, [r4, #0]
 8009d9a:	f04f 0900 	mov.w	r9, #0
 8009d9e:	9700      	str	r7, [sp, #0]
 8009da0:	4633      	mov	r3, r6
 8009da2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009da4:	4621      	mov	r1, r4
 8009da6:	4628      	mov	r0, r5
 8009da8:	f000 f9d8 	bl	800a15c <_printf_common>
 8009dac:	3001      	adds	r0, #1
 8009dae:	f040 8090 	bne.w	8009ed2 <_printf_float+0x1e2>
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	b00d      	add	sp, #52	; 0x34
 8009db8:	ecbd 8b02 	vpop	{d8}
 8009dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	f7f6 fe88 	bl	8000adc <__aeabi_dcmpun>
 8009dcc:	b140      	cbz	r0, 8009de0 <_printf_float+0xf0>
 8009dce:	464b      	mov	r3, r9
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	bfbc      	itt	lt
 8009dd4:	232d      	movlt	r3, #45	; 0x2d
 8009dd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009dda:	487f      	ldr	r0, [pc, #508]	; (8009fd8 <_printf_float+0x2e8>)
 8009ddc:	4b7f      	ldr	r3, [pc, #508]	; (8009fdc <_printf_float+0x2ec>)
 8009dde:	e7d1      	b.n	8009d84 <_printf_float+0x94>
 8009de0:	6863      	ldr	r3, [r4, #4]
 8009de2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009de6:	9206      	str	r2, [sp, #24]
 8009de8:	1c5a      	adds	r2, r3, #1
 8009dea:	d13f      	bne.n	8009e6c <_printf_float+0x17c>
 8009dec:	2306      	movs	r3, #6
 8009dee:	6063      	str	r3, [r4, #4]
 8009df0:	9b05      	ldr	r3, [sp, #20]
 8009df2:	6861      	ldr	r1, [r4, #4]
 8009df4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9303      	str	r3, [sp, #12]
 8009dfc:	ab0a      	add	r3, sp, #40	; 0x28
 8009dfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e02:	ab09      	add	r3, sp, #36	; 0x24
 8009e04:	ec49 8b10 	vmov	d0, r8, r9
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	6022      	str	r2, [r4, #0]
 8009e0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e10:	4628      	mov	r0, r5
 8009e12:	f7ff fecd 	bl	8009bb0 <__cvt>
 8009e16:	9b06      	ldr	r3, [sp, #24]
 8009e18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e1a:	2b47      	cmp	r3, #71	; 0x47
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	d108      	bne.n	8009e32 <_printf_float+0x142>
 8009e20:	1cc8      	adds	r0, r1, #3
 8009e22:	db02      	blt.n	8009e2a <_printf_float+0x13a>
 8009e24:	6863      	ldr	r3, [r4, #4]
 8009e26:	4299      	cmp	r1, r3
 8009e28:	dd41      	ble.n	8009eae <_printf_float+0x1be>
 8009e2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e2e:	fa5f fb8b 	uxtb.w	fp, fp
 8009e32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e36:	d820      	bhi.n	8009e7a <_printf_float+0x18a>
 8009e38:	3901      	subs	r1, #1
 8009e3a:	465a      	mov	r2, fp
 8009e3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e40:	9109      	str	r1, [sp, #36]	; 0x24
 8009e42:	f7ff ff17 	bl	8009c74 <__exponent>
 8009e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e48:	1813      	adds	r3, r2, r0
 8009e4a:	2a01      	cmp	r2, #1
 8009e4c:	4681      	mov	r9, r0
 8009e4e:	6123      	str	r3, [r4, #16]
 8009e50:	dc02      	bgt.n	8009e58 <_printf_float+0x168>
 8009e52:	6822      	ldr	r2, [r4, #0]
 8009e54:	07d2      	lsls	r2, r2, #31
 8009e56:	d501      	bpl.n	8009e5c <_printf_float+0x16c>
 8009e58:	3301      	adds	r3, #1
 8009e5a:	6123      	str	r3, [r4, #16]
 8009e5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d09c      	beq.n	8009d9e <_printf_float+0xae>
 8009e64:	232d      	movs	r3, #45	; 0x2d
 8009e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e6a:	e798      	b.n	8009d9e <_printf_float+0xae>
 8009e6c:	9a06      	ldr	r2, [sp, #24]
 8009e6e:	2a47      	cmp	r2, #71	; 0x47
 8009e70:	d1be      	bne.n	8009df0 <_printf_float+0x100>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1bc      	bne.n	8009df0 <_printf_float+0x100>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e7b9      	b.n	8009dee <_printf_float+0xfe>
 8009e7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e7e:	d118      	bne.n	8009eb2 <_printf_float+0x1c2>
 8009e80:	2900      	cmp	r1, #0
 8009e82:	6863      	ldr	r3, [r4, #4]
 8009e84:	dd0b      	ble.n	8009e9e <_printf_float+0x1ae>
 8009e86:	6121      	str	r1, [r4, #16]
 8009e88:	b913      	cbnz	r3, 8009e90 <_printf_float+0x1a0>
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	07d0      	lsls	r0, r2, #31
 8009e8e:	d502      	bpl.n	8009e96 <_printf_float+0x1a6>
 8009e90:	3301      	adds	r3, #1
 8009e92:	440b      	add	r3, r1
 8009e94:	6123      	str	r3, [r4, #16]
 8009e96:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e98:	f04f 0900 	mov.w	r9, #0
 8009e9c:	e7de      	b.n	8009e5c <_printf_float+0x16c>
 8009e9e:	b913      	cbnz	r3, 8009ea6 <_printf_float+0x1b6>
 8009ea0:	6822      	ldr	r2, [r4, #0]
 8009ea2:	07d2      	lsls	r2, r2, #31
 8009ea4:	d501      	bpl.n	8009eaa <_printf_float+0x1ba>
 8009ea6:	3302      	adds	r3, #2
 8009ea8:	e7f4      	b.n	8009e94 <_printf_float+0x1a4>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e7f2      	b.n	8009e94 <_printf_float+0x1a4>
 8009eae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb4:	4299      	cmp	r1, r3
 8009eb6:	db05      	blt.n	8009ec4 <_printf_float+0x1d4>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	6121      	str	r1, [r4, #16]
 8009ebc:	07d8      	lsls	r0, r3, #31
 8009ebe:	d5ea      	bpl.n	8009e96 <_printf_float+0x1a6>
 8009ec0:	1c4b      	adds	r3, r1, #1
 8009ec2:	e7e7      	b.n	8009e94 <_printf_float+0x1a4>
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	bfd4      	ite	le
 8009ec8:	f1c1 0202 	rsble	r2, r1, #2
 8009ecc:	2201      	movgt	r2, #1
 8009ece:	4413      	add	r3, r2
 8009ed0:	e7e0      	b.n	8009e94 <_printf_float+0x1a4>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	055a      	lsls	r2, r3, #21
 8009ed6:	d407      	bmi.n	8009ee8 <_printf_float+0x1f8>
 8009ed8:	6923      	ldr	r3, [r4, #16]
 8009eda:	4642      	mov	r2, r8
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	47b8      	blx	r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d12c      	bne.n	8009f40 <_printf_float+0x250>
 8009ee6:	e764      	b.n	8009db2 <_printf_float+0xc2>
 8009ee8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009eec:	f240 80e0 	bls.w	800a0b0 <_printf_float+0x3c0>
 8009ef0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f7f6 fdbe 	bl	8000a78 <__aeabi_dcmpeq>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d034      	beq.n	8009f6a <_printf_float+0x27a>
 8009f00:	4a37      	ldr	r2, [pc, #220]	; (8009fe0 <_printf_float+0x2f0>)
 8009f02:	2301      	movs	r3, #1
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f af51 	beq.w	8009db2 <_printf_float+0xc2>
 8009f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f14:	429a      	cmp	r2, r3
 8009f16:	db02      	blt.n	8009f1e <_printf_float+0x22e>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	07d8      	lsls	r0, r3, #31
 8009f1c:	d510      	bpl.n	8009f40 <_printf_float+0x250>
 8009f1e:	ee18 3a10 	vmov	r3, s16
 8009f22:	4652      	mov	r2, sl
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f43f af41 	beq.w	8009db2 <_printf_float+0xc2>
 8009f30:	f04f 0800 	mov.w	r8, #0
 8009f34:	f104 091a 	add.w	r9, r4, #26
 8009f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	4543      	cmp	r3, r8
 8009f3e:	dc09      	bgt.n	8009f54 <_printf_float+0x264>
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	079b      	lsls	r3, r3, #30
 8009f44:	f100 8105 	bmi.w	800a152 <_printf_float+0x462>
 8009f48:	68e0      	ldr	r0, [r4, #12]
 8009f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f4c:	4298      	cmp	r0, r3
 8009f4e:	bfb8      	it	lt
 8009f50:	4618      	movlt	r0, r3
 8009f52:	e730      	b.n	8009db6 <_printf_float+0xc6>
 8009f54:	2301      	movs	r3, #1
 8009f56:	464a      	mov	r2, r9
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f43f af27 	beq.w	8009db2 <_printf_float+0xc2>
 8009f64:	f108 0801 	add.w	r8, r8, #1
 8009f68:	e7e6      	b.n	8009f38 <_printf_float+0x248>
 8009f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dc39      	bgt.n	8009fe4 <_printf_float+0x2f4>
 8009f70:	4a1b      	ldr	r2, [pc, #108]	; (8009fe0 <_printf_float+0x2f0>)
 8009f72:	2301      	movs	r3, #1
 8009f74:	4631      	mov	r1, r6
 8009f76:	4628      	mov	r0, r5
 8009f78:	47b8      	blx	r7
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	f43f af19 	beq.w	8009db2 <_printf_float+0xc2>
 8009f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f84:	4313      	orrs	r3, r2
 8009f86:	d102      	bne.n	8009f8e <_printf_float+0x29e>
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d5d8      	bpl.n	8009f40 <_printf_float+0x250>
 8009f8e:	ee18 3a10 	vmov	r3, s16
 8009f92:	4652      	mov	r2, sl
 8009f94:	4631      	mov	r1, r6
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b8      	blx	r7
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	f43f af09 	beq.w	8009db2 <_printf_float+0xc2>
 8009fa0:	f04f 0900 	mov.w	r9, #0
 8009fa4:	f104 0a1a 	add.w	sl, r4, #26
 8009fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009faa:	425b      	negs	r3, r3
 8009fac:	454b      	cmp	r3, r9
 8009fae:	dc01      	bgt.n	8009fb4 <_printf_float+0x2c4>
 8009fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb2:	e792      	b.n	8009eda <_printf_float+0x1ea>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4652      	mov	r2, sl
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f aef7 	beq.w	8009db2 <_printf_float+0xc2>
 8009fc4:	f109 0901 	add.w	r9, r9, #1
 8009fc8:	e7ee      	b.n	8009fa8 <_printf_float+0x2b8>
 8009fca:	bf00      	nop
 8009fcc:	7fefffff 	.word	0x7fefffff
 8009fd0:	0800e5a0 	.word	0x0800e5a0
 8009fd4:	0800e5a4 	.word	0x0800e5a4
 8009fd8:	0800e5ac 	.word	0x0800e5ac
 8009fdc:	0800e5a8 	.word	0x0800e5a8
 8009fe0:	0800e5b0 	.word	0x0800e5b0
 8009fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	bfa8      	it	ge
 8009fec:	461a      	movge	r2, r3
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	4691      	mov	r9, r2
 8009ff2:	dc37      	bgt.n	800a064 <_printf_float+0x374>
 8009ff4:	f04f 0b00 	mov.w	fp, #0
 8009ff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ffc:	f104 021a 	add.w	r2, r4, #26
 800a000:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a002:	9305      	str	r3, [sp, #20]
 800a004:	eba3 0309 	sub.w	r3, r3, r9
 800a008:	455b      	cmp	r3, fp
 800a00a:	dc33      	bgt.n	800a074 <_printf_float+0x384>
 800a00c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a010:	429a      	cmp	r2, r3
 800a012:	db3b      	blt.n	800a08c <_printf_float+0x39c>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	07da      	lsls	r2, r3, #31
 800a018:	d438      	bmi.n	800a08c <_printf_float+0x39c>
 800a01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01c:	9a05      	ldr	r2, [sp, #20]
 800a01e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a020:	1a9a      	subs	r2, r3, r2
 800a022:	eba3 0901 	sub.w	r9, r3, r1
 800a026:	4591      	cmp	r9, r2
 800a028:	bfa8      	it	ge
 800a02a:	4691      	movge	r9, r2
 800a02c:	f1b9 0f00 	cmp.w	r9, #0
 800a030:	dc35      	bgt.n	800a09e <_printf_float+0x3ae>
 800a032:	f04f 0800 	mov.w	r8, #0
 800a036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a03a:	f104 0a1a 	add.w	sl, r4, #26
 800a03e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a042:	1a9b      	subs	r3, r3, r2
 800a044:	eba3 0309 	sub.w	r3, r3, r9
 800a048:	4543      	cmp	r3, r8
 800a04a:	f77f af79 	ble.w	8009f40 <_printf_float+0x250>
 800a04e:	2301      	movs	r3, #1
 800a050:	4652      	mov	r2, sl
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	f43f aeaa 	beq.w	8009db2 <_printf_float+0xc2>
 800a05e:	f108 0801 	add.w	r8, r8, #1
 800a062:	e7ec      	b.n	800a03e <_printf_float+0x34e>
 800a064:	4613      	mov	r3, r2
 800a066:	4631      	mov	r1, r6
 800a068:	4642      	mov	r2, r8
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	d1c0      	bne.n	8009ff4 <_printf_float+0x304>
 800a072:	e69e      	b.n	8009db2 <_printf_float+0xc2>
 800a074:	2301      	movs	r3, #1
 800a076:	4631      	mov	r1, r6
 800a078:	4628      	mov	r0, r5
 800a07a:	9205      	str	r2, [sp, #20]
 800a07c:	47b8      	blx	r7
 800a07e:	3001      	adds	r0, #1
 800a080:	f43f ae97 	beq.w	8009db2 <_printf_float+0xc2>
 800a084:	9a05      	ldr	r2, [sp, #20]
 800a086:	f10b 0b01 	add.w	fp, fp, #1
 800a08a:	e7b9      	b.n	800a000 <_printf_float+0x310>
 800a08c:	ee18 3a10 	vmov	r3, s16
 800a090:	4652      	mov	r2, sl
 800a092:	4631      	mov	r1, r6
 800a094:	4628      	mov	r0, r5
 800a096:	47b8      	blx	r7
 800a098:	3001      	adds	r0, #1
 800a09a:	d1be      	bne.n	800a01a <_printf_float+0x32a>
 800a09c:	e689      	b.n	8009db2 <_printf_float+0xc2>
 800a09e:	9a05      	ldr	r2, [sp, #20]
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	4442      	add	r2, r8
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	47b8      	blx	r7
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	d1c1      	bne.n	800a032 <_printf_float+0x342>
 800a0ae:	e680      	b.n	8009db2 <_printf_float+0xc2>
 800a0b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0b2:	2a01      	cmp	r2, #1
 800a0b4:	dc01      	bgt.n	800a0ba <_printf_float+0x3ca>
 800a0b6:	07db      	lsls	r3, r3, #31
 800a0b8:	d538      	bpl.n	800a12c <_printf_float+0x43c>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4642      	mov	r2, r8
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	f43f ae74 	beq.w	8009db2 <_printf_float+0xc2>
 800a0ca:	ee18 3a10 	vmov	r3, s16
 800a0ce:	4652      	mov	r2, sl
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f43f ae6b 	beq.w	8009db2 <_printf_float+0xc2>
 800a0dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f7f6 fcc8 	bl	8000a78 <__aeabi_dcmpeq>
 800a0e8:	b9d8      	cbnz	r0, 800a122 <_printf_float+0x432>
 800a0ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ec:	f108 0201 	add.w	r2, r8, #1
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d10e      	bne.n	800a11a <_printf_float+0x42a>
 800a0fc:	e659      	b.n	8009db2 <_printf_float+0xc2>
 800a0fe:	2301      	movs	r3, #1
 800a100:	4652      	mov	r2, sl
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f ae52 	beq.w	8009db2 <_printf_float+0xc2>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a114:	3b01      	subs	r3, #1
 800a116:	4543      	cmp	r3, r8
 800a118:	dcf1      	bgt.n	800a0fe <_printf_float+0x40e>
 800a11a:	464b      	mov	r3, r9
 800a11c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a120:	e6dc      	b.n	8009edc <_printf_float+0x1ec>
 800a122:	f04f 0800 	mov.w	r8, #0
 800a126:	f104 0a1a 	add.w	sl, r4, #26
 800a12a:	e7f2      	b.n	800a112 <_printf_float+0x422>
 800a12c:	2301      	movs	r3, #1
 800a12e:	4642      	mov	r2, r8
 800a130:	e7df      	b.n	800a0f2 <_printf_float+0x402>
 800a132:	2301      	movs	r3, #1
 800a134:	464a      	mov	r2, r9
 800a136:	4631      	mov	r1, r6
 800a138:	4628      	mov	r0, r5
 800a13a:	47b8      	blx	r7
 800a13c:	3001      	adds	r0, #1
 800a13e:	f43f ae38 	beq.w	8009db2 <_printf_float+0xc2>
 800a142:	f108 0801 	add.w	r8, r8, #1
 800a146:	68e3      	ldr	r3, [r4, #12]
 800a148:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a14a:	1a5b      	subs	r3, r3, r1
 800a14c:	4543      	cmp	r3, r8
 800a14e:	dcf0      	bgt.n	800a132 <_printf_float+0x442>
 800a150:	e6fa      	b.n	8009f48 <_printf_float+0x258>
 800a152:	f04f 0800 	mov.w	r8, #0
 800a156:	f104 0919 	add.w	r9, r4, #25
 800a15a:	e7f4      	b.n	800a146 <_printf_float+0x456>

0800a15c <_printf_common>:
 800a15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a160:	4616      	mov	r6, r2
 800a162:	4699      	mov	r9, r3
 800a164:	688a      	ldr	r2, [r1, #8]
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a16c:	4293      	cmp	r3, r2
 800a16e:	bfb8      	it	lt
 800a170:	4613      	movlt	r3, r2
 800a172:	6033      	str	r3, [r6, #0]
 800a174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a178:	4607      	mov	r7, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b10a      	cbz	r2, 800a182 <_printf_common+0x26>
 800a17e:	3301      	adds	r3, #1
 800a180:	6033      	str	r3, [r6, #0]
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	0699      	lsls	r1, r3, #26
 800a186:	bf42      	ittt	mi
 800a188:	6833      	ldrmi	r3, [r6, #0]
 800a18a:	3302      	addmi	r3, #2
 800a18c:	6033      	strmi	r3, [r6, #0]
 800a18e:	6825      	ldr	r5, [r4, #0]
 800a190:	f015 0506 	ands.w	r5, r5, #6
 800a194:	d106      	bne.n	800a1a4 <_printf_common+0x48>
 800a196:	f104 0a19 	add.w	sl, r4, #25
 800a19a:	68e3      	ldr	r3, [r4, #12]
 800a19c:	6832      	ldr	r2, [r6, #0]
 800a19e:	1a9b      	subs	r3, r3, r2
 800a1a0:	42ab      	cmp	r3, r5
 800a1a2:	dc26      	bgt.n	800a1f2 <_printf_common+0x96>
 800a1a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1a8:	1e13      	subs	r3, r2, #0
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	bf18      	it	ne
 800a1ae:	2301      	movne	r3, #1
 800a1b0:	0692      	lsls	r2, r2, #26
 800a1b2:	d42b      	bmi.n	800a20c <_printf_common+0xb0>
 800a1b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	47c0      	blx	r8
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d01e      	beq.n	800a200 <_printf_common+0xa4>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	68e5      	ldr	r5, [r4, #12]
 800a1c6:	6832      	ldr	r2, [r6, #0]
 800a1c8:	f003 0306 	and.w	r3, r3, #6
 800a1cc:	2b04      	cmp	r3, #4
 800a1ce:	bf08      	it	eq
 800a1d0:	1aad      	subeq	r5, r5, r2
 800a1d2:	68a3      	ldr	r3, [r4, #8]
 800a1d4:	6922      	ldr	r2, [r4, #16]
 800a1d6:	bf0c      	ite	eq
 800a1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1dc:	2500      	movne	r5, #0
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	bfc4      	itt	gt
 800a1e2:	1a9b      	subgt	r3, r3, r2
 800a1e4:	18ed      	addgt	r5, r5, r3
 800a1e6:	2600      	movs	r6, #0
 800a1e8:	341a      	adds	r4, #26
 800a1ea:	42b5      	cmp	r5, r6
 800a1ec:	d11a      	bne.n	800a224 <_printf_common+0xc8>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	e008      	b.n	800a204 <_printf_common+0xa8>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	47c0      	blx	r8
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d103      	bne.n	800a208 <_printf_common+0xac>
 800a200:	f04f 30ff 	mov.w	r0, #4294967295
 800a204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a208:	3501      	adds	r5, #1
 800a20a:	e7c6      	b.n	800a19a <_printf_common+0x3e>
 800a20c:	18e1      	adds	r1, r4, r3
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	2030      	movs	r0, #48	; 0x30
 800a212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a216:	4422      	add	r2, r4
 800a218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a21c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a220:	3302      	adds	r3, #2
 800a222:	e7c7      	b.n	800a1b4 <_printf_common+0x58>
 800a224:	2301      	movs	r3, #1
 800a226:	4622      	mov	r2, r4
 800a228:	4649      	mov	r1, r9
 800a22a:	4638      	mov	r0, r7
 800a22c:	47c0      	blx	r8
 800a22e:	3001      	adds	r0, #1
 800a230:	d0e6      	beq.n	800a200 <_printf_common+0xa4>
 800a232:	3601      	adds	r6, #1
 800a234:	e7d9      	b.n	800a1ea <_printf_common+0x8e>
	...

0800a238 <_printf_i>:
 800a238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a23c:	7e0f      	ldrb	r7, [r1, #24]
 800a23e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a240:	2f78      	cmp	r7, #120	; 0x78
 800a242:	4691      	mov	r9, r2
 800a244:	4680      	mov	r8, r0
 800a246:	460c      	mov	r4, r1
 800a248:	469a      	mov	sl, r3
 800a24a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a24e:	d807      	bhi.n	800a260 <_printf_i+0x28>
 800a250:	2f62      	cmp	r7, #98	; 0x62
 800a252:	d80a      	bhi.n	800a26a <_printf_i+0x32>
 800a254:	2f00      	cmp	r7, #0
 800a256:	f000 80d8 	beq.w	800a40a <_printf_i+0x1d2>
 800a25a:	2f58      	cmp	r7, #88	; 0x58
 800a25c:	f000 80a3 	beq.w	800a3a6 <_printf_i+0x16e>
 800a260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a268:	e03a      	b.n	800a2e0 <_printf_i+0xa8>
 800a26a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a26e:	2b15      	cmp	r3, #21
 800a270:	d8f6      	bhi.n	800a260 <_printf_i+0x28>
 800a272:	a101      	add	r1, pc, #4	; (adr r1, 800a278 <_printf_i+0x40>)
 800a274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a278:	0800a2d1 	.word	0x0800a2d1
 800a27c:	0800a2e5 	.word	0x0800a2e5
 800a280:	0800a261 	.word	0x0800a261
 800a284:	0800a261 	.word	0x0800a261
 800a288:	0800a261 	.word	0x0800a261
 800a28c:	0800a261 	.word	0x0800a261
 800a290:	0800a2e5 	.word	0x0800a2e5
 800a294:	0800a261 	.word	0x0800a261
 800a298:	0800a261 	.word	0x0800a261
 800a29c:	0800a261 	.word	0x0800a261
 800a2a0:	0800a261 	.word	0x0800a261
 800a2a4:	0800a3f1 	.word	0x0800a3f1
 800a2a8:	0800a315 	.word	0x0800a315
 800a2ac:	0800a3d3 	.word	0x0800a3d3
 800a2b0:	0800a261 	.word	0x0800a261
 800a2b4:	0800a261 	.word	0x0800a261
 800a2b8:	0800a413 	.word	0x0800a413
 800a2bc:	0800a261 	.word	0x0800a261
 800a2c0:	0800a315 	.word	0x0800a315
 800a2c4:	0800a261 	.word	0x0800a261
 800a2c8:	0800a261 	.word	0x0800a261
 800a2cc:	0800a3db 	.word	0x0800a3db
 800a2d0:	682b      	ldr	r3, [r5, #0]
 800a2d2:	1d1a      	adds	r2, r3, #4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	602a      	str	r2, [r5, #0]
 800a2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e0a3      	b.n	800a42c <_printf_i+0x1f4>
 800a2e4:	6820      	ldr	r0, [r4, #0]
 800a2e6:	6829      	ldr	r1, [r5, #0]
 800a2e8:	0606      	lsls	r6, r0, #24
 800a2ea:	f101 0304 	add.w	r3, r1, #4
 800a2ee:	d50a      	bpl.n	800a306 <_printf_i+0xce>
 800a2f0:	680e      	ldr	r6, [r1, #0]
 800a2f2:	602b      	str	r3, [r5, #0]
 800a2f4:	2e00      	cmp	r6, #0
 800a2f6:	da03      	bge.n	800a300 <_printf_i+0xc8>
 800a2f8:	232d      	movs	r3, #45	; 0x2d
 800a2fa:	4276      	negs	r6, r6
 800a2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a300:	485e      	ldr	r0, [pc, #376]	; (800a47c <_printf_i+0x244>)
 800a302:	230a      	movs	r3, #10
 800a304:	e019      	b.n	800a33a <_printf_i+0x102>
 800a306:	680e      	ldr	r6, [r1, #0]
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a30e:	bf18      	it	ne
 800a310:	b236      	sxthne	r6, r6
 800a312:	e7ef      	b.n	800a2f4 <_printf_i+0xbc>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	6820      	ldr	r0, [r4, #0]
 800a318:	1d19      	adds	r1, r3, #4
 800a31a:	6029      	str	r1, [r5, #0]
 800a31c:	0601      	lsls	r1, r0, #24
 800a31e:	d501      	bpl.n	800a324 <_printf_i+0xec>
 800a320:	681e      	ldr	r6, [r3, #0]
 800a322:	e002      	b.n	800a32a <_printf_i+0xf2>
 800a324:	0646      	lsls	r6, r0, #25
 800a326:	d5fb      	bpl.n	800a320 <_printf_i+0xe8>
 800a328:	881e      	ldrh	r6, [r3, #0]
 800a32a:	4854      	ldr	r0, [pc, #336]	; (800a47c <_printf_i+0x244>)
 800a32c:	2f6f      	cmp	r7, #111	; 0x6f
 800a32e:	bf0c      	ite	eq
 800a330:	2308      	moveq	r3, #8
 800a332:	230a      	movne	r3, #10
 800a334:	2100      	movs	r1, #0
 800a336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a33a:	6865      	ldr	r5, [r4, #4]
 800a33c:	60a5      	str	r5, [r4, #8]
 800a33e:	2d00      	cmp	r5, #0
 800a340:	bfa2      	ittt	ge
 800a342:	6821      	ldrge	r1, [r4, #0]
 800a344:	f021 0104 	bicge.w	r1, r1, #4
 800a348:	6021      	strge	r1, [r4, #0]
 800a34a:	b90e      	cbnz	r6, 800a350 <_printf_i+0x118>
 800a34c:	2d00      	cmp	r5, #0
 800a34e:	d04d      	beq.n	800a3ec <_printf_i+0x1b4>
 800a350:	4615      	mov	r5, r2
 800a352:	fbb6 f1f3 	udiv	r1, r6, r3
 800a356:	fb03 6711 	mls	r7, r3, r1, r6
 800a35a:	5dc7      	ldrb	r7, [r0, r7]
 800a35c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a360:	4637      	mov	r7, r6
 800a362:	42bb      	cmp	r3, r7
 800a364:	460e      	mov	r6, r1
 800a366:	d9f4      	bls.n	800a352 <_printf_i+0x11a>
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d10b      	bne.n	800a384 <_printf_i+0x14c>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	07de      	lsls	r6, r3, #31
 800a370:	d508      	bpl.n	800a384 <_printf_i+0x14c>
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	6861      	ldr	r1, [r4, #4]
 800a376:	4299      	cmp	r1, r3
 800a378:	bfde      	ittt	le
 800a37a:	2330      	movle	r3, #48	; 0x30
 800a37c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a380:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a384:	1b52      	subs	r2, r2, r5
 800a386:	6122      	str	r2, [r4, #16]
 800a388:	f8cd a000 	str.w	sl, [sp]
 800a38c:	464b      	mov	r3, r9
 800a38e:	aa03      	add	r2, sp, #12
 800a390:	4621      	mov	r1, r4
 800a392:	4640      	mov	r0, r8
 800a394:	f7ff fee2 	bl	800a15c <_printf_common>
 800a398:	3001      	adds	r0, #1
 800a39a:	d14c      	bne.n	800a436 <_printf_i+0x1fe>
 800a39c:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a0:	b004      	add	sp, #16
 800a3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a6:	4835      	ldr	r0, [pc, #212]	; (800a47c <_printf_i+0x244>)
 800a3a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3ac:	6829      	ldr	r1, [r5, #0]
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3b4:	6029      	str	r1, [r5, #0]
 800a3b6:	061d      	lsls	r5, r3, #24
 800a3b8:	d514      	bpl.n	800a3e4 <_printf_i+0x1ac>
 800a3ba:	07df      	lsls	r7, r3, #31
 800a3bc:	bf44      	itt	mi
 800a3be:	f043 0320 	orrmi.w	r3, r3, #32
 800a3c2:	6023      	strmi	r3, [r4, #0]
 800a3c4:	b91e      	cbnz	r6, 800a3ce <_printf_i+0x196>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	f023 0320 	bic.w	r3, r3, #32
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	2310      	movs	r3, #16
 800a3d0:	e7b0      	b.n	800a334 <_printf_i+0xfc>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	f043 0320 	orr.w	r3, r3, #32
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	2378      	movs	r3, #120	; 0x78
 800a3dc:	4828      	ldr	r0, [pc, #160]	; (800a480 <_printf_i+0x248>)
 800a3de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3e2:	e7e3      	b.n	800a3ac <_printf_i+0x174>
 800a3e4:	0659      	lsls	r1, r3, #25
 800a3e6:	bf48      	it	mi
 800a3e8:	b2b6      	uxthmi	r6, r6
 800a3ea:	e7e6      	b.n	800a3ba <_printf_i+0x182>
 800a3ec:	4615      	mov	r5, r2
 800a3ee:	e7bb      	b.n	800a368 <_printf_i+0x130>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	6826      	ldr	r6, [r4, #0]
 800a3f4:	6961      	ldr	r1, [r4, #20]
 800a3f6:	1d18      	adds	r0, r3, #4
 800a3f8:	6028      	str	r0, [r5, #0]
 800a3fa:	0635      	lsls	r5, r6, #24
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	d501      	bpl.n	800a404 <_printf_i+0x1cc>
 800a400:	6019      	str	r1, [r3, #0]
 800a402:	e002      	b.n	800a40a <_printf_i+0x1d2>
 800a404:	0670      	lsls	r0, r6, #25
 800a406:	d5fb      	bpl.n	800a400 <_printf_i+0x1c8>
 800a408:	8019      	strh	r1, [r3, #0]
 800a40a:	2300      	movs	r3, #0
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	4615      	mov	r5, r2
 800a410:	e7ba      	b.n	800a388 <_printf_i+0x150>
 800a412:	682b      	ldr	r3, [r5, #0]
 800a414:	1d1a      	adds	r2, r3, #4
 800a416:	602a      	str	r2, [r5, #0]
 800a418:	681d      	ldr	r5, [r3, #0]
 800a41a:	6862      	ldr	r2, [r4, #4]
 800a41c:	2100      	movs	r1, #0
 800a41e:	4628      	mov	r0, r5
 800a420:	f7f5 feb6 	bl	8000190 <memchr>
 800a424:	b108      	cbz	r0, 800a42a <_printf_i+0x1f2>
 800a426:	1b40      	subs	r0, r0, r5
 800a428:	6060      	str	r0, [r4, #4]
 800a42a:	6863      	ldr	r3, [r4, #4]
 800a42c:	6123      	str	r3, [r4, #16]
 800a42e:	2300      	movs	r3, #0
 800a430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a434:	e7a8      	b.n	800a388 <_printf_i+0x150>
 800a436:	6923      	ldr	r3, [r4, #16]
 800a438:	462a      	mov	r2, r5
 800a43a:	4649      	mov	r1, r9
 800a43c:	4640      	mov	r0, r8
 800a43e:	47d0      	blx	sl
 800a440:	3001      	adds	r0, #1
 800a442:	d0ab      	beq.n	800a39c <_printf_i+0x164>
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	079b      	lsls	r3, r3, #30
 800a448:	d413      	bmi.n	800a472 <_printf_i+0x23a>
 800a44a:	68e0      	ldr	r0, [r4, #12]
 800a44c:	9b03      	ldr	r3, [sp, #12]
 800a44e:	4298      	cmp	r0, r3
 800a450:	bfb8      	it	lt
 800a452:	4618      	movlt	r0, r3
 800a454:	e7a4      	b.n	800a3a0 <_printf_i+0x168>
 800a456:	2301      	movs	r3, #1
 800a458:	4632      	mov	r2, r6
 800a45a:	4649      	mov	r1, r9
 800a45c:	4640      	mov	r0, r8
 800a45e:	47d0      	blx	sl
 800a460:	3001      	adds	r0, #1
 800a462:	d09b      	beq.n	800a39c <_printf_i+0x164>
 800a464:	3501      	adds	r5, #1
 800a466:	68e3      	ldr	r3, [r4, #12]
 800a468:	9903      	ldr	r1, [sp, #12]
 800a46a:	1a5b      	subs	r3, r3, r1
 800a46c:	42ab      	cmp	r3, r5
 800a46e:	dcf2      	bgt.n	800a456 <_printf_i+0x21e>
 800a470:	e7eb      	b.n	800a44a <_printf_i+0x212>
 800a472:	2500      	movs	r5, #0
 800a474:	f104 0619 	add.w	r6, r4, #25
 800a478:	e7f5      	b.n	800a466 <_printf_i+0x22e>
 800a47a:	bf00      	nop
 800a47c:	0800e5b2 	.word	0x0800e5b2
 800a480:	0800e5c3 	.word	0x0800e5c3

0800a484 <_scanf_float>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	b087      	sub	sp, #28
 800a48a:	4617      	mov	r7, r2
 800a48c:	9303      	str	r3, [sp, #12]
 800a48e:	688b      	ldr	r3, [r1, #8]
 800a490:	1e5a      	subs	r2, r3, #1
 800a492:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a496:	bf83      	ittte	hi
 800a498:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a49c:	195b      	addhi	r3, r3, r5
 800a49e:	9302      	strhi	r3, [sp, #8]
 800a4a0:	2300      	movls	r3, #0
 800a4a2:	bf86      	itte	hi
 800a4a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a4a8:	608b      	strhi	r3, [r1, #8]
 800a4aa:	9302      	strls	r3, [sp, #8]
 800a4ac:	680b      	ldr	r3, [r1, #0]
 800a4ae:	468b      	mov	fp, r1
 800a4b0:	2500      	movs	r5, #0
 800a4b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a4b6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a4ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a4be:	4680      	mov	r8, r0
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	465e      	mov	r6, fp
 800a4c4:	46aa      	mov	sl, r5
 800a4c6:	46a9      	mov	r9, r5
 800a4c8:	9501      	str	r5, [sp, #4]
 800a4ca:	68a2      	ldr	r2, [r4, #8]
 800a4cc:	b152      	cbz	r2, 800a4e4 <_scanf_float+0x60>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b4e      	cmp	r3, #78	; 0x4e
 800a4d4:	d864      	bhi.n	800a5a0 <_scanf_float+0x11c>
 800a4d6:	2b40      	cmp	r3, #64	; 0x40
 800a4d8:	d83c      	bhi.n	800a554 <_scanf_float+0xd0>
 800a4da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a4de:	b2c8      	uxtb	r0, r1
 800a4e0:	280e      	cmp	r0, #14
 800a4e2:	d93a      	bls.n	800a55a <_scanf_float+0xd6>
 800a4e4:	f1b9 0f00 	cmp.w	r9, #0
 800a4e8:	d003      	beq.n	800a4f2 <_scanf_float+0x6e>
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4f6:	f1ba 0f01 	cmp.w	sl, #1
 800a4fa:	f200 8113 	bhi.w	800a724 <_scanf_float+0x2a0>
 800a4fe:	455e      	cmp	r6, fp
 800a500:	f200 8105 	bhi.w	800a70e <_scanf_float+0x28a>
 800a504:	2501      	movs	r5, #1
 800a506:	4628      	mov	r0, r5
 800a508:	b007      	add	sp, #28
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a512:	2a0d      	cmp	r2, #13
 800a514:	d8e6      	bhi.n	800a4e4 <_scanf_float+0x60>
 800a516:	a101      	add	r1, pc, #4	; (adr r1, 800a51c <_scanf_float+0x98>)
 800a518:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a51c:	0800a65b 	.word	0x0800a65b
 800a520:	0800a4e5 	.word	0x0800a4e5
 800a524:	0800a4e5 	.word	0x0800a4e5
 800a528:	0800a4e5 	.word	0x0800a4e5
 800a52c:	0800a6bb 	.word	0x0800a6bb
 800a530:	0800a693 	.word	0x0800a693
 800a534:	0800a4e5 	.word	0x0800a4e5
 800a538:	0800a4e5 	.word	0x0800a4e5
 800a53c:	0800a669 	.word	0x0800a669
 800a540:	0800a4e5 	.word	0x0800a4e5
 800a544:	0800a4e5 	.word	0x0800a4e5
 800a548:	0800a4e5 	.word	0x0800a4e5
 800a54c:	0800a4e5 	.word	0x0800a4e5
 800a550:	0800a621 	.word	0x0800a621
 800a554:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a558:	e7db      	b.n	800a512 <_scanf_float+0x8e>
 800a55a:	290e      	cmp	r1, #14
 800a55c:	d8c2      	bhi.n	800a4e4 <_scanf_float+0x60>
 800a55e:	a001      	add	r0, pc, #4	; (adr r0, 800a564 <_scanf_float+0xe0>)
 800a560:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a564:	0800a613 	.word	0x0800a613
 800a568:	0800a4e5 	.word	0x0800a4e5
 800a56c:	0800a613 	.word	0x0800a613
 800a570:	0800a6a7 	.word	0x0800a6a7
 800a574:	0800a4e5 	.word	0x0800a4e5
 800a578:	0800a5c1 	.word	0x0800a5c1
 800a57c:	0800a5fd 	.word	0x0800a5fd
 800a580:	0800a5fd 	.word	0x0800a5fd
 800a584:	0800a5fd 	.word	0x0800a5fd
 800a588:	0800a5fd 	.word	0x0800a5fd
 800a58c:	0800a5fd 	.word	0x0800a5fd
 800a590:	0800a5fd 	.word	0x0800a5fd
 800a594:	0800a5fd 	.word	0x0800a5fd
 800a598:	0800a5fd 	.word	0x0800a5fd
 800a59c:	0800a5fd 	.word	0x0800a5fd
 800a5a0:	2b6e      	cmp	r3, #110	; 0x6e
 800a5a2:	d809      	bhi.n	800a5b8 <_scanf_float+0x134>
 800a5a4:	2b60      	cmp	r3, #96	; 0x60
 800a5a6:	d8b2      	bhi.n	800a50e <_scanf_float+0x8a>
 800a5a8:	2b54      	cmp	r3, #84	; 0x54
 800a5aa:	d077      	beq.n	800a69c <_scanf_float+0x218>
 800a5ac:	2b59      	cmp	r3, #89	; 0x59
 800a5ae:	d199      	bne.n	800a4e4 <_scanf_float+0x60>
 800a5b0:	2d07      	cmp	r5, #7
 800a5b2:	d197      	bne.n	800a4e4 <_scanf_float+0x60>
 800a5b4:	2508      	movs	r5, #8
 800a5b6:	e029      	b.n	800a60c <_scanf_float+0x188>
 800a5b8:	2b74      	cmp	r3, #116	; 0x74
 800a5ba:	d06f      	beq.n	800a69c <_scanf_float+0x218>
 800a5bc:	2b79      	cmp	r3, #121	; 0x79
 800a5be:	e7f6      	b.n	800a5ae <_scanf_float+0x12a>
 800a5c0:	6821      	ldr	r1, [r4, #0]
 800a5c2:	05c8      	lsls	r0, r1, #23
 800a5c4:	d51a      	bpl.n	800a5fc <_scanf_float+0x178>
 800a5c6:	9b02      	ldr	r3, [sp, #8]
 800a5c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a5cc:	6021      	str	r1, [r4, #0]
 800a5ce:	f109 0901 	add.w	r9, r9, #1
 800a5d2:	b11b      	cbz	r3, 800a5dc <_scanf_float+0x158>
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	3201      	adds	r2, #1
 800a5d8:	9302      	str	r3, [sp, #8]
 800a5da:	60a2      	str	r2, [r4, #8]
 800a5dc:	68a3      	ldr	r3, [r4, #8]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	60a3      	str	r3, [r4, #8]
 800a5e2:	6923      	ldr	r3, [r4, #16]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	6123      	str	r3, [r4, #16]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	607b      	str	r3, [r7, #4]
 800a5f0:	f340 8084 	ble.w	800a6fc <_scanf_float+0x278>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	603b      	str	r3, [r7, #0]
 800a5fa:	e766      	b.n	800a4ca <_scanf_float+0x46>
 800a5fc:	eb1a 0f05 	cmn.w	sl, r5
 800a600:	f47f af70 	bne.w	800a4e4 <_scanf_float+0x60>
 800a604:	6822      	ldr	r2, [r4, #0]
 800a606:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a60a:	6022      	str	r2, [r4, #0]
 800a60c:	f806 3b01 	strb.w	r3, [r6], #1
 800a610:	e7e4      	b.n	800a5dc <_scanf_float+0x158>
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	0610      	lsls	r0, r2, #24
 800a616:	f57f af65 	bpl.w	800a4e4 <_scanf_float+0x60>
 800a61a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a61e:	e7f4      	b.n	800a60a <_scanf_float+0x186>
 800a620:	f1ba 0f00 	cmp.w	sl, #0
 800a624:	d10e      	bne.n	800a644 <_scanf_float+0x1c0>
 800a626:	f1b9 0f00 	cmp.w	r9, #0
 800a62a:	d10e      	bne.n	800a64a <_scanf_float+0x1c6>
 800a62c:	6822      	ldr	r2, [r4, #0]
 800a62e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a632:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a636:	d108      	bne.n	800a64a <_scanf_float+0x1c6>
 800a638:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a63c:	6022      	str	r2, [r4, #0]
 800a63e:	f04f 0a01 	mov.w	sl, #1
 800a642:	e7e3      	b.n	800a60c <_scanf_float+0x188>
 800a644:	f1ba 0f02 	cmp.w	sl, #2
 800a648:	d055      	beq.n	800a6f6 <_scanf_float+0x272>
 800a64a:	2d01      	cmp	r5, #1
 800a64c:	d002      	beq.n	800a654 <_scanf_float+0x1d0>
 800a64e:	2d04      	cmp	r5, #4
 800a650:	f47f af48 	bne.w	800a4e4 <_scanf_float+0x60>
 800a654:	3501      	adds	r5, #1
 800a656:	b2ed      	uxtb	r5, r5
 800a658:	e7d8      	b.n	800a60c <_scanf_float+0x188>
 800a65a:	f1ba 0f01 	cmp.w	sl, #1
 800a65e:	f47f af41 	bne.w	800a4e4 <_scanf_float+0x60>
 800a662:	f04f 0a02 	mov.w	sl, #2
 800a666:	e7d1      	b.n	800a60c <_scanf_float+0x188>
 800a668:	b97d      	cbnz	r5, 800a68a <_scanf_float+0x206>
 800a66a:	f1b9 0f00 	cmp.w	r9, #0
 800a66e:	f47f af3c 	bne.w	800a4ea <_scanf_float+0x66>
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a678:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a67c:	f47f af39 	bne.w	800a4f2 <_scanf_float+0x6e>
 800a680:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a684:	6022      	str	r2, [r4, #0]
 800a686:	2501      	movs	r5, #1
 800a688:	e7c0      	b.n	800a60c <_scanf_float+0x188>
 800a68a:	2d03      	cmp	r5, #3
 800a68c:	d0e2      	beq.n	800a654 <_scanf_float+0x1d0>
 800a68e:	2d05      	cmp	r5, #5
 800a690:	e7de      	b.n	800a650 <_scanf_float+0x1cc>
 800a692:	2d02      	cmp	r5, #2
 800a694:	f47f af26 	bne.w	800a4e4 <_scanf_float+0x60>
 800a698:	2503      	movs	r5, #3
 800a69a:	e7b7      	b.n	800a60c <_scanf_float+0x188>
 800a69c:	2d06      	cmp	r5, #6
 800a69e:	f47f af21 	bne.w	800a4e4 <_scanf_float+0x60>
 800a6a2:	2507      	movs	r5, #7
 800a6a4:	e7b2      	b.n	800a60c <_scanf_float+0x188>
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	0591      	lsls	r1, r2, #22
 800a6aa:	f57f af1b 	bpl.w	800a4e4 <_scanf_float+0x60>
 800a6ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a6b2:	6022      	str	r2, [r4, #0]
 800a6b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6b8:	e7a8      	b.n	800a60c <_scanf_float+0x188>
 800a6ba:	6822      	ldr	r2, [r4, #0]
 800a6bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a6c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a6c4:	d006      	beq.n	800a6d4 <_scanf_float+0x250>
 800a6c6:	0550      	lsls	r0, r2, #21
 800a6c8:	f57f af0c 	bpl.w	800a4e4 <_scanf_float+0x60>
 800a6cc:	f1b9 0f00 	cmp.w	r9, #0
 800a6d0:	f43f af0f 	beq.w	800a4f2 <_scanf_float+0x6e>
 800a6d4:	0591      	lsls	r1, r2, #22
 800a6d6:	bf58      	it	pl
 800a6d8:	9901      	ldrpl	r1, [sp, #4]
 800a6da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a6de:	bf58      	it	pl
 800a6e0:	eba9 0101 	subpl.w	r1, r9, r1
 800a6e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a6e8:	bf58      	it	pl
 800a6ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a6ee:	6022      	str	r2, [r4, #0]
 800a6f0:	f04f 0900 	mov.w	r9, #0
 800a6f4:	e78a      	b.n	800a60c <_scanf_float+0x188>
 800a6f6:	f04f 0a03 	mov.w	sl, #3
 800a6fa:	e787      	b.n	800a60c <_scanf_float+0x188>
 800a6fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a700:	4639      	mov	r1, r7
 800a702:	4640      	mov	r0, r8
 800a704:	4798      	blx	r3
 800a706:	2800      	cmp	r0, #0
 800a708:	f43f aedf 	beq.w	800a4ca <_scanf_float+0x46>
 800a70c:	e6ea      	b.n	800a4e4 <_scanf_float+0x60>
 800a70e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a712:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a716:	463a      	mov	r2, r7
 800a718:	4640      	mov	r0, r8
 800a71a:	4798      	blx	r3
 800a71c:	6923      	ldr	r3, [r4, #16]
 800a71e:	3b01      	subs	r3, #1
 800a720:	6123      	str	r3, [r4, #16]
 800a722:	e6ec      	b.n	800a4fe <_scanf_float+0x7a>
 800a724:	1e6b      	subs	r3, r5, #1
 800a726:	2b06      	cmp	r3, #6
 800a728:	d825      	bhi.n	800a776 <_scanf_float+0x2f2>
 800a72a:	2d02      	cmp	r5, #2
 800a72c:	d836      	bhi.n	800a79c <_scanf_float+0x318>
 800a72e:	455e      	cmp	r6, fp
 800a730:	f67f aee8 	bls.w	800a504 <_scanf_float+0x80>
 800a734:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a738:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a73c:	463a      	mov	r2, r7
 800a73e:	4640      	mov	r0, r8
 800a740:	4798      	blx	r3
 800a742:	6923      	ldr	r3, [r4, #16]
 800a744:	3b01      	subs	r3, #1
 800a746:	6123      	str	r3, [r4, #16]
 800a748:	e7f1      	b.n	800a72e <_scanf_float+0x2aa>
 800a74a:	9802      	ldr	r0, [sp, #8]
 800a74c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a750:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a754:	9002      	str	r0, [sp, #8]
 800a756:	463a      	mov	r2, r7
 800a758:	4640      	mov	r0, r8
 800a75a:	4798      	blx	r3
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	3b01      	subs	r3, #1
 800a760:	6123      	str	r3, [r4, #16]
 800a762:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a766:	fa5f fa8a 	uxtb.w	sl, sl
 800a76a:	f1ba 0f02 	cmp.w	sl, #2
 800a76e:	d1ec      	bne.n	800a74a <_scanf_float+0x2c6>
 800a770:	3d03      	subs	r5, #3
 800a772:	b2ed      	uxtb	r5, r5
 800a774:	1b76      	subs	r6, r6, r5
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	05da      	lsls	r2, r3, #23
 800a77a:	d52f      	bpl.n	800a7dc <_scanf_float+0x358>
 800a77c:	055b      	lsls	r3, r3, #21
 800a77e:	d510      	bpl.n	800a7a2 <_scanf_float+0x31e>
 800a780:	455e      	cmp	r6, fp
 800a782:	f67f aebf 	bls.w	800a504 <_scanf_float+0x80>
 800a786:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a78a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a78e:	463a      	mov	r2, r7
 800a790:	4640      	mov	r0, r8
 800a792:	4798      	blx	r3
 800a794:	6923      	ldr	r3, [r4, #16]
 800a796:	3b01      	subs	r3, #1
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	e7f1      	b.n	800a780 <_scanf_float+0x2fc>
 800a79c:	46aa      	mov	sl, r5
 800a79e:	9602      	str	r6, [sp, #8]
 800a7a0:	e7df      	b.n	800a762 <_scanf_float+0x2de>
 800a7a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a7a6:	6923      	ldr	r3, [r4, #16]
 800a7a8:	2965      	cmp	r1, #101	; 0x65
 800a7aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7ae:	f106 35ff 	add.w	r5, r6, #4294967295
 800a7b2:	6123      	str	r3, [r4, #16]
 800a7b4:	d00c      	beq.n	800a7d0 <_scanf_float+0x34c>
 800a7b6:	2945      	cmp	r1, #69	; 0x45
 800a7b8:	d00a      	beq.n	800a7d0 <_scanf_float+0x34c>
 800a7ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7be:	463a      	mov	r2, r7
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	4798      	blx	r3
 800a7c4:	6923      	ldr	r3, [r4, #16]
 800a7c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	1eb5      	subs	r5, r6, #2
 800a7ce:	6123      	str	r3, [r4, #16]
 800a7d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7d4:	463a      	mov	r2, r7
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	4798      	blx	r3
 800a7da:	462e      	mov	r6, r5
 800a7dc:	6825      	ldr	r5, [r4, #0]
 800a7de:	f015 0510 	ands.w	r5, r5, #16
 800a7e2:	d159      	bne.n	800a898 <_scanf_float+0x414>
 800a7e4:	7035      	strb	r5, [r6, #0]
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7f0:	d11b      	bne.n	800a82a <_scanf_float+0x3a6>
 800a7f2:	9b01      	ldr	r3, [sp, #4]
 800a7f4:	454b      	cmp	r3, r9
 800a7f6:	eba3 0209 	sub.w	r2, r3, r9
 800a7fa:	d123      	bne.n	800a844 <_scanf_float+0x3c0>
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4659      	mov	r1, fp
 800a800:	4640      	mov	r0, r8
 800a802:	f000 fe97 	bl	800b534 <_strtod_r>
 800a806:	6822      	ldr	r2, [r4, #0]
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	f012 0f02 	tst.w	r2, #2
 800a80e:	ec57 6b10 	vmov	r6, r7, d0
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	d021      	beq.n	800a85a <_scanf_float+0x3d6>
 800a816:	9903      	ldr	r1, [sp, #12]
 800a818:	1d1a      	adds	r2, r3, #4
 800a81a:	600a      	str	r2, [r1, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	e9c3 6700 	strd	r6, r7, [r3]
 800a822:	68e3      	ldr	r3, [r4, #12]
 800a824:	3301      	adds	r3, #1
 800a826:	60e3      	str	r3, [r4, #12]
 800a828:	e66d      	b.n	800a506 <_scanf_float+0x82>
 800a82a:	9b04      	ldr	r3, [sp, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0e5      	beq.n	800a7fc <_scanf_float+0x378>
 800a830:	9905      	ldr	r1, [sp, #20]
 800a832:	230a      	movs	r3, #10
 800a834:	462a      	mov	r2, r5
 800a836:	3101      	adds	r1, #1
 800a838:	4640      	mov	r0, r8
 800a83a:	f000 ff03 	bl	800b644 <_strtol_r>
 800a83e:	9b04      	ldr	r3, [sp, #16]
 800a840:	9e05      	ldr	r6, [sp, #20]
 800a842:	1ac2      	subs	r2, r0, r3
 800a844:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a848:	429e      	cmp	r6, r3
 800a84a:	bf28      	it	cs
 800a84c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a850:	4912      	ldr	r1, [pc, #72]	; (800a89c <_scanf_float+0x418>)
 800a852:	4630      	mov	r0, r6
 800a854:	f000 f82c 	bl	800a8b0 <siprintf>
 800a858:	e7d0      	b.n	800a7fc <_scanf_float+0x378>
 800a85a:	9903      	ldr	r1, [sp, #12]
 800a85c:	f012 0f04 	tst.w	r2, #4
 800a860:	f103 0204 	add.w	r2, r3, #4
 800a864:	600a      	str	r2, [r1, #0]
 800a866:	d1d9      	bne.n	800a81c <_scanf_float+0x398>
 800a868:	f8d3 8000 	ldr.w	r8, [r3]
 800a86c:	ee10 2a10 	vmov	r2, s0
 800a870:	ee10 0a10 	vmov	r0, s0
 800a874:	463b      	mov	r3, r7
 800a876:	4639      	mov	r1, r7
 800a878:	f7f6 f930 	bl	8000adc <__aeabi_dcmpun>
 800a87c:	b128      	cbz	r0, 800a88a <_scanf_float+0x406>
 800a87e:	4808      	ldr	r0, [pc, #32]	; (800a8a0 <_scanf_float+0x41c>)
 800a880:	f000 f810 	bl	800a8a4 <nanf>
 800a884:	ed88 0a00 	vstr	s0, [r8]
 800a888:	e7cb      	b.n	800a822 <_scanf_float+0x39e>
 800a88a:	4630      	mov	r0, r6
 800a88c:	4639      	mov	r1, r7
 800a88e:	f7f6 f983 	bl	8000b98 <__aeabi_d2f>
 800a892:	f8c8 0000 	str.w	r0, [r8]
 800a896:	e7c4      	b.n	800a822 <_scanf_float+0x39e>
 800a898:	2500      	movs	r5, #0
 800a89a:	e634      	b.n	800a506 <_scanf_float+0x82>
 800a89c:	0800e5d4 	.word	0x0800e5d4
 800a8a0:	0800e9e0 	.word	0x0800e9e0

0800a8a4 <nanf>:
 800a8a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a8ac <nanf+0x8>
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	7fc00000 	.word	0x7fc00000

0800a8b0 <siprintf>:
 800a8b0:	b40e      	push	{r1, r2, r3}
 800a8b2:	b500      	push	{lr}
 800a8b4:	b09c      	sub	sp, #112	; 0x70
 800a8b6:	ab1d      	add	r3, sp, #116	; 0x74
 800a8b8:	9002      	str	r0, [sp, #8]
 800a8ba:	9006      	str	r0, [sp, #24]
 800a8bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8c0:	4809      	ldr	r0, [pc, #36]	; (800a8e8 <siprintf+0x38>)
 800a8c2:	9107      	str	r1, [sp, #28]
 800a8c4:	9104      	str	r1, [sp, #16]
 800a8c6:	4909      	ldr	r1, [pc, #36]	; (800a8ec <siprintf+0x3c>)
 800a8c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8cc:	9105      	str	r1, [sp, #20]
 800a8ce:	6800      	ldr	r0, [r0, #0]
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	a902      	add	r1, sp, #8
 800a8d4:	f002 fee2 	bl	800d69c <_svfiprintf_r>
 800a8d8:	9b02      	ldr	r3, [sp, #8]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]
 800a8de:	b01c      	add	sp, #112	; 0x70
 800a8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8e4:	b003      	add	sp, #12
 800a8e6:	4770      	bx	lr
 800a8e8:	2000018c 	.word	0x2000018c
 800a8ec:	ffff0208 	.word	0xffff0208

0800a8f0 <sulp>:
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	ec45 4b10 	vmov	d0, r4, r5
 800a8fa:	4616      	mov	r6, r2
 800a8fc:	f002 fc2c 	bl	800d158 <__ulp>
 800a900:	ec51 0b10 	vmov	r0, r1, d0
 800a904:	b17e      	cbz	r6, 800a926 <sulp+0x36>
 800a906:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a90a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a90e:	2b00      	cmp	r3, #0
 800a910:	dd09      	ble.n	800a926 <sulp+0x36>
 800a912:	051b      	lsls	r3, r3, #20
 800a914:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a918:	2400      	movs	r4, #0
 800a91a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a91e:	4622      	mov	r2, r4
 800a920:	462b      	mov	r3, r5
 800a922:	f7f5 fe41 	bl	80005a8 <__aeabi_dmul>
 800a926:	bd70      	pop	{r4, r5, r6, pc}

0800a928 <_strtod_l>:
 800a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	ed2d 8b02 	vpush	{d8}
 800a930:	b09d      	sub	sp, #116	; 0x74
 800a932:	461f      	mov	r7, r3
 800a934:	2300      	movs	r3, #0
 800a936:	9318      	str	r3, [sp, #96]	; 0x60
 800a938:	4ba2      	ldr	r3, [pc, #648]	; (800abc4 <_strtod_l+0x29c>)
 800a93a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	9305      	str	r3, [sp, #20]
 800a940:	4604      	mov	r4, r0
 800a942:	4618      	mov	r0, r3
 800a944:	4688      	mov	r8, r1
 800a946:	f7f5 fc1b 	bl	8000180 <strlen>
 800a94a:	f04f 0a00 	mov.w	sl, #0
 800a94e:	4605      	mov	r5, r0
 800a950:	f04f 0b00 	mov.w	fp, #0
 800a954:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	2a2b      	cmp	r2, #43	; 0x2b
 800a95e:	d04e      	beq.n	800a9fe <_strtod_l+0xd6>
 800a960:	d83b      	bhi.n	800a9da <_strtod_l+0xb2>
 800a962:	2a0d      	cmp	r2, #13
 800a964:	d834      	bhi.n	800a9d0 <_strtod_l+0xa8>
 800a966:	2a08      	cmp	r2, #8
 800a968:	d834      	bhi.n	800a9d4 <_strtod_l+0xac>
 800a96a:	2a00      	cmp	r2, #0
 800a96c:	d03e      	beq.n	800a9ec <_strtod_l+0xc4>
 800a96e:	2300      	movs	r3, #0
 800a970:	930a      	str	r3, [sp, #40]	; 0x28
 800a972:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a974:	7833      	ldrb	r3, [r6, #0]
 800a976:	2b30      	cmp	r3, #48	; 0x30
 800a978:	f040 80b0 	bne.w	800aadc <_strtod_l+0x1b4>
 800a97c:	7873      	ldrb	r3, [r6, #1]
 800a97e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a982:	2b58      	cmp	r3, #88	; 0x58
 800a984:	d168      	bne.n	800aa58 <_strtod_l+0x130>
 800a986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	ab18      	add	r3, sp, #96	; 0x60
 800a98c:	9702      	str	r7, [sp, #8]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	4a8d      	ldr	r2, [pc, #564]	; (800abc8 <_strtod_l+0x2a0>)
 800a992:	ab19      	add	r3, sp, #100	; 0x64
 800a994:	a917      	add	r1, sp, #92	; 0x5c
 800a996:	4620      	mov	r0, r4
 800a998:	f001 fd38 	bl	800c40c <__gethex>
 800a99c:	f010 0707 	ands.w	r7, r0, #7
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	d005      	beq.n	800a9b0 <_strtod_l+0x88>
 800a9a4:	2f06      	cmp	r7, #6
 800a9a6:	d12c      	bne.n	800aa02 <_strtod_l+0xda>
 800a9a8:	3601      	adds	r6, #1
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	9617      	str	r6, [sp, #92]	; 0x5c
 800a9ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a9b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f040 8590 	bne.w	800b4d8 <_strtod_l+0xbb0>
 800a9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ba:	b1eb      	cbz	r3, 800a9f8 <_strtod_l+0xd0>
 800a9bc:	4652      	mov	r2, sl
 800a9be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9c2:	ec43 2b10 	vmov	d0, r2, r3
 800a9c6:	b01d      	add	sp, #116	; 0x74
 800a9c8:	ecbd 8b02 	vpop	{d8}
 800a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d0:	2a20      	cmp	r2, #32
 800a9d2:	d1cc      	bne.n	800a96e <_strtod_l+0x46>
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a9d8:	e7be      	b.n	800a958 <_strtod_l+0x30>
 800a9da:	2a2d      	cmp	r2, #45	; 0x2d
 800a9dc:	d1c7      	bne.n	800a96e <_strtod_l+0x46>
 800a9de:	2201      	movs	r2, #1
 800a9e0:	920a      	str	r2, [sp, #40]	; 0x28
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9e6:	785b      	ldrb	r3, [r3, #1]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1c2      	bne.n	800a972 <_strtod_l+0x4a>
 800a9ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f040 856e 	bne.w	800b4d4 <_strtod_l+0xbac>
 800a9f8:	4652      	mov	r2, sl
 800a9fa:	465b      	mov	r3, fp
 800a9fc:	e7e1      	b.n	800a9c2 <_strtod_l+0x9a>
 800a9fe:	2200      	movs	r2, #0
 800aa00:	e7ee      	b.n	800a9e0 <_strtod_l+0xb8>
 800aa02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa04:	b13a      	cbz	r2, 800aa16 <_strtod_l+0xee>
 800aa06:	2135      	movs	r1, #53	; 0x35
 800aa08:	a81a      	add	r0, sp, #104	; 0x68
 800aa0a:	f002 fcb0 	bl	800d36e <__copybits>
 800aa0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa10:	4620      	mov	r0, r4
 800aa12:	f002 f86f 	bl	800caf4 <_Bfree>
 800aa16:	3f01      	subs	r7, #1
 800aa18:	2f04      	cmp	r7, #4
 800aa1a:	d806      	bhi.n	800aa2a <_strtod_l+0x102>
 800aa1c:	e8df f007 	tbb	[pc, r7]
 800aa20:	1714030a 	.word	0x1714030a
 800aa24:	0a          	.byte	0x0a
 800aa25:	00          	.byte	0x00
 800aa26:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800aa2a:	0728      	lsls	r0, r5, #28
 800aa2c:	d5c0      	bpl.n	800a9b0 <_strtod_l+0x88>
 800aa2e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aa32:	e7bd      	b.n	800a9b0 <_strtod_l+0x88>
 800aa34:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800aa38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aa3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aa3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa46:	e7f0      	b.n	800aa2a <_strtod_l+0x102>
 800aa48:	f8df b180 	ldr.w	fp, [pc, #384]	; 800abcc <_strtod_l+0x2a4>
 800aa4c:	e7ed      	b.n	800aa2a <_strtod_l+0x102>
 800aa4e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aa52:	f04f 3aff 	mov.w	sl, #4294967295
 800aa56:	e7e8      	b.n	800aa2a <_strtod_l+0x102>
 800aa58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa5e:	785b      	ldrb	r3, [r3, #1]
 800aa60:	2b30      	cmp	r3, #48	; 0x30
 800aa62:	d0f9      	beq.n	800aa58 <_strtod_l+0x130>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d0a3      	beq.n	800a9b0 <_strtod_l+0x88>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	f04f 0900 	mov.w	r9, #0
 800aa6e:	9304      	str	r3, [sp, #16]
 800aa70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa72:	9308      	str	r3, [sp, #32]
 800aa74:	f8cd 901c 	str.w	r9, [sp, #28]
 800aa78:	464f      	mov	r7, r9
 800aa7a:	220a      	movs	r2, #10
 800aa7c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aa7e:	7806      	ldrb	r6, [r0, #0]
 800aa80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aa84:	b2d9      	uxtb	r1, r3
 800aa86:	2909      	cmp	r1, #9
 800aa88:	d92a      	bls.n	800aae0 <_strtod_l+0x1b8>
 800aa8a:	9905      	ldr	r1, [sp, #20]
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	f002 ff1f 	bl	800d8d0 <strncmp>
 800aa92:	b398      	cbz	r0, 800aafc <_strtod_l+0x1d4>
 800aa94:	2000      	movs	r0, #0
 800aa96:	4632      	mov	r2, r6
 800aa98:	463d      	mov	r5, r7
 800aa9a:	9005      	str	r0, [sp, #20]
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2a65      	cmp	r2, #101	; 0x65
 800aaa0:	d001      	beq.n	800aaa6 <_strtod_l+0x17e>
 800aaa2:	2a45      	cmp	r2, #69	; 0x45
 800aaa4:	d118      	bne.n	800aad8 <_strtod_l+0x1b0>
 800aaa6:	b91d      	cbnz	r5, 800aab0 <_strtod_l+0x188>
 800aaa8:	9a04      	ldr	r2, [sp, #16]
 800aaaa:	4302      	orrs	r2, r0
 800aaac:	d09e      	beq.n	800a9ec <_strtod_l+0xc4>
 800aaae:	2500      	movs	r5, #0
 800aab0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800aab4:	f108 0201 	add.w	r2, r8, #1
 800aab8:	9217      	str	r2, [sp, #92]	; 0x5c
 800aaba:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aabe:	2a2b      	cmp	r2, #43	; 0x2b
 800aac0:	d075      	beq.n	800abae <_strtod_l+0x286>
 800aac2:	2a2d      	cmp	r2, #45	; 0x2d
 800aac4:	d07b      	beq.n	800abbe <_strtod_l+0x296>
 800aac6:	f04f 0c00 	mov.w	ip, #0
 800aaca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aace:	2909      	cmp	r1, #9
 800aad0:	f240 8082 	bls.w	800abd8 <_strtod_l+0x2b0>
 800aad4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aad8:	2600      	movs	r6, #0
 800aada:	e09d      	b.n	800ac18 <_strtod_l+0x2f0>
 800aadc:	2300      	movs	r3, #0
 800aade:	e7c4      	b.n	800aa6a <_strtod_l+0x142>
 800aae0:	2f08      	cmp	r7, #8
 800aae2:	bfd8      	it	le
 800aae4:	9907      	ldrle	r1, [sp, #28]
 800aae6:	f100 0001 	add.w	r0, r0, #1
 800aaea:	bfda      	itte	le
 800aaec:	fb02 3301 	mlale	r3, r2, r1, r3
 800aaf0:	9307      	strle	r3, [sp, #28]
 800aaf2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aaf6:	3701      	adds	r7, #1
 800aaf8:	9017      	str	r0, [sp, #92]	; 0x5c
 800aafa:	e7bf      	b.n	800aa7c <_strtod_l+0x154>
 800aafc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aafe:	195a      	adds	r2, r3, r5
 800ab00:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab02:	5d5a      	ldrb	r2, [r3, r5]
 800ab04:	2f00      	cmp	r7, #0
 800ab06:	d037      	beq.n	800ab78 <_strtod_l+0x250>
 800ab08:	9005      	str	r0, [sp, #20]
 800ab0a:	463d      	mov	r5, r7
 800ab0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ab10:	2b09      	cmp	r3, #9
 800ab12:	d912      	bls.n	800ab3a <_strtod_l+0x212>
 800ab14:	2301      	movs	r3, #1
 800ab16:	e7c2      	b.n	800aa9e <_strtod_l+0x176>
 800ab18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab1e:	785a      	ldrb	r2, [r3, #1]
 800ab20:	3001      	adds	r0, #1
 800ab22:	2a30      	cmp	r2, #48	; 0x30
 800ab24:	d0f8      	beq.n	800ab18 <_strtod_l+0x1f0>
 800ab26:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ab2a:	2b08      	cmp	r3, #8
 800ab2c:	f200 84d9 	bhi.w	800b4e2 <_strtod_l+0xbba>
 800ab30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab32:	9005      	str	r0, [sp, #20]
 800ab34:	2000      	movs	r0, #0
 800ab36:	9308      	str	r3, [sp, #32]
 800ab38:	4605      	mov	r5, r0
 800ab3a:	3a30      	subs	r2, #48	; 0x30
 800ab3c:	f100 0301 	add.w	r3, r0, #1
 800ab40:	d014      	beq.n	800ab6c <_strtod_l+0x244>
 800ab42:	9905      	ldr	r1, [sp, #20]
 800ab44:	4419      	add	r1, r3
 800ab46:	9105      	str	r1, [sp, #20]
 800ab48:	462b      	mov	r3, r5
 800ab4a:	eb00 0e05 	add.w	lr, r0, r5
 800ab4e:	210a      	movs	r1, #10
 800ab50:	4573      	cmp	r3, lr
 800ab52:	d113      	bne.n	800ab7c <_strtod_l+0x254>
 800ab54:	182b      	adds	r3, r5, r0
 800ab56:	2b08      	cmp	r3, #8
 800ab58:	f105 0501 	add.w	r5, r5, #1
 800ab5c:	4405      	add	r5, r0
 800ab5e:	dc1c      	bgt.n	800ab9a <_strtod_l+0x272>
 800ab60:	9907      	ldr	r1, [sp, #28]
 800ab62:	230a      	movs	r3, #10
 800ab64:	fb03 2301 	mla	r3, r3, r1, r2
 800ab68:	9307      	str	r3, [sp, #28]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab6e:	1c51      	adds	r1, r2, #1
 800ab70:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab72:	7852      	ldrb	r2, [r2, #1]
 800ab74:	4618      	mov	r0, r3
 800ab76:	e7c9      	b.n	800ab0c <_strtod_l+0x1e4>
 800ab78:	4638      	mov	r0, r7
 800ab7a:	e7d2      	b.n	800ab22 <_strtod_l+0x1fa>
 800ab7c:	2b08      	cmp	r3, #8
 800ab7e:	dc04      	bgt.n	800ab8a <_strtod_l+0x262>
 800ab80:	9e07      	ldr	r6, [sp, #28]
 800ab82:	434e      	muls	r6, r1
 800ab84:	9607      	str	r6, [sp, #28]
 800ab86:	3301      	adds	r3, #1
 800ab88:	e7e2      	b.n	800ab50 <_strtod_l+0x228>
 800ab8a:	f103 0c01 	add.w	ip, r3, #1
 800ab8e:	f1bc 0f10 	cmp.w	ip, #16
 800ab92:	bfd8      	it	le
 800ab94:	fb01 f909 	mulle.w	r9, r1, r9
 800ab98:	e7f5      	b.n	800ab86 <_strtod_l+0x25e>
 800ab9a:	2d10      	cmp	r5, #16
 800ab9c:	bfdc      	itt	le
 800ab9e:	230a      	movle	r3, #10
 800aba0:	fb03 2909 	mlale	r9, r3, r9, r2
 800aba4:	e7e1      	b.n	800ab6a <_strtod_l+0x242>
 800aba6:	2300      	movs	r3, #0
 800aba8:	9305      	str	r3, [sp, #20]
 800abaa:	2301      	movs	r3, #1
 800abac:	e77c      	b.n	800aaa8 <_strtod_l+0x180>
 800abae:	f04f 0c00 	mov.w	ip, #0
 800abb2:	f108 0202 	add.w	r2, r8, #2
 800abb6:	9217      	str	r2, [sp, #92]	; 0x5c
 800abb8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800abbc:	e785      	b.n	800aaca <_strtod_l+0x1a2>
 800abbe:	f04f 0c01 	mov.w	ip, #1
 800abc2:	e7f6      	b.n	800abb2 <_strtod_l+0x28a>
 800abc4:	0800e828 	.word	0x0800e828
 800abc8:	0800e5dc 	.word	0x0800e5dc
 800abcc:	7ff00000 	.word	0x7ff00000
 800abd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abd2:	1c51      	adds	r1, r2, #1
 800abd4:	9117      	str	r1, [sp, #92]	; 0x5c
 800abd6:	7852      	ldrb	r2, [r2, #1]
 800abd8:	2a30      	cmp	r2, #48	; 0x30
 800abda:	d0f9      	beq.n	800abd0 <_strtod_l+0x2a8>
 800abdc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800abe0:	2908      	cmp	r1, #8
 800abe2:	f63f af79 	bhi.w	800aad8 <_strtod_l+0x1b0>
 800abe6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800abea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abec:	9206      	str	r2, [sp, #24]
 800abee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abf0:	1c51      	adds	r1, r2, #1
 800abf2:	9117      	str	r1, [sp, #92]	; 0x5c
 800abf4:	7852      	ldrb	r2, [r2, #1]
 800abf6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800abfa:	2e09      	cmp	r6, #9
 800abfc:	d937      	bls.n	800ac6e <_strtod_l+0x346>
 800abfe:	9e06      	ldr	r6, [sp, #24]
 800ac00:	1b89      	subs	r1, r1, r6
 800ac02:	2908      	cmp	r1, #8
 800ac04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ac08:	dc02      	bgt.n	800ac10 <_strtod_l+0x2e8>
 800ac0a:	4576      	cmp	r6, lr
 800ac0c:	bfa8      	it	ge
 800ac0e:	4676      	movge	r6, lr
 800ac10:	f1bc 0f00 	cmp.w	ip, #0
 800ac14:	d000      	beq.n	800ac18 <_strtod_l+0x2f0>
 800ac16:	4276      	negs	r6, r6
 800ac18:	2d00      	cmp	r5, #0
 800ac1a:	d14d      	bne.n	800acb8 <_strtod_l+0x390>
 800ac1c:	9904      	ldr	r1, [sp, #16]
 800ac1e:	4301      	orrs	r1, r0
 800ac20:	f47f aec6 	bne.w	800a9b0 <_strtod_l+0x88>
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f47f aee1 	bne.w	800a9ec <_strtod_l+0xc4>
 800ac2a:	2a69      	cmp	r2, #105	; 0x69
 800ac2c:	d027      	beq.n	800ac7e <_strtod_l+0x356>
 800ac2e:	dc24      	bgt.n	800ac7a <_strtod_l+0x352>
 800ac30:	2a49      	cmp	r2, #73	; 0x49
 800ac32:	d024      	beq.n	800ac7e <_strtod_l+0x356>
 800ac34:	2a4e      	cmp	r2, #78	; 0x4e
 800ac36:	f47f aed9 	bne.w	800a9ec <_strtod_l+0xc4>
 800ac3a:	499f      	ldr	r1, [pc, #636]	; (800aeb8 <_strtod_l+0x590>)
 800ac3c:	a817      	add	r0, sp, #92	; 0x5c
 800ac3e:	f001 fe3d 	bl	800c8bc <__match>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	f43f aed2 	beq.w	800a9ec <_strtod_l+0xc4>
 800ac48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b28      	cmp	r3, #40	; 0x28
 800ac4e:	d12d      	bne.n	800acac <_strtod_l+0x384>
 800ac50:	499a      	ldr	r1, [pc, #616]	; (800aebc <_strtod_l+0x594>)
 800ac52:	aa1a      	add	r2, sp, #104	; 0x68
 800ac54:	a817      	add	r0, sp, #92	; 0x5c
 800ac56:	f001 fe45 	bl	800c8e4 <__hexnan>
 800ac5a:	2805      	cmp	r0, #5
 800ac5c:	d126      	bne.n	800acac <_strtod_l+0x384>
 800ac5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ac64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ac68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ac6c:	e6a0      	b.n	800a9b0 <_strtod_l+0x88>
 800ac6e:	210a      	movs	r1, #10
 800ac70:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ac74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ac78:	e7b9      	b.n	800abee <_strtod_l+0x2c6>
 800ac7a:	2a6e      	cmp	r2, #110	; 0x6e
 800ac7c:	e7db      	b.n	800ac36 <_strtod_l+0x30e>
 800ac7e:	4990      	ldr	r1, [pc, #576]	; (800aec0 <_strtod_l+0x598>)
 800ac80:	a817      	add	r0, sp, #92	; 0x5c
 800ac82:	f001 fe1b 	bl	800c8bc <__match>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	f43f aeb0 	beq.w	800a9ec <_strtod_l+0xc4>
 800ac8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac8e:	498d      	ldr	r1, [pc, #564]	; (800aec4 <_strtod_l+0x59c>)
 800ac90:	3b01      	subs	r3, #1
 800ac92:	a817      	add	r0, sp, #92	; 0x5c
 800ac94:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac96:	f001 fe11 	bl	800c8bc <__match>
 800ac9a:	b910      	cbnz	r0, 800aca2 <_strtod_l+0x37a>
 800ac9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac9e:	3301      	adds	r3, #1
 800aca0:	9317      	str	r3, [sp, #92]	; 0x5c
 800aca2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800aed4 <_strtod_l+0x5ac>
 800aca6:	f04f 0a00 	mov.w	sl, #0
 800acaa:	e681      	b.n	800a9b0 <_strtod_l+0x88>
 800acac:	4886      	ldr	r0, [pc, #536]	; (800aec8 <_strtod_l+0x5a0>)
 800acae:	f002 fdf7 	bl	800d8a0 <nan>
 800acb2:	ec5b ab10 	vmov	sl, fp, d0
 800acb6:	e67b      	b.n	800a9b0 <_strtod_l+0x88>
 800acb8:	9b05      	ldr	r3, [sp, #20]
 800acba:	9807      	ldr	r0, [sp, #28]
 800acbc:	1af3      	subs	r3, r6, r3
 800acbe:	2f00      	cmp	r7, #0
 800acc0:	bf08      	it	eq
 800acc2:	462f      	moveq	r7, r5
 800acc4:	2d10      	cmp	r5, #16
 800acc6:	9306      	str	r3, [sp, #24]
 800acc8:	46a8      	mov	r8, r5
 800acca:	bfa8      	it	ge
 800accc:	f04f 0810 	movge.w	r8, #16
 800acd0:	f7f5 fbf0 	bl	80004b4 <__aeabi_ui2d>
 800acd4:	2d09      	cmp	r5, #9
 800acd6:	4682      	mov	sl, r0
 800acd8:	468b      	mov	fp, r1
 800acda:	dd13      	ble.n	800ad04 <_strtod_l+0x3dc>
 800acdc:	4b7b      	ldr	r3, [pc, #492]	; (800aecc <_strtod_l+0x5a4>)
 800acde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ace2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ace6:	f7f5 fc5f 	bl	80005a8 <__aeabi_dmul>
 800acea:	4682      	mov	sl, r0
 800acec:	4648      	mov	r0, r9
 800acee:	468b      	mov	fp, r1
 800acf0:	f7f5 fbe0 	bl	80004b4 <__aeabi_ui2d>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4650      	mov	r0, sl
 800acfa:	4659      	mov	r1, fp
 800acfc:	f7f5 fa9e 	bl	800023c <__adddf3>
 800ad00:	4682      	mov	sl, r0
 800ad02:	468b      	mov	fp, r1
 800ad04:	2d0f      	cmp	r5, #15
 800ad06:	dc38      	bgt.n	800ad7a <_strtod_l+0x452>
 800ad08:	9b06      	ldr	r3, [sp, #24]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f43f ae50 	beq.w	800a9b0 <_strtod_l+0x88>
 800ad10:	dd24      	ble.n	800ad5c <_strtod_l+0x434>
 800ad12:	2b16      	cmp	r3, #22
 800ad14:	dc0b      	bgt.n	800ad2e <_strtod_l+0x406>
 800ad16:	496d      	ldr	r1, [pc, #436]	; (800aecc <_strtod_l+0x5a4>)
 800ad18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad20:	4652      	mov	r2, sl
 800ad22:	465b      	mov	r3, fp
 800ad24:	f7f5 fc40 	bl	80005a8 <__aeabi_dmul>
 800ad28:	4682      	mov	sl, r0
 800ad2a:	468b      	mov	fp, r1
 800ad2c:	e640      	b.n	800a9b0 <_strtod_l+0x88>
 800ad2e:	9a06      	ldr	r2, [sp, #24]
 800ad30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ad34:	4293      	cmp	r3, r2
 800ad36:	db20      	blt.n	800ad7a <_strtod_l+0x452>
 800ad38:	4c64      	ldr	r4, [pc, #400]	; (800aecc <_strtod_l+0x5a4>)
 800ad3a:	f1c5 050f 	rsb	r5, r5, #15
 800ad3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ad42:	4652      	mov	r2, sl
 800ad44:	465b      	mov	r3, fp
 800ad46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4a:	f7f5 fc2d 	bl	80005a8 <__aeabi_dmul>
 800ad4e:	9b06      	ldr	r3, [sp, #24]
 800ad50:	1b5d      	subs	r5, r3, r5
 800ad52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ad56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ad5a:	e7e3      	b.n	800ad24 <_strtod_l+0x3fc>
 800ad5c:	9b06      	ldr	r3, [sp, #24]
 800ad5e:	3316      	adds	r3, #22
 800ad60:	db0b      	blt.n	800ad7a <_strtod_l+0x452>
 800ad62:	9b05      	ldr	r3, [sp, #20]
 800ad64:	1b9e      	subs	r6, r3, r6
 800ad66:	4b59      	ldr	r3, [pc, #356]	; (800aecc <_strtod_l+0x5a4>)
 800ad68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ad6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad70:	4650      	mov	r0, sl
 800ad72:	4659      	mov	r1, fp
 800ad74:	f7f5 fd42 	bl	80007fc <__aeabi_ddiv>
 800ad78:	e7d6      	b.n	800ad28 <_strtod_l+0x400>
 800ad7a:	9b06      	ldr	r3, [sp, #24]
 800ad7c:	eba5 0808 	sub.w	r8, r5, r8
 800ad80:	4498      	add	r8, r3
 800ad82:	f1b8 0f00 	cmp.w	r8, #0
 800ad86:	dd74      	ble.n	800ae72 <_strtod_l+0x54a>
 800ad88:	f018 030f 	ands.w	r3, r8, #15
 800ad8c:	d00a      	beq.n	800ada4 <_strtod_l+0x47c>
 800ad8e:	494f      	ldr	r1, [pc, #316]	; (800aecc <_strtod_l+0x5a4>)
 800ad90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad94:	4652      	mov	r2, sl
 800ad96:	465b      	mov	r3, fp
 800ad98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad9c:	f7f5 fc04 	bl	80005a8 <__aeabi_dmul>
 800ada0:	4682      	mov	sl, r0
 800ada2:	468b      	mov	fp, r1
 800ada4:	f038 080f 	bics.w	r8, r8, #15
 800ada8:	d04f      	beq.n	800ae4a <_strtod_l+0x522>
 800adaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800adae:	dd22      	ble.n	800adf6 <_strtod_l+0x4ce>
 800adb0:	2500      	movs	r5, #0
 800adb2:	462e      	mov	r6, r5
 800adb4:	9507      	str	r5, [sp, #28]
 800adb6:	9505      	str	r5, [sp, #20]
 800adb8:	2322      	movs	r3, #34	; 0x22
 800adba:	f8df b118 	ldr.w	fp, [pc, #280]	; 800aed4 <_strtod_l+0x5ac>
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	f04f 0a00 	mov.w	sl, #0
 800adc4:	9b07      	ldr	r3, [sp, #28]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f43f adf2 	beq.w	800a9b0 <_strtod_l+0x88>
 800adcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800adce:	4620      	mov	r0, r4
 800add0:	f001 fe90 	bl	800caf4 <_Bfree>
 800add4:	9905      	ldr	r1, [sp, #20]
 800add6:	4620      	mov	r0, r4
 800add8:	f001 fe8c 	bl	800caf4 <_Bfree>
 800addc:	4631      	mov	r1, r6
 800adde:	4620      	mov	r0, r4
 800ade0:	f001 fe88 	bl	800caf4 <_Bfree>
 800ade4:	9907      	ldr	r1, [sp, #28]
 800ade6:	4620      	mov	r0, r4
 800ade8:	f001 fe84 	bl	800caf4 <_Bfree>
 800adec:	4629      	mov	r1, r5
 800adee:	4620      	mov	r0, r4
 800adf0:	f001 fe80 	bl	800caf4 <_Bfree>
 800adf4:	e5dc      	b.n	800a9b0 <_strtod_l+0x88>
 800adf6:	4b36      	ldr	r3, [pc, #216]	; (800aed0 <_strtod_l+0x5a8>)
 800adf8:	9304      	str	r3, [sp, #16]
 800adfa:	2300      	movs	r3, #0
 800adfc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ae00:	4650      	mov	r0, sl
 800ae02:	4659      	mov	r1, fp
 800ae04:	4699      	mov	r9, r3
 800ae06:	f1b8 0f01 	cmp.w	r8, #1
 800ae0a:	dc21      	bgt.n	800ae50 <_strtod_l+0x528>
 800ae0c:	b10b      	cbz	r3, 800ae12 <_strtod_l+0x4ea>
 800ae0e:	4682      	mov	sl, r0
 800ae10:	468b      	mov	fp, r1
 800ae12:	4b2f      	ldr	r3, [pc, #188]	; (800aed0 <_strtod_l+0x5a8>)
 800ae14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ae18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ae1c:	4652      	mov	r2, sl
 800ae1e:	465b      	mov	r3, fp
 800ae20:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ae24:	f7f5 fbc0 	bl	80005a8 <__aeabi_dmul>
 800ae28:	4b2a      	ldr	r3, [pc, #168]	; (800aed4 <_strtod_l+0x5ac>)
 800ae2a:	460a      	mov	r2, r1
 800ae2c:	400b      	ands	r3, r1
 800ae2e:	492a      	ldr	r1, [pc, #168]	; (800aed8 <_strtod_l+0x5b0>)
 800ae30:	428b      	cmp	r3, r1
 800ae32:	4682      	mov	sl, r0
 800ae34:	d8bc      	bhi.n	800adb0 <_strtod_l+0x488>
 800ae36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ae3a:	428b      	cmp	r3, r1
 800ae3c:	bf86      	itte	hi
 800ae3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800aedc <_strtod_l+0x5b4>
 800ae42:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	e084      	b.n	800af5a <_strtod_l+0x632>
 800ae50:	f018 0f01 	tst.w	r8, #1
 800ae54:	d005      	beq.n	800ae62 <_strtod_l+0x53a>
 800ae56:	9b04      	ldr	r3, [sp, #16]
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f7f5 fba4 	bl	80005a8 <__aeabi_dmul>
 800ae60:	2301      	movs	r3, #1
 800ae62:	9a04      	ldr	r2, [sp, #16]
 800ae64:	3208      	adds	r2, #8
 800ae66:	f109 0901 	add.w	r9, r9, #1
 800ae6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae6e:	9204      	str	r2, [sp, #16]
 800ae70:	e7c9      	b.n	800ae06 <_strtod_l+0x4de>
 800ae72:	d0ea      	beq.n	800ae4a <_strtod_l+0x522>
 800ae74:	f1c8 0800 	rsb	r8, r8, #0
 800ae78:	f018 020f 	ands.w	r2, r8, #15
 800ae7c:	d00a      	beq.n	800ae94 <_strtod_l+0x56c>
 800ae7e:	4b13      	ldr	r3, [pc, #76]	; (800aecc <_strtod_l+0x5a4>)
 800ae80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae84:	4650      	mov	r0, sl
 800ae86:	4659      	mov	r1, fp
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	f7f5 fcb6 	bl	80007fc <__aeabi_ddiv>
 800ae90:	4682      	mov	sl, r0
 800ae92:	468b      	mov	fp, r1
 800ae94:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ae98:	d0d7      	beq.n	800ae4a <_strtod_l+0x522>
 800ae9a:	f1b8 0f1f 	cmp.w	r8, #31
 800ae9e:	dd1f      	ble.n	800aee0 <_strtod_l+0x5b8>
 800aea0:	2500      	movs	r5, #0
 800aea2:	462e      	mov	r6, r5
 800aea4:	9507      	str	r5, [sp, #28]
 800aea6:	9505      	str	r5, [sp, #20]
 800aea8:	2322      	movs	r3, #34	; 0x22
 800aeaa:	f04f 0a00 	mov.w	sl, #0
 800aeae:	f04f 0b00 	mov.w	fp, #0
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	e786      	b.n	800adc4 <_strtod_l+0x49c>
 800aeb6:	bf00      	nop
 800aeb8:	0800e5ad 	.word	0x0800e5ad
 800aebc:	0800e5f0 	.word	0x0800e5f0
 800aec0:	0800e5a5 	.word	0x0800e5a5
 800aec4:	0800e734 	.word	0x0800e734
 800aec8:	0800e9e0 	.word	0x0800e9e0
 800aecc:	0800e8c0 	.word	0x0800e8c0
 800aed0:	0800e898 	.word	0x0800e898
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	7ca00000 	.word	0x7ca00000
 800aedc:	7fefffff 	.word	0x7fefffff
 800aee0:	f018 0310 	ands.w	r3, r8, #16
 800aee4:	bf18      	it	ne
 800aee6:	236a      	movne	r3, #106	; 0x6a
 800aee8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b298 <_strtod_l+0x970>
 800aeec:	9304      	str	r3, [sp, #16]
 800aeee:	4650      	mov	r0, sl
 800aef0:	4659      	mov	r1, fp
 800aef2:	2300      	movs	r3, #0
 800aef4:	f018 0f01 	tst.w	r8, #1
 800aef8:	d004      	beq.n	800af04 <_strtod_l+0x5dc>
 800aefa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aefe:	f7f5 fb53 	bl	80005a8 <__aeabi_dmul>
 800af02:	2301      	movs	r3, #1
 800af04:	ea5f 0868 	movs.w	r8, r8, asr #1
 800af08:	f109 0908 	add.w	r9, r9, #8
 800af0c:	d1f2      	bne.n	800aef4 <_strtod_l+0x5cc>
 800af0e:	b10b      	cbz	r3, 800af14 <_strtod_l+0x5ec>
 800af10:	4682      	mov	sl, r0
 800af12:	468b      	mov	fp, r1
 800af14:	9b04      	ldr	r3, [sp, #16]
 800af16:	b1c3      	cbz	r3, 800af4a <_strtod_l+0x622>
 800af18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800af20:	2b00      	cmp	r3, #0
 800af22:	4659      	mov	r1, fp
 800af24:	dd11      	ble.n	800af4a <_strtod_l+0x622>
 800af26:	2b1f      	cmp	r3, #31
 800af28:	f340 8124 	ble.w	800b174 <_strtod_l+0x84c>
 800af2c:	2b34      	cmp	r3, #52	; 0x34
 800af2e:	bfde      	ittt	le
 800af30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800af34:	f04f 33ff 	movle.w	r3, #4294967295
 800af38:	fa03 f202 	lslle.w	r2, r3, r2
 800af3c:	f04f 0a00 	mov.w	sl, #0
 800af40:	bfcc      	ite	gt
 800af42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800af46:	ea02 0b01 	andle.w	fp, r2, r1
 800af4a:	2200      	movs	r2, #0
 800af4c:	2300      	movs	r3, #0
 800af4e:	4650      	mov	r0, sl
 800af50:	4659      	mov	r1, fp
 800af52:	f7f5 fd91 	bl	8000a78 <__aeabi_dcmpeq>
 800af56:	2800      	cmp	r0, #0
 800af58:	d1a2      	bne.n	800aea0 <_strtod_l+0x578>
 800af5a:	9b07      	ldr	r3, [sp, #28]
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	9908      	ldr	r1, [sp, #32]
 800af60:	462b      	mov	r3, r5
 800af62:	463a      	mov	r2, r7
 800af64:	4620      	mov	r0, r4
 800af66:	f001 fe2d 	bl	800cbc4 <__s2b>
 800af6a:	9007      	str	r0, [sp, #28]
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f43f af1f 	beq.w	800adb0 <_strtod_l+0x488>
 800af72:	9b05      	ldr	r3, [sp, #20]
 800af74:	1b9e      	subs	r6, r3, r6
 800af76:	9b06      	ldr	r3, [sp, #24]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	bfb4      	ite	lt
 800af7c:	4633      	movlt	r3, r6
 800af7e:	2300      	movge	r3, #0
 800af80:	930c      	str	r3, [sp, #48]	; 0x30
 800af82:	9b06      	ldr	r3, [sp, #24]
 800af84:	2500      	movs	r5, #0
 800af86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af8a:	9312      	str	r3, [sp, #72]	; 0x48
 800af8c:	462e      	mov	r6, r5
 800af8e:	9b07      	ldr	r3, [sp, #28]
 800af90:	4620      	mov	r0, r4
 800af92:	6859      	ldr	r1, [r3, #4]
 800af94:	f001 fd6e 	bl	800ca74 <_Balloc>
 800af98:	9005      	str	r0, [sp, #20]
 800af9a:	2800      	cmp	r0, #0
 800af9c:	f43f af0c 	beq.w	800adb8 <_strtod_l+0x490>
 800afa0:	9b07      	ldr	r3, [sp, #28]
 800afa2:	691a      	ldr	r2, [r3, #16]
 800afa4:	3202      	adds	r2, #2
 800afa6:	f103 010c 	add.w	r1, r3, #12
 800afaa:	0092      	lsls	r2, r2, #2
 800afac:	300c      	adds	r0, #12
 800afae:	f001 fd53 	bl	800ca58 <memcpy>
 800afb2:	ec4b ab10 	vmov	d0, sl, fp
 800afb6:	aa1a      	add	r2, sp, #104	; 0x68
 800afb8:	a919      	add	r1, sp, #100	; 0x64
 800afba:	4620      	mov	r0, r4
 800afbc:	f002 f948 	bl	800d250 <__d2b>
 800afc0:	ec4b ab18 	vmov	d8, sl, fp
 800afc4:	9018      	str	r0, [sp, #96]	; 0x60
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f43f aef6 	beq.w	800adb8 <_strtod_l+0x490>
 800afcc:	2101      	movs	r1, #1
 800afce:	4620      	mov	r0, r4
 800afd0:	f001 fe92 	bl	800ccf8 <__i2b>
 800afd4:	4606      	mov	r6, r0
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f43f aeee 	beq.w	800adb8 <_strtod_l+0x490>
 800afdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afde:	9904      	ldr	r1, [sp, #16]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	bfab      	itete	ge
 800afe4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800afe6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800afe8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800afea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800afee:	bfac      	ite	ge
 800aff0:	eb03 0902 	addge.w	r9, r3, r2
 800aff4:	1ad7      	sublt	r7, r2, r3
 800aff6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aff8:	eba3 0801 	sub.w	r8, r3, r1
 800affc:	4490      	add	r8, r2
 800affe:	4ba1      	ldr	r3, [pc, #644]	; (800b284 <_strtod_l+0x95c>)
 800b000:	f108 38ff 	add.w	r8, r8, #4294967295
 800b004:	4598      	cmp	r8, r3
 800b006:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b00a:	f280 80c7 	bge.w	800b19c <_strtod_l+0x874>
 800b00e:	eba3 0308 	sub.w	r3, r3, r8
 800b012:	2b1f      	cmp	r3, #31
 800b014:	eba2 0203 	sub.w	r2, r2, r3
 800b018:	f04f 0101 	mov.w	r1, #1
 800b01c:	f300 80b1 	bgt.w	800b182 <_strtod_l+0x85a>
 800b020:	fa01 f303 	lsl.w	r3, r1, r3
 800b024:	930d      	str	r3, [sp, #52]	; 0x34
 800b026:	2300      	movs	r3, #0
 800b028:	9308      	str	r3, [sp, #32]
 800b02a:	eb09 0802 	add.w	r8, r9, r2
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	45c1      	cmp	r9, r8
 800b032:	4417      	add	r7, r2
 800b034:	441f      	add	r7, r3
 800b036:	464b      	mov	r3, r9
 800b038:	bfa8      	it	ge
 800b03a:	4643      	movge	r3, r8
 800b03c:	42bb      	cmp	r3, r7
 800b03e:	bfa8      	it	ge
 800b040:	463b      	movge	r3, r7
 800b042:	2b00      	cmp	r3, #0
 800b044:	bfc2      	ittt	gt
 800b046:	eba8 0803 	subgt.w	r8, r8, r3
 800b04a:	1aff      	subgt	r7, r7, r3
 800b04c:	eba9 0903 	subgt.w	r9, r9, r3
 800b050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b052:	2b00      	cmp	r3, #0
 800b054:	dd17      	ble.n	800b086 <_strtod_l+0x75e>
 800b056:	4631      	mov	r1, r6
 800b058:	461a      	mov	r2, r3
 800b05a:	4620      	mov	r0, r4
 800b05c:	f001 ff0c 	bl	800ce78 <__pow5mult>
 800b060:	4606      	mov	r6, r0
 800b062:	2800      	cmp	r0, #0
 800b064:	f43f aea8 	beq.w	800adb8 <_strtod_l+0x490>
 800b068:	4601      	mov	r1, r0
 800b06a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b06c:	4620      	mov	r0, r4
 800b06e:	f001 fe59 	bl	800cd24 <__multiply>
 800b072:	900b      	str	r0, [sp, #44]	; 0x2c
 800b074:	2800      	cmp	r0, #0
 800b076:	f43f ae9f 	beq.w	800adb8 <_strtod_l+0x490>
 800b07a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b07c:	4620      	mov	r0, r4
 800b07e:	f001 fd39 	bl	800caf4 <_Bfree>
 800b082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b084:	9318      	str	r3, [sp, #96]	; 0x60
 800b086:	f1b8 0f00 	cmp.w	r8, #0
 800b08a:	f300 808c 	bgt.w	800b1a6 <_strtod_l+0x87e>
 800b08e:	9b06      	ldr	r3, [sp, #24]
 800b090:	2b00      	cmp	r3, #0
 800b092:	dd08      	ble.n	800b0a6 <_strtod_l+0x77e>
 800b094:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b096:	9905      	ldr	r1, [sp, #20]
 800b098:	4620      	mov	r0, r4
 800b09a:	f001 feed 	bl	800ce78 <__pow5mult>
 800b09e:	9005      	str	r0, [sp, #20]
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	f43f ae89 	beq.w	800adb8 <_strtod_l+0x490>
 800b0a6:	2f00      	cmp	r7, #0
 800b0a8:	dd08      	ble.n	800b0bc <_strtod_l+0x794>
 800b0aa:	9905      	ldr	r1, [sp, #20]
 800b0ac:	463a      	mov	r2, r7
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f001 ff3c 	bl	800cf2c <__lshift>
 800b0b4:	9005      	str	r0, [sp, #20]
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f43f ae7e 	beq.w	800adb8 <_strtod_l+0x490>
 800b0bc:	f1b9 0f00 	cmp.w	r9, #0
 800b0c0:	dd08      	ble.n	800b0d4 <_strtod_l+0x7ac>
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	464a      	mov	r2, r9
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f001 ff30 	bl	800cf2c <__lshift>
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f ae72 	beq.w	800adb8 <_strtod_l+0x490>
 800b0d4:	9a05      	ldr	r2, [sp, #20]
 800b0d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f001 ffb3 	bl	800d044 <__mdiff>
 800b0de:	4605      	mov	r5, r0
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	f43f ae69 	beq.w	800adb8 <_strtod_l+0x490>
 800b0e6:	68c3      	ldr	r3, [r0, #12]
 800b0e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60c3      	str	r3, [r0, #12]
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	f001 ff8c 	bl	800d00c <__mcmp>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	da60      	bge.n	800b1ba <_strtod_l+0x892>
 800b0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0fa:	ea53 030a 	orrs.w	r3, r3, sl
 800b0fe:	f040 8082 	bne.w	800b206 <_strtod_l+0x8de>
 800b102:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b106:	2b00      	cmp	r3, #0
 800b108:	d17d      	bne.n	800b206 <_strtod_l+0x8de>
 800b10a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b10e:	0d1b      	lsrs	r3, r3, #20
 800b110:	051b      	lsls	r3, r3, #20
 800b112:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b116:	d976      	bls.n	800b206 <_strtod_l+0x8de>
 800b118:	696b      	ldr	r3, [r5, #20]
 800b11a:	b913      	cbnz	r3, 800b122 <_strtod_l+0x7fa>
 800b11c:	692b      	ldr	r3, [r5, #16]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	dd71      	ble.n	800b206 <_strtod_l+0x8de>
 800b122:	4629      	mov	r1, r5
 800b124:	2201      	movs	r2, #1
 800b126:	4620      	mov	r0, r4
 800b128:	f001 ff00 	bl	800cf2c <__lshift>
 800b12c:	4631      	mov	r1, r6
 800b12e:	4605      	mov	r5, r0
 800b130:	f001 ff6c 	bl	800d00c <__mcmp>
 800b134:	2800      	cmp	r0, #0
 800b136:	dd66      	ble.n	800b206 <_strtod_l+0x8de>
 800b138:	9904      	ldr	r1, [sp, #16]
 800b13a:	4a53      	ldr	r2, [pc, #332]	; (800b288 <_strtod_l+0x960>)
 800b13c:	465b      	mov	r3, fp
 800b13e:	2900      	cmp	r1, #0
 800b140:	f000 8081 	beq.w	800b246 <_strtod_l+0x91e>
 800b144:	ea02 010b 	and.w	r1, r2, fp
 800b148:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b14c:	dc7b      	bgt.n	800b246 <_strtod_l+0x91e>
 800b14e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b152:	f77f aea9 	ble.w	800aea8 <_strtod_l+0x580>
 800b156:	4b4d      	ldr	r3, [pc, #308]	; (800b28c <_strtod_l+0x964>)
 800b158:	4650      	mov	r0, sl
 800b15a:	4659      	mov	r1, fp
 800b15c:	2200      	movs	r2, #0
 800b15e:	f7f5 fa23 	bl	80005a8 <__aeabi_dmul>
 800b162:	460b      	mov	r3, r1
 800b164:	4303      	orrs	r3, r0
 800b166:	bf08      	it	eq
 800b168:	2322      	moveq	r3, #34	; 0x22
 800b16a:	4682      	mov	sl, r0
 800b16c:	468b      	mov	fp, r1
 800b16e:	bf08      	it	eq
 800b170:	6023      	streq	r3, [r4, #0]
 800b172:	e62b      	b.n	800adcc <_strtod_l+0x4a4>
 800b174:	f04f 32ff 	mov.w	r2, #4294967295
 800b178:	fa02 f303 	lsl.w	r3, r2, r3
 800b17c:	ea03 0a0a 	and.w	sl, r3, sl
 800b180:	e6e3      	b.n	800af4a <_strtod_l+0x622>
 800b182:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b186:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b18a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b18e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b192:	fa01 f308 	lsl.w	r3, r1, r8
 800b196:	9308      	str	r3, [sp, #32]
 800b198:	910d      	str	r1, [sp, #52]	; 0x34
 800b19a:	e746      	b.n	800b02a <_strtod_l+0x702>
 800b19c:	2300      	movs	r3, #0
 800b19e:	9308      	str	r3, [sp, #32]
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b1a4:	e741      	b.n	800b02a <_strtod_l+0x702>
 800b1a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1a8:	4642      	mov	r2, r8
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f001 febe 	bl	800cf2c <__lshift>
 800b1b0:	9018      	str	r0, [sp, #96]	; 0x60
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	f47f af6b 	bne.w	800b08e <_strtod_l+0x766>
 800b1b8:	e5fe      	b.n	800adb8 <_strtod_l+0x490>
 800b1ba:	465f      	mov	r7, fp
 800b1bc:	d16e      	bne.n	800b29c <_strtod_l+0x974>
 800b1be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1c4:	b342      	cbz	r2, 800b218 <_strtod_l+0x8f0>
 800b1c6:	4a32      	ldr	r2, [pc, #200]	; (800b290 <_strtod_l+0x968>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d128      	bne.n	800b21e <_strtod_l+0x8f6>
 800b1cc:	9b04      	ldr	r3, [sp, #16]
 800b1ce:	4651      	mov	r1, sl
 800b1d0:	b1eb      	cbz	r3, 800b20e <_strtod_l+0x8e6>
 800b1d2:	4b2d      	ldr	r3, [pc, #180]	; (800b288 <_strtod_l+0x960>)
 800b1d4:	403b      	ands	r3, r7
 800b1d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b1da:	f04f 32ff 	mov.w	r2, #4294967295
 800b1de:	d819      	bhi.n	800b214 <_strtod_l+0x8ec>
 800b1e0:	0d1b      	lsrs	r3, r3, #20
 800b1e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ea:	4299      	cmp	r1, r3
 800b1ec:	d117      	bne.n	800b21e <_strtod_l+0x8f6>
 800b1ee:	4b29      	ldr	r3, [pc, #164]	; (800b294 <_strtod_l+0x96c>)
 800b1f0:	429f      	cmp	r7, r3
 800b1f2:	d102      	bne.n	800b1fa <_strtod_l+0x8d2>
 800b1f4:	3101      	adds	r1, #1
 800b1f6:	f43f addf 	beq.w	800adb8 <_strtod_l+0x490>
 800b1fa:	4b23      	ldr	r3, [pc, #140]	; (800b288 <_strtod_l+0x960>)
 800b1fc:	403b      	ands	r3, r7
 800b1fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b202:	f04f 0a00 	mov.w	sl, #0
 800b206:	9b04      	ldr	r3, [sp, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1a4      	bne.n	800b156 <_strtod_l+0x82e>
 800b20c:	e5de      	b.n	800adcc <_strtod_l+0x4a4>
 800b20e:	f04f 33ff 	mov.w	r3, #4294967295
 800b212:	e7ea      	b.n	800b1ea <_strtod_l+0x8c2>
 800b214:	4613      	mov	r3, r2
 800b216:	e7e8      	b.n	800b1ea <_strtod_l+0x8c2>
 800b218:	ea53 030a 	orrs.w	r3, r3, sl
 800b21c:	d08c      	beq.n	800b138 <_strtod_l+0x810>
 800b21e:	9b08      	ldr	r3, [sp, #32]
 800b220:	b1db      	cbz	r3, 800b25a <_strtod_l+0x932>
 800b222:	423b      	tst	r3, r7
 800b224:	d0ef      	beq.n	800b206 <_strtod_l+0x8de>
 800b226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b228:	9a04      	ldr	r2, [sp, #16]
 800b22a:	4650      	mov	r0, sl
 800b22c:	4659      	mov	r1, fp
 800b22e:	b1c3      	cbz	r3, 800b262 <_strtod_l+0x93a>
 800b230:	f7ff fb5e 	bl	800a8f0 <sulp>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	ec51 0b18 	vmov	r0, r1, d8
 800b23c:	f7f4 fffe 	bl	800023c <__adddf3>
 800b240:	4682      	mov	sl, r0
 800b242:	468b      	mov	fp, r1
 800b244:	e7df      	b.n	800b206 <_strtod_l+0x8de>
 800b246:	4013      	ands	r3, r2
 800b248:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b24c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b250:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b254:	f04f 3aff 	mov.w	sl, #4294967295
 800b258:	e7d5      	b.n	800b206 <_strtod_l+0x8de>
 800b25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b25c:	ea13 0f0a 	tst.w	r3, sl
 800b260:	e7e0      	b.n	800b224 <_strtod_l+0x8fc>
 800b262:	f7ff fb45 	bl	800a8f0 <sulp>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	ec51 0b18 	vmov	r0, r1, d8
 800b26e:	f7f4 ffe3 	bl	8000238 <__aeabi_dsub>
 800b272:	2200      	movs	r2, #0
 800b274:	2300      	movs	r3, #0
 800b276:	4682      	mov	sl, r0
 800b278:	468b      	mov	fp, r1
 800b27a:	f7f5 fbfd 	bl	8000a78 <__aeabi_dcmpeq>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d0c1      	beq.n	800b206 <_strtod_l+0x8de>
 800b282:	e611      	b.n	800aea8 <_strtod_l+0x580>
 800b284:	fffffc02 	.word	0xfffffc02
 800b288:	7ff00000 	.word	0x7ff00000
 800b28c:	39500000 	.word	0x39500000
 800b290:	000fffff 	.word	0x000fffff
 800b294:	7fefffff 	.word	0x7fefffff
 800b298:	0800e608 	.word	0x0800e608
 800b29c:	4631      	mov	r1, r6
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f002 f832 	bl	800d308 <__ratio>
 800b2a4:	ec59 8b10 	vmov	r8, r9, d0
 800b2a8:	ee10 0a10 	vmov	r0, s0
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	f7f5 fbf4 	bl	8000aa0 <__aeabi_dcmple>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d07a      	beq.n	800b3b2 <_strtod_l+0xa8a>
 800b2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d04a      	beq.n	800b358 <_strtod_l+0xa30>
 800b2c2:	4b95      	ldr	r3, [pc, #596]	; (800b518 <_strtod_l+0xbf0>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b518 <_strtod_l+0xbf0>
 800b2ce:	f04f 0800 	mov.w	r8, #0
 800b2d2:	4b92      	ldr	r3, [pc, #584]	; (800b51c <_strtod_l+0xbf4>)
 800b2d4:	403b      	ands	r3, r7
 800b2d6:	930d      	str	r3, [sp, #52]	; 0x34
 800b2d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2da:	4b91      	ldr	r3, [pc, #580]	; (800b520 <_strtod_l+0xbf8>)
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	f040 80b0 	bne.w	800b442 <_strtod_l+0xb1a>
 800b2e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b2e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b2ea:	ec4b ab10 	vmov	d0, sl, fp
 800b2ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b2f2:	f001 ff31 	bl	800d158 <__ulp>
 800b2f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b2fa:	ec53 2b10 	vmov	r2, r3, d0
 800b2fe:	f7f5 f953 	bl	80005a8 <__aeabi_dmul>
 800b302:	4652      	mov	r2, sl
 800b304:	465b      	mov	r3, fp
 800b306:	f7f4 ff99 	bl	800023c <__adddf3>
 800b30a:	460b      	mov	r3, r1
 800b30c:	4983      	ldr	r1, [pc, #524]	; (800b51c <_strtod_l+0xbf4>)
 800b30e:	4a85      	ldr	r2, [pc, #532]	; (800b524 <_strtod_l+0xbfc>)
 800b310:	4019      	ands	r1, r3
 800b312:	4291      	cmp	r1, r2
 800b314:	4682      	mov	sl, r0
 800b316:	d960      	bls.n	800b3da <_strtod_l+0xab2>
 800b318:	ee18 3a90 	vmov	r3, s17
 800b31c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b320:	4293      	cmp	r3, r2
 800b322:	d104      	bne.n	800b32e <_strtod_l+0xa06>
 800b324:	ee18 3a10 	vmov	r3, s16
 800b328:	3301      	adds	r3, #1
 800b32a:	f43f ad45 	beq.w	800adb8 <_strtod_l+0x490>
 800b32e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b530 <_strtod_l+0xc08>
 800b332:	f04f 3aff 	mov.w	sl, #4294967295
 800b336:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b338:	4620      	mov	r0, r4
 800b33a:	f001 fbdb 	bl	800caf4 <_Bfree>
 800b33e:	9905      	ldr	r1, [sp, #20]
 800b340:	4620      	mov	r0, r4
 800b342:	f001 fbd7 	bl	800caf4 <_Bfree>
 800b346:	4631      	mov	r1, r6
 800b348:	4620      	mov	r0, r4
 800b34a:	f001 fbd3 	bl	800caf4 <_Bfree>
 800b34e:	4629      	mov	r1, r5
 800b350:	4620      	mov	r0, r4
 800b352:	f001 fbcf 	bl	800caf4 <_Bfree>
 800b356:	e61a      	b.n	800af8e <_strtod_l+0x666>
 800b358:	f1ba 0f00 	cmp.w	sl, #0
 800b35c:	d11b      	bne.n	800b396 <_strtod_l+0xa6e>
 800b35e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b362:	b9f3      	cbnz	r3, 800b3a2 <_strtod_l+0xa7a>
 800b364:	4b6c      	ldr	r3, [pc, #432]	; (800b518 <_strtod_l+0xbf0>)
 800b366:	2200      	movs	r2, #0
 800b368:	4640      	mov	r0, r8
 800b36a:	4649      	mov	r1, r9
 800b36c:	f7f5 fb8e 	bl	8000a8c <__aeabi_dcmplt>
 800b370:	b9d0      	cbnz	r0, 800b3a8 <_strtod_l+0xa80>
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	4b6c      	ldr	r3, [pc, #432]	; (800b528 <_strtod_l+0xc00>)
 800b378:	2200      	movs	r2, #0
 800b37a:	f7f5 f915 	bl	80005a8 <__aeabi_dmul>
 800b37e:	4680      	mov	r8, r0
 800b380:	4689      	mov	r9, r1
 800b382:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b386:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b38a:	9315      	str	r3, [sp, #84]	; 0x54
 800b38c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b390:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b394:	e79d      	b.n	800b2d2 <_strtod_l+0x9aa>
 800b396:	f1ba 0f01 	cmp.w	sl, #1
 800b39a:	d102      	bne.n	800b3a2 <_strtod_l+0xa7a>
 800b39c:	2f00      	cmp	r7, #0
 800b39e:	f43f ad83 	beq.w	800aea8 <_strtod_l+0x580>
 800b3a2:	4b62      	ldr	r3, [pc, #392]	; (800b52c <_strtod_l+0xc04>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	e78e      	b.n	800b2c6 <_strtod_l+0x99e>
 800b3a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b528 <_strtod_l+0xc00>
 800b3ac:	f04f 0800 	mov.w	r8, #0
 800b3b0:	e7e7      	b.n	800b382 <_strtod_l+0xa5a>
 800b3b2:	4b5d      	ldr	r3, [pc, #372]	; (800b528 <_strtod_l+0xc00>)
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f7f5 f8f5 	bl	80005a8 <__aeabi_dmul>
 800b3be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3c0:	4680      	mov	r8, r0
 800b3c2:	4689      	mov	r9, r1
 800b3c4:	b933      	cbnz	r3, 800b3d4 <_strtod_l+0xaac>
 800b3c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3ca:	900e      	str	r0, [sp, #56]	; 0x38
 800b3cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b3d2:	e7dd      	b.n	800b390 <_strtod_l+0xa68>
 800b3d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b3d8:	e7f9      	b.n	800b3ce <_strtod_l+0xaa6>
 800b3da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b3de:	9b04      	ldr	r3, [sp, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1a8      	bne.n	800b336 <_strtod_l+0xa0e>
 800b3e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3ea:	0d1b      	lsrs	r3, r3, #20
 800b3ec:	051b      	lsls	r3, r3, #20
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d1a1      	bne.n	800b336 <_strtod_l+0xa0e>
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	f7f5 fc1f 	bl	8000c38 <__aeabi_d2lz>
 800b3fa:	f7f5 f8a7 	bl	800054c <__aeabi_l2d>
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	4640      	mov	r0, r8
 800b404:	4649      	mov	r1, r9
 800b406:	f7f4 ff17 	bl	8000238 <__aeabi_dsub>
 800b40a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b40c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b410:	ea43 030a 	orr.w	r3, r3, sl
 800b414:	4313      	orrs	r3, r2
 800b416:	4680      	mov	r8, r0
 800b418:	4689      	mov	r9, r1
 800b41a:	d055      	beq.n	800b4c8 <_strtod_l+0xba0>
 800b41c:	a336      	add	r3, pc, #216	; (adr r3, 800b4f8 <_strtod_l+0xbd0>)
 800b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b422:	f7f5 fb33 	bl	8000a8c <__aeabi_dcmplt>
 800b426:	2800      	cmp	r0, #0
 800b428:	f47f acd0 	bne.w	800adcc <_strtod_l+0x4a4>
 800b42c:	a334      	add	r3, pc, #208	; (adr r3, 800b500 <_strtod_l+0xbd8>)
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	4640      	mov	r0, r8
 800b434:	4649      	mov	r1, r9
 800b436:	f7f5 fb47 	bl	8000ac8 <__aeabi_dcmpgt>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	f43f af7b 	beq.w	800b336 <_strtod_l+0xa0e>
 800b440:	e4c4      	b.n	800adcc <_strtod_l+0x4a4>
 800b442:	9b04      	ldr	r3, [sp, #16]
 800b444:	b333      	cbz	r3, 800b494 <_strtod_l+0xb6c>
 800b446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b448:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b44c:	d822      	bhi.n	800b494 <_strtod_l+0xb6c>
 800b44e:	a32e      	add	r3, pc, #184	; (adr r3, 800b508 <_strtod_l+0xbe0>)
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	4640      	mov	r0, r8
 800b456:	4649      	mov	r1, r9
 800b458:	f7f5 fb22 	bl	8000aa0 <__aeabi_dcmple>
 800b45c:	b1a0      	cbz	r0, 800b488 <_strtod_l+0xb60>
 800b45e:	4649      	mov	r1, r9
 800b460:	4640      	mov	r0, r8
 800b462:	f7f5 fb79 	bl	8000b58 <__aeabi_d2uiz>
 800b466:	2801      	cmp	r0, #1
 800b468:	bf38      	it	cc
 800b46a:	2001      	movcc	r0, #1
 800b46c:	f7f5 f822 	bl	80004b4 <__aeabi_ui2d>
 800b470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b472:	4680      	mov	r8, r0
 800b474:	4689      	mov	r9, r1
 800b476:	bb23      	cbnz	r3, 800b4c2 <_strtod_l+0xb9a>
 800b478:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b47c:	9010      	str	r0, [sp, #64]	; 0x40
 800b47e:	9311      	str	r3, [sp, #68]	; 0x44
 800b480:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b484:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b48a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b48c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b490:	1a9b      	subs	r3, r3, r2
 800b492:	9309      	str	r3, [sp, #36]	; 0x24
 800b494:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b498:	eeb0 0a48 	vmov.f32	s0, s16
 800b49c:	eef0 0a68 	vmov.f32	s1, s17
 800b4a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4a4:	f001 fe58 	bl	800d158 <__ulp>
 800b4a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b4ac:	ec53 2b10 	vmov	r2, r3, d0
 800b4b0:	f7f5 f87a 	bl	80005a8 <__aeabi_dmul>
 800b4b4:	ec53 2b18 	vmov	r2, r3, d8
 800b4b8:	f7f4 fec0 	bl	800023c <__adddf3>
 800b4bc:	4682      	mov	sl, r0
 800b4be:	468b      	mov	fp, r1
 800b4c0:	e78d      	b.n	800b3de <_strtod_l+0xab6>
 800b4c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b4c6:	e7db      	b.n	800b480 <_strtod_l+0xb58>
 800b4c8:	a311      	add	r3, pc, #68	; (adr r3, 800b510 <_strtod_l+0xbe8>)
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	f7f5 fadd 	bl	8000a8c <__aeabi_dcmplt>
 800b4d2:	e7b2      	b.n	800b43a <_strtod_l+0xb12>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b4da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	f7ff ba6b 	b.w	800a9b8 <_strtod_l+0x90>
 800b4e2:	2a65      	cmp	r2, #101	; 0x65
 800b4e4:	f43f ab5f 	beq.w	800aba6 <_strtod_l+0x27e>
 800b4e8:	2a45      	cmp	r2, #69	; 0x45
 800b4ea:	f43f ab5c 	beq.w	800aba6 <_strtod_l+0x27e>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	f7ff bb94 	b.w	800ac1c <_strtod_l+0x2f4>
 800b4f4:	f3af 8000 	nop.w
 800b4f8:	94a03595 	.word	0x94a03595
 800b4fc:	3fdfffff 	.word	0x3fdfffff
 800b500:	35afe535 	.word	0x35afe535
 800b504:	3fe00000 	.word	0x3fe00000
 800b508:	ffc00000 	.word	0xffc00000
 800b50c:	41dfffff 	.word	0x41dfffff
 800b510:	94a03595 	.word	0x94a03595
 800b514:	3fcfffff 	.word	0x3fcfffff
 800b518:	3ff00000 	.word	0x3ff00000
 800b51c:	7ff00000 	.word	0x7ff00000
 800b520:	7fe00000 	.word	0x7fe00000
 800b524:	7c9fffff 	.word	0x7c9fffff
 800b528:	3fe00000 	.word	0x3fe00000
 800b52c:	bff00000 	.word	0xbff00000
 800b530:	7fefffff 	.word	0x7fefffff

0800b534 <_strtod_r>:
 800b534:	4b01      	ldr	r3, [pc, #4]	; (800b53c <_strtod_r+0x8>)
 800b536:	f7ff b9f7 	b.w	800a928 <_strtod_l>
 800b53a:	bf00      	nop
 800b53c:	200001f4 	.word	0x200001f4

0800b540 <_strtol_l.constprop.0>:
 800b540:	2b01      	cmp	r3, #1
 800b542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b546:	d001      	beq.n	800b54c <_strtol_l.constprop.0+0xc>
 800b548:	2b24      	cmp	r3, #36	; 0x24
 800b54a:	d906      	bls.n	800b55a <_strtol_l.constprop.0+0x1a>
 800b54c:	f7fe fafe 	bl	8009b4c <__errno>
 800b550:	2316      	movs	r3, #22
 800b552:	6003      	str	r3, [r0, #0]
 800b554:	2000      	movs	r0, #0
 800b556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b55a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b640 <_strtol_l.constprop.0+0x100>
 800b55e:	460d      	mov	r5, r1
 800b560:	462e      	mov	r6, r5
 800b562:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b566:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b56a:	f017 0708 	ands.w	r7, r7, #8
 800b56e:	d1f7      	bne.n	800b560 <_strtol_l.constprop.0+0x20>
 800b570:	2c2d      	cmp	r4, #45	; 0x2d
 800b572:	d132      	bne.n	800b5da <_strtol_l.constprop.0+0x9a>
 800b574:	782c      	ldrb	r4, [r5, #0]
 800b576:	2701      	movs	r7, #1
 800b578:	1cb5      	adds	r5, r6, #2
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d05b      	beq.n	800b636 <_strtol_l.constprop.0+0xf6>
 800b57e:	2b10      	cmp	r3, #16
 800b580:	d109      	bne.n	800b596 <_strtol_l.constprop.0+0x56>
 800b582:	2c30      	cmp	r4, #48	; 0x30
 800b584:	d107      	bne.n	800b596 <_strtol_l.constprop.0+0x56>
 800b586:	782c      	ldrb	r4, [r5, #0]
 800b588:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b58c:	2c58      	cmp	r4, #88	; 0x58
 800b58e:	d14d      	bne.n	800b62c <_strtol_l.constprop.0+0xec>
 800b590:	786c      	ldrb	r4, [r5, #1]
 800b592:	2310      	movs	r3, #16
 800b594:	3502      	adds	r5, #2
 800b596:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b59a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b59e:	f04f 0c00 	mov.w	ip, #0
 800b5a2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b5a6:	4666      	mov	r6, ip
 800b5a8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b5ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b5b0:	f1be 0f09 	cmp.w	lr, #9
 800b5b4:	d816      	bhi.n	800b5e4 <_strtol_l.constprop.0+0xa4>
 800b5b6:	4674      	mov	r4, lr
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	dd24      	ble.n	800b606 <_strtol_l.constprop.0+0xc6>
 800b5bc:	f1bc 0f00 	cmp.w	ip, #0
 800b5c0:	db1e      	blt.n	800b600 <_strtol_l.constprop.0+0xc0>
 800b5c2:	45b1      	cmp	r9, r6
 800b5c4:	d31c      	bcc.n	800b600 <_strtol_l.constprop.0+0xc0>
 800b5c6:	d101      	bne.n	800b5cc <_strtol_l.constprop.0+0x8c>
 800b5c8:	45a2      	cmp	sl, r4
 800b5ca:	db19      	blt.n	800b600 <_strtol_l.constprop.0+0xc0>
 800b5cc:	fb06 4603 	mla	r6, r6, r3, r4
 800b5d0:	f04f 0c01 	mov.w	ip, #1
 800b5d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5d8:	e7e8      	b.n	800b5ac <_strtol_l.constprop.0+0x6c>
 800b5da:	2c2b      	cmp	r4, #43	; 0x2b
 800b5dc:	bf04      	itt	eq
 800b5de:	782c      	ldrbeq	r4, [r5, #0]
 800b5e0:	1cb5      	addeq	r5, r6, #2
 800b5e2:	e7ca      	b.n	800b57a <_strtol_l.constprop.0+0x3a>
 800b5e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b5e8:	f1be 0f19 	cmp.w	lr, #25
 800b5ec:	d801      	bhi.n	800b5f2 <_strtol_l.constprop.0+0xb2>
 800b5ee:	3c37      	subs	r4, #55	; 0x37
 800b5f0:	e7e2      	b.n	800b5b8 <_strtol_l.constprop.0+0x78>
 800b5f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b5f6:	f1be 0f19 	cmp.w	lr, #25
 800b5fa:	d804      	bhi.n	800b606 <_strtol_l.constprop.0+0xc6>
 800b5fc:	3c57      	subs	r4, #87	; 0x57
 800b5fe:	e7db      	b.n	800b5b8 <_strtol_l.constprop.0+0x78>
 800b600:	f04f 3cff 	mov.w	ip, #4294967295
 800b604:	e7e6      	b.n	800b5d4 <_strtol_l.constprop.0+0x94>
 800b606:	f1bc 0f00 	cmp.w	ip, #0
 800b60a:	da05      	bge.n	800b618 <_strtol_l.constprop.0+0xd8>
 800b60c:	2322      	movs	r3, #34	; 0x22
 800b60e:	6003      	str	r3, [r0, #0]
 800b610:	4646      	mov	r6, r8
 800b612:	b942      	cbnz	r2, 800b626 <_strtol_l.constprop.0+0xe6>
 800b614:	4630      	mov	r0, r6
 800b616:	e79e      	b.n	800b556 <_strtol_l.constprop.0+0x16>
 800b618:	b107      	cbz	r7, 800b61c <_strtol_l.constprop.0+0xdc>
 800b61a:	4276      	negs	r6, r6
 800b61c:	2a00      	cmp	r2, #0
 800b61e:	d0f9      	beq.n	800b614 <_strtol_l.constprop.0+0xd4>
 800b620:	f1bc 0f00 	cmp.w	ip, #0
 800b624:	d000      	beq.n	800b628 <_strtol_l.constprop.0+0xe8>
 800b626:	1e69      	subs	r1, r5, #1
 800b628:	6011      	str	r1, [r2, #0]
 800b62a:	e7f3      	b.n	800b614 <_strtol_l.constprop.0+0xd4>
 800b62c:	2430      	movs	r4, #48	; 0x30
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1b1      	bne.n	800b596 <_strtol_l.constprop.0+0x56>
 800b632:	2308      	movs	r3, #8
 800b634:	e7af      	b.n	800b596 <_strtol_l.constprop.0+0x56>
 800b636:	2c30      	cmp	r4, #48	; 0x30
 800b638:	d0a5      	beq.n	800b586 <_strtol_l.constprop.0+0x46>
 800b63a:	230a      	movs	r3, #10
 800b63c:	e7ab      	b.n	800b596 <_strtol_l.constprop.0+0x56>
 800b63e:	bf00      	nop
 800b640:	0800e631 	.word	0x0800e631

0800b644 <_strtol_r>:
 800b644:	f7ff bf7c 	b.w	800b540 <_strtol_l.constprop.0>

0800b648 <quorem>:
 800b648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	6903      	ldr	r3, [r0, #16]
 800b64e:	690c      	ldr	r4, [r1, #16]
 800b650:	42a3      	cmp	r3, r4
 800b652:	4607      	mov	r7, r0
 800b654:	f2c0 8081 	blt.w	800b75a <quorem+0x112>
 800b658:	3c01      	subs	r4, #1
 800b65a:	f101 0814 	add.w	r8, r1, #20
 800b65e:	f100 0514 	add.w	r5, r0, #20
 800b662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b66c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b670:	3301      	adds	r3, #1
 800b672:	429a      	cmp	r2, r3
 800b674:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b678:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b67c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b680:	d331      	bcc.n	800b6e6 <quorem+0x9e>
 800b682:	f04f 0e00 	mov.w	lr, #0
 800b686:	4640      	mov	r0, r8
 800b688:	46ac      	mov	ip, r5
 800b68a:	46f2      	mov	sl, lr
 800b68c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b690:	b293      	uxth	r3, r2
 800b692:	fb06 e303 	mla	r3, r6, r3, lr
 800b696:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	ebaa 0303 	sub.w	r3, sl, r3
 800b6a0:	f8dc a000 	ldr.w	sl, [ip]
 800b6a4:	0c12      	lsrs	r2, r2, #16
 800b6a6:	fa13 f38a 	uxtah	r3, r3, sl
 800b6aa:	fb06 e202 	mla	r2, r6, r2, lr
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6b6:	b292      	uxth	r2, r2
 800b6b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b6bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b6c4:	4581      	cmp	r9, r0
 800b6c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6ca:	f84c 3b04 	str.w	r3, [ip], #4
 800b6ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b6d2:	d2db      	bcs.n	800b68c <quorem+0x44>
 800b6d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b6d8:	b92b      	cbnz	r3, 800b6e6 <quorem+0x9e>
 800b6da:	9b01      	ldr	r3, [sp, #4]
 800b6dc:	3b04      	subs	r3, #4
 800b6de:	429d      	cmp	r5, r3
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	d32e      	bcc.n	800b742 <quorem+0xfa>
 800b6e4:	613c      	str	r4, [r7, #16]
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	f001 fc90 	bl	800d00c <__mcmp>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	db24      	blt.n	800b73a <quorem+0xf2>
 800b6f0:	3601      	adds	r6, #1
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f04f 0c00 	mov.w	ip, #0
 800b6f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6fc:	f8d0 e000 	ldr.w	lr, [r0]
 800b700:	b293      	uxth	r3, r2
 800b702:	ebac 0303 	sub.w	r3, ip, r3
 800b706:	0c12      	lsrs	r2, r2, #16
 800b708:	fa13 f38e 	uxtah	r3, r3, lr
 800b70c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b714:	b29b      	uxth	r3, r3
 800b716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b71a:	45c1      	cmp	r9, r8
 800b71c:	f840 3b04 	str.w	r3, [r0], #4
 800b720:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b724:	d2e8      	bcs.n	800b6f8 <quorem+0xb0>
 800b726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b72a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b72e:	b922      	cbnz	r2, 800b73a <quorem+0xf2>
 800b730:	3b04      	subs	r3, #4
 800b732:	429d      	cmp	r5, r3
 800b734:	461a      	mov	r2, r3
 800b736:	d30a      	bcc.n	800b74e <quorem+0x106>
 800b738:	613c      	str	r4, [r7, #16]
 800b73a:	4630      	mov	r0, r6
 800b73c:	b003      	add	sp, #12
 800b73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b742:	6812      	ldr	r2, [r2, #0]
 800b744:	3b04      	subs	r3, #4
 800b746:	2a00      	cmp	r2, #0
 800b748:	d1cc      	bne.n	800b6e4 <quorem+0x9c>
 800b74a:	3c01      	subs	r4, #1
 800b74c:	e7c7      	b.n	800b6de <quorem+0x96>
 800b74e:	6812      	ldr	r2, [r2, #0]
 800b750:	3b04      	subs	r3, #4
 800b752:	2a00      	cmp	r2, #0
 800b754:	d1f0      	bne.n	800b738 <quorem+0xf0>
 800b756:	3c01      	subs	r4, #1
 800b758:	e7eb      	b.n	800b732 <quorem+0xea>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e7ee      	b.n	800b73c <quorem+0xf4>
	...

0800b760 <_dtoa_r>:
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	ed2d 8b04 	vpush	{d8-d9}
 800b768:	ec57 6b10 	vmov	r6, r7, d0
 800b76c:	b093      	sub	sp, #76	; 0x4c
 800b76e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b774:	9106      	str	r1, [sp, #24]
 800b776:	ee10 aa10 	vmov	sl, s0
 800b77a:	4604      	mov	r4, r0
 800b77c:	9209      	str	r2, [sp, #36]	; 0x24
 800b77e:	930c      	str	r3, [sp, #48]	; 0x30
 800b780:	46bb      	mov	fp, r7
 800b782:	b975      	cbnz	r5, 800b7a2 <_dtoa_r+0x42>
 800b784:	2010      	movs	r0, #16
 800b786:	f001 f94d 	bl	800ca24 <malloc>
 800b78a:	4602      	mov	r2, r0
 800b78c:	6260      	str	r0, [r4, #36]	; 0x24
 800b78e:	b920      	cbnz	r0, 800b79a <_dtoa_r+0x3a>
 800b790:	4ba7      	ldr	r3, [pc, #668]	; (800ba30 <_dtoa_r+0x2d0>)
 800b792:	21ea      	movs	r1, #234	; 0xea
 800b794:	48a7      	ldr	r0, [pc, #668]	; (800ba34 <_dtoa_r+0x2d4>)
 800b796:	f002 f8bd 	bl	800d914 <__assert_func>
 800b79a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b79e:	6005      	str	r5, [r0, #0]
 800b7a0:	60c5      	str	r5, [r0, #12]
 800b7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7a4:	6819      	ldr	r1, [r3, #0]
 800b7a6:	b151      	cbz	r1, 800b7be <_dtoa_r+0x5e>
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	604a      	str	r2, [r1, #4]
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	4093      	lsls	r3, r2
 800b7b0:	608b      	str	r3, [r1, #8]
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f001 f99e 	bl	800caf4 <_Bfree>
 800b7b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	1e3b      	subs	r3, r7, #0
 800b7c0:	bfaa      	itet	ge
 800b7c2:	2300      	movge	r3, #0
 800b7c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b7c8:	f8c8 3000 	strge.w	r3, [r8]
 800b7cc:	4b9a      	ldr	r3, [pc, #616]	; (800ba38 <_dtoa_r+0x2d8>)
 800b7ce:	bfbc      	itt	lt
 800b7d0:	2201      	movlt	r2, #1
 800b7d2:	f8c8 2000 	strlt.w	r2, [r8]
 800b7d6:	ea33 030b 	bics.w	r3, r3, fp
 800b7da:	d11b      	bne.n	800b814 <_dtoa_r+0xb4>
 800b7dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7de:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7e8:	4333      	orrs	r3, r6
 800b7ea:	f000 8592 	beq.w	800c312 <_dtoa_r+0xbb2>
 800b7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7f0:	b963      	cbnz	r3, 800b80c <_dtoa_r+0xac>
 800b7f2:	4b92      	ldr	r3, [pc, #584]	; (800ba3c <_dtoa_r+0x2dc>)
 800b7f4:	e022      	b.n	800b83c <_dtoa_r+0xdc>
 800b7f6:	4b92      	ldr	r3, [pc, #584]	; (800ba40 <_dtoa_r+0x2e0>)
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	3308      	adds	r3, #8
 800b7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	9801      	ldr	r0, [sp, #4]
 800b802:	b013      	add	sp, #76	; 0x4c
 800b804:	ecbd 8b04 	vpop	{d8-d9}
 800b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80c:	4b8b      	ldr	r3, [pc, #556]	; (800ba3c <_dtoa_r+0x2dc>)
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	3303      	adds	r3, #3
 800b812:	e7f3      	b.n	800b7fc <_dtoa_r+0x9c>
 800b814:	2200      	movs	r2, #0
 800b816:	2300      	movs	r3, #0
 800b818:	4650      	mov	r0, sl
 800b81a:	4659      	mov	r1, fp
 800b81c:	f7f5 f92c 	bl	8000a78 <__aeabi_dcmpeq>
 800b820:	ec4b ab19 	vmov	d9, sl, fp
 800b824:	4680      	mov	r8, r0
 800b826:	b158      	cbz	r0, 800b840 <_dtoa_r+0xe0>
 800b828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b82a:	2301      	movs	r3, #1
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 856b 	beq.w	800c30c <_dtoa_r+0xbac>
 800b836:	4883      	ldr	r0, [pc, #524]	; (800ba44 <_dtoa_r+0x2e4>)
 800b838:	6018      	str	r0, [r3, #0]
 800b83a:	1e43      	subs	r3, r0, #1
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	e7df      	b.n	800b800 <_dtoa_r+0xa0>
 800b840:	ec4b ab10 	vmov	d0, sl, fp
 800b844:	aa10      	add	r2, sp, #64	; 0x40
 800b846:	a911      	add	r1, sp, #68	; 0x44
 800b848:	4620      	mov	r0, r4
 800b84a:	f001 fd01 	bl	800d250 <__d2b>
 800b84e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b852:	ee08 0a10 	vmov	s16, r0
 800b856:	2d00      	cmp	r5, #0
 800b858:	f000 8084 	beq.w	800b964 <_dtoa_r+0x204>
 800b85c:	ee19 3a90 	vmov	r3, s19
 800b860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b864:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b868:	4656      	mov	r6, sl
 800b86a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b86e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b872:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b876:	4b74      	ldr	r3, [pc, #464]	; (800ba48 <_dtoa_r+0x2e8>)
 800b878:	2200      	movs	r2, #0
 800b87a:	4630      	mov	r0, r6
 800b87c:	4639      	mov	r1, r7
 800b87e:	f7f4 fcdb 	bl	8000238 <__aeabi_dsub>
 800b882:	a365      	add	r3, pc, #404	; (adr r3, 800ba18 <_dtoa_r+0x2b8>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f4 fe8e 	bl	80005a8 <__aeabi_dmul>
 800b88c:	a364      	add	r3, pc, #400	; (adr r3, 800ba20 <_dtoa_r+0x2c0>)
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	f7f4 fcd3 	bl	800023c <__adddf3>
 800b896:	4606      	mov	r6, r0
 800b898:	4628      	mov	r0, r5
 800b89a:	460f      	mov	r7, r1
 800b89c:	f7f4 fe1a 	bl	80004d4 <__aeabi_i2d>
 800b8a0:	a361      	add	r3, pc, #388	; (adr r3, 800ba28 <_dtoa_r+0x2c8>)
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f7f4 fe7f 	bl	80005a8 <__aeabi_dmul>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	f7f4 fcc3 	bl	800023c <__adddf3>
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	460f      	mov	r7, r1
 800b8ba:	f7f5 f925 	bl	8000b08 <__aeabi_d2iz>
 800b8be:	2200      	movs	r2, #0
 800b8c0:	9000      	str	r0, [sp, #0]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	f7f5 f8e0 	bl	8000a8c <__aeabi_dcmplt>
 800b8cc:	b150      	cbz	r0, 800b8e4 <_dtoa_r+0x184>
 800b8ce:	9800      	ldr	r0, [sp, #0]
 800b8d0:	f7f4 fe00 	bl	80004d4 <__aeabi_i2d>
 800b8d4:	4632      	mov	r2, r6
 800b8d6:	463b      	mov	r3, r7
 800b8d8:	f7f5 f8ce 	bl	8000a78 <__aeabi_dcmpeq>
 800b8dc:	b910      	cbnz	r0, 800b8e4 <_dtoa_r+0x184>
 800b8de:	9b00      	ldr	r3, [sp, #0]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	9b00      	ldr	r3, [sp, #0]
 800b8e6:	2b16      	cmp	r3, #22
 800b8e8:	d85a      	bhi.n	800b9a0 <_dtoa_r+0x240>
 800b8ea:	9a00      	ldr	r2, [sp, #0]
 800b8ec:	4b57      	ldr	r3, [pc, #348]	; (800ba4c <_dtoa_r+0x2ec>)
 800b8ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	ec51 0b19 	vmov	r0, r1, d9
 800b8fa:	f7f5 f8c7 	bl	8000a8c <__aeabi_dcmplt>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d050      	beq.n	800b9a4 <_dtoa_r+0x244>
 800b902:	9b00      	ldr	r3, [sp, #0]
 800b904:	3b01      	subs	r3, #1
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	2300      	movs	r3, #0
 800b90a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b90e:	1b5d      	subs	r5, r3, r5
 800b910:	1e6b      	subs	r3, r5, #1
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	bf45      	ittet	mi
 800b916:	f1c5 0301 	rsbmi	r3, r5, #1
 800b91a:	9304      	strmi	r3, [sp, #16]
 800b91c:	2300      	movpl	r3, #0
 800b91e:	2300      	movmi	r3, #0
 800b920:	bf4c      	ite	mi
 800b922:	9305      	strmi	r3, [sp, #20]
 800b924:	9304      	strpl	r3, [sp, #16]
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	db3d      	blt.n	800b9a8 <_dtoa_r+0x248>
 800b92c:	9b05      	ldr	r3, [sp, #20]
 800b92e:	9a00      	ldr	r2, [sp, #0]
 800b930:	920a      	str	r2, [sp, #40]	; 0x28
 800b932:	4413      	add	r3, r2
 800b934:	9305      	str	r3, [sp, #20]
 800b936:	2300      	movs	r3, #0
 800b938:	9307      	str	r3, [sp, #28]
 800b93a:	9b06      	ldr	r3, [sp, #24]
 800b93c:	2b09      	cmp	r3, #9
 800b93e:	f200 8089 	bhi.w	800ba54 <_dtoa_r+0x2f4>
 800b942:	2b05      	cmp	r3, #5
 800b944:	bfc4      	itt	gt
 800b946:	3b04      	subgt	r3, #4
 800b948:	9306      	strgt	r3, [sp, #24]
 800b94a:	9b06      	ldr	r3, [sp, #24]
 800b94c:	f1a3 0302 	sub.w	r3, r3, #2
 800b950:	bfcc      	ite	gt
 800b952:	2500      	movgt	r5, #0
 800b954:	2501      	movle	r5, #1
 800b956:	2b03      	cmp	r3, #3
 800b958:	f200 8087 	bhi.w	800ba6a <_dtoa_r+0x30a>
 800b95c:	e8df f003 	tbb	[pc, r3]
 800b960:	59383a2d 	.word	0x59383a2d
 800b964:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b968:	441d      	add	r5, r3
 800b96a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b96e:	2b20      	cmp	r3, #32
 800b970:	bfc1      	itttt	gt
 800b972:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b976:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b97a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b97e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b982:	bfda      	itte	le
 800b984:	f1c3 0320 	rsble	r3, r3, #32
 800b988:	fa06 f003 	lslle.w	r0, r6, r3
 800b98c:	4318      	orrgt	r0, r3
 800b98e:	f7f4 fd91 	bl	80004b4 <__aeabi_ui2d>
 800b992:	2301      	movs	r3, #1
 800b994:	4606      	mov	r6, r0
 800b996:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b99a:	3d01      	subs	r5, #1
 800b99c:	930e      	str	r3, [sp, #56]	; 0x38
 800b99e:	e76a      	b.n	800b876 <_dtoa_r+0x116>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e7b2      	b.n	800b90a <_dtoa_r+0x1aa>
 800b9a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9a6:	e7b1      	b.n	800b90c <_dtoa_r+0x1ac>
 800b9a8:	9b04      	ldr	r3, [sp, #16]
 800b9aa:	9a00      	ldr	r2, [sp, #0]
 800b9ac:	1a9b      	subs	r3, r3, r2
 800b9ae:	9304      	str	r3, [sp, #16]
 800b9b0:	4253      	negs	r3, r2
 800b9b2:	9307      	str	r3, [sp, #28]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b9b8:	e7bf      	b.n	800b93a <_dtoa_r+0x1da>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	9308      	str	r3, [sp, #32]
 800b9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dc55      	bgt.n	800ba70 <_dtoa_r+0x310>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ce:	e00c      	b.n	800b9ea <_dtoa_r+0x28a>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e7f3      	b.n	800b9bc <_dtoa_r+0x25c>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d8:	9308      	str	r3, [sp, #32]
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	4413      	add	r3, r2
 800b9de:	9302      	str	r3, [sp, #8]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	9303      	str	r3, [sp, #12]
 800b9e6:	bfb8      	it	lt
 800b9e8:	2301      	movlt	r3, #1
 800b9ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	6042      	str	r2, [r0, #4]
 800b9f0:	2204      	movs	r2, #4
 800b9f2:	f102 0614 	add.w	r6, r2, #20
 800b9f6:	429e      	cmp	r6, r3
 800b9f8:	6841      	ldr	r1, [r0, #4]
 800b9fa:	d93d      	bls.n	800ba78 <_dtoa_r+0x318>
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f001 f839 	bl	800ca74 <_Balloc>
 800ba02:	9001      	str	r0, [sp, #4]
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d13b      	bne.n	800ba80 <_dtoa_r+0x320>
 800ba08:	4b11      	ldr	r3, [pc, #68]	; (800ba50 <_dtoa_r+0x2f0>)
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba10:	e6c0      	b.n	800b794 <_dtoa_r+0x34>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e7df      	b.n	800b9d6 <_dtoa_r+0x276>
 800ba16:	bf00      	nop
 800ba18:	636f4361 	.word	0x636f4361
 800ba1c:	3fd287a7 	.word	0x3fd287a7
 800ba20:	8b60c8b3 	.word	0x8b60c8b3
 800ba24:	3fc68a28 	.word	0x3fc68a28
 800ba28:	509f79fb 	.word	0x509f79fb
 800ba2c:	3fd34413 	.word	0x3fd34413
 800ba30:	0800e73e 	.word	0x0800e73e
 800ba34:	0800e755 	.word	0x0800e755
 800ba38:	7ff00000 	.word	0x7ff00000
 800ba3c:	0800e73a 	.word	0x0800e73a
 800ba40:	0800e731 	.word	0x0800e731
 800ba44:	0800e5b1 	.word	0x0800e5b1
 800ba48:	3ff80000 	.word	0x3ff80000
 800ba4c:	0800e8c0 	.word	0x0800e8c0
 800ba50:	0800e7b0 	.word	0x0800e7b0
 800ba54:	2501      	movs	r5, #1
 800ba56:	2300      	movs	r3, #0
 800ba58:	9306      	str	r3, [sp, #24]
 800ba5a:	9508      	str	r5, [sp, #32]
 800ba5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba64:	2200      	movs	r2, #0
 800ba66:	2312      	movs	r3, #18
 800ba68:	e7b0      	b.n	800b9cc <_dtoa_r+0x26c>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	9308      	str	r3, [sp, #32]
 800ba6e:	e7f5      	b.n	800ba5c <_dtoa_r+0x2fc>
 800ba70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba76:	e7b8      	b.n	800b9ea <_dtoa_r+0x28a>
 800ba78:	3101      	adds	r1, #1
 800ba7a:	6041      	str	r1, [r0, #4]
 800ba7c:	0052      	lsls	r2, r2, #1
 800ba7e:	e7b8      	b.n	800b9f2 <_dtoa_r+0x292>
 800ba80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba82:	9a01      	ldr	r2, [sp, #4]
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	9b03      	ldr	r3, [sp, #12]
 800ba88:	2b0e      	cmp	r3, #14
 800ba8a:	f200 809d 	bhi.w	800bbc8 <_dtoa_r+0x468>
 800ba8e:	2d00      	cmp	r5, #0
 800ba90:	f000 809a 	beq.w	800bbc8 <_dtoa_r+0x468>
 800ba94:	9b00      	ldr	r3, [sp, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dd32      	ble.n	800bb00 <_dtoa_r+0x3a0>
 800ba9a:	4ab7      	ldr	r2, [pc, #732]	; (800bd78 <_dtoa_r+0x618>)
 800ba9c:	f003 030f 	and.w	r3, r3, #15
 800baa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800baa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800baa8:	9b00      	ldr	r3, [sp, #0]
 800baaa:	05d8      	lsls	r0, r3, #23
 800baac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bab0:	d516      	bpl.n	800bae0 <_dtoa_r+0x380>
 800bab2:	4bb2      	ldr	r3, [pc, #712]	; (800bd7c <_dtoa_r+0x61c>)
 800bab4:	ec51 0b19 	vmov	r0, r1, d9
 800bab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800babc:	f7f4 fe9e 	bl	80007fc <__aeabi_ddiv>
 800bac0:	f007 070f 	and.w	r7, r7, #15
 800bac4:	4682      	mov	sl, r0
 800bac6:	468b      	mov	fp, r1
 800bac8:	2503      	movs	r5, #3
 800baca:	4eac      	ldr	r6, [pc, #688]	; (800bd7c <_dtoa_r+0x61c>)
 800bacc:	b957      	cbnz	r7, 800bae4 <_dtoa_r+0x384>
 800bace:	4642      	mov	r2, r8
 800bad0:	464b      	mov	r3, r9
 800bad2:	4650      	mov	r0, sl
 800bad4:	4659      	mov	r1, fp
 800bad6:	f7f4 fe91 	bl	80007fc <__aeabi_ddiv>
 800bada:	4682      	mov	sl, r0
 800badc:	468b      	mov	fp, r1
 800bade:	e028      	b.n	800bb32 <_dtoa_r+0x3d2>
 800bae0:	2502      	movs	r5, #2
 800bae2:	e7f2      	b.n	800baca <_dtoa_r+0x36a>
 800bae4:	07f9      	lsls	r1, r7, #31
 800bae6:	d508      	bpl.n	800bafa <_dtoa_r+0x39a>
 800bae8:	4640      	mov	r0, r8
 800baea:	4649      	mov	r1, r9
 800baec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800baf0:	f7f4 fd5a 	bl	80005a8 <__aeabi_dmul>
 800baf4:	3501      	adds	r5, #1
 800baf6:	4680      	mov	r8, r0
 800baf8:	4689      	mov	r9, r1
 800bafa:	107f      	asrs	r7, r7, #1
 800bafc:	3608      	adds	r6, #8
 800bafe:	e7e5      	b.n	800bacc <_dtoa_r+0x36c>
 800bb00:	f000 809b 	beq.w	800bc3a <_dtoa_r+0x4da>
 800bb04:	9b00      	ldr	r3, [sp, #0]
 800bb06:	4f9d      	ldr	r7, [pc, #628]	; (800bd7c <_dtoa_r+0x61c>)
 800bb08:	425e      	negs	r6, r3
 800bb0a:	4b9b      	ldr	r3, [pc, #620]	; (800bd78 <_dtoa_r+0x618>)
 800bb0c:	f006 020f 	and.w	r2, r6, #15
 800bb10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	ec51 0b19 	vmov	r0, r1, d9
 800bb1c:	f7f4 fd44 	bl	80005a8 <__aeabi_dmul>
 800bb20:	1136      	asrs	r6, r6, #4
 800bb22:	4682      	mov	sl, r0
 800bb24:	468b      	mov	fp, r1
 800bb26:	2300      	movs	r3, #0
 800bb28:	2502      	movs	r5, #2
 800bb2a:	2e00      	cmp	r6, #0
 800bb2c:	d17a      	bne.n	800bc24 <_dtoa_r+0x4c4>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1d3      	bne.n	800bada <_dtoa_r+0x37a>
 800bb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 8082 	beq.w	800bc3e <_dtoa_r+0x4de>
 800bb3a:	4b91      	ldr	r3, [pc, #580]	; (800bd80 <_dtoa_r+0x620>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	4650      	mov	r0, sl
 800bb40:	4659      	mov	r1, fp
 800bb42:	f7f4 ffa3 	bl	8000a8c <__aeabi_dcmplt>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d079      	beq.n	800bc3e <_dtoa_r+0x4de>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d076      	beq.n	800bc3e <_dtoa_r+0x4de>
 800bb50:	9b02      	ldr	r3, [sp, #8]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dd36      	ble.n	800bbc4 <_dtoa_r+0x464>
 800bb56:	9b00      	ldr	r3, [sp, #0]
 800bb58:	4650      	mov	r0, sl
 800bb5a:	4659      	mov	r1, fp
 800bb5c:	1e5f      	subs	r7, r3, #1
 800bb5e:	2200      	movs	r2, #0
 800bb60:	4b88      	ldr	r3, [pc, #544]	; (800bd84 <_dtoa_r+0x624>)
 800bb62:	f7f4 fd21 	bl	80005a8 <__aeabi_dmul>
 800bb66:	9e02      	ldr	r6, [sp, #8]
 800bb68:	4682      	mov	sl, r0
 800bb6a:	468b      	mov	fp, r1
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f7f4 fcb0 	bl	80004d4 <__aeabi_i2d>
 800bb74:	4652      	mov	r2, sl
 800bb76:	465b      	mov	r3, fp
 800bb78:	f7f4 fd16 	bl	80005a8 <__aeabi_dmul>
 800bb7c:	4b82      	ldr	r3, [pc, #520]	; (800bd88 <_dtoa_r+0x628>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f7f4 fb5c 	bl	800023c <__adddf3>
 800bb84:	46d0      	mov	r8, sl
 800bb86:	46d9      	mov	r9, fp
 800bb88:	4682      	mov	sl, r0
 800bb8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bb8e:	2e00      	cmp	r6, #0
 800bb90:	d158      	bne.n	800bc44 <_dtoa_r+0x4e4>
 800bb92:	4b7e      	ldr	r3, [pc, #504]	; (800bd8c <_dtoa_r+0x62c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	4640      	mov	r0, r8
 800bb98:	4649      	mov	r1, r9
 800bb9a:	f7f4 fb4d 	bl	8000238 <__aeabi_dsub>
 800bb9e:	4652      	mov	r2, sl
 800bba0:	465b      	mov	r3, fp
 800bba2:	4680      	mov	r8, r0
 800bba4:	4689      	mov	r9, r1
 800bba6:	f7f4 ff8f 	bl	8000ac8 <__aeabi_dcmpgt>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	f040 8295 	bne.w	800c0da <_dtoa_r+0x97a>
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	4649      	mov	r1, r9
 800bbba:	f7f4 ff67 	bl	8000a8c <__aeabi_dcmplt>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f040 8289 	bne.w	800c0d6 <_dtoa_r+0x976>
 800bbc4:	ec5b ab19 	vmov	sl, fp, d9
 800bbc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f2c0 8148 	blt.w	800be60 <_dtoa_r+0x700>
 800bbd0:	9a00      	ldr	r2, [sp, #0]
 800bbd2:	2a0e      	cmp	r2, #14
 800bbd4:	f300 8144 	bgt.w	800be60 <_dtoa_r+0x700>
 800bbd8:	4b67      	ldr	r3, [pc, #412]	; (800bd78 <_dtoa_r+0x618>)
 800bbda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbde:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f280 80d5 	bge.w	800bd94 <_dtoa_r+0x634>
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f300 80d1 	bgt.w	800bd94 <_dtoa_r+0x634>
 800bbf2:	f040 826f 	bne.w	800c0d4 <_dtoa_r+0x974>
 800bbf6:	4b65      	ldr	r3, [pc, #404]	; (800bd8c <_dtoa_r+0x62c>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	f7f4 fcd3 	bl	80005a8 <__aeabi_dmul>
 800bc02:	4652      	mov	r2, sl
 800bc04:	465b      	mov	r3, fp
 800bc06:	f7f4 ff55 	bl	8000ab4 <__aeabi_dcmpge>
 800bc0a:	9e03      	ldr	r6, [sp, #12]
 800bc0c:	4637      	mov	r7, r6
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f040 8245 	bne.w	800c09e <_dtoa_r+0x93e>
 800bc14:	9d01      	ldr	r5, [sp, #4]
 800bc16:	2331      	movs	r3, #49	; 0x31
 800bc18:	f805 3b01 	strb.w	r3, [r5], #1
 800bc1c:	9b00      	ldr	r3, [sp, #0]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	e240      	b.n	800c0a6 <_dtoa_r+0x946>
 800bc24:	07f2      	lsls	r2, r6, #31
 800bc26:	d505      	bpl.n	800bc34 <_dtoa_r+0x4d4>
 800bc28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc2c:	f7f4 fcbc 	bl	80005a8 <__aeabi_dmul>
 800bc30:	3501      	adds	r5, #1
 800bc32:	2301      	movs	r3, #1
 800bc34:	1076      	asrs	r6, r6, #1
 800bc36:	3708      	adds	r7, #8
 800bc38:	e777      	b.n	800bb2a <_dtoa_r+0x3ca>
 800bc3a:	2502      	movs	r5, #2
 800bc3c:	e779      	b.n	800bb32 <_dtoa_r+0x3d2>
 800bc3e:	9f00      	ldr	r7, [sp, #0]
 800bc40:	9e03      	ldr	r6, [sp, #12]
 800bc42:	e794      	b.n	800bb6e <_dtoa_r+0x40e>
 800bc44:	9901      	ldr	r1, [sp, #4]
 800bc46:	4b4c      	ldr	r3, [pc, #304]	; (800bd78 <_dtoa_r+0x618>)
 800bc48:	4431      	add	r1, r6
 800bc4a:	910d      	str	r1, [sp, #52]	; 0x34
 800bc4c:	9908      	ldr	r1, [sp, #32]
 800bc4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc56:	2900      	cmp	r1, #0
 800bc58:	d043      	beq.n	800bce2 <_dtoa_r+0x582>
 800bc5a:	494d      	ldr	r1, [pc, #308]	; (800bd90 <_dtoa_r+0x630>)
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	f7f4 fdcd 	bl	80007fc <__aeabi_ddiv>
 800bc62:	4652      	mov	r2, sl
 800bc64:	465b      	mov	r3, fp
 800bc66:	f7f4 fae7 	bl	8000238 <__aeabi_dsub>
 800bc6a:	9d01      	ldr	r5, [sp, #4]
 800bc6c:	4682      	mov	sl, r0
 800bc6e:	468b      	mov	fp, r1
 800bc70:	4649      	mov	r1, r9
 800bc72:	4640      	mov	r0, r8
 800bc74:	f7f4 ff48 	bl	8000b08 <__aeabi_d2iz>
 800bc78:	4606      	mov	r6, r0
 800bc7a:	f7f4 fc2b 	bl	80004d4 <__aeabi_i2d>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f7f4 fad7 	bl	8000238 <__aeabi_dsub>
 800bc8a:	3630      	adds	r6, #48	; 0x30
 800bc8c:	f805 6b01 	strb.w	r6, [r5], #1
 800bc90:	4652      	mov	r2, sl
 800bc92:	465b      	mov	r3, fp
 800bc94:	4680      	mov	r8, r0
 800bc96:	4689      	mov	r9, r1
 800bc98:	f7f4 fef8 	bl	8000a8c <__aeabi_dcmplt>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d163      	bne.n	800bd68 <_dtoa_r+0x608>
 800bca0:	4642      	mov	r2, r8
 800bca2:	464b      	mov	r3, r9
 800bca4:	4936      	ldr	r1, [pc, #216]	; (800bd80 <_dtoa_r+0x620>)
 800bca6:	2000      	movs	r0, #0
 800bca8:	f7f4 fac6 	bl	8000238 <__aeabi_dsub>
 800bcac:	4652      	mov	r2, sl
 800bcae:	465b      	mov	r3, fp
 800bcb0:	f7f4 feec 	bl	8000a8c <__aeabi_dcmplt>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	f040 80b5 	bne.w	800be24 <_dtoa_r+0x6c4>
 800bcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcbc:	429d      	cmp	r5, r3
 800bcbe:	d081      	beq.n	800bbc4 <_dtoa_r+0x464>
 800bcc0:	4b30      	ldr	r3, [pc, #192]	; (800bd84 <_dtoa_r+0x624>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	4650      	mov	r0, sl
 800bcc6:	4659      	mov	r1, fp
 800bcc8:	f7f4 fc6e 	bl	80005a8 <__aeabi_dmul>
 800bccc:	4b2d      	ldr	r3, [pc, #180]	; (800bd84 <_dtoa_r+0x624>)
 800bcce:	4682      	mov	sl, r0
 800bcd0:	468b      	mov	fp, r1
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f7f4 fc66 	bl	80005a8 <__aeabi_dmul>
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4689      	mov	r9, r1
 800bce0:	e7c6      	b.n	800bc70 <_dtoa_r+0x510>
 800bce2:	4650      	mov	r0, sl
 800bce4:	4659      	mov	r1, fp
 800bce6:	f7f4 fc5f 	bl	80005a8 <__aeabi_dmul>
 800bcea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcec:	9d01      	ldr	r5, [sp, #4]
 800bcee:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcf0:	4682      	mov	sl, r0
 800bcf2:	468b      	mov	fp, r1
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	f7f4 ff06 	bl	8000b08 <__aeabi_d2iz>
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	f7f4 fbe9 	bl	80004d4 <__aeabi_i2d>
 800bd02:	3630      	adds	r6, #48	; 0x30
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	4640      	mov	r0, r8
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	f7f4 fa94 	bl	8000238 <__aeabi_dsub>
 800bd10:	f805 6b01 	strb.w	r6, [r5], #1
 800bd14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd16:	429d      	cmp	r5, r3
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4689      	mov	r9, r1
 800bd1c:	f04f 0200 	mov.w	r2, #0
 800bd20:	d124      	bne.n	800bd6c <_dtoa_r+0x60c>
 800bd22:	4b1b      	ldr	r3, [pc, #108]	; (800bd90 <_dtoa_r+0x630>)
 800bd24:	4650      	mov	r0, sl
 800bd26:	4659      	mov	r1, fp
 800bd28:	f7f4 fa88 	bl	800023c <__adddf3>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4640      	mov	r0, r8
 800bd32:	4649      	mov	r1, r9
 800bd34:	f7f4 fec8 	bl	8000ac8 <__aeabi_dcmpgt>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d173      	bne.n	800be24 <_dtoa_r+0x6c4>
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	4913      	ldr	r1, [pc, #76]	; (800bd90 <_dtoa_r+0x630>)
 800bd42:	2000      	movs	r0, #0
 800bd44:	f7f4 fa78 	bl	8000238 <__aeabi_dsub>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4649      	mov	r1, r9
 800bd50:	f7f4 fe9c 	bl	8000a8c <__aeabi_dcmplt>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	f43f af35 	beq.w	800bbc4 <_dtoa_r+0x464>
 800bd5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd5c:	1e6b      	subs	r3, r5, #1
 800bd5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd64:	2b30      	cmp	r3, #48	; 0x30
 800bd66:	d0f8      	beq.n	800bd5a <_dtoa_r+0x5fa>
 800bd68:	9700      	str	r7, [sp, #0]
 800bd6a:	e049      	b.n	800be00 <_dtoa_r+0x6a0>
 800bd6c:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <_dtoa_r+0x624>)
 800bd6e:	f7f4 fc1b 	bl	80005a8 <__aeabi_dmul>
 800bd72:	4680      	mov	r8, r0
 800bd74:	4689      	mov	r9, r1
 800bd76:	e7bd      	b.n	800bcf4 <_dtoa_r+0x594>
 800bd78:	0800e8c0 	.word	0x0800e8c0
 800bd7c:	0800e898 	.word	0x0800e898
 800bd80:	3ff00000 	.word	0x3ff00000
 800bd84:	40240000 	.word	0x40240000
 800bd88:	401c0000 	.word	0x401c0000
 800bd8c:	40140000 	.word	0x40140000
 800bd90:	3fe00000 	.word	0x3fe00000
 800bd94:	9d01      	ldr	r5, [sp, #4]
 800bd96:	4656      	mov	r6, sl
 800bd98:	465f      	mov	r7, fp
 800bd9a:	4642      	mov	r2, r8
 800bd9c:	464b      	mov	r3, r9
 800bd9e:	4630      	mov	r0, r6
 800bda0:	4639      	mov	r1, r7
 800bda2:	f7f4 fd2b 	bl	80007fc <__aeabi_ddiv>
 800bda6:	f7f4 feaf 	bl	8000b08 <__aeabi_d2iz>
 800bdaa:	4682      	mov	sl, r0
 800bdac:	f7f4 fb92 	bl	80004d4 <__aeabi_i2d>
 800bdb0:	4642      	mov	r2, r8
 800bdb2:	464b      	mov	r3, r9
 800bdb4:	f7f4 fbf8 	bl	80005a8 <__aeabi_dmul>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bdc4:	f7f4 fa38 	bl	8000238 <__aeabi_dsub>
 800bdc8:	f805 6b01 	strb.w	r6, [r5], #1
 800bdcc:	9e01      	ldr	r6, [sp, #4]
 800bdce:	9f03      	ldr	r7, [sp, #12]
 800bdd0:	1bae      	subs	r6, r5, r6
 800bdd2:	42b7      	cmp	r7, r6
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	d135      	bne.n	800be46 <_dtoa_r+0x6e6>
 800bdda:	f7f4 fa2f 	bl	800023c <__adddf3>
 800bdde:	4642      	mov	r2, r8
 800bde0:	464b      	mov	r3, r9
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	f7f4 fe6f 	bl	8000ac8 <__aeabi_dcmpgt>
 800bdea:	b9d0      	cbnz	r0, 800be22 <_dtoa_r+0x6c2>
 800bdec:	4642      	mov	r2, r8
 800bdee:	464b      	mov	r3, r9
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fe40 	bl	8000a78 <__aeabi_dcmpeq>
 800bdf8:	b110      	cbz	r0, 800be00 <_dtoa_r+0x6a0>
 800bdfa:	f01a 0f01 	tst.w	sl, #1
 800bdfe:	d110      	bne.n	800be22 <_dtoa_r+0x6c2>
 800be00:	4620      	mov	r0, r4
 800be02:	ee18 1a10 	vmov	r1, s16
 800be06:	f000 fe75 	bl	800caf4 <_Bfree>
 800be0a:	2300      	movs	r3, #0
 800be0c:	9800      	ldr	r0, [sp, #0]
 800be0e:	702b      	strb	r3, [r5, #0]
 800be10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be12:	3001      	adds	r0, #1
 800be14:	6018      	str	r0, [r3, #0]
 800be16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f43f acf1 	beq.w	800b800 <_dtoa_r+0xa0>
 800be1e:	601d      	str	r5, [r3, #0]
 800be20:	e4ee      	b.n	800b800 <_dtoa_r+0xa0>
 800be22:	9f00      	ldr	r7, [sp, #0]
 800be24:	462b      	mov	r3, r5
 800be26:	461d      	mov	r5, r3
 800be28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be2c:	2a39      	cmp	r2, #57	; 0x39
 800be2e:	d106      	bne.n	800be3e <_dtoa_r+0x6de>
 800be30:	9a01      	ldr	r2, [sp, #4]
 800be32:	429a      	cmp	r2, r3
 800be34:	d1f7      	bne.n	800be26 <_dtoa_r+0x6c6>
 800be36:	9901      	ldr	r1, [sp, #4]
 800be38:	2230      	movs	r2, #48	; 0x30
 800be3a:	3701      	adds	r7, #1
 800be3c:	700a      	strb	r2, [r1, #0]
 800be3e:	781a      	ldrb	r2, [r3, #0]
 800be40:	3201      	adds	r2, #1
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	e790      	b.n	800bd68 <_dtoa_r+0x608>
 800be46:	4ba6      	ldr	r3, [pc, #664]	; (800c0e0 <_dtoa_r+0x980>)
 800be48:	2200      	movs	r2, #0
 800be4a:	f7f4 fbad 	bl	80005a8 <__aeabi_dmul>
 800be4e:	2200      	movs	r2, #0
 800be50:	2300      	movs	r3, #0
 800be52:	4606      	mov	r6, r0
 800be54:	460f      	mov	r7, r1
 800be56:	f7f4 fe0f 	bl	8000a78 <__aeabi_dcmpeq>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d09d      	beq.n	800bd9a <_dtoa_r+0x63a>
 800be5e:	e7cf      	b.n	800be00 <_dtoa_r+0x6a0>
 800be60:	9a08      	ldr	r2, [sp, #32]
 800be62:	2a00      	cmp	r2, #0
 800be64:	f000 80d7 	beq.w	800c016 <_dtoa_r+0x8b6>
 800be68:	9a06      	ldr	r2, [sp, #24]
 800be6a:	2a01      	cmp	r2, #1
 800be6c:	f300 80ba 	bgt.w	800bfe4 <_dtoa_r+0x884>
 800be70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be72:	2a00      	cmp	r2, #0
 800be74:	f000 80b2 	beq.w	800bfdc <_dtoa_r+0x87c>
 800be78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be7c:	9e07      	ldr	r6, [sp, #28]
 800be7e:	9d04      	ldr	r5, [sp, #16]
 800be80:	9a04      	ldr	r2, [sp, #16]
 800be82:	441a      	add	r2, r3
 800be84:	9204      	str	r2, [sp, #16]
 800be86:	9a05      	ldr	r2, [sp, #20]
 800be88:	2101      	movs	r1, #1
 800be8a:	441a      	add	r2, r3
 800be8c:	4620      	mov	r0, r4
 800be8e:	9205      	str	r2, [sp, #20]
 800be90:	f000 ff32 	bl	800ccf8 <__i2b>
 800be94:	4607      	mov	r7, r0
 800be96:	2d00      	cmp	r5, #0
 800be98:	dd0c      	ble.n	800beb4 <_dtoa_r+0x754>
 800be9a:	9b05      	ldr	r3, [sp, #20]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dd09      	ble.n	800beb4 <_dtoa_r+0x754>
 800bea0:	42ab      	cmp	r3, r5
 800bea2:	9a04      	ldr	r2, [sp, #16]
 800bea4:	bfa8      	it	ge
 800bea6:	462b      	movge	r3, r5
 800bea8:	1ad2      	subs	r2, r2, r3
 800beaa:	9204      	str	r2, [sp, #16]
 800beac:	9a05      	ldr	r2, [sp, #20]
 800beae:	1aed      	subs	r5, r5, r3
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	9b07      	ldr	r3, [sp, #28]
 800beb6:	b31b      	cbz	r3, 800bf00 <_dtoa_r+0x7a0>
 800beb8:	9b08      	ldr	r3, [sp, #32]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 80af 	beq.w	800c01e <_dtoa_r+0x8be>
 800bec0:	2e00      	cmp	r6, #0
 800bec2:	dd13      	ble.n	800beec <_dtoa_r+0x78c>
 800bec4:	4639      	mov	r1, r7
 800bec6:	4632      	mov	r2, r6
 800bec8:	4620      	mov	r0, r4
 800beca:	f000 ffd5 	bl	800ce78 <__pow5mult>
 800bece:	ee18 2a10 	vmov	r2, s16
 800bed2:	4601      	mov	r1, r0
 800bed4:	4607      	mov	r7, r0
 800bed6:	4620      	mov	r0, r4
 800bed8:	f000 ff24 	bl	800cd24 <__multiply>
 800bedc:	ee18 1a10 	vmov	r1, s16
 800bee0:	4680      	mov	r8, r0
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 fe06 	bl	800caf4 <_Bfree>
 800bee8:	ee08 8a10 	vmov	s16, r8
 800beec:	9b07      	ldr	r3, [sp, #28]
 800beee:	1b9a      	subs	r2, r3, r6
 800bef0:	d006      	beq.n	800bf00 <_dtoa_r+0x7a0>
 800bef2:	ee18 1a10 	vmov	r1, s16
 800bef6:	4620      	mov	r0, r4
 800bef8:	f000 ffbe 	bl	800ce78 <__pow5mult>
 800befc:	ee08 0a10 	vmov	s16, r0
 800bf00:	2101      	movs	r1, #1
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 fef8 	bl	800ccf8 <__i2b>
 800bf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	f340 8088 	ble.w	800c022 <_dtoa_r+0x8c2>
 800bf12:	461a      	mov	r2, r3
 800bf14:	4601      	mov	r1, r0
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 ffae 	bl	800ce78 <__pow5mult>
 800bf1c:	9b06      	ldr	r3, [sp, #24]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	4606      	mov	r6, r0
 800bf22:	f340 8081 	ble.w	800c028 <_dtoa_r+0x8c8>
 800bf26:	f04f 0800 	mov.w	r8, #0
 800bf2a:	6933      	ldr	r3, [r6, #16]
 800bf2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf30:	6918      	ldr	r0, [r3, #16]
 800bf32:	f000 fe91 	bl	800cc58 <__hi0bits>
 800bf36:	f1c0 0020 	rsb	r0, r0, #32
 800bf3a:	9b05      	ldr	r3, [sp, #20]
 800bf3c:	4418      	add	r0, r3
 800bf3e:	f010 001f 	ands.w	r0, r0, #31
 800bf42:	f000 8092 	beq.w	800c06a <_dtoa_r+0x90a>
 800bf46:	f1c0 0320 	rsb	r3, r0, #32
 800bf4a:	2b04      	cmp	r3, #4
 800bf4c:	f340 808a 	ble.w	800c064 <_dtoa_r+0x904>
 800bf50:	f1c0 001c 	rsb	r0, r0, #28
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	4403      	add	r3, r0
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	9b05      	ldr	r3, [sp, #20]
 800bf5c:	4403      	add	r3, r0
 800bf5e:	4405      	add	r5, r0
 800bf60:	9305      	str	r3, [sp, #20]
 800bf62:	9b04      	ldr	r3, [sp, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd07      	ble.n	800bf78 <_dtoa_r+0x818>
 800bf68:	ee18 1a10 	vmov	r1, s16
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f000 ffdc 	bl	800cf2c <__lshift>
 800bf74:	ee08 0a10 	vmov	s16, r0
 800bf78:	9b05      	ldr	r3, [sp, #20]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	dd05      	ble.n	800bf8a <_dtoa_r+0x82a>
 800bf7e:	4631      	mov	r1, r6
 800bf80:	461a      	mov	r2, r3
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 ffd2 	bl	800cf2c <__lshift>
 800bf88:	4606      	mov	r6, r0
 800bf8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d06e      	beq.n	800c06e <_dtoa_r+0x90e>
 800bf90:	ee18 0a10 	vmov	r0, s16
 800bf94:	4631      	mov	r1, r6
 800bf96:	f001 f839 	bl	800d00c <__mcmp>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	da67      	bge.n	800c06e <_dtoa_r+0x90e>
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	ee18 1a10 	vmov	r1, s16
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	220a      	movs	r2, #10
 800bfaa:	2300      	movs	r3, #0
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fdc3 	bl	800cb38 <__multadd>
 800bfb2:	9b08      	ldr	r3, [sp, #32]
 800bfb4:	ee08 0a10 	vmov	s16, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 81b1 	beq.w	800c320 <_dtoa_r+0xbc0>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	220a      	movs	r2, #10
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f000 fdb7 	bl	800cb38 <__multadd>
 800bfca:	9b02      	ldr	r3, [sp, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	4607      	mov	r7, r0
 800bfd0:	f300 808e 	bgt.w	800c0f0 <_dtoa_r+0x990>
 800bfd4:	9b06      	ldr	r3, [sp, #24]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	dc51      	bgt.n	800c07e <_dtoa_r+0x91e>
 800bfda:	e089      	b.n	800c0f0 <_dtoa_r+0x990>
 800bfdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfe2:	e74b      	b.n	800be7c <_dtoa_r+0x71c>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	1e5e      	subs	r6, r3, #1
 800bfe8:	9b07      	ldr	r3, [sp, #28]
 800bfea:	42b3      	cmp	r3, r6
 800bfec:	bfbf      	itttt	lt
 800bfee:	9b07      	ldrlt	r3, [sp, #28]
 800bff0:	9607      	strlt	r6, [sp, #28]
 800bff2:	1af2      	sublt	r2, r6, r3
 800bff4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bff6:	bfb6      	itet	lt
 800bff8:	189b      	addlt	r3, r3, r2
 800bffa:	1b9e      	subge	r6, r3, r6
 800bffc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bffe:	9b03      	ldr	r3, [sp, #12]
 800c000:	bfb8      	it	lt
 800c002:	2600      	movlt	r6, #0
 800c004:	2b00      	cmp	r3, #0
 800c006:	bfb7      	itett	lt
 800c008:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c00c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c010:	1a9d      	sublt	r5, r3, r2
 800c012:	2300      	movlt	r3, #0
 800c014:	e734      	b.n	800be80 <_dtoa_r+0x720>
 800c016:	9e07      	ldr	r6, [sp, #28]
 800c018:	9d04      	ldr	r5, [sp, #16]
 800c01a:	9f08      	ldr	r7, [sp, #32]
 800c01c:	e73b      	b.n	800be96 <_dtoa_r+0x736>
 800c01e:	9a07      	ldr	r2, [sp, #28]
 800c020:	e767      	b.n	800bef2 <_dtoa_r+0x792>
 800c022:	9b06      	ldr	r3, [sp, #24]
 800c024:	2b01      	cmp	r3, #1
 800c026:	dc18      	bgt.n	800c05a <_dtoa_r+0x8fa>
 800c028:	f1ba 0f00 	cmp.w	sl, #0
 800c02c:	d115      	bne.n	800c05a <_dtoa_r+0x8fa>
 800c02e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c032:	b993      	cbnz	r3, 800c05a <_dtoa_r+0x8fa>
 800c034:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c038:	0d1b      	lsrs	r3, r3, #20
 800c03a:	051b      	lsls	r3, r3, #20
 800c03c:	b183      	cbz	r3, 800c060 <_dtoa_r+0x900>
 800c03e:	9b04      	ldr	r3, [sp, #16]
 800c040:	3301      	adds	r3, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	9b05      	ldr	r3, [sp, #20]
 800c046:	3301      	adds	r3, #1
 800c048:	9305      	str	r3, [sp, #20]
 800c04a:	f04f 0801 	mov.w	r8, #1
 800c04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c050:	2b00      	cmp	r3, #0
 800c052:	f47f af6a 	bne.w	800bf2a <_dtoa_r+0x7ca>
 800c056:	2001      	movs	r0, #1
 800c058:	e76f      	b.n	800bf3a <_dtoa_r+0x7da>
 800c05a:	f04f 0800 	mov.w	r8, #0
 800c05e:	e7f6      	b.n	800c04e <_dtoa_r+0x8ee>
 800c060:	4698      	mov	r8, r3
 800c062:	e7f4      	b.n	800c04e <_dtoa_r+0x8ee>
 800c064:	f43f af7d 	beq.w	800bf62 <_dtoa_r+0x802>
 800c068:	4618      	mov	r0, r3
 800c06a:	301c      	adds	r0, #28
 800c06c:	e772      	b.n	800bf54 <_dtoa_r+0x7f4>
 800c06e:	9b03      	ldr	r3, [sp, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	dc37      	bgt.n	800c0e4 <_dtoa_r+0x984>
 800c074:	9b06      	ldr	r3, [sp, #24]
 800c076:	2b02      	cmp	r3, #2
 800c078:	dd34      	ble.n	800c0e4 <_dtoa_r+0x984>
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	9302      	str	r3, [sp, #8]
 800c07e:	9b02      	ldr	r3, [sp, #8]
 800c080:	b96b      	cbnz	r3, 800c09e <_dtoa_r+0x93e>
 800c082:	4631      	mov	r1, r6
 800c084:	2205      	movs	r2, #5
 800c086:	4620      	mov	r0, r4
 800c088:	f000 fd56 	bl	800cb38 <__multadd>
 800c08c:	4601      	mov	r1, r0
 800c08e:	4606      	mov	r6, r0
 800c090:	ee18 0a10 	vmov	r0, s16
 800c094:	f000 ffba 	bl	800d00c <__mcmp>
 800c098:	2800      	cmp	r0, #0
 800c09a:	f73f adbb 	bgt.w	800bc14 <_dtoa_r+0x4b4>
 800c09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a0:	9d01      	ldr	r5, [sp, #4]
 800c0a2:	43db      	mvns	r3, r3
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	f04f 0800 	mov.w	r8, #0
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 fd21 	bl	800caf4 <_Bfree>
 800c0b2:	2f00      	cmp	r7, #0
 800c0b4:	f43f aea4 	beq.w	800be00 <_dtoa_r+0x6a0>
 800c0b8:	f1b8 0f00 	cmp.w	r8, #0
 800c0bc:	d005      	beq.n	800c0ca <_dtoa_r+0x96a>
 800c0be:	45b8      	cmp	r8, r7
 800c0c0:	d003      	beq.n	800c0ca <_dtoa_r+0x96a>
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f000 fd15 	bl	800caf4 <_Bfree>
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 fd11 	bl	800caf4 <_Bfree>
 800c0d2:	e695      	b.n	800be00 <_dtoa_r+0x6a0>
 800c0d4:	2600      	movs	r6, #0
 800c0d6:	4637      	mov	r7, r6
 800c0d8:	e7e1      	b.n	800c09e <_dtoa_r+0x93e>
 800c0da:	9700      	str	r7, [sp, #0]
 800c0dc:	4637      	mov	r7, r6
 800c0de:	e599      	b.n	800bc14 <_dtoa_r+0x4b4>
 800c0e0:	40240000 	.word	0x40240000
 800c0e4:	9b08      	ldr	r3, [sp, #32]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 80ca 	beq.w	800c280 <_dtoa_r+0xb20>
 800c0ec:	9b03      	ldr	r3, [sp, #12]
 800c0ee:	9302      	str	r3, [sp, #8]
 800c0f0:	2d00      	cmp	r5, #0
 800c0f2:	dd05      	ble.n	800c100 <_dtoa_r+0x9a0>
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	462a      	mov	r2, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 ff17 	bl	800cf2c <__lshift>
 800c0fe:	4607      	mov	r7, r0
 800c100:	f1b8 0f00 	cmp.w	r8, #0
 800c104:	d05b      	beq.n	800c1be <_dtoa_r+0xa5e>
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 fcb3 	bl	800ca74 <_Balloc>
 800c10e:	4605      	mov	r5, r0
 800c110:	b928      	cbnz	r0, 800c11e <_dtoa_r+0x9be>
 800c112:	4b87      	ldr	r3, [pc, #540]	; (800c330 <_dtoa_r+0xbd0>)
 800c114:	4602      	mov	r2, r0
 800c116:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c11a:	f7ff bb3b 	b.w	800b794 <_dtoa_r+0x34>
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	3202      	adds	r2, #2
 800c122:	0092      	lsls	r2, r2, #2
 800c124:	f107 010c 	add.w	r1, r7, #12
 800c128:	300c      	adds	r0, #12
 800c12a:	f000 fc95 	bl	800ca58 <memcpy>
 800c12e:	2201      	movs	r2, #1
 800c130:	4629      	mov	r1, r5
 800c132:	4620      	mov	r0, r4
 800c134:	f000 fefa 	bl	800cf2c <__lshift>
 800c138:	9b01      	ldr	r3, [sp, #4]
 800c13a:	f103 0901 	add.w	r9, r3, #1
 800c13e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c142:	4413      	add	r3, r2
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	f00a 0301 	and.w	r3, sl, #1
 800c14a:	46b8      	mov	r8, r7
 800c14c:	9304      	str	r3, [sp, #16]
 800c14e:	4607      	mov	r7, r0
 800c150:	4631      	mov	r1, r6
 800c152:	ee18 0a10 	vmov	r0, s16
 800c156:	f7ff fa77 	bl	800b648 <quorem>
 800c15a:	4641      	mov	r1, r8
 800c15c:	9002      	str	r0, [sp, #8]
 800c15e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c162:	ee18 0a10 	vmov	r0, s16
 800c166:	f000 ff51 	bl	800d00c <__mcmp>
 800c16a:	463a      	mov	r2, r7
 800c16c:	9003      	str	r0, [sp, #12]
 800c16e:	4631      	mov	r1, r6
 800c170:	4620      	mov	r0, r4
 800c172:	f000 ff67 	bl	800d044 <__mdiff>
 800c176:	68c2      	ldr	r2, [r0, #12]
 800c178:	f109 3bff 	add.w	fp, r9, #4294967295
 800c17c:	4605      	mov	r5, r0
 800c17e:	bb02      	cbnz	r2, 800c1c2 <_dtoa_r+0xa62>
 800c180:	4601      	mov	r1, r0
 800c182:	ee18 0a10 	vmov	r0, s16
 800c186:	f000 ff41 	bl	800d00c <__mcmp>
 800c18a:	4602      	mov	r2, r0
 800c18c:	4629      	mov	r1, r5
 800c18e:	4620      	mov	r0, r4
 800c190:	9207      	str	r2, [sp, #28]
 800c192:	f000 fcaf 	bl	800caf4 <_Bfree>
 800c196:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c19a:	ea43 0102 	orr.w	r1, r3, r2
 800c19e:	9b04      	ldr	r3, [sp, #16]
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	464d      	mov	r5, r9
 800c1a4:	d10f      	bne.n	800c1c6 <_dtoa_r+0xa66>
 800c1a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1aa:	d02a      	beq.n	800c202 <_dtoa_r+0xaa2>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	dd02      	ble.n	800c1b8 <_dtoa_r+0xa58>
 800c1b2:	9b02      	ldr	r3, [sp, #8]
 800c1b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c1b8:	f88b a000 	strb.w	sl, [fp]
 800c1bc:	e775      	b.n	800c0aa <_dtoa_r+0x94a>
 800c1be:	4638      	mov	r0, r7
 800c1c0:	e7ba      	b.n	800c138 <_dtoa_r+0x9d8>
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	e7e2      	b.n	800c18c <_dtoa_r+0xa2c>
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	db04      	blt.n	800c1d6 <_dtoa_r+0xa76>
 800c1cc:	9906      	ldr	r1, [sp, #24]
 800c1ce:	430b      	orrs	r3, r1
 800c1d0:	9904      	ldr	r1, [sp, #16]
 800c1d2:	430b      	orrs	r3, r1
 800c1d4:	d122      	bne.n	800c21c <_dtoa_r+0xabc>
 800c1d6:	2a00      	cmp	r2, #0
 800c1d8:	ddee      	ble.n	800c1b8 <_dtoa_r+0xa58>
 800c1da:	ee18 1a10 	vmov	r1, s16
 800c1de:	2201      	movs	r2, #1
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f000 fea3 	bl	800cf2c <__lshift>
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	ee08 0a10 	vmov	s16, r0
 800c1ec:	f000 ff0e 	bl	800d00c <__mcmp>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	dc03      	bgt.n	800c1fc <_dtoa_r+0xa9c>
 800c1f4:	d1e0      	bne.n	800c1b8 <_dtoa_r+0xa58>
 800c1f6:	f01a 0f01 	tst.w	sl, #1
 800c1fa:	d0dd      	beq.n	800c1b8 <_dtoa_r+0xa58>
 800c1fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c200:	d1d7      	bne.n	800c1b2 <_dtoa_r+0xa52>
 800c202:	2339      	movs	r3, #57	; 0x39
 800c204:	f88b 3000 	strb.w	r3, [fp]
 800c208:	462b      	mov	r3, r5
 800c20a:	461d      	mov	r5, r3
 800c20c:	3b01      	subs	r3, #1
 800c20e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c212:	2a39      	cmp	r2, #57	; 0x39
 800c214:	d071      	beq.n	800c2fa <_dtoa_r+0xb9a>
 800c216:	3201      	adds	r2, #1
 800c218:	701a      	strb	r2, [r3, #0]
 800c21a:	e746      	b.n	800c0aa <_dtoa_r+0x94a>
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	dd07      	ble.n	800c230 <_dtoa_r+0xad0>
 800c220:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c224:	d0ed      	beq.n	800c202 <_dtoa_r+0xaa2>
 800c226:	f10a 0301 	add.w	r3, sl, #1
 800c22a:	f88b 3000 	strb.w	r3, [fp]
 800c22e:	e73c      	b.n	800c0aa <_dtoa_r+0x94a>
 800c230:	9b05      	ldr	r3, [sp, #20]
 800c232:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c236:	4599      	cmp	r9, r3
 800c238:	d047      	beq.n	800c2ca <_dtoa_r+0xb6a>
 800c23a:	ee18 1a10 	vmov	r1, s16
 800c23e:	2300      	movs	r3, #0
 800c240:	220a      	movs	r2, #10
 800c242:	4620      	mov	r0, r4
 800c244:	f000 fc78 	bl	800cb38 <__multadd>
 800c248:	45b8      	cmp	r8, r7
 800c24a:	ee08 0a10 	vmov	s16, r0
 800c24e:	f04f 0300 	mov.w	r3, #0
 800c252:	f04f 020a 	mov.w	r2, #10
 800c256:	4641      	mov	r1, r8
 800c258:	4620      	mov	r0, r4
 800c25a:	d106      	bne.n	800c26a <_dtoa_r+0xb0a>
 800c25c:	f000 fc6c 	bl	800cb38 <__multadd>
 800c260:	4680      	mov	r8, r0
 800c262:	4607      	mov	r7, r0
 800c264:	f109 0901 	add.w	r9, r9, #1
 800c268:	e772      	b.n	800c150 <_dtoa_r+0x9f0>
 800c26a:	f000 fc65 	bl	800cb38 <__multadd>
 800c26e:	4639      	mov	r1, r7
 800c270:	4680      	mov	r8, r0
 800c272:	2300      	movs	r3, #0
 800c274:	220a      	movs	r2, #10
 800c276:	4620      	mov	r0, r4
 800c278:	f000 fc5e 	bl	800cb38 <__multadd>
 800c27c:	4607      	mov	r7, r0
 800c27e:	e7f1      	b.n	800c264 <_dtoa_r+0xb04>
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	9302      	str	r3, [sp, #8]
 800c284:	9d01      	ldr	r5, [sp, #4]
 800c286:	ee18 0a10 	vmov	r0, s16
 800c28a:	4631      	mov	r1, r6
 800c28c:	f7ff f9dc 	bl	800b648 <quorem>
 800c290:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	f805 ab01 	strb.w	sl, [r5], #1
 800c29a:	1aea      	subs	r2, r5, r3
 800c29c:	9b02      	ldr	r3, [sp, #8]
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	dd09      	ble.n	800c2b6 <_dtoa_r+0xb56>
 800c2a2:	ee18 1a10 	vmov	r1, s16
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	220a      	movs	r2, #10
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fc44 	bl	800cb38 <__multadd>
 800c2b0:	ee08 0a10 	vmov	s16, r0
 800c2b4:	e7e7      	b.n	800c286 <_dtoa_r+0xb26>
 800c2b6:	9b02      	ldr	r3, [sp, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bfc8      	it	gt
 800c2bc:	461d      	movgt	r5, r3
 800c2be:	9b01      	ldr	r3, [sp, #4]
 800c2c0:	bfd8      	it	le
 800c2c2:	2501      	movle	r5, #1
 800c2c4:	441d      	add	r5, r3
 800c2c6:	f04f 0800 	mov.w	r8, #0
 800c2ca:	ee18 1a10 	vmov	r1, s16
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fe2b 	bl	800cf2c <__lshift>
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	ee08 0a10 	vmov	s16, r0
 800c2dc:	f000 fe96 	bl	800d00c <__mcmp>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	dc91      	bgt.n	800c208 <_dtoa_r+0xaa8>
 800c2e4:	d102      	bne.n	800c2ec <_dtoa_r+0xb8c>
 800c2e6:	f01a 0f01 	tst.w	sl, #1
 800c2ea:	d18d      	bne.n	800c208 <_dtoa_r+0xaa8>
 800c2ec:	462b      	mov	r3, r5
 800c2ee:	461d      	mov	r5, r3
 800c2f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2f4:	2a30      	cmp	r2, #48	; 0x30
 800c2f6:	d0fa      	beq.n	800c2ee <_dtoa_r+0xb8e>
 800c2f8:	e6d7      	b.n	800c0aa <_dtoa_r+0x94a>
 800c2fa:	9a01      	ldr	r2, [sp, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d184      	bne.n	800c20a <_dtoa_r+0xaaa>
 800c300:	9b00      	ldr	r3, [sp, #0]
 800c302:	3301      	adds	r3, #1
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	2331      	movs	r3, #49	; 0x31
 800c308:	7013      	strb	r3, [r2, #0]
 800c30a:	e6ce      	b.n	800c0aa <_dtoa_r+0x94a>
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <_dtoa_r+0xbd4>)
 800c30e:	f7ff ba95 	b.w	800b83c <_dtoa_r+0xdc>
 800c312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c314:	2b00      	cmp	r3, #0
 800c316:	f47f aa6e 	bne.w	800b7f6 <_dtoa_r+0x96>
 800c31a:	4b07      	ldr	r3, [pc, #28]	; (800c338 <_dtoa_r+0xbd8>)
 800c31c:	f7ff ba8e 	b.w	800b83c <_dtoa_r+0xdc>
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	dcae      	bgt.n	800c284 <_dtoa_r+0xb24>
 800c326:	9b06      	ldr	r3, [sp, #24]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	f73f aea8 	bgt.w	800c07e <_dtoa_r+0x91e>
 800c32e:	e7a9      	b.n	800c284 <_dtoa_r+0xb24>
 800c330:	0800e7b0 	.word	0x0800e7b0
 800c334:	0800e5b0 	.word	0x0800e5b0
 800c338:	0800e731 	.word	0x0800e731

0800c33c <rshift>:
 800c33c:	6903      	ldr	r3, [r0, #16]
 800c33e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c346:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c34a:	f100 0414 	add.w	r4, r0, #20
 800c34e:	dd45      	ble.n	800c3dc <rshift+0xa0>
 800c350:	f011 011f 	ands.w	r1, r1, #31
 800c354:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c358:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c35c:	d10c      	bne.n	800c378 <rshift+0x3c>
 800c35e:	f100 0710 	add.w	r7, r0, #16
 800c362:	4629      	mov	r1, r5
 800c364:	42b1      	cmp	r1, r6
 800c366:	d334      	bcc.n	800c3d2 <rshift+0x96>
 800c368:	1a9b      	subs	r3, r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	1eea      	subs	r2, r5, #3
 800c36e:	4296      	cmp	r6, r2
 800c370:	bf38      	it	cc
 800c372:	2300      	movcc	r3, #0
 800c374:	4423      	add	r3, r4
 800c376:	e015      	b.n	800c3a4 <rshift+0x68>
 800c378:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c37c:	f1c1 0820 	rsb	r8, r1, #32
 800c380:	40cf      	lsrs	r7, r1
 800c382:	f105 0e04 	add.w	lr, r5, #4
 800c386:	46a1      	mov	r9, r4
 800c388:	4576      	cmp	r6, lr
 800c38a:	46f4      	mov	ip, lr
 800c38c:	d815      	bhi.n	800c3ba <rshift+0x7e>
 800c38e:	1a9a      	subs	r2, r3, r2
 800c390:	0092      	lsls	r2, r2, #2
 800c392:	3a04      	subs	r2, #4
 800c394:	3501      	adds	r5, #1
 800c396:	42ae      	cmp	r6, r5
 800c398:	bf38      	it	cc
 800c39a:	2200      	movcc	r2, #0
 800c39c:	18a3      	adds	r3, r4, r2
 800c39e:	50a7      	str	r7, [r4, r2]
 800c3a0:	b107      	cbz	r7, 800c3a4 <rshift+0x68>
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	1b1a      	subs	r2, r3, r4
 800c3a6:	42a3      	cmp	r3, r4
 800c3a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3ac:	bf08      	it	eq
 800c3ae:	2300      	moveq	r3, #0
 800c3b0:	6102      	str	r2, [r0, #16]
 800c3b2:	bf08      	it	eq
 800c3b4:	6143      	streq	r3, [r0, #20]
 800c3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3ba:	f8dc c000 	ldr.w	ip, [ip]
 800c3be:	fa0c fc08 	lsl.w	ip, ip, r8
 800c3c2:	ea4c 0707 	orr.w	r7, ip, r7
 800c3c6:	f849 7b04 	str.w	r7, [r9], #4
 800c3ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3ce:	40cf      	lsrs	r7, r1
 800c3d0:	e7da      	b.n	800c388 <rshift+0x4c>
 800c3d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c3d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3da:	e7c3      	b.n	800c364 <rshift+0x28>
 800c3dc:	4623      	mov	r3, r4
 800c3de:	e7e1      	b.n	800c3a4 <rshift+0x68>

0800c3e0 <__hexdig_fun>:
 800c3e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3e4:	2b09      	cmp	r3, #9
 800c3e6:	d802      	bhi.n	800c3ee <__hexdig_fun+0xe>
 800c3e8:	3820      	subs	r0, #32
 800c3ea:	b2c0      	uxtb	r0, r0
 800c3ec:	4770      	bx	lr
 800c3ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c3f2:	2b05      	cmp	r3, #5
 800c3f4:	d801      	bhi.n	800c3fa <__hexdig_fun+0x1a>
 800c3f6:	3847      	subs	r0, #71	; 0x47
 800c3f8:	e7f7      	b.n	800c3ea <__hexdig_fun+0xa>
 800c3fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c3fe:	2b05      	cmp	r3, #5
 800c400:	d801      	bhi.n	800c406 <__hexdig_fun+0x26>
 800c402:	3827      	subs	r0, #39	; 0x27
 800c404:	e7f1      	b.n	800c3ea <__hexdig_fun+0xa>
 800c406:	2000      	movs	r0, #0
 800c408:	4770      	bx	lr
	...

0800c40c <__gethex>:
 800c40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c410:	ed2d 8b02 	vpush	{d8}
 800c414:	b089      	sub	sp, #36	; 0x24
 800c416:	ee08 0a10 	vmov	s16, r0
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	4bb4      	ldr	r3, [pc, #720]	; (800c6f0 <__gethex+0x2e4>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	4618      	mov	r0, r3
 800c424:	468b      	mov	fp, r1
 800c426:	4690      	mov	r8, r2
 800c428:	f7f3 feaa 	bl	8000180 <strlen>
 800c42c:	9b01      	ldr	r3, [sp, #4]
 800c42e:	f8db 2000 	ldr.w	r2, [fp]
 800c432:	4403      	add	r3, r0
 800c434:	4682      	mov	sl, r0
 800c436:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c43a:	9305      	str	r3, [sp, #20]
 800c43c:	1c93      	adds	r3, r2, #2
 800c43e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c442:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c446:	32fe      	adds	r2, #254	; 0xfe
 800c448:	18d1      	adds	r1, r2, r3
 800c44a:	461f      	mov	r7, r3
 800c44c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c450:	9100      	str	r1, [sp, #0]
 800c452:	2830      	cmp	r0, #48	; 0x30
 800c454:	d0f8      	beq.n	800c448 <__gethex+0x3c>
 800c456:	f7ff ffc3 	bl	800c3e0 <__hexdig_fun>
 800c45a:	4604      	mov	r4, r0
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d13a      	bne.n	800c4d6 <__gethex+0xca>
 800c460:	9901      	ldr	r1, [sp, #4]
 800c462:	4652      	mov	r2, sl
 800c464:	4638      	mov	r0, r7
 800c466:	f001 fa33 	bl	800d8d0 <strncmp>
 800c46a:	4605      	mov	r5, r0
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d168      	bne.n	800c542 <__gethex+0x136>
 800c470:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c474:	eb07 060a 	add.w	r6, r7, sl
 800c478:	f7ff ffb2 	bl	800c3e0 <__hexdig_fun>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d062      	beq.n	800c546 <__gethex+0x13a>
 800c480:	4633      	mov	r3, r6
 800c482:	7818      	ldrb	r0, [r3, #0]
 800c484:	2830      	cmp	r0, #48	; 0x30
 800c486:	461f      	mov	r7, r3
 800c488:	f103 0301 	add.w	r3, r3, #1
 800c48c:	d0f9      	beq.n	800c482 <__gethex+0x76>
 800c48e:	f7ff ffa7 	bl	800c3e0 <__hexdig_fun>
 800c492:	2301      	movs	r3, #1
 800c494:	fab0 f480 	clz	r4, r0
 800c498:	0964      	lsrs	r4, r4, #5
 800c49a:	4635      	mov	r5, r6
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	463a      	mov	r2, r7
 800c4a0:	4616      	mov	r6, r2
 800c4a2:	3201      	adds	r2, #1
 800c4a4:	7830      	ldrb	r0, [r6, #0]
 800c4a6:	f7ff ff9b 	bl	800c3e0 <__hexdig_fun>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d1f8      	bne.n	800c4a0 <__gethex+0x94>
 800c4ae:	9901      	ldr	r1, [sp, #4]
 800c4b0:	4652      	mov	r2, sl
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f001 fa0c 	bl	800d8d0 <strncmp>
 800c4b8:	b980      	cbnz	r0, 800c4dc <__gethex+0xd0>
 800c4ba:	b94d      	cbnz	r5, 800c4d0 <__gethex+0xc4>
 800c4bc:	eb06 050a 	add.w	r5, r6, sl
 800c4c0:	462a      	mov	r2, r5
 800c4c2:	4616      	mov	r6, r2
 800c4c4:	3201      	adds	r2, #1
 800c4c6:	7830      	ldrb	r0, [r6, #0]
 800c4c8:	f7ff ff8a 	bl	800c3e0 <__hexdig_fun>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d1f8      	bne.n	800c4c2 <__gethex+0xb6>
 800c4d0:	1bad      	subs	r5, r5, r6
 800c4d2:	00ad      	lsls	r5, r5, #2
 800c4d4:	e004      	b.n	800c4e0 <__gethex+0xd4>
 800c4d6:	2400      	movs	r4, #0
 800c4d8:	4625      	mov	r5, r4
 800c4da:	e7e0      	b.n	800c49e <__gethex+0x92>
 800c4dc:	2d00      	cmp	r5, #0
 800c4de:	d1f7      	bne.n	800c4d0 <__gethex+0xc4>
 800c4e0:	7833      	ldrb	r3, [r6, #0]
 800c4e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4e6:	2b50      	cmp	r3, #80	; 0x50
 800c4e8:	d13b      	bne.n	800c562 <__gethex+0x156>
 800c4ea:	7873      	ldrb	r3, [r6, #1]
 800c4ec:	2b2b      	cmp	r3, #43	; 0x2b
 800c4ee:	d02c      	beq.n	800c54a <__gethex+0x13e>
 800c4f0:	2b2d      	cmp	r3, #45	; 0x2d
 800c4f2:	d02e      	beq.n	800c552 <__gethex+0x146>
 800c4f4:	1c71      	adds	r1, r6, #1
 800c4f6:	f04f 0900 	mov.w	r9, #0
 800c4fa:	7808      	ldrb	r0, [r1, #0]
 800c4fc:	f7ff ff70 	bl	800c3e0 <__hexdig_fun>
 800c500:	1e43      	subs	r3, r0, #1
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b18      	cmp	r3, #24
 800c506:	d82c      	bhi.n	800c562 <__gethex+0x156>
 800c508:	f1a0 0210 	sub.w	r2, r0, #16
 800c50c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c510:	f7ff ff66 	bl	800c3e0 <__hexdig_fun>
 800c514:	1e43      	subs	r3, r0, #1
 800c516:	b2db      	uxtb	r3, r3
 800c518:	2b18      	cmp	r3, #24
 800c51a:	d91d      	bls.n	800c558 <__gethex+0x14c>
 800c51c:	f1b9 0f00 	cmp.w	r9, #0
 800c520:	d000      	beq.n	800c524 <__gethex+0x118>
 800c522:	4252      	negs	r2, r2
 800c524:	4415      	add	r5, r2
 800c526:	f8cb 1000 	str.w	r1, [fp]
 800c52a:	b1e4      	cbz	r4, 800c566 <__gethex+0x15a>
 800c52c:	9b00      	ldr	r3, [sp, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bf14      	ite	ne
 800c532:	2700      	movne	r7, #0
 800c534:	2706      	moveq	r7, #6
 800c536:	4638      	mov	r0, r7
 800c538:	b009      	add	sp, #36	; 0x24
 800c53a:	ecbd 8b02 	vpop	{d8}
 800c53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c542:	463e      	mov	r6, r7
 800c544:	4625      	mov	r5, r4
 800c546:	2401      	movs	r4, #1
 800c548:	e7ca      	b.n	800c4e0 <__gethex+0xd4>
 800c54a:	f04f 0900 	mov.w	r9, #0
 800c54e:	1cb1      	adds	r1, r6, #2
 800c550:	e7d3      	b.n	800c4fa <__gethex+0xee>
 800c552:	f04f 0901 	mov.w	r9, #1
 800c556:	e7fa      	b.n	800c54e <__gethex+0x142>
 800c558:	230a      	movs	r3, #10
 800c55a:	fb03 0202 	mla	r2, r3, r2, r0
 800c55e:	3a10      	subs	r2, #16
 800c560:	e7d4      	b.n	800c50c <__gethex+0x100>
 800c562:	4631      	mov	r1, r6
 800c564:	e7df      	b.n	800c526 <__gethex+0x11a>
 800c566:	1bf3      	subs	r3, r6, r7
 800c568:	3b01      	subs	r3, #1
 800c56a:	4621      	mov	r1, r4
 800c56c:	2b07      	cmp	r3, #7
 800c56e:	dc0b      	bgt.n	800c588 <__gethex+0x17c>
 800c570:	ee18 0a10 	vmov	r0, s16
 800c574:	f000 fa7e 	bl	800ca74 <_Balloc>
 800c578:	4604      	mov	r4, r0
 800c57a:	b940      	cbnz	r0, 800c58e <__gethex+0x182>
 800c57c:	4b5d      	ldr	r3, [pc, #372]	; (800c6f4 <__gethex+0x2e8>)
 800c57e:	4602      	mov	r2, r0
 800c580:	21de      	movs	r1, #222	; 0xde
 800c582:	485d      	ldr	r0, [pc, #372]	; (800c6f8 <__gethex+0x2ec>)
 800c584:	f001 f9c6 	bl	800d914 <__assert_func>
 800c588:	3101      	adds	r1, #1
 800c58a:	105b      	asrs	r3, r3, #1
 800c58c:	e7ee      	b.n	800c56c <__gethex+0x160>
 800c58e:	f100 0914 	add.w	r9, r0, #20
 800c592:	f04f 0b00 	mov.w	fp, #0
 800c596:	f1ca 0301 	rsb	r3, sl, #1
 800c59a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c59e:	f8cd b000 	str.w	fp, [sp]
 800c5a2:	9306      	str	r3, [sp, #24]
 800c5a4:	42b7      	cmp	r7, r6
 800c5a6:	d340      	bcc.n	800c62a <__gethex+0x21e>
 800c5a8:	9802      	ldr	r0, [sp, #8]
 800c5aa:	9b00      	ldr	r3, [sp, #0]
 800c5ac:	f840 3b04 	str.w	r3, [r0], #4
 800c5b0:	eba0 0009 	sub.w	r0, r0, r9
 800c5b4:	1080      	asrs	r0, r0, #2
 800c5b6:	0146      	lsls	r6, r0, #5
 800c5b8:	6120      	str	r0, [r4, #16]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 fb4c 	bl	800cc58 <__hi0bits>
 800c5c0:	1a30      	subs	r0, r6, r0
 800c5c2:	f8d8 6000 	ldr.w	r6, [r8]
 800c5c6:	42b0      	cmp	r0, r6
 800c5c8:	dd63      	ble.n	800c692 <__gethex+0x286>
 800c5ca:	1b87      	subs	r7, r0, r6
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f000 fef0 	bl	800d3b4 <__any_on>
 800c5d4:	4682      	mov	sl, r0
 800c5d6:	b1a8      	cbz	r0, 800c604 <__gethex+0x1f8>
 800c5d8:	1e7b      	subs	r3, r7, #1
 800c5da:	1159      	asrs	r1, r3, #5
 800c5dc:	f003 021f 	and.w	r2, r3, #31
 800c5e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c5e4:	f04f 0a01 	mov.w	sl, #1
 800c5e8:	fa0a f202 	lsl.w	r2, sl, r2
 800c5ec:	420a      	tst	r2, r1
 800c5ee:	d009      	beq.n	800c604 <__gethex+0x1f8>
 800c5f0:	4553      	cmp	r3, sl
 800c5f2:	dd05      	ble.n	800c600 <__gethex+0x1f4>
 800c5f4:	1eb9      	subs	r1, r7, #2
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 fedc 	bl	800d3b4 <__any_on>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d145      	bne.n	800c68c <__gethex+0x280>
 800c600:	f04f 0a02 	mov.w	sl, #2
 800c604:	4639      	mov	r1, r7
 800c606:	4620      	mov	r0, r4
 800c608:	f7ff fe98 	bl	800c33c <rshift>
 800c60c:	443d      	add	r5, r7
 800c60e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c612:	42ab      	cmp	r3, r5
 800c614:	da4c      	bge.n	800c6b0 <__gethex+0x2a4>
 800c616:	ee18 0a10 	vmov	r0, s16
 800c61a:	4621      	mov	r1, r4
 800c61c:	f000 fa6a 	bl	800caf4 <_Bfree>
 800c620:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c622:	2300      	movs	r3, #0
 800c624:	6013      	str	r3, [r2, #0]
 800c626:	27a3      	movs	r7, #163	; 0xa3
 800c628:	e785      	b.n	800c536 <__gethex+0x12a>
 800c62a:	1e73      	subs	r3, r6, #1
 800c62c:	9a05      	ldr	r2, [sp, #20]
 800c62e:	9303      	str	r3, [sp, #12]
 800c630:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c634:	4293      	cmp	r3, r2
 800c636:	d019      	beq.n	800c66c <__gethex+0x260>
 800c638:	f1bb 0f20 	cmp.w	fp, #32
 800c63c:	d107      	bne.n	800c64e <__gethex+0x242>
 800c63e:	9b02      	ldr	r3, [sp, #8]
 800c640:	9a00      	ldr	r2, [sp, #0]
 800c642:	f843 2b04 	str.w	r2, [r3], #4
 800c646:	9302      	str	r3, [sp, #8]
 800c648:	2300      	movs	r3, #0
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	469b      	mov	fp, r3
 800c64e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c652:	f7ff fec5 	bl	800c3e0 <__hexdig_fun>
 800c656:	9b00      	ldr	r3, [sp, #0]
 800c658:	f000 000f 	and.w	r0, r0, #15
 800c65c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c660:	4303      	orrs	r3, r0
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	f10b 0b04 	add.w	fp, fp, #4
 800c668:	9b03      	ldr	r3, [sp, #12]
 800c66a:	e00d      	b.n	800c688 <__gethex+0x27c>
 800c66c:	9b03      	ldr	r3, [sp, #12]
 800c66e:	9a06      	ldr	r2, [sp, #24]
 800c670:	4413      	add	r3, r2
 800c672:	42bb      	cmp	r3, r7
 800c674:	d3e0      	bcc.n	800c638 <__gethex+0x22c>
 800c676:	4618      	mov	r0, r3
 800c678:	9901      	ldr	r1, [sp, #4]
 800c67a:	9307      	str	r3, [sp, #28]
 800c67c:	4652      	mov	r2, sl
 800c67e:	f001 f927 	bl	800d8d0 <strncmp>
 800c682:	9b07      	ldr	r3, [sp, #28]
 800c684:	2800      	cmp	r0, #0
 800c686:	d1d7      	bne.n	800c638 <__gethex+0x22c>
 800c688:	461e      	mov	r6, r3
 800c68a:	e78b      	b.n	800c5a4 <__gethex+0x198>
 800c68c:	f04f 0a03 	mov.w	sl, #3
 800c690:	e7b8      	b.n	800c604 <__gethex+0x1f8>
 800c692:	da0a      	bge.n	800c6aa <__gethex+0x29e>
 800c694:	1a37      	subs	r7, r6, r0
 800c696:	4621      	mov	r1, r4
 800c698:	ee18 0a10 	vmov	r0, s16
 800c69c:	463a      	mov	r2, r7
 800c69e:	f000 fc45 	bl	800cf2c <__lshift>
 800c6a2:	1bed      	subs	r5, r5, r7
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	f100 0914 	add.w	r9, r0, #20
 800c6aa:	f04f 0a00 	mov.w	sl, #0
 800c6ae:	e7ae      	b.n	800c60e <__gethex+0x202>
 800c6b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c6b4:	42a8      	cmp	r0, r5
 800c6b6:	dd72      	ble.n	800c79e <__gethex+0x392>
 800c6b8:	1b45      	subs	r5, r0, r5
 800c6ba:	42ae      	cmp	r6, r5
 800c6bc:	dc36      	bgt.n	800c72c <__gethex+0x320>
 800c6be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d02a      	beq.n	800c71c <__gethex+0x310>
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d02c      	beq.n	800c724 <__gethex+0x318>
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d11c      	bne.n	800c708 <__gethex+0x2fc>
 800c6ce:	42ae      	cmp	r6, r5
 800c6d0:	d11a      	bne.n	800c708 <__gethex+0x2fc>
 800c6d2:	2e01      	cmp	r6, #1
 800c6d4:	d112      	bne.n	800c6fc <__gethex+0x2f0>
 800c6d6:	9a04      	ldr	r2, [sp, #16]
 800c6d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	2301      	movs	r3, #1
 800c6e0:	6123      	str	r3, [r4, #16]
 800c6e2:	f8c9 3000 	str.w	r3, [r9]
 800c6e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6e8:	2762      	movs	r7, #98	; 0x62
 800c6ea:	601c      	str	r4, [r3, #0]
 800c6ec:	e723      	b.n	800c536 <__gethex+0x12a>
 800c6ee:	bf00      	nop
 800c6f0:	0800e828 	.word	0x0800e828
 800c6f4:	0800e7b0 	.word	0x0800e7b0
 800c6f8:	0800e7c1 	.word	0x0800e7c1
 800c6fc:	1e71      	subs	r1, r6, #1
 800c6fe:	4620      	mov	r0, r4
 800c700:	f000 fe58 	bl	800d3b4 <__any_on>
 800c704:	2800      	cmp	r0, #0
 800c706:	d1e6      	bne.n	800c6d6 <__gethex+0x2ca>
 800c708:	ee18 0a10 	vmov	r0, s16
 800c70c:	4621      	mov	r1, r4
 800c70e:	f000 f9f1 	bl	800caf4 <_Bfree>
 800c712:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c714:	2300      	movs	r3, #0
 800c716:	6013      	str	r3, [r2, #0]
 800c718:	2750      	movs	r7, #80	; 0x50
 800c71a:	e70c      	b.n	800c536 <__gethex+0x12a>
 800c71c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1f2      	bne.n	800c708 <__gethex+0x2fc>
 800c722:	e7d8      	b.n	800c6d6 <__gethex+0x2ca>
 800c724:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1d5      	bne.n	800c6d6 <__gethex+0x2ca>
 800c72a:	e7ed      	b.n	800c708 <__gethex+0x2fc>
 800c72c:	1e6f      	subs	r7, r5, #1
 800c72e:	f1ba 0f00 	cmp.w	sl, #0
 800c732:	d131      	bne.n	800c798 <__gethex+0x38c>
 800c734:	b127      	cbz	r7, 800c740 <__gethex+0x334>
 800c736:	4639      	mov	r1, r7
 800c738:	4620      	mov	r0, r4
 800c73a:	f000 fe3b 	bl	800d3b4 <__any_on>
 800c73e:	4682      	mov	sl, r0
 800c740:	117b      	asrs	r3, r7, #5
 800c742:	2101      	movs	r1, #1
 800c744:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c748:	f007 071f 	and.w	r7, r7, #31
 800c74c:	fa01 f707 	lsl.w	r7, r1, r7
 800c750:	421f      	tst	r7, r3
 800c752:	4629      	mov	r1, r5
 800c754:	4620      	mov	r0, r4
 800c756:	bf18      	it	ne
 800c758:	f04a 0a02 	orrne.w	sl, sl, #2
 800c75c:	1b76      	subs	r6, r6, r5
 800c75e:	f7ff fded 	bl	800c33c <rshift>
 800c762:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c766:	2702      	movs	r7, #2
 800c768:	f1ba 0f00 	cmp.w	sl, #0
 800c76c:	d048      	beq.n	800c800 <__gethex+0x3f4>
 800c76e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c772:	2b02      	cmp	r3, #2
 800c774:	d015      	beq.n	800c7a2 <__gethex+0x396>
 800c776:	2b03      	cmp	r3, #3
 800c778:	d017      	beq.n	800c7aa <__gethex+0x39e>
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d109      	bne.n	800c792 <__gethex+0x386>
 800c77e:	f01a 0f02 	tst.w	sl, #2
 800c782:	d006      	beq.n	800c792 <__gethex+0x386>
 800c784:	f8d9 0000 	ldr.w	r0, [r9]
 800c788:	ea4a 0a00 	orr.w	sl, sl, r0
 800c78c:	f01a 0f01 	tst.w	sl, #1
 800c790:	d10e      	bne.n	800c7b0 <__gethex+0x3a4>
 800c792:	f047 0710 	orr.w	r7, r7, #16
 800c796:	e033      	b.n	800c800 <__gethex+0x3f4>
 800c798:	f04f 0a01 	mov.w	sl, #1
 800c79c:	e7d0      	b.n	800c740 <__gethex+0x334>
 800c79e:	2701      	movs	r7, #1
 800c7a0:	e7e2      	b.n	800c768 <__gethex+0x35c>
 800c7a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7a4:	f1c3 0301 	rsb	r3, r3, #1
 800c7a8:	9315      	str	r3, [sp, #84]	; 0x54
 800c7aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d0f0      	beq.n	800c792 <__gethex+0x386>
 800c7b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7b4:	f104 0314 	add.w	r3, r4, #20
 800c7b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c7bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c7c0:	f04f 0c00 	mov.w	ip, #0
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7ce:	d01c      	beq.n	800c80a <__gethex+0x3fe>
 800c7d0:	3201      	adds	r2, #1
 800c7d2:	6002      	str	r2, [r0, #0]
 800c7d4:	2f02      	cmp	r7, #2
 800c7d6:	f104 0314 	add.w	r3, r4, #20
 800c7da:	d13f      	bne.n	800c85c <__gethex+0x450>
 800c7dc:	f8d8 2000 	ldr.w	r2, [r8]
 800c7e0:	3a01      	subs	r2, #1
 800c7e2:	42b2      	cmp	r2, r6
 800c7e4:	d10a      	bne.n	800c7fc <__gethex+0x3f0>
 800c7e6:	1171      	asrs	r1, r6, #5
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7ee:	f006 061f 	and.w	r6, r6, #31
 800c7f2:	fa02 f606 	lsl.w	r6, r2, r6
 800c7f6:	421e      	tst	r6, r3
 800c7f8:	bf18      	it	ne
 800c7fa:	4617      	movne	r7, r2
 800c7fc:	f047 0720 	orr.w	r7, r7, #32
 800c800:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c802:	601c      	str	r4, [r3, #0]
 800c804:	9b04      	ldr	r3, [sp, #16]
 800c806:	601d      	str	r5, [r3, #0]
 800c808:	e695      	b.n	800c536 <__gethex+0x12a>
 800c80a:	4299      	cmp	r1, r3
 800c80c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c810:	d8d8      	bhi.n	800c7c4 <__gethex+0x3b8>
 800c812:	68a3      	ldr	r3, [r4, #8]
 800c814:	459b      	cmp	fp, r3
 800c816:	db19      	blt.n	800c84c <__gethex+0x440>
 800c818:	6861      	ldr	r1, [r4, #4]
 800c81a:	ee18 0a10 	vmov	r0, s16
 800c81e:	3101      	adds	r1, #1
 800c820:	f000 f928 	bl	800ca74 <_Balloc>
 800c824:	4681      	mov	r9, r0
 800c826:	b918      	cbnz	r0, 800c830 <__gethex+0x424>
 800c828:	4b1a      	ldr	r3, [pc, #104]	; (800c894 <__gethex+0x488>)
 800c82a:	4602      	mov	r2, r0
 800c82c:	2184      	movs	r1, #132	; 0x84
 800c82e:	e6a8      	b.n	800c582 <__gethex+0x176>
 800c830:	6922      	ldr	r2, [r4, #16]
 800c832:	3202      	adds	r2, #2
 800c834:	f104 010c 	add.w	r1, r4, #12
 800c838:	0092      	lsls	r2, r2, #2
 800c83a:	300c      	adds	r0, #12
 800c83c:	f000 f90c 	bl	800ca58 <memcpy>
 800c840:	4621      	mov	r1, r4
 800c842:	ee18 0a10 	vmov	r0, s16
 800c846:	f000 f955 	bl	800caf4 <_Bfree>
 800c84a:	464c      	mov	r4, r9
 800c84c:	6923      	ldr	r3, [r4, #16]
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c854:	6122      	str	r2, [r4, #16]
 800c856:	2201      	movs	r2, #1
 800c858:	615a      	str	r2, [r3, #20]
 800c85a:	e7bb      	b.n	800c7d4 <__gethex+0x3c8>
 800c85c:	6922      	ldr	r2, [r4, #16]
 800c85e:	455a      	cmp	r2, fp
 800c860:	dd0b      	ble.n	800c87a <__gethex+0x46e>
 800c862:	2101      	movs	r1, #1
 800c864:	4620      	mov	r0, r4
 800c866:	f7ff fd69 	bl	800c33c <rshift>
 800c86a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c86e:	3501      	adds	r5, #1
 800c870:	42ab      	cmp	r3, r5
 800c872:	f6ff aed0 	blt.w	800c616 <__gethex+0x20a>
 800c876:	2701      	movs	r7, #1
 800c878:	e7c0      	b.n	800c7fc <__gethex+0x3f0>
 800c87a:	f016 061f 	ands.w	r6, r6, #31
 800c87e:	d0fa      	beq.n	800c876 <__gethex+0x46a>
 800c880:	4453      	add	r3, sl
 800c882:	f1c6 0620 	rsb	r6, r6, #32
 800c886:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c88a:	f000 f9e5 	bl	800cc58 <__hi0bits>
 800c88e:	42b0      	cmp	r0, r6
 800c890:	dbe7      	blt.n	800c862 <__gethex+0x456>
 800c892:	e7f0      	b.n	800c876 <__gethex+0x46a>
 800c894:	0800e7b0 	.word	0x0800e7b0

0800c898 <L_shift>:
 800c898:	f1c2 0208 	rsb	r2, r2, #8
 800c89c:	0092      	lsls	r2, r2, #2
 800c89e:	b570      	push	{r4, r5, r6, lr}
 800c8a0:	f1c2 0620 	rsb	r6, r2, #32
 800c8a4:	6843      	ldr	r3, [r0, #4]
 800c8a6:	6804      	ldr	r4, [r0, #0]
 800c8a8:	fa03 f506 	lsl.w	r5, r3, r6
 800c8ac:	432c      	orrs	r4, r5
 800c8ae:	40d3      	lsrs	r3, r2
 800c8b0:	6004      	str	r4, [r0, #0]
 800c8b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8b6:	4288      	cmp	r0, r1
 800c8b8:	d3f4      	bcc.n	800c8a4 <L_shift+0xc>
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}

0800c8bc <__match>:
 800c8bc:	b530      	push	{r4, r5, lr}
 800c8be:	6803      	ldr	r3, [r0, #0]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8c6:	b914      	cbnz	r4, 800c8ce <__match+0x12>
 800c8c8:	6003      	str	r3, [r0, #0]
 800c8ca:	2001      	movs	r0, #1
 800c8cc:	bd30      	pop	{r4, r5, pc}
 800c8ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c8d6:	2d19      	cmp	r5, #25
 800c8d8:	bf98      	it	ls
 800c8da:	3220      	addls	r2, #32
 800c8dc:	42a2      	cmp	r2, r4
 800c8de:	d0f0      	beq.n	800c8c2 <__match+0x6>
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	e7f3      	b.n	800c8cc <__match+0x10>

0800c8e4 <__hexnan>:
 800c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e8:	680b      	ldr	r3, [r1, #0]
 800c8ea:	115e      	asrs	r6, r3, #5
 800c8ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8f0:	f013 031f 	ands.w	r3, r3, #31
 800c8f4:	b087      	sub	sp, #28
 800c8f6:	bf18      	it	ne
 800c8f8:	3604      	addne	r6, #4
 800c8fa:	2500      	movs	r5, #0
 800c8fc:	1f37      	subs	r7, r6, #4
 800c8fe:	4690      	mov	r8, r2
 800c900:	6802      	ldr	r2, [r0, #0]
 800c902:	9301      	str	r3, [sp, #4]
 800c904:	4682      	mov	sl, r0
 800c906:	f846 5c04 	str.w	r5, [r6, #-4]
 800c90a:	46b9      	mov	r9, r7
 800c90c:	463c      	mov	r4, r7
 800c90e:	9502      	str	r5, [sp, #8]
 800c910:	46ab      	mov	fp, r5
 800c912:	7851      	ldrb	r1, [r2, #1]
 800c914:	1c53      	adds	r3, r2, #1
 800c916:	9303      	str	r3, [sp, #12]
 800c918:	b341      	cbz	r1, 800c96c <__hexnan+0x88>
 800c91a:	4608      	mov	r0, r1
 800c91c:	9205      	str	r2, [sp, #20]
 800c91e:	9104      	str	r1, [sp, #16]
 800c920:	f7ff fd5e 	bl	800c3e0 <__hexdig_fun>
 800c924:	2800      	cmp	r0, #0
 800c926:	d14f      	bne.n	800c9c8 <__hexnan+0xe4>
 800c928:	9904      	ldr	r1, [sp, #16]
 800c92a:	9a05      	ldr	r2, [sp, #20]
 800c92c:	2920      	cmp	r1, #32
 800c92e:	d818      	bhi.n	800c962 <__hexnan+0x7e>
 800c930:	9b02      	ldr	r3, [sp, #8]
 800c932:	459b      	cmp	fp, r3
 800c934:	dd13      	ble.n	800c95e <__hexnan+0x7a>
 800c936:	454c      	cmp	r4, r9
 800c938:	d206      	bcs.n	800c948 <__hexnan+0x64>
 800c93a:	2d07      	cmp	r5, #7
 800c93c:	dc04      	bgt.n	800c948 <__hexnan+0x64>
 800c93e:	462a      	mov	r2, r5
 800c940:	4649      	mov	r1, r9
 800c942:	4620      	mov	r0, r4
 800c944:	f7ff ffa8 	bl	800c898 <L_shift>
 800c948:	4544      	cmp	r4, r8
 800c94a:	d950      	bls.n	800c9ee <__hexnan+0x10a>
 800c94c:	2300      	movs	r3, #0
 800c94e:	f1a4 0904 	sub.w	r9, r4, #4
 800c952:	f844 3c04 	str.w	r3, [r4, #-4]
 800c956:	f8cd b008 	str.w	fp, [sp, #8]
 800c95a:	464c      	mov	r4, r9
 800c95c:	461d      	mov	r5, r3
 800c95e:	9a03      	ldr	r2, [sp, #12]
 800c960:	e7d7      	b.n	800c912 <__hexnan+0x2e>
 800c962:	2929      	cmp	r1, #41	; 0x29
 800c964:	d156      	bne.n	800ca14 <__hexnan+0x130>
 800c966:	3202      	adds	r2, #2
 800c968:	f8ca 2000 	str.w	r2, [sl]
 800c96c:	f1bb 0f00 	cmp.w	fp, #0
 800c970:	d050      	beq.n	800ca14 <__hexnan+0x130>
 800c972:	454c      	cmp	r4, r9
 800c974:	d206      	bcs.n	800c984 <__hexnan+0xa0>
 800c976:	2d07      	cmp	r5, #7
 800c978:	dc04      	bgt.n	800c984 <__hexnan+0xa0>
 800c97a:	462a      	mov	r2, r5
 800c97c:	4649      	mov	r1, r9
 800c97e:	4620      	mov	r0, r4
 800c980:	f7ff ff8a 	bl	800c898 <L_shift>
 800c984:	4544      	cmp	r4, r8
 800c986:	d934      	bls.n	800c9f2 <__hexnan+0x10e>
 800c988:	f1a8 0204 	sub.w	r2, r8, #4
 800c98c:	4623      	mov	r3, r4
 800c98e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c992:	f842 1f04 	str.w	r1, [r2, #4]!
 800c996:	429f      	cmp	r7, r3
 800c998:	d2f9      	bcs.n	800c98e <__hexnan+0xaa>
 800c99a:	1b3b      	subs	r3, r7, r4
 800c99c:	f023 0303 	bic.w	r3, r3, #3
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	3401      	adds	r4, #1
 800c9a4:	3e03      	subs	r6, #3
 800c9a6:	42b4      	cmp	r4, r6
 800c9a8:	bf88      	it	hi
 800c9aa:	2304      	movhi	r3, #4
 800c9ac:	4443      	add	r3, r8
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f843 2b04 	str.w	r2, [r3], #4
 800c9b4:	429f      	cmp	r7, r3
 800c9b6:	d2fb      	bcs.n	800c9b0 <__hexnan+0xcc>
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	b91b      	cbnz	r3, 800c9c4 <__hexnan+0xe0>
 800c9bc:	4547      	cmp	r7, r8
 800c9be:	d127      	bne.n	800ca10 <__hexnan+0x12c>
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	603b      	str	r3, [r7, #0]
 800c9c4:	2005      	movs	r0, #5
 800c9c6:	e026      	b.n	800ca16 <__hexnan+0x132>
 800c9c8:	3501      	adds	r5, #1
 800c9ca:	2d08      	cmp	r5, #8
 800c9cc:	f10b 0b01 	add.w	fp, fp, #1
 800c9d0:	dd06      	ble.n	800c9e0 <__hexnan+0xfc>
 800c9d2:	4544      	cmp	r4, r8
 800c9d4:	d9c3      	bls.n	800c95e <__hexnan+0x7a>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9dc:	2501      	movs	r5, #1
 800c9de:	3c04      	subs	r4, #4
 800c9e0:	6822      	ldr	r2, [r4, #0]
 800c9e2:	f000 000f 	and.w	r0, r0, #15
 800c9e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c9ea:	6022      	str	r2, [r4, #0]
 800c9ec:	e7b7      	b.n	800c95e <__hexnan+0x7a>
 800c9ee:	2508      	movs	r5, #8
 800c9f0:	e7b5      	b.n	800c95e <__hexnan+0x7a>
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d0df      	beq.n	800c9b8 <__hexnan+0xd4>
 800c9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fc:	f1c3 0320 	rsb	r3, r3, #32
 800ca00:	fa22 f303 	lsr.w	r3, r2, r3
 800ca04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca08:	401a      	ands	r2, r3
 800ca0a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ca0e:	e7d3      	b.n	800c9b8 <__hexnan+0xd4>
 800ca10:	3f04      	subs	r7, #4
 800ca12:	e7d1      	b.n	800c9b8 <__hexnan+0xd4>
 800ca14:	2004      	movs	r0, #4
 800ca16:	b007      	add	sp, #28
 800ca18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca1c <_localeconv_r>:
 800ca1c:	4800      	ldr	r0, [pc, #0]	; (800ca20 <_localeconv_r+0x4>)
 800ca1e:	4770      	bx	lr
 800ca20:	200002e4 	.word	0x200002e4

0800ca24 <malloc>:
 800ca24:	4b02      	ldr	r3, [pc, #8]	; (800ca30 <malloc+0xc>)
 800ca26:	4601      	mov	r1, r0
 800ca28:	6818      	ldr	r0, [r3, #0]
 800ca2a:	f000 bd67 	b.w	800d4fc <_malloc_r>
 800ca2e:	bf00      	nop
 800ca30:	2000018c 	.word	0x2000018c

0800ca34 <__ascii_mbtowc>:
 800ca34:	b082      	sub	sp, #8
 800ca36:	b901      	cbnz	r1, 800ca3a <__ascii_mbtowc+0x6>
 800ca38:	a901      	add	r1, sp, #4
 800ca3a:	b142      	cbz	r2, 800ca4e <__ascii_mbtowc+0x1a>
 800ca3c:	b14b      	cbz	r3, 800ca52 <__ascii_mbtowc+0x1e>
 800ca3e:	7813      	ldrb	r3, [r2, #0]
 800ca40:	600b      	str	r3, [r1, #0]
 800ca42:	7812      	ldrb	r2, [r2, #0]
 800ca44:	1e10      	subs	r0, r2, #0
 800ca46:	bf18      	it	ne
 800ca48:	2001      	movne	r0, #1
 800ca4a:	b002      	add	sp, #8
 800ca4c:	4770      	bx	lr
 800ca4e:	4610      	mov	r0, r2
 800ca50:	e7fb      	b.n	800ca4a <__ascii_mbtowc+0x16>
 800ca52:	f06f 0001 	mvn.w	r0, #1
 800ca56:	e7f8      	b.n	800ca4a <__ascii_mbtowc+0x16>

0800ca58 <memcpy>:
 800ca58:	440a      	add	r2, r1
 800ca5a:	4291      	cmp	r1, r2
 800ca5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca60:	d100      	bne.n	800ca64 <memcpy+0xc>
 800ca62:	4770      	bx	lr
 800ca64:	b510      	push	{r4, lr}
 800ca66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca6e:	4291      	cmp	r1, r2
 800ca70:	d1f9      	bne.n	800ca66 <memcpy+0xe>
 800ca72:	bd10      	pop	{r4, pc}

0800ca74 <_Balloc>:
 800ca74:	b570      	push	{r4, r5, r6, lr}
 800ca76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca78:	4604      	mov	r4, r0
 800ca7a:	460d      	mov	r5, r1
 800ca7c:	b976      	cbnz	r6, 800ca9c <_Balloc+0x28>
 800ca7e:	2010      	movs	r0, #16
 800ca80:	f7ff ffd0 	bl	800ca24 <malloc>
 800ca84:	4602      	mov	r2, r0
 800ca86:	6260      	str	r0, [r4, #36]	; 0x24
 800ca88:	b920      	cbnz	r0, 800ca94 <_Balloc+0x20>
 800ca8a:	4b18      	ldr	r3, [pc, #96]	; (800caec <_Balloc+0x78>)
 800ca8c:	4818      	ldr	r0, [pc, #96]	; (800caf0 <_Balloc+0x7c>)
 800ca8e:	2166      	movs	r1, #102	; 0x66
 800ca90:	f000 ff40 	bl	800d914 <__assert_func>
 800ca94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca98:	6006      	str	r6, [r0, #0]
 800ca9a:	60c6      	str	r6, [r0, #12]
 800ca9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ca9e:	68f3      	ldr	r3, [r6, #12]
 800caa0:	b183      	cbz	r3, 800cac4 <_Balloc+0x50>
 800caa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800caaa:	b9b8      	cbnz	r0, 800cadc <_Balloc+0x68>
 800caac:	2101      	movs	r1, #1
 800caae:	fa01 f605 	lsl.w	r6, r1, r5
 800cab2:	1d72      	adds	r2, r6, #5
 800cab4:	0092      	lsls	r2, r2, #2
 800cab6:	4620      	mov	r0, r4
 800cab8:	f000 fc9d 	bl	800d3f6 <_calloc_r>
 800cabc:	b160      	cbz	r0, 800cad8 <_Balloc+0x64>
 800cabe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cac2:	e00e      	b.n	800cae2 <_Balloc+0x6e>
 800cac4:	2221      	movs	r2, #33	; 0x21
 800cac6:	2104      	movs	r1, #4
 800cac8:	4620      	mov	r0, r4
 800caca:	f000 fc94 	bl	800d3f6 <_calloc_r>
 800cace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cad0:	60f0      	str	r0, [r6, #12]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1e4      	bne.n	800caa2 <_Balloc+0x2e>
 800cad8:	2000      	movs	r0, #0
 800cada:	bd70      	pop	{r4, r5, r6, pc}
 800cadc:	6802      	ldr	r2, [r0, #0]
 800cade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cae2:	2300      	movs	r3, #0
 800cae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cae8:	e7f7      	b.n	800cada <_Balloc+0x66>
 800caea:	bf00      	nop
 800caec:	0800e73e 	.word	0x0800e73e
 800caf0:	0800e83c 	.word	0x0800e83c

0800caf4 <_Bfree>:
 800caf4:	b570      	push	{r4, r5, r6, lr}
 800caf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800caf8:	4605      	mov	r5, r0
 800cafa:	460c      	mov	r4, r1
 800cafc:	b976      	cbnz	r6, 800cb1c <_Bfree+0x28>
 800cafe:	2010      	movs	r0, #16
 800cb00:	f7ff ff90 	bl	800ca24 <malloc>
 800cb04:	4602      	mov	r2, r0
 800cb06:	6268      	str	r0, [r5, #36]	; 0x24
 800cb08:	b920      	cbnz	r0, 800cb14 <_Bfree+0x20>
 800cb0a:	4b09      	ldr	r3, [pc, #36]	; (800cb30 <_Bfree+0x3c>)
 800cb0c:	4809      	ldr	r0, [pc, #36]	; (800cb34 <_Bfree+0x40>)
 800cb0e:	218a      	movs	r1, #138	; 0x8a
 800cb10:	f000 ff00 	bl	800d914 <__assert_func>
 800cb14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb18:	6006      	str	r6, [r0, #0]
 800cb1a:	60c6      	str	r6, [r0, #12]
 800cb1c:	b13c      	cbz	r4, 800cb2e <_Bfree+0x3a>
 800cb1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb20:	6862      	ldr	r2, [r4, #4]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb28:	6021      	str	r1, [r4, #0]
 800cb2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb2e:	bd70      	pop	{r4, r5, r6, pc}
 800cb30:	0800e73e 	.word	0x0800e73e
 800cb34:	0800e83c 	.word	0x0800e83c

0800cb38 <__multadd>:
 800cb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb3c:	690d      	ldr	r5, [r1, #16]
 800cb3e:	4607      	mov	r7, r0
 800cb40:	460c      	mov	r4, r1
 800cb42:	461e      	mov	r6, r3
 800cb44:	f101 0c14 	add.w	ip, r1, #20
 800cb48:	2000      	movs	r0, #0
 800cb4a:	f8dc 3000 	ldr.w	r3, [ip]
 800cb4e:	b299      	uxth	r1, r3
 800cb50:	fb02 6101 	mla	r1, r2, r1, r6
 800cb54:	0c1e      	lsrs	r6, r3, #16
 800cb56:	0c0b      	lsrs	r3, r1, #16
 800cb58:	fb02 3306 	mla	r3, r2, r6, r3
 800cb5c:	b289      	uxth	r1, r1
 800cb5e:	3001      	adds	r0, #1
 800cb60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb64:	4285      	cmp	r5, r0
 800cb66:	f84c 1b04 	str.w	r1, [ip], #4
 800cb6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb6e:	dcec      	bgt.n	800cb4a <__multadd+0x12>
 800cb70:	b30e      	cbz	r6, 800cbb6 <__multadd+0x7e>
 800cb72:	68a3      	ldr	r3, [r4, #8]
 800cb74:	42ab      	cmp	r3, r5
 800cb76:	dc19      	bgt.n	800cbac <__multadd+0x74>
 800cb78:	6861      	ldr	r1, [r4, #4]
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	3101      	adds	r1, #1
 800cb7e:	f7ff ff79 	bl	800ca74 <_Balloc>
 800cb82:	4680      	mov	r8, r0
 800cb84:	b928      	cbnz	r0, 800cb92 <__multadd+0x5a>
 800cb86:	4602      	mov	r2, r0
 800cb88:	4b0c      	ldr	r3, [pc, #48]	; (800cbbc <__multadd+0x84>)
 800cb8a:	480d      	ldr	r0, [pc, #52]	; (800cbc0 <__multadd+0x88>)
 800cb8c:	21b5      	movs	r1, #181	; 0xb5
 800cb8e:	f000 fec1 	bl	800d914 <__assert_func>
 800cb92:	6922      	ldr	r2, [r4, #16]
 800cb94:	3202      	adds	r2, #2
 800cb96:	f104 010c 	add.w	r1, r4, #12
 800cb9a:	0092      	lsls	r2, r2, #2
 800cb9c:	300c      	adds	r0, #12
 800cb9e:	f7ff ff5b 	bl	800ca58 <memcpy>
 800cba2:	4621      	mov	r1, r4
 800cba4:	4638      	mov	r0, r7
 800cba6:	f7ff ffa5 	bl	800caf4 <_Bfree>
 800cbaa:	4644      	mov	r4, r8
 800cbac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbb0:	3501      	adds	r5, #1
 800cbb2:	615e      	str	r6, [r3, #20]
 800cbb4:	6125      	str	r5, [r4, #16]
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbbc:	0800e7b0 	.word	0x0800e7b0
 800cbc0:	0800e83c 	.word	0x0800e83c

0800cbc4 <__s2b>:
 800cbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc8:	460c      	mov	r4, r1
 800cbca:	4615      	mov	r5, r2
 800cbcc:	461f      	mov	r7, r3
 800cbce:	2209      	movs	r2, #9
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbd8:	2100      	movs	r1, #0
 800cbda:	2201      	movs	r2, #1
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	db09      	blt.n	800cbf4 <__s2b+0x30>
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f7ff ff47 	bl	800ca74 <_Balloc>
 800cbe6:	b940      	cbnz	r0, 800cbfa <__s2b+0x36>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	4b19      	ldr	r3, [pc, #100]	; (800cc50 <__s2b+0x8c>)
 800cbec:	4819      	ldr	r0, [pc, #100]	; (800cc54 <__s2b+0x90>)
 800cbee:	21ce      	movs	r1, #206	; 0xce
 800cbf0:	f000 fe90 	bl	800d914 <__assert_func>
 800cbf4:	0052      	lsls	r2, r2, #1
 800cbf6:	3101      	adds	r1, #1
 800cbf8:	e7f0      	b.n	800cbdc <__s2b+0x18>
 800cbfa:	9b08      	ldr	r3, [sp, #32]
 800cbfc:	6143      	str	r3, [r0, #20]
 800cbfe:	2d09      	cmp	r5, #9
 800cc00:	f04f 0301 	mov.w	r3, #1
 800cc04:	6103      	str	r3, [r0, #16]
 800cc06:	dd16      	ble.n	800cc36 <__s2b+0x72>
 800cc08:	f104 0909 	add.w	r9, r4, #9
 800cc0c:	46c8      	mov	r8, r9
 800cc0e:	442c      	add	r4, r5
 800cc10:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc14:	4601      	mov	r1, r0
 800cc16:	3b30      	subs	r3, #48	; 0x30
 800cc18:	220a      	movs	r2, #10
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7ff ff8c 	bl	800cb38 <__multadd>
 800cc20:	45a0      	cmp	r8, r4
 800cc22:	d1f5      	bne.n	800cc10 <__s2b+0x4c>
 800cc24:	f1a5 0408 	sub.w	r4, r5, #8
 800cc28:	444c      	add	r4, r9
 800cc2a:	1b2d      	subs	r5, r5, r4
 800cc2c:	1963      	adds	r3, r4, r5
 800cc2e:	42bb      	cmp	r3, r7
 800cc30:	db04      	blt.n	800cc3c <__s2b+0x78>
 800cc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc36:	340a      	adds	r4, #10
 800cc38:	2509      	movs	r5, #9
 800cc3a:	e7f6      	b.n	800cc2a <__s2b+0x66>
 800cc3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc40:	4601      	mov	r1, r0
 800cc42:	3b30      	subs	r3, #48	; 0x30
 800cc44:	220a      	movs	r2, #10
 800cc46:	4630      	mov	r0, r6
 800cc48:	f7ff ff76 	bl	800cb38 <__multadd>
 800cc4c:	e7ee      	b.n	800cc2c <__s2b+0x68>
 800cc4e:	bf00      	nop
 800cc50:	0800e7b0 	.word	0x0800e7b0
 800cc54:	0800e83c 	.word	0x0800e83c

0800cc58 <__hi0bits>:
 800cc58:	0c03      	lsrs	r3, r0, #16
 800cc5a:	041b      	lsls	r3, r3, #16
 800cc5c:	b9d3      	cbnz	r3, 800cc94 <__hi0bits+0x3c>
 800cc5e:	0400      	lsls	r0, r0, #16
 800cc60:	2310      	movs	r3, #16
 800cc62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc66:	bf04      	itt	eq
 800cc68:	0200      	lsleq	r0, r0, #8
 800cc6a:	3308      	addeq	r3, #8
 800cc6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc70:	bf04      	itt	eq
 800cc72:	0100      	lsleq	r0, r0, #4
 800cc74:	3304      	addeq	r3, #4
 800cc76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc7a:	bf04      	itt	eq
 800cc7c:	0080      	lsleq	r0, r0, #2
 800cc7e:	3302      	addeq	r3, #2
 800cc80:	2800      	cmp	r0, #0
 800cc82:	db05      	blt.n	800cc90 <__hi0bits+0x38>
 800cc84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc88:	f103 0301 	add.w	r3, r3, #1
 800cc8c:	bf08      	it	eq
 800cc8e:	2320      	moveq	r3, #32
 800cc90:	4618      	mov	r0, r3
 800cc92:	4770      	bx	lr
 800cc94:	2300      	movs	r3, #0
 800cc96:	e7e4      	b.n	800cc62 <__hi0bits+0xa>

0800cc98 <__lo0bits>:
 800cc98:	6803      	ldr	r3, [r0, #0]
 800cc9a:	f013 0207 	ands.w	r2, r3, #7
 800cc9e:	4601      	mov	r1, r0
 800cca0:	d00b      	beq.n	800ccba <__lo0bits+0x22>
 800cca2:	07da      	lsls	r2, r3, #31
 800cca4:	d423      	bmi.n	800ccee <__lo0bits+0x56>
 800cca6:	0798      	lsls	r0, r3, #30
 800cca8:	bf49      	itett	mi
 800ccaa:	085b      	lsrmi	r3, r3, #1
 800ccac:	089b      	lsrpl	r3, r3, #2
 800ccae:	2001      	movmi	r0, #1
 800ccb0:	600b      	strmi	r3, [r1, #0]
 800ccb2:	bf5c      	itt	pl
 800ccb4:	600b      	strpl	r3, [r1, #0]
 800ccb6:	2002      	movpl	r0, #2
 800ccb8:	4770      	bx	lr
 800ccba:	b298      	uxth	r0, r3
 800ccbc:	b9a8      	cbnz	r0, 800ccea <__lo0bits+0x52>
 800ccbe:	0c1b      	lsrs	r3, r3, #16
 800ccc0:	2010      	movs	r0, #16
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	b90a      	cbnz	r2, 800ccca <__lo0bits+0x32>
 800ccc6:	3008      	adds	r0, #8
 800ccc8:	0a1b      	lsrs	r3, r3, #8
 800ccca:	071a      	lsls	r2, r3, #28
 800cccc:	bf04      	itt	eq
 800ccce:	091b      	lsreq	r3, r3, #4
 800ccd0:	3004      	addeq	r0, #4
 800ccd2:	079a      	lsls	r2, r3, #30
 800ccd4:	bf04      	itt	eq
 800ccd6:	089b      	lsreq	r3, r3, #2
 800ccd8:	3002      	addeq	r0, #2
 800ccda:	07da      	lsls	r2, r3, #31
 800ccdc:	d403      	bmi.n	800cce6 <__lo0bits+0x4e>
 800ccde:	085b      	lsrs	r3, r3, #1
 800cce0:	f100 0001 	add.w	r0, r0, #1
 800cce4:	d005      	beq.n	800ccf2 <__lo0bits+0x5a>
 800cce6:	600b      	str	r3, [r1, #0]
 800cce8:	4770      	bx	lr
 800ccea:	4610      	mov	r0, r2
 800ccec:	e7e9      	b.n	800ccc2 <__lo0bits+0x2a>
 800ccee:	2000      	movs	r0, #0
 800ccf0:	4770      	bx	lr
 800ccf2:	2020      	movs	r0, #32
 800ccf4:	4770      	bx	lr
	...

0800ccf8 <__i2b>:
 800ccf8:	b510      	push	{r4, lr}
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	f7ff feb9 	bl	800ca74 <_Balloc>
 800cd02:	4602      	mov	r2, r0
 800cd04:	b928      	cbnz	r0, 800cd12 <__i2b+0x1a>
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <__i2b+0x24>)
 800cd08:	4805      	ldr	r0, [pc, #20]	; (800cd20 <__i2b+0x28>)
 800cd0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd0e:	f000 fe01 	bl	800d914 <__assert_func>
 800cd12:	2301      	movs	r3, #1
 800cd14:	6144      	str	r4, [r0, #20]
 800cd16:	6103      	str	r3, [r0, #16]
 800cd18:	bd10      	pop	{r4, pc}
 800cd1a:	bf00      	nop
 800cd1c:	0800e7b0 	.word	0x0800e7b0
 800cd20:	0800e83c 	.word	0x0800e83c

0800cd24 <__multiply>:
 800cd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	4691      	mov	r9, r2
 800cd2a:	690a      	ldr	r2, [r1, #16]
 800cd2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	bfb8      	it	lt
 800cd34:	460b      	movlt	r3, r1
 800cd36:	460c      	mov	r4, r1
 800cd38:	bfbc      	itt	lt
 800cd3a:	464c      	movlt	r4, r9
 800cd3c:	4699      	movlt	r9, r3
 800cd3e:	6927      	ldr	r7, [r4, #16]
 800cd40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd44:	68a3      	ldr	r3, [r4, #8]
 800cd46:	6861      	ldr	r1, [r4, #4]
 800cd48:	eb07 060a 	add.w	r6, r7, sl
 800cd4c:	42b3      	cmp	r3, r6
 800cd4e:	b085      	sub	sp, #20
 800cd50:	bfb8      	it	lt
 800cd52:	3101      	addlt	r1, #1
 800cd54:	f7ff fe8e 	bl	800ca74 <_Balloc>
 800cd58:	b930      	cbnz	r0, 800cd68 <__multiply+0x44>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	4b44      	ldr	r3, [pc, #272]	; (800ce70 <__multiply+0x14c>)
 800cd5e:	4845      	ldr	r0, [pc, #276]	; (800ce74 <__multiply+0x150>)
 800cd60:	f240 115d 	movw	r1, #349	; 0x15d
 800cd64:	f000 fdd6 	bl	800d914 <__assert_func>
 800cd68:	f100 0514 	add.w	r5, r0, #20
 800cd6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd70:	462b      	mov	r3, r5
 800cd72:	2200      	movs	r2, #0
 800cd74:	4543      	cmp	r3, r8
 800cd76:	d321      	bcc.n	800cdbc <__multiply+0x98>
 800cd78:	f104 0314 	add.w	r3, r4, #20
 800cd7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd80:	f109 0314 	add.w	r3, r9, #20
 800cd84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd88:	9202      	str	r2, [sp, #8]
 800cd8a:	1b3a      	subs	r2, r7, r4
 800cd8c:	3a15      	subs	r2, #21
 800cd8e:	f022 0203 	bic.w	r2, r2, #3
 800cd92:	3204      	adds	r2, #4
 800cd94:	f104 0115 	add.w	r1, r4, #21
 800cd98:	428f      	cmp	r7, r1
 800cd9a:	bf38      	it	cc
 800cd9c:	2204      	movcc	r2, #4
 800cd9e:	9201      	str	r2, [sp, #4]
 800cda0:	9a02      	ldr	r2, [sp, #8]
 800cda2:	9303      	str	r3, [sp, #12]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d80c      	bhi.n	800cdc2 <__multiply+0x9e>
 800cda8:	2e00      	cmp	r6, #0
 800cdaa:	dd03      	ble.n	800cdb4 <__multiply+0x90>
 800cdac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d05a      	beq.n	800ce6a <__multiply+0x146>
 800cdb4:	6106      	str	r6, [r0, #16]
 800cdb6:	b005      	add	sp, #20
 800cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbc:	f843 2b04 	str.w	r2, [r3], #4
 800cdc0:	e7d8      	b.n	800cd74 <__multiply+0x50>
 800cdc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800cdc6:	f1ba 0f00 	cmp.w	sl, #0
 800cdca:	d024      	beq.n	800ce16 <__multiply+0xf2>
 800cdcc:	f104 0e14 	add.w	lr, r4, #20
 800cdd0:	46a9      	mov	r9, r5
 800cdd2:	f04f 0c00 	mov.w	ip, #0
 800cdd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cdda:	f8d9 1000 	ldr.w	r1, [r9]
 800cdde:	fa1f fb82 	uxth.w	fp, r2
 800cde2:	b289      	uxth	r1, r1
 800cde4:	fb0a 110b 	mla	r1, sl, fp, r1
 800cde8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cdec:	f8d9 2000 	ldr.w	r2, [r9]
 800cdf0:	4461      	add	r1, ip
 800cdf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdf6:	fb0a c20b 	mla	r2, sl, fp, ip
 800cdfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdfe:	b289      	uxth	r1, r1
 800ce00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce04:	4577      	cmp	r7, lr
 800ce06:	f849 1b04 	str.w	r1, [r9], #4
 800ce0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce0e:	d8e2      	bhi.n	800cdd6 <__multiply+0xb2>
 800ce10:	9a01      	ldr	r2, [sp, #4]
 800ce12:	f845 c002 	str.w	ip, [r5, r2]
 800ce16:	9a03      	ldr	r2, [sp, #12]
 800ce18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	f1b9 0f00 	cmp.w	r9, #0
 800ce22:	d020      	beq.n	800ce66 <__multiply+0x142>
 800ce24:	6829      	ldr	r1, [r5, #0]
 800ce26:	f104 0c14 	add.w	ip, r4, #20
 800ce2a:	46ae      	mov	lr, r5
 800ce2c:	f04f 0a00 	mov.w	sl, #0
 800ce30:	f8bc b000 	ldrh.w	fp, [ip]
 800ce34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce38:	fb09 220b 	mla	r2, r9, fp, r2
 800ce3c:	4492      	add	sl, r2
 800ce3e:	b289      	uxth	r1, r1
 800ce40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce44:	f84e 1b04 	str.w	r1, [lr], #4
 800ce48:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce4c:	f8be 1000 	ldrh.w	r1, [lr]
 800ce50:	0c12      	lsrs	r2, r2, #16
 800ce52:	fb09 1102 	mla	r1, r9, r2, r1
 800ce56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ce5a:	4567      	cmp	r7, ip
 800ce5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce60:	d8e6      	bhi.n	800ce30 <__multiply+0x10c>
 800ce62:	9a01      	ldr	r2, [sp, #4]
 800ce64:	50a9      	str	r1, [r5, r2]
 800ce66:	3504      	adds	r5, #4
 800ce68:	e79a      	b.n	800cda0 <__multiply+0x7c>
 800ce6a:	3e01      	subs	r6, #1
 800ce6c:	e79c      	b.n	800cda8 <__multiply+0x84>
 800ce6e:	bf00      	nop
 800ce70:	0800e7b0 	.word	0x0800e7b0
 800ce74:	0800e83c 	.word	0x0800e83c

0800ce78 <__pow5mult>:
 800ce78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce7c:	4615      	mov	r5, r2
 800ce7e:	f012 0203 	ands.w	r2, r2, #3
 800ce82:	4606      	mov	r6, r0
 800ce84:	460f      	mov	r7, r1
 800ce86:	d007      	beq.n	800ce98 <__pow5mult+0x20>
 800ce88:	4c25      	ldr	r4, [pc, #148]	; (800cf20 <__pow5mult+0xa8>)
 800ce8a:	3a01      	subs	r2, #1
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce92:	f7ff fe51 	bl	800cb38 <__multadd>
 800ce96:	4607      	mov	r7, r0
 800ce98:	10ad      	asrs	r5, r5, #2
 800ce9a:	d03d      	beq.n	800cf18 <__pow5mult+0xa0>
 800ce9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce9e:	b97c      	cbnz	r4, 800cec0 <__pow5mult+0x48>
 800cea0:	2010      	movs	r0, #16
 800cea2:	f7ff fdbf 	bl	800ca24 <malloc>
 800cea6:	4602      	mov	r2, r0
 800cea8:	6270      	str	r0, [r6, #36]	; 0x24
 800ceaa:	b928      	cbnz	r0, 800ceb8 <__pow5mult+0x40>
 800ceac:	4b1d      	ldr	r3, [pc, #116]	; (800cf24 <__pow5mult+0xac>)
 800ceae:	481e      	ldr	r0, [pc, #120]	; (800cf28 <__pow5mult+0xb0>)
 800ceb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ceb4:	f000 fd2e 	bl	800d914 <__assert_func>
 800ceb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cebc:	6004      	str	r4, [r0, #0]
 800cebe:	60c4      	str	r4, [r0, #12]
 800cec0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cec8:	b94c      	cbnz	r4, 800cede <__pow5mult+0x66>
 800ceca:	f240 2171 	movw	r1, #625	; 0x271
 800cece:	4630      	mov	r0, r6
 800ced0:	f7ff ff12 	bl	800ccf8 <__i2b>
 800ced4:	2300      	movs	r3, #0
 800ced6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ceda:	4604      	mov	r4, r0
 800cedc:	6003      	str	r3, [r0, #0]
 800cede:	f04f 0900 	mov.w	r9, #0
 800cee2:	07eb      	lsls	r3, r5, #31
 800cee4:	d50a      	bpl.n	800cefc <__pow5mult+0x84>
 800cee6:	4639      	mov	r1, r7
 800cee8:	4622      	mov	r2, r4
 800ceea:	4630      	mov	r0, r6
 800ceec:	f7ff ff1a 	bl	800cd24 <__multiply>
 800cef0:	4639      	mov	r1, r7
 800cef2:	4680      	mov	r8, r0
 800cef4:	4630      	mov	r0, r6
 800cef6:	f7ff fdfd 	bl	800caf4 <_Bfree>
 800cefa:	4647      	mov	r7, r8
 800cefc:	106d      	asrs	r5, r5, #1
 800cefe:	d00b      	beq.n	800cf18 <__pow5mult+0xa0>
 800cf00:	6820      	ldr	r0, [r4, #0]
 800cf02:	b938      	cbnz	r0, 800cf14 <__pow5mult+0x9c>
 800cf04:	4622      	mov	r2, r4
 800cf06:	4621      	mov	r1, r4
 800cf08:	4630      	mov	r0, r6
 800cf0a:	f7ff ff0b 	bl	800cd24 <__multiply>
 800cf0e:	6020      	str	r0, [r4, #0]
 800cf10:	f8c0 9000 	str.w	r9, [r0]
 800cf14:	4604      	mov	r4, r0
 800cf16:	e7e4      	b.n	800cee2 <__pow5mult+0x6a>
 800cf18:	4638      	mov	r0, r7
 800cf1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf1e:	bf00      	nop
 800cf20:	0800e988 	.word	0x0800e988
 800cf24:	0800e73e 	.word	0x0800e73e
 800cf28:	0800e83c 	.word	0x0800e83c

0800cf2c <__lshift>:
 800cf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf30:	460c      	mov	r4, r1
 800cf32:	6849      	ldr	r1, [r1, #4]
 800cf34:	6923      	ldr	r3, [r4, #16]
 800cf36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf3a:	68a3      	ldr	r3, [r4, #8]
 800cf3c:	4607      	mov	r7, r0
 800cf3e:	4691      	mov	r9, r2
 800cf40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf44:	f108 0601 	add.w	r6, r8, #1
 800cf48:	42b3      	cmp	r3, r6
 800cf4a:	db0b      	blt.n	800cf64 <__lshift+0x38>
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	f7ff fd91 	bl	800ca74 <_Balloc>
 800cf52:	4605      	mov	r5, r0
 800cf54:	b948      	cbnz	r0, 800cf6a <__lshift+0x3e>
 800cf56:	4602      	mov	r2, r0
 800cf58:	4b2a      	ldr	r3, [pc, #168]	; (800d004 <__lshift+0xd8>)
 800cf5a:	482b      	ldr	r0, [pc, #172]	; (800d008 <__lshift+0xdc>)
 800cf5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf60:	f000 fcd8 	bl	800d914 <__assert_func>
 800cf64:	3101      	adds	r1, #1
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	e7ee      	b.n	800cf48 <__lshift+0x1c>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f100 0114 	add.w	r1, r0, #20
 800cf70:	f100 0210 	add.w	r2, r0, #16
 800cf74:	4618      	mov	r0, r3
 800cf76:	4553      	cmp	r3, sl
 800cf78:	db37      	blt.n	800cfea <__lshift+0xbe>
 800cf7a:	6920      	ldr	r0, [r4, #16]
 800cf7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf80:	f104 0314 	add.w	r3, r4, #20
 800cf84:	f019 091f 	ands.w	r9, r9, #31
 800cf88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf90:	d02f      	beq.n	800cff2 <__lshift+0xc6>
 800cf92:	f1c9 0e20 	rsb	lr, r9, #32
 800cf96:	468a      	mov	sl, r1
 800cf98:	f04f 0c00 	mov.w	ip, #0
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	fa02 f209 	lsl.w	r2, r2, r9
 800cfa2:	ea42 020c 	orr.w	r2, r2, ip
 800cfa6:	f84a 2b04 	str.w	r2, [sl], #4
 800cfaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfae:	4298      	cmp	r0, r3
 800cfb0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cfb4:	d8f2      	bhi.n	800cf9c <__lshift+0x70>
 800cfb6:	1b03      	subs	r3, r0, r4
 800cfb8:	3b15      	subs	r3, #21
 800cfba:	f023 0303 	bic.w	r3, r3, #3
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	f104 0215 	add.w	r2, r4, #21
 800cfc4:	4290      	cmp	r0, r2
 800cfc6:	bf38      	it	cc
 800cfc8:	2304      	movcc	r3, #4
 800cfca:	f841 c003 	str.w	ip, [r1, r3]
 800cfce:	f1bc 0f00 	cmp.w	ip, #0
 800cfd2:	d001      	beq.n	800cfd8 <__lshift+0xac>
 800cfd4:	f108 0602 	add.w	r6, r8, #2
 800cfd8:	3e01      	subs	r6, #1
 800cfda:	4638      	mov	r0, r7
 800cfdc:	612e      	str	r6, [r5, #16]
 800cfde:	4621      	mov	r1, r4
 800cfe0:	f7ff fd88 	bl	800caf4 <_Bfree>
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfea:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfee:	3301      	adds	r3, #1
 800cff0:	e7c1      	b.n	800cf76 <__lshift+0x4a>
 800cff2:	3904      	subs	r1, #4
 800cff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cffc:	4298      	cmp	r0, r3
 800cffe:	d8f9      	bhi.n	800cff4 <__lshift+0xc8>
 800d000:	e7ea      	b.n	800cfd8 <__lshift+0xac>
 800d002:	bf00      	nop
 800d004:	0800e7b0 	.word	0x0800e7b0
 800d008:	0800e83c 	.word	0x0800e83c

0800d00c <__mcmp>:
 800d00c:	b530      	push	{r4, r5, lr}
 800d00e:	6902      	ldr	r2, [r0, #16]
 800d010:	690c      	ldr	r4, [r1, #16]
 800d012:	1b12      	subs	r2, r2, r4
 800d014:	d10e      	bne.n	800d034 <__mcmp+0x28>
 800d016:	f100 0314 	add.w	r3, r0, #20
 800d01a:	3114      	adds	r1, #20
 800d01c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d020:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d024:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d028:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d02c:	42a5      	cmp	r5, r4
 800d02e:	d003      	beq.n	800d038 <__mcmp+0x2c>
 800d030:	d305      	bcc.n	800d03e <__mcmp+0x32>
 800d032:	2201      	movs	r2, #1
 800d034:	4610      	mov	r0, r2
 800d036:	bd30      	pop	{r4, r5, pc}
 800d038:	4283      	cmp	r3, r0
 800d03a:	d3f3      	bcc.n	800d024 <__mcmp+0x18>
 800d03c:	e7fa      	b.n	800d034 <__mcmp+0x28>
 800d03e:	f04f 32ff 	mov.w	r2, #4294967295
 800d042:	e7f7      	b.n	800d034 <__mcmp+0x28>

0800d044 <__mdiff>:
 800d044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d048:	460c      	mov	r4, r1
 800d04a:	4606      	mov	r6, r0
 800d04c:	4611      	mov	r1, r2
 800d04e:	4620      	mov	r0, r4
 800d050:	4690      	mov	r8, r2
 800d052:	f7ff ffdb 	bl	800d00c <__mcmp>
 800d056:	1e05      	subs	r5, r0, #0
 800d058:	d110      	bne.n	800d07c <__mdiff+0x38>
 800d05a:	4629      	mov	r1, r5
 800d05c:	4630      	mov	r0, r6
 800d05e:	f7ff fd09 	bl	800ca74 <_Balloc>
 800d062:	b930      	cbnz	r0, 800d072 <__mdiff+0x2e>
 800d064:	4b3a      	ldr	r3, [pc, #232]	; (800d150 <__mdiff+0x10c>)
 800d066:	4602      	mov	r2, r0
 800d068:	f240 2132 	movw	r1, #562	; 0x232
 800d06c:	4839      	ldr	r0, [pc, #228]	; (800d154 <__mdiff+0x110>)
 800d06e:	f000 fc51 	bl	800d914 <__assert_func>
 800d072:	2301      	movs	r3, #1
 800d074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d07c:	bfa4      	itt	ge
 800d07e:	4643      	movge	r3, r8
 800d080:	46a0      	movge	r8, r4
 800d082:	4630      	mov	r0, r6
 800d084:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d088:	bfa6      	itte	ge
 800d08a:	461c      	movge	r4, r3
 800d08c:	2500      	movge	r5, #0
 800d08e:	2501      	movlt	r5, #1
 800d090:	f7ff fcf0 	bl	800ca74 <_Balloc>
 800d094:	b920      	cbnz	r0, 800d0a0 <__mdiff+0x5c>
 800d096:	4b2e      	ldr	r3, [pc, #184]	; (800d150 <__mdiff+0x10c>)
 800d098:	4602      	mov	r2, r0
 800d09a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d09e:	e7e5      	b.n	800d06c <__mdiff+0x28>
 800d0a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d0a4:	6926      	ldr	r6, [r4, #16]
 800d0a6:	60c5      	str	r5, [r0, #12]
 800d0a8:	f104 0914 	add.w	r9, r4, #20
 800d0ac:	f108 0514 	add.w	r5, r8, #20
 800d0b0:	f100 0e14 	add.w	lr, r0, #20
 800d0b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d0b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0bc:	f108 0210 	add.w	r2, r8, #16
 800d0c0:	46f2      	mov	sl, lr
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d0cc:	fa1f f883 	uxth.w	r8, r3
 800d0d0:	fa11 f18b 	uxtah	r1, r1, fp
 800d0d4:	0c1b      	lsrs	r3, r3, #16
 800d0d6:	eba1 0808 	sub.w	r8, r1, r8
 800d0da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0e2:	fa1f f888 	uxth.w	r8, r8
 800d0e6:	1419      	asrs	r1, r3, #16
 800d0e8:	454e      	cmp	r6, r9
 800d0ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0ee:	f84a 3b04 	str.w	r3, [sl], #4
 800d0f2:	d8e7      	bhi.n	800d0c4 <__mdiff+0x80>
 800d0f4:	1b33      	subs	r3, r6, r4
 800d0f6:	3b15      	subs	r3, #21
 800d0f8:	f023 0303 	bic.w	r3, r3, #3
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	3415      	adds	r4, #21
 800d100:	42a6      	cmp	r6, r4
 800d102:	bf38      	it	cc
 800d104:	2304      	movcc	r3, #4
 800d106:	441d      	add	r5, r3
 800d108:	4473      	add	r3, lr
 800d10a:	469e      	mov	lr, r3
 800d10c:	462e      	mov	r6, r5
 800d10e:	4566      	cmp	r6, ip
 800d110:	d30e      	bcc.n	800d130 <__mdiff+0xec>
 800d112:	f10c 0203 	add.w	r2, ip, #3
 800d116:	1b52      	subs	r2, r2, r5
 800d118:	f022 0203 	bic.w	r2, r2, #3
 800d11c:	3d03      	subs	r5, #3
 800d11e:	45ac      	cmp	ip, r5
 800d120:	bf38      	it	cc
 800d122:	2200      	movcc	r2, #0
 800d124:	441a      	add	r2, r3
 800d126:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d12a:	b17b      	cbz	r3, 800d14c <__mdiff+0x108>
 800d12c:	6107      	str	r7, [r0, #16]
 800d12e:	e7a3      	b.n	800d078 <__mdiff+0x34>
 800d130:	f856 8b04 	ldr.w	r8, [r6], #4
 800d134:	fa11 f288 	uxtah	r2, r1, r8
 800d138:	1414      	asrs	r4, r2, #16
 800d13a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d13e:	b292      	uxth	r2, r2
 800d140:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d144:	f84e 2b04 	str.w	r2, [lr], #4
 800d148:	1421      	asrs	r1, r4, #16
 800d14a:	e7e0      	b.n	800d10e <__mdiff+0xca>
 800d14c:	3f01      	subs	r7, #1
 800d14e:	e7ea      	b.n	800d126 <__mdiff+0xe2>
 800d150:	0800e7b0 	.word	0x0800e7b0
 800d154:	0800e83c 	.word	0x0800e83c

0800d158 <__ulp>:
 800d158:	b082      	sub	sp, #8
 800d15a:	ed8d 0b00 	vstr	d0, [sp]
 800d15e:	9b01      	ldr	r3, [sp, #4]
 800d160:	4912      	ldr	r1, [pc, #72]	; (800d1ac <__ulp+0x54>)
 800d162:	4019      	ands	r1, r3
 800d164:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d168:	2900      	cmp	r1, #0
 800d16a:	dd05      	ble.n	800d178 <__ulp+0x20>
 800d16c:	2200      	movs	r2, #0
 800d16e:	460b      	mov	r3, r1
 800d170:	ec43 2b10 	vmov	d0, r2, r3
 800d174:	b002      	add	sp, #8
 800d176:	4770      	bx	lr
 800d178:	4249      	negs	r1, r1
 800d17a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d17e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d182:	f04f 0200 	mov.w	r2, #0
 800d186:	f04f 0300 	mov.w	r3, #0
 800d18a:	da04      	bge.n	800d196 <__ulp+0x3e>
 800d18c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d190:	fa41 f300 	asr.w	r3, r1, r0
 800d194:	e7ec      	b.n	800d170 <__ulp+0x18>
 800d196:	f1a0 0114 	sub.w	r1, r0, #20
 800d19a:	291e      	cmp	r1, #30
 800d19c:	bfda      	itte	le
 800d19e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d1a2:	fa20 f101 	lsrle.w	r1, r0, r1
 800d1a6:	2101      	movgt	r1, #1
 800d1a8:	460a      	mov	r2, r1
 800d1aa:	e7e1      	b.n	800d170 <__ulp+0x18>
 800d1ac:	7ff00000 	.word	0x7ff00000

0800d1b0 <__b2d>:
 800d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b2:	6905      	ldr	r5, [r0, #16]
 800d1b4:	f100 0714 	add.w	r7, r0, #20
 800d1b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d1bc:	1f2e      	subs	r6, r5, #4
 800d1be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f7ff fd48 	bl	800cc58 <__hi0bits>
 800d1c8:	f1c0 0320 	rsb	r3, r0, #32
 800d1cc:	280a      	cmp	r0, #10
 800d1ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d24c <__b2d+0x9c>
 800d1d2:	600b      	str	r3, [r1, #0]
 800d1d4:	dc14      	bgt.n	800d200 <__b2d+0x50>
 800d1d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800d1da:	fa24 f10e 	lsr.w	r1, r4, lr
 800d1de:	42b7      	cmp	r7, r6
 800d1e0:	ea41 030c 	orr.w	r3, r1, ip
 800d1e4:	bf34      	ite	cc
 800d1e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d1ea:	2100      	movcs	r1, #0
 800d1ec:	3015      	adds	r0, #21
 800d1ee:	fa04 f000 	lsl.w	r0, r4, r0
 800d1f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800d1f6:	ea40 0201 	orr.w	r2, r0, r1
 800d1fa:	ec43 2b10 	vmov	d0, r2, r3
 800d1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d200:	42b7      	cmp	r7, r6
 800d202:	bf3a      	itte	cc
 800d204:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d208:	f1a5 0608 	subcc.w	r6, r5, #8
 800d20c:	2100      	movcs	r1, #0
 800d20e:	380b      	subs	r0, #11
 800d210:	d017      	beq.n	800d242 <__b2d+0x92>
 800d212:	f1c0 0c20 	rsb	ip, r0, #32
 800d216:	fa04 f500 	lsl.w	r5, r4, r0
 800d21a:	42be      	cmp	r6, r7
 800d21c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d220:	ea45 0504 	orr.w	r5, r5, r4
 800d224:	bf8c      	ite	hi
 800d226:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d22a:	2400      	movls	r4, #0
 800d22c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d230:	fa01 f000 	lsl.w	r0, r1, r0
 800d234:	fa24 f40c 	lsr.w	r4, r4, ip
 800d238:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d23c:	ea40 0204 	orr.w	r2, r0, r4
 800d240:	e7db      	b.n	800d1fa <__b2d+0x4a>
 800d242:	ea44 030c 	orr.w	r3, r4, ip
 800d246:	460a      	mov	r2, r1
 800d248:	e7d7      	b.n	800d1fa <__b2d+0x4a>
 800d24a:	bf00      	nop
 800d24c:	3ff00000 	.word	0x3ff00000

0800d250 <__d2b>:
 800d250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d254:	4689      	mov	r9, r1
 800d256:	2101      	movs	r1, #1
 800d258:	ec57 6b10 	vmov	r6, r7, d0
 800d25c:	4690      	mov	r8, r2
 800d25e:	f7ff fc09 	bl	800ca74 <_Balloc>
 800d262:	4604      	mov	r4, r0
 800d264:	b930      	cbnz	r0, 800d274 <__d2b+0x24>
 800d266:	4602      	mov	r2, r0
 800d268:	4b25      	ldr	r3, [pc, #148]	; (800d300 <__d2b+0xb0>)
 800d26a:	4826      	ldr	r0, [pc, #152]	; (800d304 <__d2b+0xb4>)
 800d26c:	f240 310a 	movw	r1, #778	; 0x30a
 800d270:	f000 fb50 	bl	800d914 <__assert_func>
 800d274:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d27c:	bb35      	cbnz	r5, 800d2cc <__d2b+0x7c>
 800d27e:	2e00      	cmp	r6, #0
 800d280:	9301      	str	r3, [sp, #4]
 800d282:	d028      	beq.n	800d2d6 <__d2b+0x86>
 800d284:	4668      	mov	r0, sp
 800d286:	9600      	str	r6, [sp, #0]
 800d288:	f7ff fd06 	bl	800cc98 <__lo0bits>
 800d28c:	9900      	ldr	r1, [sp, #0]
 800d28e:	b300      	cbz	r0, 800d2d2 <__d2b+0x82>
 800d290:	9a01      	ldr	r2, [sp, #4]
 800d292:	f1c0 0320 	rsb	r3, r0, #32
 800d296:	fa02 f303 	lsl.w	r3, r2, r3
 800d29a:	430b      	orrs	r3, r1
 800d29c:	40c2      	lsrs	r2, r0
 800d29e:	6163      	str	r3, [r4, #20]
 800d2a0:	9201      	str	r2, [sp, #4]
 800d2a2:	9b01      	ldr	r3, [sp, #4]
 800d2a4:	61a3      	str	r3, [r4, #24]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	bf14      	ite	ne
 800d2aa:	2202      	movne	r2, #2
 800d2ac:	2201      	moveq	r2, #1
 800d2ae:	6122      	str	r2, [r4, #16]
 800d2b0:	b1d5      	cbz	r5, 800d2e8 <__d2b+0x98>
 800d2b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d2b6:	4405      	add	r5, r0
 800d2b8:	f8c9 5000 	str.w	r5, [r9]
 800d2bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2c0:	f8c8 0000 	str.w	r0, [r8]
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	b003      	add	sp, #12
 800d2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2d0:	e7d5      	b.n	800d27e <__d2b+0x2e>
 800d2d2:	6161      	str	r1, [r4, #20]
 800d2d4:	e7e5      	b.n	800d2a2 <__d2b+0x52>
 800d2d6:	a801      	add	r0, sp, #4
 800d2d8:	f7ff fcde 	bl	800cc98 <__lo0bits>
 800d2dc:	9b01      	ldr	r3, [sp, #4]
 800d2de:	6163      	str	r3, [r4, #20]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	6122      	str	r2, [r4, #16]
 800d2e4:	3020      	adds	r0, #32
 800d2e6:	e7e3      	b.n	800d2b0 <__d2b+0x60>
 800d2e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2f0:	f8c9 0000 	str.w	r0, [r9]
 800d2f4:	6918      	ldr	r0, [r3, #16]
 800d2f6:	f7ff fcaf 	bl	800cc58 <__hi0bits>
 800d2fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2fe:	e7df      	b.n	800d2c0 <__d2b+0x70>
 800d300:	0800e7b0 	.word	0x0800e7b0
 800d304:	0800e83c 	.word	0x0800e83c

0800d308 <__ratio>:
 800d308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	4688      	mov	r8, r1
 800d30e:	4669      	mov	r1, sp
 800d310:	4681      	mov	r9, r0
 800d312:	f7ff ff4d 	bl	800d1b0 <__b2d>
 800d316:	a901      	add	r1, sp, #4
 800d318:	4640      	mov	r0, r8
 800d31a:	ec55 4b10 	vmov	r4, r5, d0
 800d31e:	f7ff ff47 	bl	800d1b0 <__b2d>
 800d322:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d326:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d32a:	eba3 0c02 	sub.w	ip, r3, r2
 800d32e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d332:	1a9b      	subs	r3, r3, r2
 800d334:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d338:	ec51 0b10 	vmov	r0, r1, d0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	bfd6      	itet	le
 800d340:	460a      	movle	r2, r1
 800d342:	462a      	movgt	r2, r5
 800d344:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d348:	468b      	mov	fp, r1
 800d34a:	462f      	mov	r7, r5
 800d34c:	bfd4      	ite	le
 800d34e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d352:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d356:	4620      	mov	r0, r4
 800d358:	ee10 2a10 	vmov	r2, s0
 800d35c:	465b      	mov	r3, fp
 800d35e:	4639      	mov	r1, r7
 800d360:	f7f3 fa4c 	bl	80007fc <__aeabi_ddiv>
 800d364:	ec41 0b10 	vmov	d0, r0, r1
 800d368:	b003      	add	sp, #12
 800d36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d36e <__copybits>:
 800d36e:	3901      	subs	r1, #1
 800d370:	b570      	push	{r4, r5, r6, lr}
 800d372:	1149      	asrs	r1, r1, #5
 800d374:	6914      	ldr	r4, [r2, #16]
 800d376:	3101      	adds	r1, #1
 800d378:	f102 0314 	add.w	r3, r2, #20
 800d37c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d380:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d384:	1f05      	subs	r5, r0, #4
 800d386:	42a3      	cmp	r3, r4
 800d388:	d30c      	bcc.n	800d3a4 <__copybits+0x36>
 800d38a:	1aa3      	subs	r3, r4, r2
 800d38c:	3b11      	subs	r3, #17
 800d38e:	f023 0303 	bic.w	r3, r3, #3
 800d392:	3211      	adds	r2, #17
 800d394:	42a2      	cmp	r2, r4
 800d396:	bf88      	it	hi
 800d398:	2300      	movhi	r3, #0
 800d39a:	4418      	add	r0, r3
 800d39c:	2300      	movs	r3, #0
 800d39e:	4288      	cmp	r0, r1
 800d3a0:	d305      	bcc.n	800d3ae <__copybits+0x40>
 800d3a2:	bd70      	pop	{r4, r5, r6, pc}
 800d3a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d3a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d3ac:	e7eb      	b.n	800d386 <__copybits+0x18>
 800d3ae:	f840 3b04 	str.w	r3, [r0], #4
 800d3b2:	e7f4      	b.n	800d39e <__copybits+0x30>

0800d3b4 <__any_on>:
 800d3b4:	f100 0214 	add.w	r2, r0, #20
 800d3b8:	6900      	ldr	r0, [r0, #16]
 800d3ba:	114b      	asrs	r3, r1, #5
 800d3bc:	4298      	cmp	r0, r3
 800d3be:	b510      	push	{r4, lr}
 800d3c0:	db11      	blt.n	800d3e6 <__any_on+0x32>
 800d3c2:	dd0a      	ble.n	800d3da <__any_on+0x26>
 800d3c4:	f011 011f 	ands.w	r1, r1, #31
 800d3c8:	d007      	beq.n	800d3da <__any_on+0x26>
 800d3ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3ce:	fa24 f001 	lsr.w	r0, r4, r1
 800d3d2:	fa00 f101 	lsl.w	r1, r0, r1
 800d3d6:	428c      	cmp	r4, r1
 800d3d8:	d10b      	bne.n	800d3f2 <__any_on+0x3e>
 800d3da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d803      	bhi.n	800d3ea <__any_on+0x36>
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	e7f7      	b.n	800d3da <__any_on+0x26>
 800d3ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3ee:	2900      	cmp	r1, #0
 800d3f0:	d0f5      	beq.n	800d3de <__any_on+0x2a>
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	e7f6      	b.n	800d3e4 <__any_on+0x30>

0800d3f6 <_calloc_r>:
 800d3f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3f8:	fba1 2402 	umull	r2, r4, r1, r2
 800d3fc:	b94c      	cbnz	r4, 800d412 <_calloc_r+0x1c>
 800d3fe:	4611      	mov	r1, r2
 800d400:	9201      	str	r2, [sp, #4]
 800d402:	f000 f87b 	bl	800d4fc <_malloc_r>
 800d406:	9a01      	ldr	r2, [sp, #4]
 800d408:	4605      	mov	r5, r0
 800d40a:	b930      	cbnz	r0, 800d41a <_calloc_r+0x24>
 800d40c:	4628      	mov	r0, r5
 800d40e:	b003      	add	sp, #12
 800d410:	bd30      	pop	{r4, r5, pc}
 800d412:	220c      	movs	r2, #12
 800d414:	6002      	str	r2, [r0, #0]
 800d416:	2500      	movs	r5, #0
 800d418:	e7f8      	b.n	800d40c <_calloc_r+0x16>
 800d41a:	4621      	mov	r1, r4
 800d41c:	f7fc fbc0 	bl	8009ba0 <memset>
 800d420:	e7f4      	b.n	800d40c <_calloc_r+0x16>
	...

0800d424 <_free_r>:
 800d424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d426:	2900      	cmp	r1, #0
 800d428:	d044      	beq.n	800d4b4 <_free_r+0x90>
 800d42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d42e:	9001      	str	r0, [sp, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	f1a1 0404 	sub.w	r4, r1, #4
 800d436:	bfb8      	it	lt
 800d438:	18e4      	addlt	r4, r4, r3
 800d43a:	f000 fab5 	bl	800d9a8 <__malloc_lock>
 800d43e:	4a1e      	ldr	r2, [pc, #120]	; (800d4b8 <_free_r+0x94>)
 800d440:	9801      	ldr	r0, [sp, #4]
 800d442:	6813      	ldr	r3, [r2, #0]
 800d444:	b933      	cbnz	r3, 800d454 <_free_r+0x30>
 800d446:	6063      	str	r3, [r4, #4]
 800d448:	6014      	str	r4, [r2, #0]
 800d44a:	b003      	add	sp, #12
 800d44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d450:	f000 bab0 	b.w	800d9b4 <__malloc_unlock>
 800d454:	42a3      	cmp	r3, r4
 800d456:	d908      	bls.n	800d46a <_free_r+0x46>
 800d458:	6825      	ldr	r5, [r4, #0]
 800d45a:	1961      	adds	r1, r4, r5
 800d45c:	428b      	cmp	r3, r1
 800d45e:	bf01      	itttt	eq
 800d460:	6819      	ldreq	r1, [r3, #0]
 800d462:	685b      	ldreq	r3, [r3, #4]
 800d464:	1949      	addeq	r1, r1, r5
 800d466:	6021      	streq	r1, [r4, #0]
 800d468:	e7ed      	b.n	800d446 <_free_r+0x22>
 800d46a:	461a      	mov	r2, r3
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	b10b      	cbz	r3, 800d474 <_free_r+0x50>
 800d470:	42a3      	cmp	r3, r4
 800d472:	d9fa      	bls.n	800d46a <_free_r+0x46>
 800d474:	6811      	ldr	r1, [r2, #0]
 800d476:	1855      	adds	r5, r2, r1
 800d478:	42a5      	cmp	r5, r4
 800d47a:	d10b      	bne.n	800d494 <_free_r+0x70>
 800d47c:	6824      	ldr	r4, [r4, #0]
 800d47e:	4421      	add	r1, r4
 800d480:	1854      	adds	r4, r2, r1
 800d482:	42a3      	cmp	r3, r4
 800d484:	6011      	str	r1, [r2, #0]
 800d486:	d1e0      	bne.n	800d44a <_free_r+0x26>
 800d488:	681c      	ldr	r4, [r3, #0]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	6053      	str	r3, [r2, #4]
 800d48e:	4421      	add	r1, r4
 800d490:	6011      	str	r1, [r2, #0]
 800d492:	e7da      	b.n	800d44a <_free_r+0x26>
 800d494:	d902      	bls.n	800d49c <_free_r+0x78>
 800d496:	230c      	movs	r3, #12
 800d498:	6003      	str	r3, [r0, #0]
 800d49a:	e7d6      	b.n	800d44a <_free_r+0x26>
 800d49c:	6825      	ldr	r5, [r4, #0]
 800d49e:	1961      	adds	r1, r4, r5
 800d4a0:	428b      	cmp	r3, r1
 800d4a2:	bf04      	itt	eq
 800d4a4:	6819      	ldreq	r1, [r3, #0]
 800d4a6:	685b      	ldreq	r3, [r3, #4]
 800d4a8:	6063      	str	r3, [r4, #4]
 800d4aa:	bf04      	itt	eq
 800d4ac:	1949      	addeq	r1, r1, r5
 800d4ae:	6021      	streq	r1, [r4, #0]
 800d4b0:	6054      	str	r4, [r2, #4]
 800d4b2:	e7ca      	b.n	800d44a <_free_r+0x26>
 800d4b4:	b003      	add	sp, #12
 800d4b6:	bd30      	pop	{r4, r5, pc}
 800d4b8:	20001dc8 	.word	0x20001dc8

0800d4bc <sbrk_aligned>:
 800d4bc:	b570      	push	{r4, r5, r6, lr}
 800d4be:	4e0e      	ldr	r6, [pc, #56]	; (800d4f8 <sbrk_aligned+0x3c>)
 800d4c0:	460c      	mov	r4, r1
 800d4c2:	6831      	ldr	r1, [r6, #0]
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	b911      	cbnz	r1, 800d4ce <sbrk_aligned+0x12>
 800d4c8:	f000 f9f2 	bl	800d8b0 <_sbrk_r>
 800d4cc:	6030      	str	r0, [r6, #0]
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f000 f9ed 	bl	800d8b0 <_sbrk_r>
 800d4d6:	1c43      	adds	r3, r0, #1
 800d4d8:	d00a      	beq.n	800d4f0 <sbrk_aligned+0x34>
 800d4da:	1cc4      	adds	r4, r0, #3
 800d4dc:	f024 0403 	bic.w	r4, r4, #3
 800d4e0:	42a0      	cmp	r0, r4
 800d4e2:	d007      	beq.n	800d4f4 <sbrk_aligned+0x38>
 800d4e4:	1a21      	subs	r1, r4, r0
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f000 f9e2 	bl	800d8b0 <_sbrk_r>
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d101      	bne.n	800d4f4 <sbrk_aligned+0x38>
 800d4f0:	f04f 34ff 	mov.w	r4, #4294967295
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}
 800d4f8:	20001dcc 	.word	0x20001dcc

0800d4fc <_malloc_r>:
 800d4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d500:	1ccd      	adds	r5, r1, #3
 800d502:	f025 0503 	bic.w	r5, r5, #3
 800d506:	3508      	adds	r5, #8
 800d508:	2d0c      	cmp	r5, #12
 800d50a:	bf38      	it	cc
 800d50c:	250c      	movcc	r5, #12
 800d50e:	2d00      	cmp	r5, #0
 800d510:	4607      	mov	r7, r0
 800d512:	db01      	blt.n	800d518 <_malloc_r+0x1c>
 800d514:	42a9      	cmp	r1, r5
 800d516:	d905      	bls.n	800d524 <_malloc_r+0x28>
 800d518:	230c      	movs	r3, #12
 800d51a:	603b      	str	r3, [r7, #0]
 800d51c:	2600      	movs	r6, #0
 800d51e:	4630      	mov	r0, r6
 800d520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d524:	4e2e      	ldr	r6, [pc, #184]	; (800d5e0 <_malloc_r+0xe4>)
 800d526:	f000 fa3f 	bl	800d9a8 <__malloc_lock>
 800d52a:	6833      	ldr	r3, [r6, #0]
 800d52c:	461c      	mov	r4, r3
 800d52e:	bb34      	cbnz	r4, 800d57e <_malloc_r+0x82>
 800d530:	4629      	mov	r1, r5
 800d532:	4638      	mov	r0, r7
 800d534:	f7ff ffc2 	bl	800d4bc <sbrk_aligned>
 800d538:	1c43      	adds	r3, r0, #1
 800d53a:	4604      	mov	r4, r0
 800d53c:	d14d      	bne.n	800d5da <_malloc_r+0xde>
 800d53e:	6834      	ldr	r4, [r6, #0]
 800d540:	4626      	mov	r6, r4
 800d542:	2e00      	cmp	r6, #0
 800d544:	d140      	bne.n	800d5c8 <_malloc_r+0xcc>
 800d546:	6823      	ldr	r3, [r4, #0]
 800d548:	4631      	mov	r1, r6
 800d54a:	4638      	mov	r0, r7
 800d54c:	eb04 0803 	add.w	r8, r4, r3
 800d550:	f000 f9ae 	bl	800d8b0 <_sbrk_r>
 800d554:	4580      	cmp	r8, r0
 800d556:	d13a      	bne.n	800d5ce <_malloc_r+0xd2>
 800d558:	6821      	ldr	r1, [r4, #0]
 800d55a:	3503      	adds	r5, #3
 800d55c:	1a6d      	subs	r5, r5, r1
 800d55e:	f025 0503 	bic.w	r5, r5, #3
 800d562:	3508      	adds	r5, #8
 800d564:	2d0c      	cmp	r5, #12
 800d566:	bf38      	it	cc
 800d568:	250c      	movcc	r5, #12
 800d56a:	4629      	mov	r1, r5
 800d56c:	4638      	mov	r0, r7
 800d56e:	f7ff ffa5 	bl	800d4bc <sbrk_aligned>
 800d572:	3001      	adds	r0, #1
 800d574:	d02b      	beq.n	800d5ce <_malloc_r+0xd2>
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	442b      	add	r3, r5
 800d57a:	6023      	str	r3, [r4, #0]
 800d57c:	e00e      	b.n	800d59c <_malloc_r+0xa0>
 800d57e:	6822      	ldr	r2, [r4, #0]
 800d580:	1b52      	subs	r2, r2, r5
 800d582:	d41e      	bmi.n	800d5c2 <_malloc_r+0xc6>
 800d584:	2a0b      	cmp	r2, #11
 800d586:	d916      	bls.n	800d5b6 <_malloc_r+0xba>
 800d588:	1961      	adds	r1, r4, r5
 800d58a:	42a3      	cmp	r3, r4
 800d58c:	6025      	str	r5, [r4, #0]
 800d58e:	bf18      	it	ne
 800d590:	6059      	strne	r1, [r3, #4]
 800d592:	6863      	ldr	r3, [r4, #4]
 800d594:	bf08      	it	eq
 800d596:	6031      	streq	r1, [r6, #0]
 800d598:	5162      	str	r2, [r4, r5]
 800d59a:	604b      	str	r3, [r1, #4]
 800d59c:	4638      	mov	r0, r7
 800d59e:	f104 060b 	add.w	r6, r4, #11
 800d5a2:	f000 fa07 	bl	800d9b4 <__malloc_unlock>
 800d5a6:	f026 0607 	bic.w	r6, r6, #7
 800d5aa:	1d23      	adds	r3, r4, #4
 800d5ac:	1af2      	subs	r2, r6, r3
 800d5ae:	d0b6      	beq.n	800d51e <_malloc_r+0x22>
 800d5b0:	1b9b      	subs	r3, r3, r6
 800d5b2:	50a3      	str	r3, [r4, r2]
 800d5b4:	e7b3      	b.n	800d51e <_malloc_r+0x22>
 800d5b6:	6862      	ldr	r2, [r4, #4]
 800d5b8:	42a3      	cmp	r3, r4
 800d5ba:	bf0c      	ite	eq
 800d5bc:	6032      	streq	r2, [r6, #0]
 800d5be:	605a      	strne	r2, [r3, #4]
 800d5c0:	e7ec      	b.n	800d59c <_malloc_r+0xa0>
 800d5c2:	4623      	mov	r3, r4
 800d5c4:	6864      	ldr	r4, [r4, #4]
 800d5c6:	e7b2      	b.n	800d52e <_malloc_r+0x32>
 800d5c8:	4634      	mov	r4, r6
 800d5ca:	6876      	ldr	r6, [r6, #4]
 800d5cc:	e7b9      	b.n	800d542 <_malloc_r+0x46>
 800d5ce:	230c      	movs	r3, #12
 800d5d0:	603b      	str	r3, [r7, #0]
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	f000 f9ee 	bl	800d9b4 <__malloc_unlock>
 800d5d8:	e7a1      	b.n	800d51e <_malloc_r+0x22>
 800d5da:	6025      	str	r5, [r4, #0]
 800d5dc:	e7de      	b.n	800d59c <_malloc_r+0xa0>
 800d5de:	bf00      	nop
 800d5e0:	20001dc8 	.word	0x20001dc8

0800d5e4 <__ssputs_r>:
 800d5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e8:	688e      	ldr	r6, [r1, #8]
 800d5ea:	429e      	cmp	r6, r3
 800d5ec:	4682      	mov	sl, r0
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	4690      	mov	r8, r2
 800d5f2:	461f      	mov	r7, r3
 800d5f4:	d838      	bhi.n	800d668 <__ssputs_r+0x84>
 800d5f6:	898a      	ldrh	r2, [r1, #12]
 800d5f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5fc:	d032      	beq.n	800d664 <__ssputs_r+0x80>
 800d5fe:	6825      	ldr	r5, [r4, #0]
 800d600:	6909      	ldr	r1, [r1, #16]
 800d602:	eba5 0901 	sub.w	r9, r5, r1
 800d606:	6965      	ldr	r5, [r4, #20]
 800d608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d60c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d610:	3301      	adds	r3, #1
 800d612:	444b      	add	r3, r9
 800d614:	106d      	asrs	r5, r5, #1
 800d616:	429d      	cmp	r5, r3
 800d618:	bf38      	it	cc
 800d61a:	461d      	movcc	r5, r3
 800d61c:	0553      	lsls	r3, r2, #21
 800d61e:	d531      	bpl.n	800d684 <__ssputs_r+0xa0>
 800d620:	4629      	mov	r1, r5
 800d622:	f7ff ff6b 	bl	800d4fc <_malloc_r>
 800d626:	4606      	mov	r6, r0
 800d628:	b950      	cbnz	r0, 800d640 <__ssputs_r+0x5c>
 800d62a:	230c      	movs	r3, #12
 800d62c:	f8ca 3000 	str.w	r3, [sl]
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d636:	81a3      	strh	r3, [r4, #12]
 800d638:	f04f 30ff 	mov.w	r0, #4294967295
 800d63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d640:	6921      	ldr	r1, [r4, #16]
 800d642:	464a      	mov	r2, r9
 800d644:	f7ff fa08 	bl	800ca58 <memcpy>
 800d648:	89a3      	ldrh	r3, [r4, #12]
 800d64a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d64e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d652:	81a3      	strh	r3, [r4, #12]
 800d654:	6126      	str	r6, [r4, #16]
 800d656:	6165      	str	r5, [r4, #20]
 800d658:	444e      	add	r6, r9
 800d65a:	eba5 0509 	sub.w	r5, r5, r9
 800d65e:	6026      	str	r6, [r4, #0]
 800d660:	60a5      	str	r5, [r4, #8]
 800d662:	463e      	mov	r6, r7
 800d664:	42be      	cmp	r6, r7
 800d666:	d900      	bls.n	800d66a <__ssputs_r+0x86>
 800d668:	463e      	mov	r6, r7
 800d66a:	6820      	ldr	r0, [r4, #0]
 800d66c:	4632      	mov	r2, r6
 800d66e:	4641      	mov	r1, r8
 800d670:	f000 f980 	bl	800d974 <memmove>
 800d674:	68a3      	ldr	r3, [r4, #8]
 800d676:	1b9b      	subs	r3, r3, r6
 800d678:	60a3      	str	r3, [r4, #8]
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	4433      	add	r3, r6
 800d67e:	6023      	str	r3, [r4, #0]
 800d680:	2000      	movs	r0, #0
 800d682:	e7db      	b.n	800d63c <__ssputs_r+0x58>
 800d684:	462a      	mov	r2, r5
 800d686:	f000 f99b 	bl	800d9c0 <_realloc_r>
 800d68a:	4606      	mov	r6, r0
 800d68c:	2800      	cmp	r0, #0
 800d68e:	d1e1      	bne.n	800d654 <__ssputs_r+0x70>
 800d690:	6921      	ldr	r1, [r4, #16]
 800d692:	4650      	mov	r0, sl
 800d694:	f7ff fec6 	bl	800d424 <_free_r>
 800d698:	e7c7      	b.n	800d62a <__ssputs_r+0x46>
	...

0800d69c <_svfiprintf_r>:
 800d69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a0:	4698      	mov	r8, r3
 800d6a2:	898b      	ldrh	r3, [r1, #12]
 800d6a4:	061b      	lsls	r3, r3, #24
 800d6a6:	b09d      	sub	sp, #116	; 0x74
 800d6a8:	4607      	mov	r7, r0
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	4614      	mov	r4, r2
 800d6ae:	d50e      	bpl.n	800d6ce <_svfiprintf_r+0x32>
 800d6b0:	690b      	ldr	r3, [r1, #16]
 800d6b2:	b963      	cbnz	r3, 800d6ce <_svfiprintf_r+0x32>
 800d6b4:	2140      	movs	r1, #64	; 0x40
 800d6b6:	f7ff ff21 	bl	800d4fc <_malloc_r>
 800d6ba:	6028      	str	r0, [r5, #0]
 800d6bc:	6128      	str	r0, [r5, #16]
 800d6be:	b920      	cbnz	r0, 800d6ca <_svfiprintf_r+0x2e>
 800d6c0:	230c      	movs	r3, #12
 800d6c2:	603b      	str	r3, [r7, #0]
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c8:	e0d1      	b.n	800d86e <_svfiprintf_r+0x1d2>
 800d6ca:	2340      	movs	r3, #64	; 0x40
 800d6cc:	616b      	str	r3, [r5, #20]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d2:	2320      	movs	r3, #32
 800d6d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6dc:	2330      	movs	r3, #48	; 0x30
 800d6de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d888 <_svfiprintf_r+0x1ec>
 800d6e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6e6:	f04f 0901 	mov.w	r9, #1
 800d6ea:	4623      	mov	r3, r4
 800d6ec:	469a      	mov	sl, r3
 800d6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f2:	b10a      	cbz	r2, 800d6f8 <_svfiprintf_r+0x5c>
 800d6f4:	2a25      	cmp	r2, #37	; 0x25
 800d6f6:	d1f9      	bne.n	800d6ec <_svfiprintf_r+0x50>
 800d6f8:	ebba 0b04 	subs.w	fp, sl, r4
 800d6fc:	d00b      	beq.n	800d716 <_svfiprintf_r+0x7a>
 800d6fe:	465b      	mov	r3, fp
 800d700:	4622      	mov	r2, r4
 800d702:	4629      	mov	r1, r5
 800d704:	4638      	mov	r0, r7
 800d706:	f7ff ff6d 	bl	800d5e4 <__ssputs_r>
 800d70a:	3001      	adds	r0, #1
 800d70c:	f000 80aa 	beq.w	800d864 <_svfiprintf_r+0x1c8>
 800d710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d712:	445a      	add	r2, fp
 800d714:	9209      	str	r2, [sp, #36]	; 0x24
 800d716:	f89a 3000 	ldrb.w	r3, [sl]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f000 80a2 	beq.w	800d864 <_svfiprintf_r+0x1c8>
 800d720:	2300      	movs	r3, #0
 800d722:	f04f 32ff 	mov.w	r2, #4294967295
 800d726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d72a:	f10a 0a01 	add.w	sl, sl, #1
 800d72e:	9304      	str	r3, [sp, #16]
 800d730:	9307      	str	r3, [sp, #28]
 800d732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d736:	931a      	str	r3, [sp, #104]	; 0x68
 800d738:	4654      	mov	r4, sl
 800d73a:	2205      	movs	r2, #5
 800d73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d740:	4851      	ldr	r0, [pc, #324]	; (800d888 <_svfiprintf_r+0x1ec>)
 800d742:	f7f2 fd25 	bl	8000190 <memchr>
 800d746:	9a04      	ldr	r2, [sp, #16]
 800d748:	b9d8      	cbnz	r0, 800d782 <_svfiprintf_r+0xe6>
 800d74a:	06d0      	lsls	r0, r2, #27
 800d74c:	bf44      	itt	mi
 800d74e:	2320      	movmi	r3, #32
 800d750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d754:	0711      	lsls	r1, r2, #28
 800d756:	bf44      	itt	mi
 800d758:	232b      	movmi	r3, #43	; 0x2b
 800d75a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d75e:	f89a 3000 	ldrb.w	r3, [sl]
 800d762:	2b2a      	cmp	r3, #42	; 0x2a
 800d764:	d015      	beq.n	800d792 <_svfiprintf_r+0xf6>
 800d766:	9a07      	ldr	r2, [sp, #28]
 800d768:	4654      	mov	r4, sl
 800d76a:	2000      	movs	r0, #0
 800d76c:	f04f 0c0a 	mov.w	ip, #10
 800d770:	4621      	mov	r1, r4
 800d772:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d776:	3b30      	subs	r3, #48	; 0x30
 800d778:	2b09      	cmp	r3, #9
 800d77a:	d94e      	bls.n	800d81a <_svfiprintf_r+0x17e>
 800d77c:	b1b0      	cbz	r0, 800d7ac <_svfiprintf_r+0x110>
 800d77e:	9207      	str	r2, [sp, #28]
 800d780:	e014      	b.n	800d7ac <_svfiprintf_r+0x110>
 800d782:	eba0 0308 	sub.w	r3, r0, r8
 800d786:	fa09 f303 	lsl.w	r3, r9, r3
 800d78a:	4313      	orrs	r3, r2
 800d78c:	9304      	str	r3, [sp, #16]
 800d78e:	46a2      	mov	sl, r4
 800d790:	e7d2      	b.n	800d738 <_svfiprintf_r+0x9c>
 800d792:	9b03      	ldr	r3, [sp, #12]
 800d794:	1d19      	adds	r1, r3, #4
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	9103      	str	r1, [sp, #12]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	bfbb      	ittet	lt
 800d79e:	425b      	neglt	r3, r3
 800d7a0:	f042 0202 	orrlt.w	r2, r2, #2
 800d7a4:	9307      	strge	r3, [sp, #28]
 800d7a6:	9307      	strlt	r3, [sp, #28]
 800d7a8:	bfb8      	it	lt
 800d7aa:	9204      	strlt	r2, [sp, #16]
 800d7ac:	7823      	ldrb	r3, [r4, #0]
 800d7ae:	2b2e      	cmp	r3, #46	; 0x2e
 800d7b0:	d10c      	bne.n	800d7cc <_svfiprintf_r+0x130>
 800d7b2:	7863      	ldrb	r3, [r4, #1]
 800d7b4:	2b2a      	cmp	r3, #42	; 0x2a
 800d7b6:	d135      	bne.n	800d824 <_svfiprintf_r+0x188>
 800d7b8:	9b03      	ldr	r3, [sp, #12]
 800d7ba:	1d1a      	adds	r2, r3, #4
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	9203      	str	r2, [sp, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	bfb8      	it	lt
 800d7c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7c8:	3402      	adds	r4, #2
 800d7ca:	9305      	str	r3, [sp, #20]
 800d7cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d898 <_svfiprintf_r+0x1fc>
 800d7d0:	7821      	ldrb	r1, [r4, #0]
 800d7d2:	2203      	movs	r2, #3
 800d7d4:	4650      	mov	r0, sl
 800d7d6:	f7f2 fcdb 	bl	8000190 <memchr>
 800d7da:	b140      	cbz	r0, 800d7ee <_svfiprintf_r+0x152>
 800d7dc:	2340      	movs	r3, #64	; 0x40
 800d7de:	eba0 000a 	sub.w	r0, r0, sl
 800d7e2:	fa03 f000 	lsl.w	r0, r3, r0
 800d7e6:	9b04      	ldr	r3, [sp, #16]
 800d7e8:	4303      	orrs	r3, r0
 800d7ea:	3401      	adds	r4, #1
 800d7ec:	9304      	str	r3, [sp, #16]
 800d7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f2:	4826      	ldr	r0, [pc, #152]	; (800d88c <_svfiprintf_r+0x1f0>)
 800d7f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7f8:	2206      	movs	r2, #6
 800d7fa:	f7f2 fcc9 	bl	8000190 <memchr>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d038      	beq.n	800d874 <_svfiprintf_r+0x1d8>
 800d802:	4b23      	ldr	r3, [pc, #140]	; (800d890 <_svfiprintf_r+0x1f4>)
 800d804:	bb1b      	cbnz	r3, 800d84e <_svfiprintf_r+0x1b2>
 800d806:	9b03      	ldr	r3, [sp, #12]
 800d808:	3307      	adds	r3, #7
 800d80a:	f023 0307 	bic.w	r3, r3, #7
 800d80e:	3308      	adds	r3, #8
 800d810:	9303      	str	r3, [sp, #12]
 800d812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d814:	4433      	add	r3, r6
 800d816:	9309      	str	r3, [sp, #36]	; 0x24
 800d818:	e767      	b.n	800d6ea <_svfiprintf_r+0x4e>
 800d81a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d81e:	460c      	mov	r4, r1
 800d820:	2001      	movs	r0, #1
 800d822:	e7a5      	b.n	800d770 <_svfiprintf_r+0xd4>
 800d824:	2300      	movs	r3, #0
 800d826:	3401      	adds	r4, #1
 800d828:	9305      	str	r3, [sp, #20]
 800d82a:	4619      	mov	r1, r3
 800d82c:	f04f 0c0a 	mov.w	ip, #10
 800d830:	4620      	mov	r0, r4
 800d832:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d836:	3a30      	subs	r2, #48	; 0x30
 800d838:	2a09      	cmp	r2, #9
 800d83a:	d903      	bls.n	800d844 <_svfiprintf_r+0x1a8>
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d0c5      	beq.n	800d7cc <_svfiprintf_r+0x130>
 800d840:	9105      	str	r1, [sp, #20]
 800d842:	e7c3      	b.n	800d7cc <_svfiprintf_r+0x130>
 800d844:	fb0c 2101 	mla	r1, ip, r1, r2
 800d848:	4604      	mov	r4, r0
 800d84a:	2301      	movs	r3, #1
 800d84c:	e7f0      	b.n	800d830 <_svfiprintf_r+0x194>
 800d84e:	ab03      	add	r3, sp, #12
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	462a      	mov	r2, r5
 800d854:	4b0f      	ldr	r3, [pc, #60]	; (800d894 <_svfiprintf_r+0x1f8>)
 800d856:	a904      	add	r1, sp, #16
 800d858:	4638      	mov	r0, r7
 800d85a:	f7fc fa49 	bl	8009cf0 <_printf_float>
 800d85e:	1c42      	adds	r2, r0, #1
 800d860:	4606      	mov	r6, r0
 800d862:	d1d6      	bne.n	800d812 <_svfiprintf_r+0x176>
 800d864:	89ab      	ldrh	r3, [r5, #12]
 800d866:	065b      	lsls	r3, r3, #25
 800d868:	f53f af2c 	bmi.w	800d6c4 <_svfiprintf_r+0x28>
 800d86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d86e:	b01d      	add	sp, #116	; 0x74
 800d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d874:	ab03      	add	r3, sp, #12
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	462a      	mov	r2, r5
 800d87a:	4b06      	ldr	r3, [pc, #24]	; (800d894 <_svfiprintf_r+0x1f8>)
 800d87c:	a904      	add	r1, sp, #16
 800d87e:	4638      	mov	r0, r7
 800d880:	f7fc fcda 	bl	800a238 <_printf_i>
 800d884:	e7eb      	b.n	800d85e <_svfiprintf_r+0x1c2>
 800d886:	bf00      	nop
 800d888:	0800e994 	.word	0x0800e994
 800d88c:	0800e99e 	.word	0x0800e99e
 800d890:	08009cf1 	.word	0x08009cf1
 800d894:	0800d5e5 	.word	0x0800d5e5
 800d898:	0800e99a 	.word	0x0800e99a
 800d89c:	00000000 	.word	0x00000000

0800d8a0 <nan>:
 800d8a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d8a8 <nan+0x8>
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	00000000 	.word	0x00000000
 800d8ac:	7ff80000 	.word	0x7ff80000

0800d8b0 <_sbrk_r>:
 800d8b0:	b538      	push	{r3, r4, r5, lr}
 800d8b2:	4d06      	ldr	r5, [pc, #24]	; (800d8cc <_sbrk_r+0x1c>)
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	4604      	mov	r4, r0
 800d8b8:	4608      	mov	r0, r1
 800d8ba:	602b      	str	r3, [r5, #0]
 800d8bc:	f7f3 fc8e 	bl	80011dc <_sbrk>
 800d8c0:	1c43      	adds	r3, r0, #1
 800d8c2:	d102      	bne.n	800d8ca <_sbrk_r+0x1a>
 800d8c4:	682b      	ldr	r3, [r5, #0]
 800d8c6:	b103      	cbz	r3, 800d8ca <_sbrk_r+0x1a>
 800d8c8:	6023      	str	r3, [r4, #0]
 800d8ca:	bd38      	pop	{r3, r4, r5, pc}
 800d8cc:	20001dd0 	.word	0x20001dd0

0800d8d0 <strncmp>:
 800d8d0:	b510      	push	{r4, lr}
 800d8d2:	b17a      	cbz	r2, 800d8f4 <strncmp+0x24>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	3901      	subs	r1, #1
 800d8d8:	1884      	adds	r4, r0, r2
 800d8da:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d8de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d8e2:	4290      	cmp	r0, r2
 800d8e4:	d101      	bne.n	800d8ea <strncmp+0x1a>
 800d8e6:	42a3      	cmp	r3, r4
 800d8e8:	d101      	bne.n	800d8ee <strncmp+0x1e>
 800d8ea:	1a80      	subs	r0, r0, r2
 800d8ec:	bd10      	pop	{r4, pc}
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d1f3      	bne.n	800d8da <strncmp+0xa>
 800d8f2:	e7fa      	b.n	800d8ea <strncmp+0x1a>
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	e7f9      	b.n	800d8ec <strncmp+0x1c>

0800d8f8 <__ascii_wctomb>:
 800d8f8:	b149      	cbz	r1, 800d90e <__ascii_wctomb+0x16>
 800d8fa:	2aff      	cmp	r2, #255	; 0xff
 800d8fc:	bf85      	ittet	hi
 800d8fe:	238a      	movhi	r3, #138	; 0x8a
 800d900:	6003      	strhi	r3, [r0, #0]
 800d902:	700a      	strbls	r2, [r1, #0]
 800d904:	f04f 30ff 	movhi.w	r0, #4294967295
 800d908:	bf98      	it	ls
 800d90a:	2001      	movls	r0, #1
 800d90c:	4770      	bx	lr
 800d90e:	4608      	mov	r0, r1
 800d910:	4770      	bx	lr
	...

0800d914 <__assert_func>:
 800d914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d916:	4614      	mov	r4, r2
 800d918:	461a      	mov	r2, r3
 800d91a:	4b09      	ldr	r3, [pc, #36]	; (800d940 <__assert_func+0x2c>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4605      	mov	r5, r0
 800d920:	68d8      	ldr	r0, [r3, #12]
 800d922:	b14c      	cbz	r4, 800d938 <__assert_func+0x24>
 800d924:	4b07      	ldr	r3, [pc, #28]	; (800d944 <__assert_func+0x30>)
 800d926:	9100      	str	r1, [sp, #0]
 800d928:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d92c:	4906      	ldr	r1, [pc, #24]	; (800d948 <__assert_func+0x34>)
 800d92e:	462b      	mov	r3, r5
 800d930:	f000 f80e 	bl	800d950 <fiprintf>
 800d934:	f000 fa8c 	bl	800de50 <abort>
 800d938:	4b04      	ldr	r3, [pc, #16]	; (800d94c <__assert_func+0x38>)
 800d93a:	461c      	mov	r4, r3
 800d93c:	e7f3      	b.n	800d926 <__assert_func+0x12>
 800d93e:	bf00      	nop
 800d940:	2000018c 	.word	0x2000018c
 800d944:	0800e9a5 	.word	0x0800e9a5
 800d948:	0800e9b2 	.word	0x0800e9b2
 800d94c:	0800e9e0 	.word	0x0800e9e0

0800d950 <fiprintf>:
 800d950:	b40e      	push	{r1, r2, r3}
 800d952:	b503      	push	{r0, r1, lr}
 800d954:	4601      	mov	r1, r0
 800d956:	ab03      	add	r3, sp, #12
 800d958:	4805      	ldr	r0, [pc, #20]	; (800d970 <fiprintf+0x20>)
 800d95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d95e:	6800      	ldr	r0, [r0, #0]
 800d960:	9301      	str	r3, [sp, #4]
 800d962:	f000 f885 	bl	800da70 <_vfiprintf_r>
 800d966:	b002      	add	sp, #8
 800d968:	f85d eb04 	ldr.w	lr, [sp], #4
 800d96c:	b003      	add	sp, #12
 800d96e:	4770      	bx	lr
 800d970:	2000018c 	.word	0x2000018c

0800d974 <memmove>:
 800d974:	4288      	cmp	r0, r1
 800d976:	b510      	push	{r4, lr}
 800d978:	eb01 0402 	add.w	r4, r1, r2
 800d97c:	d902      	bls.n	800d984 <memmove+0x10>
 800d97e:	4284      	cmp	r4, r0
 800d980:	4623      	mov	r3, r4
 800d982:	d807      	bhi.n	800d994 <memmove+0x20>
 800d984:	1e43      	subs	r3, r0, #1
 800d986:	42a1      	cmp	r1, r4
 800d988:	d008      	beq.n	800d99c <memmove+0x28>
 800d98a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d98e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d992:	e7f8      	b.n	800d986 <memmove+0x12>
 800d994:	4402      	add	r2, r0
 800d996:	4601      	mov	r1, r0
 800d998:	428a      	cmp	r2, r1
 800d99a:	d100      	bne.n	800d99e <memmove+0x2a>
 800d99c:	bd10      	pop	{r4, pc}
 800d99e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9a6:	e7f7      	b.n	800d998 <memmove+0x24>

0800d9a8 <__malloc_lock>:
 800d9a8:	4801      	ldr	r0, [pc, #4]	; (800d9b0 <__malloc_lock+0x8>)
 800d9aa:	f000 bc11 	b.w	800e1d0 <__retarget_lock_acquire_recursive>
 800d9ae:	bf00      	nop
 800d9b0:	20001dd4 	.word	0x20001dd4

0800d9b4 <__malloc_unlock>:
 800d9b4:	4801      	ldr	r0, [pc, #4]	; (800d9bc <__malloc_unlock+0x8>)
 800d9b6:	f000 bc0c 	b.w	800e1d2 <__retarget_lock_release_recursive>
 800d9ba:	bf00      	nop
 800d9bc:	20001dd4 	.word	0x20001dd4

0800d9c0 <_realloc_r>:
 800d9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c4:	4680      	mov	r8, r0
 800d9c6:	4614      	mov	r4, r2
 800d9c8:	460e      	mov	r6, r1
 800d9ca:	b921      	cbnz	r1, 800d9d6 <_realloc_r+0x16>
 800d9cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	f7ff bd93 	b.w	800d4fc <_malloc_r>
 800d9d6:	b92a      	cbnz	r2, 800d9e4 <_realloc_r+0x24>
 800d9d8:	f7ff fd24 	bl	800d424 <_free_r>
 800d9dc:	4625      	mov	r5, r4
 800d9de:	4628      	mov	r0, r5
 800d9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e4:	f000 fc5c 	bl	800e2a0 <_malloc_usable_size_r>
 800d9e8:	4284      	cmp	r4, r0
 800d9ea:	4607      	mov	r7, r0
 800d9ec:	d802      	bhi.n	800d9f4 <_realloc_r+0x34>
 800d9ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9f2:	d812      	bhi.n	800da1a <_realloc_r+0x5a>
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	f7ff fd80 	bl	800d4fc <_malloc_r>
 800d9fc:	4605      	mov	r5, r0
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d0ed      	beq.n	800d9de <_realloc_r+0x1e>
 800da02:	42bc      	cmp	r4, r7
 800da04:	4622      	mov	r2, r4
 800da06:	4631      	mov	r1, r6
 800da08:	bf28      	it	cs
 800da0a:	463a      	movcs	r2, r7
 800da0c:	f7ff f824 	bl	800ca58 <memcpy>
 800da10:	4631      	mov	r1, r6
 800da12:	4640      	mov	r0, r8
 800da14:	f7ff fd06 	bl	800d424 <_free_r>
 800da18:	e7e1      	b.n	800d9de <_realloc_r+0x1e>
 800da1a:	4635      	mov	r5, r6
 800da1c:	e7df      	b.n	800d9de <_realloc_r+0x1e>

0800da1e <__sfputc_r>:
 800da1e:	6893      	ldr	r3, [r2, #8]
 800da20:	3b01      	subs	r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	b410      	push	{r4}
 800da26:	6093      	str	r3, [r2, #8]
 800da28:	da08      	bge.n	800da3c <__sfputc_r+0x1e>
 800da2a:	6994      	ldr	r4, [r2, #24]
 800da2c:	42a3      	cmp	r3, r4
 800da2e:	db01      	blt.n	800da34 <__sfputc_r+0x16>
 800da30:	290a      	cmp	r1, #10
 800da32:	d103      	bne.n	800da3c <__sfputc_r+0x1e>
 800da34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da38:	f000 b94a 	b.w	800dcd0 <__swbuf_r>
 800da3c:	6813      	ldr	r3, [r2, #0]
 800da3e:	1c58      	adds	r0, r3, #1
 800da40:	6010      	str	r0, [r2, #0]
 800da42:	7019      	strb	r1, [r3, #0]
 800da44:	4608      	mov	r0, r1
 800da46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <__sfputs_r>:
 800da4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4e:	4606      	mov	r6, r0
 800da50:	460f      	mov	r7, r1
 800da52:	4614      	mov	r4, r2
 800da54:	18d5      	adds	r5, r2, r3
 800da56:	42ac      	cmp	r4, r5
 800da58:	d101      	bne.n	800da5e <__sfputs_r+0x12>
 800da5a:	2000      	movs	r0, #0
 800da5c:	e007      	b.n	800da6e <__sfputs_r+0x22>
 800da5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da62:	463a      	mov	r2, r7
 800da64:	4630      	mov	r0, r6
 800da66:	f7ff ffda 	bl	800da1e <__sfputc_r>
 800da6a:	1c43      	adds	r3, r0, #1
 800da6c:	d1f3      	bne.n	800da56 <__sfputs_r+0xa>
 800da6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da70 <_vfiprintf_r>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	460d      	mov	r5, r1
 800da76:	b09d      	sub	sp, #116	; 0x74
 800da78:	4614      	mov	r4, r2
 800da7a:	4698      	mov	r8, r3
 800da7c:	4606      	mov	r6, r0
 800da7e:	b118      	cbz	r0, 800da88 <_vfiprintf_r+0x18>
 800da80:	6983      	ldr	r3, [r0, #24]
 800da82:	b90b      	cbnz	r3, 800da88 <_vfiprintf_r+0x18>
 800da84:	f000 fb06 	bl	800e094 <__sinit>
 800da88:	4b89      	ldr	r3, [pc, #548]	; (800dcb0 <_vfiprintf_r+0x240>)
 800da8a:	429d      	cmp	r5, r3
 800da8c:	d11b      	bne.n	800dac6 <_vfiprintf_r+0x56>
 800da8e:	6875      	ldr	r5, [r6, #4]
 800da90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da92:	07d9      	lsls	r1, r3, #31
 800da94:	d405      	bmi.n	800daa2 <_vfiprintf_r+0x32>
 800da96:	89ab      	ldrh	r3, [r5, #12]
 800da98:	059a      	lsls	r2, r3, #22
 800da9a:	d402      	bmi.n	800daa2 <_vfiprintf_r+0x32>
 800da9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da9e:	f000 fb97 	bl	800e1d0 <__retarget_lock_acquire_recursive>
 800daa2:	89ab      	ldrh	r3, [r5, #12]
 800daa4:	071b      	lsls	r3, r3, #28
 800daa6:	d501      	bpl.n	800daac <_vfiprintf_r+0x3c>
 800daa8:	692b      	ldr	r3, [r5, #16]
 800daaa:	b9eb      	cbnz	r3, 800dae8 <_vfiprintf_r+0x78>
 800daac:	4629      	mov	r1, r5
 800daae:	4630      	mov	r0, r6
 800dab0:	f000 f960 	bl	800dd74 <__swsetup_r>
 800dab4:	b1c0      	cbz	r0, 800dae8 <_vfiprintf_r+0x78>
 800dab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dab8:	07dc      	lsls	r4, r3, #31
 800daba:	d50e      	bpl.n	800dada <_vfiprintf_r+0x6a>
 800dabc:	f04f 30ff 	mov.w	r0, #4294967295
 800dac0:	b01d      	add	sp, #116	; 0x74
 800dac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac6:	4b7b      	ldr	r3, [pc, #492]	; (800dcb4 <_vfiprintf_r+0x244>)
 800dac8:	429d      	cmp	r5, r3
 800daca:	d101      	bne.n	800dad0 <_vfiprintf_r+0x60>
 800dacc:	68b5      	ldr	r5, [r6, #8]
 800dace:	e7df      	b.n	800da90 <_vfiprintf_r+0x20>
 800dad0:	4b79      	ldr	r3, [pc, #484]	; (800dcb8 <_vfiprintf_r+0x248>)
 800dad2:	429d      	cmp	r5, r3
 800dad4:	bf08      	it	eq
 800dad6:	68f5      	ldreq	r5, [r6, #12]
 800dad8:	e7da      	b.n	800da90 <_vfiprintf_r+0x20>
 800dada:	89ab      	ldrh	r3, [r5, #12]
 800dadc:	0598      	lsls	r0, r3, #22
 800dade:	d4ed      	bmi.n	800dabc <_vfiprintf_r+0x4c>
 800dae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dae2:	f000 fb76 	bl	800e1d2 <__retarget_lock_release_recursive>
 800dae6:	e7e9      	b.n	800dabc <_vfiprintf_r+0x4c>
 800dae8:	2300      	movs	r3, #0
 800daea:	9309      	str	r3, [sp, #36]	; 0x24
 800daec:	2320      	movs	r3, #32
 800daee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800daf6:	2330      	movs	r3, #48	; 0x30
 800daf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dcbc <_vfiprintf_r+0x24c>
 800dafc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db00:	f04f 0901 	mov.w	r9, #1
 800db04:	4623      	mov	r3, r4
 800db06:	469a      	mov	sl, r3
 800db08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db0c:	b10a      	cbz	r2, 800db12 <_vfiprintf_r+0xa2>
 800db0e:	2a25      	cmp	r2, #37	; 0x25
 800db10:	d1f9      	bne.n	800db06 <_vfiprintf_r+0x96>
 800db12:	ebba 0b04 	subs.w	fp, sl, r4
 800db16:	d00b      	beq.n	800db30 <_vfiprintf_r+0xc0>
 800db18:	465b      	mov	r3, fp
 800db1a:	4622      	mov	r2, r4
 800db1c:	4629      	mov	r1, r5
 800db1e:	4630      	mov	r0, r6
 800db20:	f7ff ff94 	bl	800da4c <__sfputs_r>
 800db24:	3001      	adds	r0, #1
 800db26:	f000 80aa 	beq.w	800dc7e <_vfiprintf_r+0x20e>
 800db2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db2c:	445a      	add	r2, fp
 800db2e:	9209      	str	r2, [sp, #36]	; 0x24
 800db30:	f89a 3000 	ldrb.w	r3, [sl]
 800db34:	2b00      	cmp	r3, #0
 800db36:	f000 80a2 	beq.w	800dc7e <_vfiprintf_r+0x20e>
 800db3a:	2300      	movs	r3, #0
 800db3c:	f04f 32ff 	mov.w	r2, #4294967295
 800db40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db44:	f10a 0a01 	add.w	sl, sl, #1
 800db48:	9304      	str	r3, [sp, #16]
 800db4a:	9307      	str	r3, [sp, #28]
 800db4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db50:	931a      	str	r3, [sp, #104]	; 0x68
 800db52:	4654      	mov	r4, sl
 800db54:	2205      	movs	r2, #5
 800db56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5a:	4858      	ldr	r0, [pc, #352]	; (800dcbc <_vfiprintf_r+0x24c>)
 800db5c:	f7f2 fb18 	bl	8000190 <memchr>
 800db60:	9a04      	ldr	r2, [sp, #16]
 800db62:	b9d8      	cbnz	r0, 800db9c <_vfiprintf_r+0x12c>
 800db64:	06d1      	lsls	r1, r2, #27
 800db66:	bf44      	itt	mi
 800db68:	2320      	movmi	r3, #32
 800db6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db6e:	0713      	lsls	r3, r2, #28
 800db70:	bf44      	itt	mi
 800db72:	232b      	movmi	r3, #43	; 0x2b
 800db74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db78:	f89a 3000 	ldrb.w	r3, [sl]
 800db7c:	2b2a      	cmp	r3, #42	; 0x2a
 800db7e:	d015      	beq.n	800dbac <_vfiprintf_r+0x13c>
 800db80:	9a07      	ldr	r2, [sp, #28]
 800db82:	4654      	mov	r4, sl
 800db84:	2000      	movs	r0, #0
 800db86:	f04f 0c0a 	mov.w	ip, #10
 800db8a:	4621      	mov	r1, r4
 800db8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db90:	3b30      	subs	r3, #48	; 0x30
 800db92:	2b09      	cmp	r3, #9
 800db94:	d94e      	bls.n	800dc34 <_vfiprintf_r+0x1c4>
 800db96:	b1b0      	cbz	r0, 800dbc6 <_vfiprintf_r+0x156>
 800db98:	9207      	str	r2, [sp, #28]
 800db9a:	e014      	b.n	800dbc6 <_vfiprintf_r+0x156>
 800db9c:	eba0 0308 	sub.w	r3, r0, r8
 800dba0:	fa09 f303 	lsl.w	r3, r9, r3
 800dba4:	4313      	orrs	r3, r2
 800dba6:	9304      	str	r3, [sp, #16]
 800dba8:	46a2      	mov	sl, r4
 800dbaa:	e7d2      	b.n	800db52 <_vfiprintf_r+0xe2>
 800dbac:	9b03      	ldr	r3, [sp, #12]
 800dbae:	1d19      	adds	r1, r3, #4
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	9103      	str	r1, [sp, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	bfbb      	ittet	lt
 800dbb8:	425b      	neglt	r3, r3
 800dbba:	f042 0202 	orrlt.w	r2, r2, #2
 800dbbe:	9307      	strge	r3, [sp, #28]
 800dbc0:	9307      	strlt	r3, [sp, #28]
 800dbc2:	bfb8      	it	lt
 800dbc4:	9204      	strlt	r2, [sp, #16]
 800dbc6:	7823      	ldrb	r3, [r4, #0]
 800dbc8:	2b2e      	cmp	r3, #46	; 0x2e
 800dbca:	d10c      	bne.n	800dbe6 <_vfiprintf_r+0x176>
 800dbcc:	7863      	ldrb	r3, [r4, #1]
 800dbce:	2b2a      	cmp	r3, #42	; 0x2a
 800dbd0:	d135      	bne.n	800dc3e <_vfiprintf_r+0x1ce>
 800dbd2:	9b03      	ldr	r3, [sp, #12]
 800dbd4:	1d1a      	adds	r2, r3, #4
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	9203      	str	r2, [sp, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	bfb8      	it	lt
 800dbde:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbe2:	3402      	adds	r4, #2
 800dbe4:	9305      	str	r3, [sp, #20]
 800dbe6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dccc <_vfiprintf_r+0x25c>
 800dbea:	7821      	ldrb	r1, [r4, #0]
 800dbec:	2203      	movs	r2, #3
 800dbee:	4650      	mov	r0, sl
 800dbf0:	f7f2 face 	bl	8000190 <memchr>
 800dbf4:	b140      	cbz	r0, 800dc08 <_vfiprintf_r+0x198>
 800dbf6:	2340      	movs	r3, #64	; 0x40
 800dbf8:	eba0 000a 	sub.w	r0, r0, sl
 800dbfc:	fa03 f000 	lsl.w	r0, r3, r0
 800dc00:	9b04      	ldr	r3, [sp, #16]
 800dc02:	4303      	orrs	r3, r0
 800dc04:	3401      	adds	r4, #1
 800dc06:	9304      	str	r3, [sp, #16]
 800dc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc0c:	482c      	ldr	r0, [pc, #176]	; (800dcc0 <_vfiprintf_r+0x250>)
 800dc0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc12:	2206      	movs	r2, #6
 800dc14:	f7f2 fabc 	bl	8000190 <memchr>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	d03f      	beq.n	800dc9c <_vfiprintf_r+0x22c>
 800dc1c:	4b29      	ldr	r3, [pc, #164]	; (800dcc4 <_vfiprintf_r+0x254>)
 800dc1e:	bb1b      	cbnz	r3, 800dc68 <_vfiprintf_r+0x1f8>
 800dc20:	9b03      	ldr	r3, [sp, #12]
 800dc22:	3307      	adds	r3, #7
 800dc24:	f023 0307 	bic.w	r3, r3, #7
 800dc28:	3308      	adds	r3, #8
 800dc2a:	9303      	str	r3, [sp, #12]
 800dc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc2e:	443b      	add	r3, r7
 800dc30:	9309      	str	r3, [sp, #36]	; 0x24
 800dc32:	e767      	b.n	800db04 <_vfiprintf_r+0x94>
 800dc34:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc38:	460c      	mov	r4, r1
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	e7a5      	b.n	800db8a <_vfiprintf_r+0x11a>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	3401      	adds	r4, #1
 800dc42:	9305      	str	r3, [sp, #20]
 800dc44:	4619      	mov	r1, r3
 800dc46:	f04f 0c0a 	mov.w	ip, #10
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc50:	3a30      	subs	r2, #48	; 0x30
 800dc52:	2a09      	cmp	r2, #9
 800dc54:	d903      	bls.n	800dc5e <_vfiprintf_r+0x1ee>
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d0c5      	beq.n	800dbe6 <_vfiprintf_r+0x176>
 800dc5a:	9105      	str	r1, [sp, #20]
 800dc5c:	e7c3      	b.n	800dbe6 <_vfiprintf_r+0x176>
 800dc5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc62:	4604      	mov	r4, r0
 800dc64:	2301      	movs	r3, #1
 800dc66:	e7f0      	b.n	800dc4a <_vfiprintf_r+0x1da>
 800dc68:	ab03      	add	r3, sp, #12
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	462a      	mov	r2, r5
 800dc6e:	4b16      	ldr	r3, [pc, #88]	; (800dcc8 <_vfiprintf_r+0x258>)
 800dc70:	a904      	add	r1, sp, #16
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7fc f83c 	bl	8009cf0 <_printf_float>
 800dc78:	4607      	mov	r7, r0
 800dc7a:	1c78      	adds	r0, r7, #1
 800dc7c:	d1d6      	bne.n	800dc2c <_vfiprintf_r+0x1bc>
 800dc7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc80:	07d9      	lsls	r1, r3, #31
 800dc82:	d405      	bmi.n	800dc90 <_vfiprintf_r+0x220>
 800dc84:	89ab      	ldrh	r3, [r5, #12]
 800dc86:	059a      	lsls	r2, r3, #22
 800dc88:	d402      	bmi.n	800dc90 <_vfiprintf_r+0x220>
 800dc8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc8c:	f000 faa1 	bl	800e1d2 <__retarget_lock_release_recursive>
 800dc90:	89ab      	ldrh	r3, [r5, #12]
 800dc92:	065b      	lsls	r3, r3, #25
 800dc94:	f53f af12 	bmi.w	800dabc <_vfiprintf_r+0x4c>
 800dc98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc9a:	e711      	b.n	800dac0 <_vfiprintf_r+0x50>
 800dc9c:	ab03      	add	r3, sp, #12
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	462a      	mov	r2, r5
 800dca2:	4b09      	ldr	r3, [pc, #36]	; (800dcc8 <_vfiprintf_r+0x258>)
 800dca4:	a904      	add	r1, sp, #16
 800dca6:	4630      	mov	r0, r6
 800dca8:	f7fc fac6 	bl	800a238 <_printf_i>
 800dcac:	e7e4      	b.n	800dc78 <_vfiprintf_r+0x208>
 800dcae:	bf00      	nop
 800dcb0:	0800ea04 	.word	0x0800ea04
 800dcb4:	0800ea24 	.word	0x0800ea24
 800dcb8:	0800e9e4 	.word	0x0800e9e4
 800dcbc:	0800e994 	.word	0x0800e994
 800dcc0:	0800e99e 	.word	0x0800e99e
 800dcc4:	08009cf1 	.word	0x08009cf1
 800dcc8:	0800da4d 	.word	0x0800da4d
 800dccc:	0800e99a 	.word	0x0800e99a

0800dcd0 <__swbuf_r>:
 800dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd2:	460e      	mov	r6, r1
 800dcd4:	4614      	mov	r4, r2
 800dcd6:	4605      	mov	r5, r0
 800dcd8:	b118      	cbz	r0, 800dce2 <__swbuf_r+0x12>
 800dcda:	6983      	ldr	r3, [r0, #24]
 800dcdc:	b90b      	cbnz	r3, 800dce2 <__swbuf_r+0x12>
 800dcde:	f000 f9d9 	bl	800e094 <__sinit>
 800dce2:	4b21      	ldr	r3, [pc, #132]	; (800dd68 <__swbuf_r+0x98>)
 800dce4:	429c      	cmp	r4, r3
 800dce6:	d12b      	bne.n	800dd40 <__swbuf_r+0x70>
 800dce8:	686c      	ldr	r4, [r5, #4]
 800dcea:	69a3      	ldr	r3, [r4, #24]
 800dcec:	60a3      	str	r3, [r4, #8]
 800dcee:	89a3      	ldrh	r3, [r4, #12]
 800dcf0:	071a      	lsls	r2, r3, #28
 800dcf2:	d52f      	bpl.n	800dd54 <__swbuf_r+0x84>
 800dcf4:	6923      	ldr	r3, [r4, #16]
 800dcf6:	b36b      	cbz	r3, 800dd54 <__swbuf_r+0x84>
 800dcf8:	6923      	ldr	r3, [r4, #16]
 800dcfa:	6820      	ldr	r0, [r4, #0]
 800dcfc:	1ac0      	subs	r0, r0, r3
 800dcfe:	6963      	ldr	r3, [r4, #20]
 800dd00:	b2f6      	uxtb	r6, r6
 800dd02:	4283      	cmp	r3, r0
 800dd04:	4637      	mov	r7, r6
 800dd06:	dc04      	bgt.n	800dd12 <__swbuf_r+0x42>
 800dd08:	4621      	mov	r1, r4
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f000 f92e 	bl	800df6c <_fflush_r>
 800dd10:	bb30      	cbnz	r0, 800dd60 <__swbuf_r+0x90>
 800dd12:	68a3      	ldr	r3, [r4, #8]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	60a3      	str	r3, [r4, #8]
 800dd18:	6823      	ldr	r3, [r4, #0]
 800dd1a:	1c5a      	adds	r2, r3, #1
 800dd1c:	6022      	str	r2, [r4, #0]
 800dd1e:	701e      	strb	r6, [r3, #0]
 800dd20:	6963      	ldr	r3, [r4, #20]
 800dd22:	3001      	adds	r0, #1
 800dd24:	4283      	cmp	r3, r0
 800dd26:	d004      	beq.n	800dd32 <__swbuf_r+0x62>
 800dd28:	89a3      	ldrh	r3, [r4, #12]
 800dd2a:	07db      	lsls	r3, r3, #31
 800dd2c:	d506      	bpl.n	800dd3c <__swbuf_r+0x6c>
 800dd2e:	2e0a      	cmp	r6, #10
 800dd30:	d104      	bne.n	800dd3c <__swbuf_r+0x6c>
 800dd32:	4621      	mov	r1, r4
 800dd34:	4628      	mov	r0, r5
 800dd36:	f000 f919 	bl	800df6c <_fflush_r>
 800dd3a:	b988      	cbnz	r0, 800dd60 <__swbuf_r+0x90>
 800dd3c:	4638      	mov	r0, r7
 800dd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd40:	4b0a      	ldr	r3, [pc, #40]	; (800dd6c <__swbuf_r+0x9c>)
 800dd42:	429c      	cmp	r4, r3
 800dd44:	d101      	bne.n	800dd4a <__swbuf_r+0x7a>
 800dd46:	68ac      	ldr	r4, [r5, #8]
 800dd48:	e7cf      	b.n	800dcea <__swbuf_r+0x1a>
 800dd4a:	4b09      	ldr	r3, [pc, #36]	; (800dd70 <__swbuf_r+0xa0>)
 800dd4c:	429c      	cmp	r4, r3
 800dd4e:	bf08      	it	eq
 800dd50:	68ec      	ldreq	r4, [r5, #12]
 800dd52:	e7ca      	b.n	800dcea <__swbuf_r+0x1a>
 800dd54:	4621      	mov	r1, r4
 800dd56:	4628      	mov	r0, r5
 800dd58:	f000 f80c 	bl	800dd74 <__swsetup_r>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d0cb      	beq.n	800dcf8 <__swbuf_r+0x28>
 800dd60:	f04f 37ff 	mov.w	r7, #4294967295
 800dd64:	e7ea      	b.n	800dd3c <__swbuf_r+0x6c>
 800dd66:	bf00      	nop
 800dd68:	0800ea04 	.word	0x0800ea04
 800dd6c:	0800ea24 	.word	0x0800ea24
 800dd70:	0800e9e4 	.word	0x0800e9e4

0800dd74 <__swsetup_r>:
 800dd74:	4b32      	ldr	r3, [pc, #200]	; (800de40 <__swsetup_r+0xcc>)
 800dd76:	b570      	push	{r4, r5, r6, lr}
 800dd78:	681d      	ldr	r5, [r3, #0]
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	b125      	cbz	r5, 800dd8a <__swsetup_r+0x16>
 800dd80:	69ab      	ldr	r3, [r5, #24]
 800dd82:	b913      	cbnz	r3, 800dd8a <__swsetup_r+0x16>
 800dd84:	4628      	mov	r0, r5
 800dd86:	f000 f985 	bl	800e094 <__sinit>
 800dd8a:	4b2e      	ldr	r3, [pc, #184]	; (800de44 <__swsetup_r+0xd0>)
 800dd8c:	429c      	cmp	r4, r3
 800dd8e:	d10f      	bne.n	800ddb0 <__swsetup_r+0x3c>
 800dd90:	686c      	ldr	r4, [r5, #4]
 800dd92:	89a3      	ldrh	r3, [r4, #12]
 800dd94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd98:	0719      	lsls	r1, r3, #28
 800dd9a:	d42c      	bmi.n	800ddf6 <__swsetup_r+0x82>
 800dd9c:	06dd      	lsls	r5, r3, #27
 800dd9e:	d411      	bmi.n	800ddc4 <__swsetup_r+0x50>
 800dda0:	2309      	movs	r3, #9
 800dda2:	6033      	str	r3, [r6, #0]
 800dda4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dda8:	81a3      	strh	r3, [r4, #12]
 800ddaa:	f04f 30ff 	mov.w	r0, #4294967295
 800ddae:	e03e      	b.n	800de2e <__swsetup_r+0xba>
 800ddb0:	4b25      	ldr	r3, [pc, #148]	; (800de48 <__swsetup_r+0xd4>)
 800ddb2:	429c      	cmp	r4, r3
 800ddb4:	d101      	bne.n	800ddba <__swsetup_r+0x46>
 800ddb6:	68ac      	ldr	r4, [r5, #8]
 800ddb8:	e7eb      	b.n	800dd92 <__swsetup_r+0x1e>
 800ddba:	4b24      	ldr	r3, [pc, #144]	; (800de4c <__swsetup_r+0xd8>)
 800ddbc:	429c      	cmp	r4, r3
 800ddbe:	bf08      	it	eq
 800ddc0:	68ec      	ldreq	r4, [r5, #12]
 800ddc2:	e7e6      	b.n	800dd92 <__swsetup_r+0x1e>
 800ddc4:	0758      	lsls	r0, r3, #29
 800ddc6:	d512      	bpl.n	800ddee <__swsetup_r+0x7a>
 800ddc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddca:	b141      	cbz	r1, 800ddde <__swsetup_r+0x6a>
 800ddcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddd0:	4299      	cmp	r1, r3
 800ddd2:	d002      	beq.n	800ddda <__swsetup_r+0x66>
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f7ff fb25 	bl	800d424 <_free_r>
 800ddda:	2300      	movs	r3, #0
 800dddc:	6363      	str	r3, [r4, #52]	; 0x34
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dde4:	81a3      	strh	r3, [r4, #12]
 800dde6:	2300      	movs	r3, #0
 800dde8:	6063      	str	r3, [r4, #4]
 800ddea:	6923      	ldr	r3, [r4, #16]
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	89a3      	ldrh	r3, [r4, #12]
 800ddf0:	f043 0308 	orr.w	r3, r3, #8
 800ddf4:	81a3      	strh	r3, [r4, #12]
 800ddf6:	6923      	ldr	r3, [r4, #16]
 800ddf8:	b94b      	cbnz	r3, 800de0e <__swsetup_r+0x9a>
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de04:	d003      	beq.n	800de0e <__swsetup_r+0x9a>
 800de06:	4621      	mov	r1, r4
 800de08:	4630      	mov	r0, r6
 800de0a:	f000 fa09 	bl	800e220 <__smakebuf_r>
 800de0e:	89a0      	ldrh	r0, [r4, #12]
 800de10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de14:	f010 0301 	ands.w	r3, r0, #1
 800de18:	d00a      	beq.n	800de30 <__swsetup_r+0xbc>
 800de1a:	2300      	movs	r3, #0
 800de1c:	60a3      	str	r3, [r4, #8]
 800de1e:	6963      	ldr	r3, [r4, #20]
 800de20:	425b      	negs	r3, r3
 800de22:	61a3      	str	r3, [r4, #24]
 800de24:	6923      	ldr	r3, [r4, #16]
 800de26:	b943      	cbnz	r3, 800de3a <__swsetup_r+0xc6>
 800de28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de2c:	d1ba      	bne.n	800dda4 <__swsetup_r+0x30>
 800de2e:	bd70      	pop	{r4, r5, r6, pc}
 800de30:	0781      	lsls	r1, r0, #30
 800de32:	bf58      	it	pl
 800de34:	6963      	ldrpl	r3, [r4, #20]
 800de36:	60a3      	str	r3, [r4, #8]
 800de38:	e7f4      	b.n	800de24 <__swsetup_r+0xb0>
 800de3a:	2000      	movs	r0, #0
 800de3c:	e7f7      	b.n	800de2e <__swsetup_r+0xba>
 800de3e:	bf00      	nop
 800de40:	2000018c 	.word	0x2000018c
 800de44:	0800ea04 	.word	0x0800ea04
 800de48:	0800ea24 	.word	0x0800ea24
 800de4c:	0800e9e4 	.word	0x0800e9e4

0800de50 <abort>:
 800de50:	b508      	push	{r3, lr}
 800de52:	2006      	movs	r0, #6
 800de54:	f000 fa54 	bl	800e300 <raise>
 800de58:	2001      	movs	r0, #1
 800de5a:	f7f3 f947 	bl	80010ec <_exit>
	...

0800de60 <__sflush_r>:
 800de60:	898a      	ldrh	r2, [r1, #12]
 800de62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de66:	4605      	mov	r5, r0
 800de68:	0710      	lsls	r0, r2, #28
 800de6a:	460c      	mov	r4, r1
 800de6c:	d458      	bmi.n	800df20 <__sflush_r+0xc0>
 800de6e:	684b      	ldr	r3, [r1, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	dc05      	bgt.n	800de80 <__sflush_r+0x20>
 800de74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de76:	2b00      	cmp	r3, #0
 800de78:	dc02      	bgt.n	800de80 <__sflush_r+0x20>
 800de7a:	2000      	movs	r0, #0
 800de7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de82:	2e00      	cmp	r6, #0
 800de84:	d0f9      	beq.n	800de7a <__sflush_r+0x1a>
 800de86:	2300      	movs	r3, #0
 800de88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de8c:	682f      	ldr	r7, [r5, #0]
 800de8e:	602b      	str	r3, [r5, #0]
 800de90:	d032      	beq.n	800def8 <__sflush_r+0x98>
 800de92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de94:	89a3      	ldrh	r3, [r4, #12]
 800de96:	075a      	lsls	r2, r3, #29
 800de98:	d505      	bpl.n	800dea6 <__sflush_r+0x46>
 800de9a:	6863      	ldr	r3, [r4, #4]
 800de9c:	1ac0      	subs	r0, r0, r3
 800de9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dea0:	b10b      	cbz	r3, 800dea6 <__sflush_r+0x46>
 800dea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dea4:	1ac0      	subs	r0, r0, r3
 800dea6:	2300      	movs	r3, #0
 800dea8:	4602      	mov	r2, r0
 800deaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800deac:	6a21      	ldr	r1, [r4, #32]
 800deae:	4628      	mov	r0, r5
 800deb0:	47b0      	blx	r6
 800deb2:	1c43      	adds	r3, r0, #1
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	d106      	bne.n	800dec6 <__sflush_r+0x66>
 800deb8:	6829      	ldr	r1, [r5, #0]
 800deba:	291d      	cmp	r1, #29
 800debc:	d82c      	bhi.n	800df18 <__sflush_r+0xb8>
 800debe:	4a2a      	ldr	r2, [pc, #168]	; (800df68 <__sflush_r+0x108>)
 800dec0:	40ca      	lsrs	r2, r1
 800dec2:	07d6      	lsls	r6, r2, #31
 800dec4:	d528      	bpl.n	800df18 <__sflush_r+0xb8>
 800dec6:	2200      	movs	r2, #0
 800dec8:	6062      	str	r2, [r4, #4]
 800deca:	04d9      	lsls	r1, r3, #19
 800decc:	6922      	ldr	r2, [r4, #16]
 800dece:	6022      	str	r2, [r4, #0]
 800ded0:	d504      	bpl.n	800dedc <__sflush_r+0x7c>
 800ded2:	1c42      	adds	r2, r0, #1
 800ded4:	d101      	bne.n	800deda <__sflush_r+0x7a>
 800ded6:	682b      	ldr	r3, [r5, #0]
 800ded8:	b903      	cbnz	r3, 800dedc <__sflush_r+0x7c>
 800deda:	6560      	str	r0, [r4, #84]	; 0x54
 800dedc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dede:	602f      	str	r7, [r5, #0]
 800dee0:	2900      	cmp	r1, #0
 800dee2:	d0ca      	beq.n	800de7a <__sflush_r+0x1a>
 800dee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dee8:	4299      	cmp	r1, r3
 800deea:	d002      	beq.n	800def2 <__sflush_r+0x92>
 800deec:	4628      	mov	r0, r5
 800deee:	f7ff fa99 	bl	800d424 <_free_r>
 800def2:	2000      	movs	r0, #0
 800def4:	6360      	str	r0, [r4, #52]	; 0x34
 800def6:	e7c1      	b.n	800de7c <__sflush_r+0x1c>
 800def8:	6a21      	ldr	r1, [r4, #32]
 800defa:	2301      	movs	r3, #1
 800defc:	4628      	mov	r0, r5
 800defe:	47b0      	blx	r6
 800df00:	1c41      	adds	r1, r0, #1
 800df02:	d1c7      	bne.n	800de94 <__sflush_r+0x34>
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d0c4      	beq.n	800de94 <__sflush_r+0x34>
 800df0a:	2b1d      	cmp	r3, #29
 800df0c:	d001      	beq.n	800df12 <__sflush_r+0xb2>
 800df0e:	2b16      	cmp	r3, #22
 800df10:	d101      	bne.n	800df16 <__sflush_r+0xb6>
 800df12:	602f      	str	r7, [r5, #0]
 800df14:	e7b1      	b.n	800de7a <__sflush_r+0x1a>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df1c:	81a3      	strh	r3, [r4, #12]
 800df1e:	e7ad      	b.n	800de7c <__sflush_r+0x1c>
 800df20:	690f      	ldr	r7, [r1, #16]
 800df22:	2f00      	cmp	r7, #0
 800df24:	d0a9      	beq.n	800de7a <__sflush_r+0x1a>
 800df26:	0793      	lsls	r3, r2, #30
 800df28:	680e      	ldr	r6, [r1, #0]
 800df2a:	bf08      	it	eq
 800df2c:	694b      	ldreq	r3, [r1, #20]
 800df2e:	600f      	str	r7, [r1, #0]
 800df30:	bf18      	it	ne
 800df32:	2300      	movne	r3, #0
 800df34:	eba6 0807 	sub.w	r8, r6, r7
 800df38:	608b      	str	r3, [r1, #8]
 800df3a:	f1b8 0f00 	cmp.w	r8, #0
 800df3e:	dd9c      	ble.n	800de7a <__sflush_r+0x1a>
 800df40:	6a21      	ldr	r1, [r4, #32]
 800df42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df44:	4643      	mov	r3, r8
 800df46:	463a      	mov	r2, r7
 800df48:	4628      	mov	r0, r5
 800df4a:	47b0      	blx	r6
 800df4c:	2800      	cmp	r0, #0
 800df4e:	dc06      	bgt.n	800df5e <__sflush_r+0xfe>
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df56:	81a3      	strh	r3, [r4, #12]
 800df58:	f04f 30ff 	mov.w	r0, #4294967295
 800df5c:	e78e      	b.n	800de7c <__sflush_r+0x1c>
 800df5e:	4407      	add	r7, r0
 800df60:	eba8 0800 	sub.w	r8, r8, r0
 800df64:	e7e9      	b.n	800df3a <__sflush_r+0xda>
 800df66:	bf00      	nop
 800df68:	20400001 	.word	0x20400001

0800df6c <_fflush_r>:
 800df6c:	b538      	push	{r3, r4, r5, lr}
 800df6e:	690b      	ldr	r3, [r1, #16]
 800df70:	4605      	mov	r5, r0
 800df72:	460c      	mov	r4, r1
 800df74:	b913      	cbnz	r3, 800df7c <_fflush_r+0x10>
 800df76:	2500      	movs	r5, #0
 800df78:	4628      	mov	r0, r5
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	b118      	cbz	r0, 800df86 <_fflush_r+0x1a>
 800df7e:	6983      	ldr	r3, [r0, #24]
 800df80:	b90b      	cbnz	r3, 800df86 <_fflush_r+0x1a>
 800df82:	f000 f887 	bl	800e094 <__sinit>
 800df86:	4b14      	ldr	r3, [pc, #80]	; (800dfd8 <_fflush_r+0x6c>)
 800df88:	429c      	cmp	r4, r3
 800df8a:	d11b      	bne.n	800dfc4 <_fflush_r+0x58>
 800df8c:	686c      	ldr	r4, [r5, #4]
 800df8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d0ef      	beq.n	800df76 <_fflush_r+0xa>
 800df96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df98:	07d0      	lsls	r0, r2, #31
 800df9a:	d404      	bmi.n	800dfa6 <_fflush_r+0x3a>
 800df9c:	0599      	lsls	r1, r3, #22
 800df9e:	d402      	bmi.n	800dfa6 <_fflush_r+0x3a>
 800dfa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfa2:	f000 f915 	bl	800e1d0 <__retarget_lock_acquire_recursive>
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	f7ff ff59 	bl	800de60 <__sflush_r>
 800dfae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfb0:	07da      	lsls	r2, r3, #31
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	d4e0      	bmi.n	800df78 <_fflush_r+0xc>
 800dfb6:	89a3      	ldrh	r3, [r4, #12]
 800dfb8:	059b      	lsls	r3, r3, #22
 800dfba:	d4dd      	bmi.n	800df78 <_fflush_r+0xc>
 800dfbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfbe:	f000 f908 	bl	800e1d2 <__retarget_lock_release_recursive>
 800dfc2:	e7d9      	b.n	800df78 <_fflush_r+0xc>
 800dfc4:	4b05      	ldr	r3, [pc, #20]	; (800dfdc <_fflush_r+0x70>)
 800dfc6:	429c      	cmp	r4, r3
 800dfc8:	d101      	bne.n	800dfce <_fflush_r+0x62>
 800dfca:	68ac      	ldr	r4, [r5, #8]
 800dfcc:	e7df      	b.n	800df8e <_fflush_r+0x22>
 800dfce:	4b04      	ldr	r3, [pc, #16]	; (800dfe0 <_fflush_r+0x74>)
 800dfd0:	429c      	cmp	r4, r3
 800dfd2:	bf08      	it	eq
 800dfd4:	68ec      	ldreq	r4, [r5, #12]
 800dfd6:	e7da      	b.n	800df8e <_fflush_r+0x22>
 800dfd8:	0800ea04 	.word	0x0800ea04
 800dfdc:	0800ea24 	.word	0x0800ea24
 800dfe0:	0800e9e4 	.word	0x0800e9e4

0800dfe4 <std>:
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	b510      	push	{r4, lr}
 800dfe8:	4604      	mov	r4, r0
 800dfea:	e9c0 3300 	strd	r3, r3, [r0]
 800dfee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dff2:	6083      	str	r3, [r0, #8]
 800dff4:	8181      	strh	r1, [r0, #12]
 800dff6:	6643      	str	r3, [r0, #100]	; 0x64
 800dff8:	81c2      	strh	r2, [r0, #14]
 800dffa:	6183      	str	r3, [r0, #24]
 800dffc:	4619      	mov	r1, r3
 800dffe:	2208      	movs	r2, #8
 800e000:	305c      	adds	r0, #92	; 0x5c
 800e002:	f7fb fdcd 	bl	8009ba0 <memset>
 800e006:	4b05      	ldr	r3, [pc, #20]	; (800e01c <std+0x38>)
 800e008:	6263      	str	r3, [r4, #36]	; 0x24
 800e00a:	4b05      	ldr	r3, [pc, #20]	; (800e020 <std+0x3c>)
 800e00c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e00e:	4b05      	ldr	r3, [pc, #20]	; (800e024 <std+0x40>)
 800e010:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e012:	4b05      	ldr	r3, [pc, #20]	; (800e028 <std+0x44>)
 800e014:	6224      	str	r4, [r4, #32]
 800e016:	6323      	str	r3, [r4, #48]	; 0x30
 800e018:	bd10      	pop	{r4, pc}
 800e01a:	bf00      	nop
 800e01c:	0800e339 	.word	0x0800e339
 800e020:	0800e35b 	.word	0x0800e35b
 800e024:	0800e393 	.word	0x0800e393
 800e028:	0800e3b7 	.word	0x0800e3b7

0800e02c <_cleanup_r>:
 800e02c:	4901      	ldr	r1, [pc, #4]	; (800e034 <_cleanup_r+0x8>)
 800e02e:	f000 b8af 	b.w	800e190 <_fwalk_reent>
 800e032:	bf00      	nop
 800e034:	0800df6d 	.word	0x0800df6d

0800e038 <__sfmoreglue>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	2268      	movs	r2, #104	; 0x68
 800e03c:	1e4d      	subs	r5, r1, #1
 800e03e:	4355      	muls	r5, r2
 800e040:	460e      	mov	r6, r1
 800e042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e046:	f7ff fa59 	bl	800d4fc <_malloc_r>
 800e04a:	4604      	mov	r4, r0
 800e04c:	b140      	cbz	r0, 800e060 <__sfmoreglue+0x28>
 800e04e:	2100      	movs	r1, #0
 800e050:	e9c0 1600 	strd	r1, r6, [r0]
 800e054:	300c      	adds	r0, #12
 800e056:	60a0      	str	r0, [r4, #8]
 800e058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e05c:	f7fb fda0 	bl	8009ba0 <memset>
 800e060:	4620      	mov	r0, r4
 800e062:	bd70      	pop	{r4, r5, r6, pc}

0800e064 <__sfp_lock_acquire>:
 800e064:	4801      	ldr	r0, [pc, #4]	; (800e06c <__sfp_lock_acquire+0x8>)
 800e066:	f000 b8b3 	b.w	800e1d0 <__retarget_lock_acquire_recursive>
 800e06a:	bf00      	nop
 800e06c:	20001dd5 	.word	0x20001dd5

0800e070 <__sfp_lock_release>:
 800e070:	4801      	ldr	r0, [pc, #4]	; (800e078 <__sfp_lock_release+0x8>)
 800e072:	f000 b8ae 	b.w	800e1d2 <__retarget_lock_release_recursive>
 800e076:	bf00      	nop
 800e078:	20001dd5 	.word	0x20001dd5

0800e07c <__sinit_lock_acquire>:
 800e07c:	4801      	ldr	r0, [pc, #4]	; (800e084 <__sinit_lock_acquire+0x8>)
 800e07e:	f000 b8a7 	b.w	800e1d0 <__retarget_lock_acquire_recursive>
 800e082:	bf00      	nop
 800e084:	20001dd6 	.word	0x20001dd6

0800e088 <__sinit_lock_release>:
 800e088:	4801      	ldr	r0, [pc, #4]	; (800e090 <__sinit_lock_release+0x8>)
 800e08a:	f000 b8a2 	b.w	800e1d2 <__retarget_lock_release_recursive>
 800e08e:	bf00      	nop
 800e090:	20001dd6 	.word	0x20001dd6

0800e094 <__sinit>:
 800e094:	b510      	push	{r4, lr}
 800e096:	4604      	mov	r4, r0
 800e098:	f7ff fff0 	bl	800e07c <__sinit_lock_acquire>
 800e09c:	69a3      	ldr	r3, [r4, #24]
 800e09e:	b11b      	cbz	r3, 800e0a8 <__sinit+0x14>
 800e0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0a4:	f7ff bff0 	b.w	800e088 <__sinit_lock_release>
 800e0a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0ac:	6523      	str	r3, [r4, #80]	; 0x50
 800e0ae:	4b13      	ldr	r3, [pc, #76]	; (800e0fc <__sinit+0x68>)
 800e0b0:	4a13      	ldr	r2, [pc, #76]	; (800e100 <__sinit+0x6c>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0b6:	42a3      	cmp	r3, r4
 800e0b8:	bf04      	itt	eq
 800e0ba:	2301      	moveq	r3, #1
 800e0bc:	61a3      	streq	r3, [r4, #24]
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f000 f820 	bl	800e104 <__sfp>
 800e0c4:	6060      	str	r0, [r4, #4]
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f000 f81c 	bl	800e104 <__sfp>
 800e0cc:	60a0      	str	r0, [r4, #8]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f000 f818 	bl	800e104 <__sfp>
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	60e0      	str	r0, [r4, #12]
 800e0d8:	2104      	movs	r1, #4
 800e0da:	6860      	ldr	r0, [r4, #4]
 800e0dc:	f7ff ff82 	bl	800dfe4 <std>
 800e0e0:	68a0      	ldr	r0, [r4, #8]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	2109      	movs	r1, #9
 800e0e6:	f7ff ff7d 	bl	800dfe4 <std>
 800e0ea:	68e0      	ldr	r0, [r4, #12]
 800e0ec:	2202      	movs	r2, #2
 800e0ee:	2112      	movs	r1, #18
 800e0f0:	f7ff ff78 	bl	800dfe4 <std>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	61a3      	str	r3, [r4, #24]
 800e0f8:	e7d2      	b.n	800e0a0 <__sinit+0xc>
 800e0fa:	bf00      	nop
 800e0fc:	0800e59c 	.word	0x0800e59c
 800e100:	0800e02d 	.word	0x0800e02d

0800e104 <__sfp>:
 800e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e106:	4607      	mov	r7, r0
 800e108:	f7ff ffac 	bl	800e064 <__sfp_lock_acquire>
 800e10c:	4b1e      	ldr	r3, [pc, #120]	; (800e188 <__sfp+0x84>)
 800e10e:	681e      	ldr	r6, [r3, #0]
 800e110:	69b3      	ldr	r3, [r6, #24]
 800e112:	b913      	cbnz	r3, 800e11a <__sfp+0x16>
 800e114:	4630      	mov	r0, r6
 800e116:	f7ff ffbd 	bl	800e094 <__sinit>
 800e11a:	3648      	adds	r6, #72	; 0x48
 800e11c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e120:	3b01      	subs	r3, #1
 800e122:	d503      	bpl.n	800e12c <__sfp+0x28>
 800e124:	6833      	ldr	r3, [r6, #0]
 800e126:	b30b      	cbz	r3, 800e16c <__sfp+0x68>
 800e128:	6836      	ldr	r6, [r6, #0]
 800e12a:	e7f7      	b.n	800e11c <__sfp+0x18>
 800e12c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e130:	b9d5      	cbnz	r5, 800e168 <__sfp+0x64>
 800e132:	4b16      	ldr	r3, [pc, #88]	; (800e18c <__sfp+0x88>)
 800e134:	60e3      	str	r3, [r4, #12]
 800e136:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e13a:	6665      	str	r5, [r4, #100]	; 0x64
 800e13c:	f000 f847 	bl	800e1ce <__retarget_lock_init_recursive>
 800e140:	f7ff ff96 	bl	800e070 <__sfp_lock_release>
 800e144:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e148:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e14c:	6025      	str	r5, [r4, #0]
 800e14e:	61a5      	str	r5, [r4, #24]
 800e150:	2208      	movs	r2, #8
 800e152:	4629      	mov	r1, r5
 800e154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e158:	f7fb fd22 	bl	8009ba0 <memset>
 800e15c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e164:	4620      	mov	r0, r4
 800e166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e168:	3468      	adds	r4, #104	; 0x68
 800e16a:	e7d9      	b.n	800e120 <__sfp+0x1c>
 800e16c:	2104      	movs	r1, #4
 800e16e:	4638      	mov	r0, r7
 800e170:	f7ff ff62 	bl	800e038 <__sfmoreglue>
 800e174:	4604      	mov	r4, r0
 800e176:	6030      	str	r0, [r6, #0]
 800e178:	2800      	cmp	r0, #0
 800e17a:	d1d5      	bne.n	800e128 <__sfp+0x24>
 800e17c:	f7ff ff78 	bl	800e070 <__sfp_lock_release>
 800e180:	230c      	movs	r3, #12
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	e7ee      	b.n	800e164 <__sfp+0x60>
 800e186:	bf00      	nop
 800e188:	0800e59c 	.word	0x0800e59c
 800e18c:	ffff0001 	.word	0xffff0001

0800e190 <_fwalk_reent>:
 800e190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e194:	4606      	mov	r6, r0
 800e196:	4688      	mov	r8, r1
 800e198:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e19c:	2700      	movs	r7, #0
 800e19e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1a2:	f1b9 0901 	subs.w	r9, r9, #1
 800e1a6:	d505      	bpl.n	800e1b4 <_fwalk_reent+0x24>
 800e1a8:	6824      	ldr	r4, [r4, #0]
 800e1aa:	2c00      	cmp	r4, #0
 800e1ac:	d1f7      	bne.n	800e19e <_fwalk_reent+0xe>
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1b4:	89ab      	ldrh	r3, [r5, #12]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d907      	bls.n	800e1ca <_fwalk_reent+0x3a>
 800e1ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	d003      	beq.n	800e1ca <_fwalk_reent+0x3a>
 800e1c2:	4629      	mov	r1, r5
 800e1c4:	4630      	mov	r0, r6
 800e1c6:	47c0      	blx	r8
 800e1c8:	4307      	orrs	r7, r0
 800e1ca:	3568      	adds	r5, #104	; 0x68
 800e1cc:	e7e9      	b.n	800e1a2 <_fwalk_reent+0x12>

0800e1ce <__retarget_lock_init_recursive>:
 800e1ce:	4770      	bx	lr

0800e1d0 <__retarget_lock_acquire_recursive>:
 800e1d0:	4770      	bx	lr

0800e1d2 <__retarget_lock_release_recursive>:
 800e1d2:	4770      	bx	lr

0800e1d4 <__swhatbuf_r>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	460e      	mov	r6, r1
 800e1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1dc:	2900      	cmp	r1, #0
 800e1de:	b096      	sub	sp, #88	; 0x58
 800e1e0:	4614      	mov	r4, r2
 800e1e2:	461d      	mov	r5, r3
 800e1e4:	da08      	bge.n	800e1f8 <__swhatbuf_r+0x24>
 800e1e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	602a      	str	r2, [r5, #0]
 800e1ee:	061a      	lsls	r2, r3, #24
 800e1f0:	d410      	bmi.n	800e214 <__swhatbuf_r+0x40>
 800e1f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1f6:	e00e      	b.n	800e216 <__swhatbuf_r+0x42>
 800e1f8:	466a      	mov	r2, sp
 800e1fa:	f000 f903 	bl	800e404 <_fstat_r>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	dbf1      	blt.n	800e1e6 <__swhatbuf_r+0x12>
 800e202:	9a01      	ldr	r2, [sp, #4]
 800e204:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e208:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e20c:	425a      	negs	r2, r3
 800e20e:	415a      	adcs	r2, r3
 800e210:	602a      	str	r2, [r5, #0]
 800e212:	e7ee      	b.n	800e1f2 <__swhatbuf_r+0x1e>
 800e214:	2340      	movs	r3, #64	; 0x40
 800e216:	2000      	movs	r0, #0
 800e218:	6023      	str	r3, [r4, #0]
 800e21a:	b016      	add	sp, #88	; 0x58
 800e21c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e220 <__smakebuf_r>:
 800e220:	898b      	ldrh	r3, [r1, #12]
 800e222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e224:	079d      	lsls	r5, r3, #30
 800e226:	4606      	mov	r6, r0
 800e228:	460c      	mov	r4, r1
 800e22a:	d507      	bpl.n	800e23c <__smakebuf_r+0x1c>
 800e22c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	6123      	str	r3, [r4, #16]
 800e234:	2301      	movs	r3, #1
 800e236:	6163      	str	r3, [r4, #20]
 800e238:	b002      	add	sp, #8
 800e23a:	bd70      	pop	{r4, r5, r6, pc}
 800e23c:	ab01      	add	r3, sp, #4
 800e23e:	466a      	mov	r2, sp
 800e240:	f7ff ffc8 	bl	800e1d4 <__swhatbuf_r>
 800e244:	9900      	ldr	r1, [sp, #0]
 800e246:	4605      	mov	r5, r0
 800e248:	4630      	mov	r0, r6
 800e24a:	f7ff f957 	bl	800d4fc <_malloc_r>
 800e24e:	b948      	cbnz	r0, 800e264 <__smakebuf_r+0x44>
 800e250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e254:	059a      	lsls	r2, r3, #22
 800e256:	d4ef      	bmi.n	800e238 <__smakebuf_r+0x18>
 800e258:	f023 0303 	bic.w	r3, r3, #3
 800e25c:	f043 0302 	orr.w	r3, r3, #2
 800e260:	81a3      	strh	r3, [r4, #12]
 800e262:	e7e3      	b.n	800e22c <__smakebuf_r+0xc>
 800e264:	4b0d      	ldr	r3, [pc, #52]	; (800e29c <__smakebuf_r+0x7c>)
 800e266:	62b3      	str	r3, [r6, #40]	; 0x28
 800e268:	89a3      	ldrh	r3, [r4, #12]
 800e26a:	6020      	str	r0, [r4, #0]
 800e26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	9b00      	ldr	r3, [sp, #0]
 800e274:	6163      	str	r3, [r4, #20]
 800e276:	9b01      	ldr	r3, [sp, #4]
 800e278:	6120      	str	r0, [r4, #16]
 800e27a:	b15b      	cbz	r3, 800e294 <__smakebuf_r+0x74>
 800e27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e280:	4630      	mov	r0, r6
 800e282:	f000 f8d1 	bl	800e428 <_isatty_r>
 800e286:	b128      	cbz	r0, 800e294 <__smakebuf_r+0x74>
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	f023 0303 	bic.w	r3, r3, #3
 800e28e:	f043 0301 	orr.w	r3, r3, #1
 800e292:	81a3      	strh	r3, [r4, #12]
 800e294:	89a0      	ldrh	r0, [r4, #12]
 800e296:	4305      	orrs	r5, r0
 800e298:	81a5      	strh	r5, [r4, #12]
 800e29a:	e7cd      	b.n	800e238 <__smakebuf_r+0x18>
 800e29c:	0800e02d 	.word	0x0800e02d

0800e2a0 <_malloc_usable_size_r>:
 800e2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2a4:	1f18      	subs	r0, r3, #4
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	bfbc      	itt	lt
 800e2aa:	580b      	ldrlt	r3, [r1, r0]
 800e2ac:	18c0      	addlt	r0, r0, r3
 800e2ae:	4770      	bx	lr

0800e2b0 <_raise_r>:
 800e2b0:	291f      	cmp	r1, #31
 800e2b2:	b538      	push	{r3, r4, r5, lr}
 800e2b4:	4604      	mov	r4, r0
 800e2b6:	460d      	mov	r5, r1
 800e2b8:	d904      	bls.n	800e2c4 <_raise_r+0x14>
 800e2ba:	2316      	movs	r3, #22
 800e2bc:	6003      	str	r3, [r0, #0]
 800e2be:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c2:	bd38      	pop	{r3, r4, r5, pc}
 800e2c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2c6:	b112      	cbz	r2, 800e2ce <_raise_r+0x1e>
 800e2c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2cc:	b94b      	cbnz	r3, 800e2e2 <_raise_r+0x32>
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	f000 f830 	bl	800e334 <_getpid_r>
 800e2d4:	462a      	mov	r2, r5
 800e2d6:	4601      	mov	r1, r0
 800e2d8:	4620      	mov	r0, r4
 800e2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2de:	f000 b817 	b.w	800e310 <_kill_r>
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d00a      	beq.n	800e2fc <_raise_r+0x4c>
 800e2e6:	1c59      	adds	r1, r3, #1
 800e2e8:	d103      	bne.n	800e2f2 <_raise_r+0x42>
 800e2ea:	2316      	movs	r3, #22
 800e2ec:	6003      	str	r3, [r0, #0]
 800e2ee:	2001      	movs	r0, #1
 800e2f0:	e7e7      	b.n	800e2c2 <_raise_r+0x12>
 800e2f2:	2400      	movs	r4, #0
 800e2f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	4798      	blx	r3
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	e7e0      	b.n	800e2c2 <_raise_r+0x12>

0800e300 <raise>:
 800e300:	4b02      	ldr	r3, [pc, #8]	; (800e30c <raise+0xc>)
 800e302:	4601      	mov	r1, r0
 800e304:	6818      	ldr	r0, [r3, #0]
 800e306:	f7ff bfd3 	b.w	800e2b0 <_raise_r>
 800e30a:	bf00      	nop
 800e30c:	2000018c 	.word	0x2000018c

0800e310 <_kill_r>:
 800e310:	b538      	push	{r3, r4, r5, lr}
 800e312:	4d07      	ldr	r5, [pc, #28]	; (800e330 <_kill_r+0x20>)
 800e314:	2300      	movs	r3, #0
 800e316:	4604      	mov	r4, r0
 800e318:	4608      	mov	r0, r1
 800e31a:	4611      	mov	r1, r2
 800e31c:	602b      	str	r3, [r5, #0]
 800e31e:	f7f2 fed5 	bl	80010cc <_kill>
 800e322:	1c43      	adds	r3, r0, #1
 800e324:	d102      	bne.n	800e32c <_kill_r+0x1c>
 800e326:	682b      	ldr	r3, [r5, #0]
 800e328:	b103      	cbz	r3, 800e32c <_kill_r+0x1c>
 800e32a:	6023      	str	r3, [r4, #0]
 800e32c:	bd38      	pop	{r3, r4, r5, pc}
 800e32e:	bf00      	nop
 800e330:	20001dd0 	.word	0x20001dd0

0800e334 <_getpid_r>:
 800e334:	f7f2 bec2 	b.w	80010bc <_getpid>

0800e338 <__sread>:
 800e338:	b510      	push	{r4, lr}
 800e33a:	460c      	mov	r4, r1
 800e33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e340:	f000 f894 	bl	800e46c <_read_r>
 800e344:	2800      	cmp	r0, #0
 800e346:	bfab      	itete	ge
 800e348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e34a:	89a3      	ldrhlt	r3, [r4, #12]
 800e34c:	181b      	addge	r3, r3, r0
 800e34e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e352:	bfac      	ite	ge
 800e354:	6563      	strge	r3, [r4, #84]	; 0x54
 800e356:	81a3      	strhlt	r3, [r4, #12]
 800e358:	bd10      	pop	{r4, pc}

0800e35a <__swrite>:
 800e35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35e:	461f      	mov	r7, r3
 800e360:	898b      	ldrh	r3, [r1, #12]
 800e362:	05db      	lsls	r3, r3, #23
 800e364:	4605      	mov	r5, r0
 800e366:	460c      	mov	r4, r1
 800e368:	4616      	mov	r6, r2
 800e36a:	d505      	bpl.n	800e378 <__swrite+0x1e>
 800e36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e370:	2302      	movs	r3, #2
 800e372:	2200      	movs	r2, #0
 800e374:	f000 f868 	bl	800e448 <_lseek_r>
 800e378:	89a3      	ldrh	r3, [r4, #12]
 800e37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e37e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e382:	81a3      	strh	r3, [r4, #12]
 800e384:	4632      	mov	r2, r6
 800e386:	463b      	mov	r3, r7
 800e388:	4628      	mov	r0, r5
 800e38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e38e:	f000 b817 	b.w	800e3c0 <_write_r>

0800e392 <__sseek>:
 800e392:	b510      	push	{r4, lr}
 800e394:	460c      	mov	r4, r1
 800e396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e39a:	f000 f855 	bl	800e448 <_lseek_r>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	89a3      	ldrh	r3, [r4, #12]
 800e3a2:	bf15      	itete	ne
 800e3a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3ae:	81a3      	strheq	r3, [r4, #12]
 800e3b0:	bf18      	it	ne
 800e3b2:	81a3      	strhne	r3, [r4, #12]
 800e3b4:	bd10      	pop	{r4, pc}

0800e3b6 <__sclose>:
 800e3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3ba:	f000 b813 	b.w	800e3e4 <_close_r>
	...

0800e3c0 <_write_r>:
 800e3c0:	b538      	push	{r3, r4, r5, lr}
 800e3c2:	4d07      	ldr	r5, [pc, #28]	; (800e3e0 <_write_r+0x20>)
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	4608      	mov	r0, r1
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	602a      	str	r2, [r5, #0]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	f7f2 feb3 	bl	800113a <_write>
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	d102      	bne.n	800e3de <_write_r+0x1e>
 800e3d8:	682b      	ldr	r3, [r5, #0]
 800e3da:	b103      	cbz	r3, 800e3de <_write_r+0x1e>
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	bd38      	pop	{r3, r4, r5, pc}
 800e3e0:	20001dd0 	.word	0x20001dd0

0800e3e4 <_close_r>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	4d06      	ldr	r5, [pc, #24]	; (800e400 <_close_r+0x1c>)
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	602b      	str	r3, [r5, #0]
 800e3f0:	f7f2 febf 	bl	8001172 <_close>
 800e3f4:	1c43      	adds	r3, r0, #1
 800e3f6:	d102      	bne.n	800e3fe <_close_r+0x1a>
 800e3f8:	682b      	ldr	r3, [r5, #0]
 800e3fa:	b103      	cbz	r3, 800e3fe <_close_r+0x1a>
 800e3fc:	6023      	str	r3, [r4, #0]
 800e3fe:	bd38      	pop	{r3, r4, r5, pc}
 800e400:	20001dd0 	.word	0x20001dd0

0800e404 <_fstat_r>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	4d07      	ldr	r5, [pc, #28]	; (800e424 <_fstat_r+0x20>)
 800e408:	2300      	movs	r3, #0
 800e40a:	4604      	mov	r4, r0
 800e40c:	4608      	mov	r0, r1
 800e40e:	4611      	mov	r1, r2
 800e410:	602b      	str	r3, [r5, #0]
 800e412:	f7f2 feba 	bl	800118a <_fstat>
 800e416:	1c43      	adds	r3, r0, #1
 800e418:	d102      	bne.n	800e420 <_fstat_r+0x1c>
 800e41a:	682b      	ldr	r3, [r5, #0]
 800e41c:	b103      	cbz	r3, 800e420 <_fstat_r+0x1c>
 800e41e:	6023      	str	r3, [r4, #0]
 800e420:	bd38      	pop	{r3, r4, r5, pc}
 800e422:	bf00      	nop
 800e424:	20001dd0 	.word	0x20001dd0

0800e428 <_isatty_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4d06      	ldr	r5, [pc, #24]	; (800e444 <_isatty_r+0x1c>)
 800e42c:	2300      	movs	r3, #0
 800e42e:	4604      	mov	r4, r0
 800e430:	4608      	mov	r0, r1
 800e432:	602b      	str	r3, [r5, #0]
 800e434:	f7f2 feb9 	bl	80011aa <_isatty>
 800e438:	1c43      	adds	r3, r0, #1
 800e43a:	d102      	bne.n	800e442 <_isatty_r+0x1a>
 800e43c:	682b      	ldr	r3, [r5, #0]
 800e43e:	b103      	cbz	r3, 800e442 <_isatty_r+0x1a>
 800e440:	6023      	str	r3, [r4, #0]
 800e442:	bd38      	pop	{r3, r4, r5, pc}
 800e444:	20001dd0 	.word	0x20001dd0

0800e448 <_lseek_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4d07      	ldr	r5, [pc, #28]	; (800e468 <_lseek_r+0x20>)
 800e44c:	4604      	mov	r4, r0
 800e44e:	4608      	mov	r0, r1
 800e450:	4611      	mov	r1, r2
 800e452:	2200      	movs	r2, #0
 800e454:	602a      	str	r2, [r5, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	f7f2 feb2 	bl	80011c0 <_lseek>
 800e45c:	1c43      	adds	r3, r0, #1
 800e45e:	d102      	bne.n	800e466 <_lseek_r+0x1e>
 800e460:	682b      	ldr	r3, [r5, #0]
 800e462:	b103      	cbz	r3, 800e466 <_lseek_r+0x1e>
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	20001dd0 	.word	0x20001dd0

0800e46c <_read_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	4d07      	ldr	r5, [pc, #28]	; (800e48c <_read_r+0x20>)
 800e470:	4604      	mov	r4, r0
 800e472:	4608      	mov	r0, r1
 800e474:	4611      	mov	r1, r2
 800e476:	2200      	movs	r2, #0
 800e478:	602a      	str	r2, [r5, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	f7f2 fe40 	bl	8001100 <_read>
 800e480:	1c43      	adds	r3, r0, #1
 800e482:	d102      	bne.n	800e48a <_read_r+0x1e>
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	b103      	cbz	r3, 800e48a <_read_r+0x1e>
 800e488:	6023      	str	r3, [r4, #0]
 800e48a:	bd38      	pop	{r3, r4, r5, pc}
 800e48c:	20001dd0 	.word	0x20001dd0

0800e490 <_init>:
 800e490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e492:	bf00      	nop
 800e494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e496:	bc08      	pop	{r3}
 800e498:	469e      	mov	lr, r3
 800e49a:	4770      	bx	lr

0800e49c <_fini>:
 800e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49e:	bf00      	nop
 800e4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a2:	bc08      	pop	{r3}
 800e4a4:	469e      	mov	lr, r3
 800e4a6:	4770      	bx	lr
